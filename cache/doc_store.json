{"docstore/metadata":{"frcCV1k9oG9oKj3dpUqdJg1PxRT2RSN/XKdLCPjaYaY=":{"docHash":"E4DK+l2P7nvw5uqGFI76nawW8ADkXSvaL72FFLQSAZs="},"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg=":{"docHash":"o02IrKW+80Vpb+k9fqyYebOmN2ShOhJAI16H4tO8+EA="},"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w=":{"docHash":"lQAvzSXiVTmOs+RmhHmGHjig57l98wFKDuEqebigL6g="},"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8=":{"docHash":"1he7PZ0pIMljsd5LmFJ0ZX0dgg/kLkVkcPv+ghPi5EM="},"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=":{"docHash":"8kiCkUX6g9gvMUP/Qm56aRLxcQ07eJjVF815ccFeVpE="},"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY=":{"docHash":"fV4YIo8jSXdpe8GZn+AepjHW3AGJ1Rp7FigbGuneQAk="},"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ=":{"docHash":"l5+SMPuAXFMUKDa5bKeKB1eC/OlU4vf7tQZIiG2BCYE="},"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU=":{"docHash":"2IiAhk/vwpG2Fm+71fXxMPK22ZZ01EnjUrgrjWIcRQA="},"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM=":{"docHash":"4yL7XqrpNfQqU70eFZfqBrubAvpE4Iu43F4DMuCLYqI="},"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU=":{"docHash":"HrjvaDTXVD4qEcj4NXnLXKbVo7SI6Mn6BlvV0Y59zhY="},"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc=":{"docHash":"R6lcXelPHFCwF0o/QDOmSxRktRVND4vAA/a8hcPwyGc="},"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8=":{"docHash":"iCclMyASs83dxPauHbJyzL9bHxcsazfCaPON72CAtQ8="},"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=":{"docHash":"st8EO88RB5VxyM64vhyMLiYmqsKsFxOQnAQ2KfklLp4="},"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw=":{"docHash":"KTUdm5enzN9qCqBRLto/TCJYuPtN37WlILaoJp1k1oo="},"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=":{"docHash":"sC9J4VqYItbjyJpVe/8n9Okw4qUmAWi+v2QWSR71zTU="},"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM=":{"docHash":"Oj66s659idRSMvE9+5Mq1Hf5wczKuBebLMMSqAOB2HE="},"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0=":{"docHash":"HAehIKFVcX+M5Xea3I0cxc22IwwJ41/kRH04lwKxy/k="},"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=":{"docHash":"eeLF7qELTEThGKTZgLL4GCZgbpMp50n9z/IIimftf04="},"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=":{"docHash":"/3KC8/aWqIXTGlOqiTdXRT6AL1/fJh8ruXJD/CBAlyE="},"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=":{"docHash":"l93DY82kkoBLXgvcMH6NVaaFtSMJvQN9p51i9SgxNKA="},"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=":{"docHash":"xN/4CFa/xmkyFxfhxQbO//FSxPwH08bY6Vkunqh4PmQ="},"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=":{"docHash":"pZcL7B/I7psF/CKlfGMnZ96VXjvNlUSEqgbxyWzB+9k="},"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=":{"docHash":"c/WnYZ8FJtKdQV3J46rOKrXJ/5nKje6NPSkd8vjnCk0="},"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=":{"docHash":"9nMMvOddb+LklY+/I1HFYuTlrrvyuoqf7iRoFCL+LRw="},"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU=":{"docHash":"kJ1BCGSI+bTlCPiPxV8uoJ71ELNGbTCl1wQdx/HMjew="},"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=":{"docHash":"nxqwgjv4sm8TSca/Ci8+xMkSlYe4dTWXOBPMnmQu00Q="},"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ=":{"docHash":"Qv0vyu1N27n/s81RDNkSvrBJw4MeJxENLuw3z2hrdGw="},"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA=":{"docHash":"lexj1PFWlLUmaMU/6NWOhsq7c7s+IwwFwltYAS38heM="},"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=":{"docHash":"xGdaBocu2NcZg1xT3JyebPbOUmui6nGzXD9d3vBhp9c="},"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=":{"docHash":"sdNeRzuUqgn/75SyjgOjpIL1PEVTlYc+JtOw6ndWr1M="},"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=":{"docHash":"H0bN1VJ+Q2Jw+XZojA0Vy6YRSYzo5KgYaJFQD1Apv9M="},"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=":{"docHash":"M8VUTz3AZejQa1QTF7d2uPZt209nkliI/o8IER4hptU="},"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=":{"docHash":"euknRt+hc2fLF/lZCdHndGnzOkauyXCG5GBbcyywxEM="},"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=":{"docHash":"p8xt9h5sOsYuz6xmvd9/1EJFaveRqB5lAE2dzLf3d0k="},"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=":{"docHash":"tysBDOxPxKhg4Nj+9sXR1n0Ts+7C6ALAdm8thcrZHUQ="},"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=":{"docHash":"cgLLvLLqAdBaO60qE4bnRJ/sbhSF/aWGMlkf0g8htOY="},"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg=":{"docHash":"JV5rFW2NmlqfZXfejMmNxkobu31MMaF/nK/8Th0PREU="},"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=":{"docHash":"pLR3j/t+oOJYk9GwnkJyiGfAr4gcl9fTpxkouj9wGZg="},"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg=":{"docHash":"te19Jte3pSYQPhB7QgkxMXZwNP9ir3QtmAuzqjpetg0="},"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=":{"docHash":"7hUm1ZpAEKj6xtSiJZzgpvAdLxXFK/jl/BJYKk612II="},"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=":{"docHash":"r++O8KCMSVI2htBIG/wG6TmAinMUGsDLP6uOQj6KTO4="},"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0=":{"docHash":"I9rc3TiDUelZvdvKjlhYxwNau9+cr/Z+o98jlORWvjI="},"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=":{"docHash":"VbiXJnqtJbdG4tboEoL4WuE2RV0/xh02ojKjLe1nlws="},"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=":{"docHash":"x1+4hQgHRHw9fR+A+JTgdJxfk8vI0fZihilRvuYOHWg="},"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=":{"docHash":"fNfCUEba2pNZSxpuKpYx3knMoPEHsdiguPiwQl5MSqE="},"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=":{"docHash":"ehLeyaLNNtVG90apYZM2gUZK0SyPfs7fdSWy3IQly3k="},"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=":{"docHash":"eXLec7vrxAgQIJyQhtL6OE2OPZbZ2wWJL6zJ6lUYLYU="},"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA=":{"docHash":"eb/VAHha2oN5Os3vjabZP2YdqQ4yNdlPlh4Rhfcb5Fk="},"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=":{"docHash":"EBsJTS+DeZbhtENRYU4C2B9L1ZDnmm0f0qf+o77jsv0="},"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY=":{"docHash":"aYGae7MURwjafE52xZXhIxG3yK7O1qQfJtJfhjIXph0="},"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8=":{"docHash":"s/UJnSYnJiMQv8fFqMTQ4OAOwUvzbrOaKrfEn94+ho0="},"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=":{"docHash":"YzEmxJ/hkBs6SvDWixnoC8MCKAbCeu2iQ34lE8Kysj4="},"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=":{"docHash":"oiTJxvWvFDwK0hSwKNT7EsuadjCxVobu5R/EQz11GEg="},"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=":{"docHash":"0MNAEmn7bItqKwCqSh97eWPPixoTgvNR1KQCnptg1bI="},"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=":{"docHash":"d1TPU1ZAuGyamMrr1WJhMyAAItKakHEe50xUDgY9ljA="},"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o=":{"docHash":"m0Hn82RoQRUI6JtFkhpkuQbw5O1VA7+Uh/BOJ9nvPBA="},"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=":{"docHash":"Kxz7gpHjipZIk418oedYW+fUlNkaJ8bNI8jI2EP8HlU="},"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=":{"docHash":"JVOUuhznpqhEMI/nj4IT89GM8f+PKajUGO2QAVtgh+g="},"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=":{"docHash":"BQV08bHZycOGrDQAUHBX+YMQD8+i+L6dTU4egg1x0Gg="},"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=":{"docHash":"t1nCIh0AzRJ3cWTD27E2107Xbvg8/bqXq4l2GTyC4/o="},"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI=":{"docHash":"OJbIwXuGwDE963yhb+UCBV7LiTl4LrCTiZyvlcO/cJE="},"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=":{"docHash":"GYej/q95d17wxjFTVng6QneL0Xrgenmz/f9P9Bg9zAQ="},"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8=":{"docHash":"cGdJih2o/RdmY+iSUQi/q4WvO3qhEXf+2Fh18WVUe4w="},"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw=":{"docHash":"I5U6/xkQdUT8ldHLbO91VgqGquc4Wzeee7eRvndveYg="},"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g=":{"docHash":"COG/C6kCy+eZMUscOGjciSIEhJIrM07PuTt3RifoXHU="},"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=":{"docHash":"4kDzkXDLpaWRI9QTSNiHriyP3E7ogwbeKN8QpTTEC2Q="},"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=":{"docHash":"OJ8NcYi5h6NvYnO64C1qLb+Zh7J+dsY1t1RlMYEyvbU="},"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=":{"docHash":"N9Z7X6OcirdNjS+Hrgb3XtKPv46kSsj55YIMuo40/B0="},"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=":{"docHash":"/KtVD+D810Sax0PxzBFD6oWa9iWTz+uw5cOXjCsMExw="},"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=":{"docHash":"hEc7uMtJQrHFI/xjUi6qaGB8dravu1X7Dlos4Ddpy5s="},"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=":{"docHash":"K06CRh6UoPF5B67O3YxtBpKlgV7MOZ1+Gna1A8LCbbI="},"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=":{"docHash":"6oNNrQbVnGCzv+rd+5pyV3I8KKMfVhTATFDzYQrgSX4="},"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=":{"docHash":"iorNgtwOWQgAvNua1QPiZcrxGBGf+l0QZ3fTVxmPLA8="},"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=":{"docHash":"zOyjHAxV39H0kSWi7jA+t4hTblOEayoCCpltvFhiSYg="},"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=":{"docHash":"HRjySv18U34C3iGTr7ZVSresu8VGUA2m3aZfA6njJ9k="},"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=":{"docHash":"ny7c10k4H4JRsYXU3ZJeXJe8jbVdmkHzJxXZLqZ+/Y4="},"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=":{"docHash":"hoOvO6bo7vxLhCE+4aeaPPQRDCjLsyziGxl0TCUFRKY="},"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=":{"docHash":"u/156lj2uOA1fFk6xNMTs6tNUaabBeaTQgQ6VLZDmfY="},"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=":{"docHash":"c7uQWtk7M/4t24MP7V8hHufbSAC2d9a+jufhLtv3XKA="},"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=":{"docHash":"x7ZJcW4HH2BenPCC6iVVyBXyozECHl0ILlrnORHDD2M="},"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=":{"docHash":"3lYo5asQciJUQqD982Ep3j6LrJ5KI0wiR1hWXA2lNRI="},"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo=":{"docHash":"KONXmoxtPJbDGladUtYn8XW0pdalGdz2JuqU8+sZ9zM="},"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo=":{"docHash":"d5HeMZeqIQF+7uXd8oe64eJFVAc7fguhf0Zcjay5oPc="},"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=":{"docHash":"6S3hReG2JaXvPK5hDTGTWc9l+1/PMr7QzZryz1w8QTg="},"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=":{"docHash":"zi+bPu7g7ML9hcpza+8L0CPtEkTipS+laBaByVw764c="},"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=":{"docHash":"zfzTkDa9FNvlyN7t6OkBwBJoHQ0dVEiglmp8rDKDi1g="},"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M=":{"docHash":"1DoE+B3/K61LQpMSD7Lu+p3hG2pIIThtz9Hw8TQ5EWs="},"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=":{"docHash":"bUwSJHAdkji7TcO/yFPgFyWc4eaq3rz5daYYz/iDuM4="},"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=":{"docHash":"hd2CPA7rkhEZ5TC+8kF2BJfSBiAgyRMBBE5AbiZsCeY="},"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=":{"docHash":"g8rGA5yW4Az4Px101Re0Nbodr2dFPEBOHf/DgXKJxcQ="},"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=":{"docHash":"DMurAHSFHH/DYFoHhqK4KSsLGQVhOA4QL95usegP0Jw="},"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=":{"docHash":"y8rP7/RQVbECi7l3itTm9+jvqgWr7aSy5mfdrXUa/AM="},"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg=":{"docHash":"cN5knG8BdHfR2i5dRYEgPHbzSNsFbX8aRLvEXER7zSQ="},"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=":{"docHash":"PuhKNzgOhfag3X9bk+xN2Jmkt0fPvaDSWgDlKzgcdiY="},"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=":{"docHash":"aboamc76t70NrN68xhM2bX1UbxFKXOx8YtCtWnuGIBk="},"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=":{"docHash":"E1bv2Y8Y5z+1gL9qZu8nFRB7VdL5KuqN0e4S3xdYFiI="},"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=":{"docHash":"CaFZiCX7w0kJs6ZMCYsjDtbM9Tfx4sz9cYCrRuY1/Nw="},"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=":{"docHash":"ztn7bnHqRmAmwP+SngZsV1AMSHm3w5tiqtuceukoQAA="},"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=":{"docHash":"Pqix26pN3YQNkVCz+xJEopt+IFE0rQdRG3Adu8+O2tg="},"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=":{"docHash":"BysW6JSC1+AlOkxDTYgYKilHp/j3pxnG0eNSphB4h1Q="},"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4=":{"docHash":"kX5O0vjOihkH9TV+hLfJil9kEaHOt7RzsS7gZfiAt4I="},"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28=":{"docHash":"RE28QvhstKNoObD9+WiK6rJFHXOYEX0/cLneD5kQZww="},"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA=":{"docHash":"oYNuC5bnCmUm9Y1oO7t/fSFXqkwEfeqc3ay8uE1GE3M="},"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg=":{"docHash":"hYV6lIPwAnZpGZWvfT9oM2Njy3tD/2oWN8idlPNgseY="},"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=":{"docHash":"vXYFwSnpV0/98KBd9kotZljzcrlc2KTyCdclNFegpxU="},"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U=":{"docHash":"Tu9dAWjRwezbDOx7vwVC2UxNogzz/Uc/DPK6Z5N9OI4="},"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw=":{"docHash":"ZS/99i5xM43LNzI3fetzJZ2FEIjCM1KL9Rgm0AwtBSA="},"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso=":{"docHash":"moYE6RqCW6f6Uot3as5kEmayKeMG+TQNyforr5ripss="},"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc=":{"docHash":"bjvB+pAYircEAsif8caiBaFVspDTzrL5xSOVEs9clg4="},"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs=":{"docHash":"CU1nJayuRdCfhskPa4DVUi8nKhh5koW+MjRwG2dYyz4="},"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg=":{"docHash":"mj0c+u2y0tYXArwt1MQbBl2OQfszTaXpHiXGBuqz7O8="},"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM=":{"docHash":"CiW33g6qXdwYk2zVb5pGVWDYBcxUvskNGTwPLTxdN4I="},"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=":{"docHash":"18PIIdkWoUBLpcVkPt0Wg1myK4f9miIKQsKECF7aFoI="},"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=":{"docHash":"Z2vOIapzomcwJBgmcuYts7bF42R7AYxKWoYa312ZHRo="},"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=":{"docHash":"lsCdp2hv31JDrGE2MGneftxdJjVJ8CSURutjXXtvwzY="},"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=":{"docHash":"7iDf8Zqe8vC68c9hY5pq9GGSY7VayfZZhgqgB7qHgTo="},"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=":{"docHash":"UlkxOU8K3fxmBeKwWzup8GE0Ma9IKCeXb+hux5tGvuQ="},"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=":{"docHash":"eY2WxpTdBECgR3Q1dMfKEP7CS+mvWD1RAUhKa8jiH5c="},"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=":{"docHash":"YlhwJmmd+M5z6hm0KpurzaxeTIBQxB67XV1yaiP5+B8="},"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=":{"docHash":"dYFKuoxY+XxcB+VW4fECJYhzniY4gzKFmKjFx9hhN7k="},"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=":{"docHash":"rEwBTkMxLoQdfje5fcI/BDrrb0LtxGfghymY65rzKZ0="},"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=":{"docHash":"arBrvvfeVd6oCRtssV/DJK0/gQhyewLgRpGMUMpeWyI="},"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=":{"docHash":"ZD4+wQ8v+efoUsLVjUIPiOEs2ooq0C8JCoI1kfhOwBI="},"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=":{"docHash":"eVxuuouyc9sNUJORZjJtnNVT4SeuHKCAYLHHJw6AWiU="},"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY=":{"docHash":"mZj6L5JvmipQV67O74H5I16iKaaOcbmlqQMyoAFJJUs="},"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=":{"docHash":"M3WxCpU3J5jjNRQ+8UGu9Kt47+QNMVKLOxZ4w9hEwLg="},"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=":{"docHash":"HCXKwDWoflwuTL2vpFrm+ZLO6uZht/8TumW3tKZtikk="},"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM=":{"docHash":"4fjhb/sVQK+I9G94MU4/836MBS8k2ulObZfxzi4r9VQ="},"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=":{"docHash":"g2z/6QGBcXUWtcRWp+F1AYOr8PxNmthNwQ/4pXmYk7s="},"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw=":{"docHash":"ewVuCXBx2YFcnBDvxOysgbvhb3XXZCS5werm462fqqM="},"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=":{"docHash":"I70GWz6pQhO4BG4xsHJWkYrKqFUQoX7DxuWDaJW5Qug="},"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=":{"docHash":"hBmguVG9aLq3ON2ebPBu/cMneglJrVmLi4b1b6UhUXw="},"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=":{"docHash":"7y781OH20l5LMcdIf7zXo9E8jO+bSJCApn64ZZieeos="},"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M=":{"docHash":"qa02zsYp4FtMRkckPIXwbL0N/q8N5nt1cNzTGM6y57Y="},"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=":{"docHash":"OKIBHK5llL2Fvev98+4pCC4FFIQzHouYDYLrndNJeaU="},"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=":{"docHash":"Qt6r5QdPHIvAfWT43T+d1LKjM2J9gALUMcJhiCEDOgk="},"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM=":{"docHash":"wHMFTj48o4EtP2yObAdIXDENPXE/rU1AznA4aZ3/KJM="},"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=":{"docHash":"6HD6VZatQbRZfsos41G9i5ECUzM84DMqgsvpx0xbRQ8="},"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=":{"docHash":"i1UqA/dsRByL3S0OlYiyppspUnWWDF/pZMztakqfaFk="},"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=":{"docHash":"9vPfyOLmNF2kNJDLGnST0wi2Of/hJTJgqk/9BJpZlNg="},"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg=":{"docHash":"oehGxcNqm1wvLFm1uTafxdbKqlCMFoj8FmgVmGC2H3E="},"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk=":{"docHash":"0NlMTuoQtqwCSr6c1YWxg0DWDo4G0LyHkjpC+48EoUU="},"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk=":{"docHash":"LxVk1pcscPRwRCB6UjbR7oJcK4RrMDkZFePmFpEyR0E="},"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=":{"docHash":"OwfXp+n34Gn1ldADsgNUc34ZpK6m4GLXUF/lm7938vU="},"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=":{"docHash":"a3vOBRNG1xLmGgvzdYVAP8my2a7Yovyj5ojb9BVxxAs="},"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=":{"docHash":"Js07EKe95RqNQQ6oRorD/KM6A01BO+e7ey43JHbSSvE="},"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU=":{"docHash":"PEfRKfkeZgJSBsrD+cC+Bk9mK5gQeYR0H1dJ+TrqF8E="},"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM=":{"docHash":"rpZcLjxxG5vod0h2O2uOHYIh35CJ5xqEkDAFyi3M9AI="},"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=":{"docHash":"PLrHIfTm903jJEqJqzezaP81X//QygtJV+2N7BgTyTU="},"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=":{"docHash":"yDW0MtJxiDjSQx1P3psab7LzQ2McHdO7VKVeR17hsGY="},"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=":{"docHash":"JgHB2dBj0k9RMbDnRjuGU48RbCMMRw2dyLimF2y2w50="},"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=":{"docHash":"wLfw+OACengnkjnTPr0y9ub8WUyIgf1WgEvrppl/38g="},"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM=":{"docHash":"2z4iPkZwOXAVD9IdFWC5bLGYkumaQ2mnDvEldiJov3g="},"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c=":{"docHash":"KmFNBmGBufY0Ggn5H6CmQurQcApOcKUenIUAwmeza8Y="},"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=":{"docHash":"ndPPyrnvOV8MRA3dsXfymzwl2JAx+JOrnaif+CYgEZ8="},"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=":{"docHash":"fiOT+Mibp+fBiM5ZgcLa5g7PqENr3jMTxxD2Atvmhdo="},"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ=":{"docHash":"nY3MG9DkKQcFZvwLs13xZw3A7/9TutuifR5u1Idrn5Q="},"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=":{"docHash":"8lUL8ghwXvtVAiYd9S5RlGezkvj5DZVZOUcuFpp3iu0="},"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=":{"docHash":"mEUElg57w6JjjwowwZclpWTeVRT6ZCANCAIllUj/s1c="},"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=":{"docHash":"4ML8Nsumz5Zjxp9QZSzZdPYfGWoiSJeSD9ERQ2yVRRc="},"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k=":{"docHash":"RbYofYtfm09uekoCsOtxGgTLumwx5OtnX1pfUuVQWc8="},"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE=":{"docHash":"F7aku6nFumCWQmeWvYP/dVB+LQSuog/iF6//Cjlq2wQ="},"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so=":{"docHash":"+rbngJ4bQsEf6OH8OfQmiRNrZokMnzCKWuGbSegVAls="},"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=":{"docHash":"eAVvCpwlO574tjfV3x/8uoPoJ38ibvbufRq6mtee1s8="},"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc=":{"docHash":"99U6OZXneivjApbvthQtXR+J6nT+JBfrXKfVPb2jYzk="},"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE=":{"docHash":"u3mIpNmucWXVYSCJnLeMebRDI6gt9eSlzOnJbdfdwig="},"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8=":{"docHash":"XWUKpQZPIJkVK6yqJlkOFIthoLEsRX9luNPow4pfwHs="},"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g=":{"docHash":"PWN9lB1Y1rSMFr/OAh/6FFGPmS+eYCGqaubLWhYMjJE="},"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU=":{"docHash":"t/Mb8HbG02yXDiHvkbJ3HzzQMTqgj/6RzwgQ+iGQruA="},"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0=":{"docHash":"Oj03wNwG4FHIfyNTtChp5R1g4OgN2iBvN/UFhTvvcMQ="},"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU=":{"docHash":"9vVBy175YCkSfouthm1dNef5owtGpc7cfBWahIyayeg="},"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg=":{"docHash":"UGpr1wQFcW/MhvvNVIjLTF4aphP5Pl6WsudXAOBKLC4="},"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno=":{"docHash":"NPcB/R4ht8apsSM52ezAiXpCFCplhZNjvI/xxXWoitA="},"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8=":{"docHash":"89RViNTE1up2zNTPbcmdzsAAtt3s1qT+S8w1de5I3ZE="},"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=":{"docHash":"BMC7hYbnvBAKMhDOfWNBPtKLGAcEtuMTmPBx1DgFOfU="},"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI=":{"docHash":"+WEiUTwSKb1xHE56EBykGl1crrNsae/LyslOfAglRv4="},"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=":{"docHash":"MDu/gfyJvhZVZS70Xk6DHxd0gY2ZX6Uky2klWfIZoys="},"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0=":{"docHash":"8Kifch7VjbzT/z+geMnbdDoU7r4wjr20Nlvd6JovZPk="},"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4=":{"docHash":"mlHlBTzMMoaI6/da6umPMRYPxkMlqqtwJouuGLDRKDk="},"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg=":{"docHash":"iOrsZXVxgTFCfrPuMz/VR7TmUfsr2KKeFA8oHxkxYbs="},"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0=":{"docHash":"voZSMuRt7JWh2jHAoCJjC7PO+52H+0UDU6+lB/Lhb+Y="},"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=":{"docHash":"3LNEPqjiIp9XkIgOF2qg1/V1C+XTm4j+wGWOkUEfAYE="},"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE=":{"docHash":"S9kGpu04dC+GPr8vPQqYcQisSxWfEsVPQeQNg4PdEVY="},"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=":{"docHash":"nrDPqxMsXBp4QFKA+BnHG0S0Rj0MUc87LJe/iVHH818="},"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=":{"docHash":"cQhn8G7RHU/jXXbvOSUL5svGdEPeJSdsIUyIxbDhHTM="},"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=":{"docHash":"W27hI69JlQkbkfKgR9wC8d27XhrN125IYVbiLr63EmM="},"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU=":{"docHash":"69I900LdE/4dU9aXE/vwGGYAkfid5yzxq44Ecsra/fg="},"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=":{"docHash":"rYGVsNoUaraB/XL+nMNRiqnj4pyAyd5lYKrKYHyUupo="},"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4=":{"docHash":"yHM604Yd6SsJ4HCvrZuEauIGFUzPN/mCS/PCcwURNCM="},"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=":{"docHash":"3THZYfdzF4olOduWUCpKdauTg/kevZrIvrbpfTMdZZQ="},"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=":{"docHash":"wP7jAMhyED3zI+7CxPhl7j2sT4gzRePGpHFQ9RJTgkw="},"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=":{"docHash":"Wf4WxFbwC+Z1jpwjVQp1abFfM1U3wtzoxVthO/DL52U="},"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=":{"docHash":"AuPAxvGEB3wvVNc/3ZWpzKYz82TBgwe3bUqK/GVLkzo="},"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=":{"docHash":"ewIxpuQyFc0G+I5Tmc7I/ius/UFk70whLserWx7oSBw="},"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=":{"docHash":"1atcUvo6UpuCbEIeL5xnGB515ltXycr7r7HBTxU5OGY="},"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss=":{"docHash":"dYxJvja5mzM/J1Xi/W0l3/N0G60n88DWAZdhYb/elr0="},"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc=":{"docHash":"4sGqwp98kn58/t6sWwEqx0XmMEDO71GpSUhzuaUKB2c="},"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8=":{"docHash":"MHYgzzESCEl6dGt0WwtF04qGE0x39WRApUwzmiKYkAw="},"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I=":{"docHash":"z7yfm/K8nesjepl6/Xa+YxCfXT/QhuIT6tupHPYyGvQ="},"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=":{"docHash":"dIQc2iIWpNXj9PWnTcssheHjlUuPAoD4wNZFUa62qpg="},"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=":{"docHash":"/oZYW50CoAuRohiVjpmIFzDQXUPmg608XmZcxYcz2Lk="},"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=":{"docHash":"x5F/3FFfnDONiqp4s9pC0j8dKLqBvGIwESdEzyjo8vo="},"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=":{"docHash":"BslqBbHdyvAVsPwGTH2qJm74mQN4Rb04rjo7gdUydZM="},"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA=":{"docHash":"IPRzlLepi8+TvlOIM+2vsV+4ynyUMGh5qwL8f54macw="},"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=":{"docHash":"TQSulElvWaekzYp1rLt/9B6r6WYiwcjUbNKksj2QyZ0="},"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI=":{"docHash":"xnzAUcBRocv8u/Z0taZkwJ/55WYgYnDmvwrXrch282k="},"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU=":{"docHash":"hPAUP2Kp2MTrZtKvvzrTGNXr2M2Eduq8bYNNBln7Or0="},"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM=":{"docHash":"vyYBx2eVBydmlmuyYZnX2/lnU6WRxr7pUMbCcs90tBA="},"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=":{"docHash":"k4TBOD0mYkXfZFGVClpZvQ3odJ5hOVZ6Ii/aCnUE0qw="},"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=":{"docHash":"Gs/+8Pr16v8DvIUBzNrCfVeD8q34RKvpMNF2A8k9WHY="},"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM=":{"docHash":"Sb22uIRayguojXjzVbIaZubvg2+S4MvsynwELOw9AZg="},"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=":{"docHash":"HCVpgfhxw5PBB/XinNhKTcohdE/V7QLIdmduqYzLXuU="},"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=":{"docHash":"DxhxO/Q8dkmt/If1P4Neou8T3bg/LWRo0TUh4UX5zfk="},"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0=":{"docHash":"NxPhNS4HBmiPxoxSF7Q4O3XfiM5DhNBbzqpmo8fF0YA="},"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI=":{"docHash":"y469xtZ2r41657HOTU7TbYHkR9DErHBkGbR8h3PxBcc="},"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y=":{"docHash":"G1Gi7PiFjfGBKGr/EX9291QxUrrY0Uj0wPhTCMecauM="},"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=":{"docHash":"jRUHlLREgNAsvJwLSaVEUuDCAkUm4uOEiIxgxlN9tC4="},"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw=":{"docHash":"khGWb6o2DkKAsw0QU48+aFLeWGUZ0x084EZslolKvhM="},"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE=":{"docHash":"nw6AJExGfBEx9VnXp0inPOzJUWkpXBp4dDwymqXf/i8="},"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY=":{"docHash":"v0oROQ6B01vpmhdbj6MsuV4CwkeE7NPiMhvUBDfDrzg="},"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=":{"docHash":"68pHoQnmbAmVY4WMNYdTUvT1Odj3UYe60TEal6CHGbc="},"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A=":{"docHash":"b9vrKQ1JPwLY0XvBddF7Nlh5JDOkNTNUDd7z6xJlgFo="},"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg=":{"docHash":"KuNL58I4ABWFHfsJjaAH1OfWYnUQH3cSgz5cNUAsRQw="},"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=":{"docHash":"zoveRzQi/Q5QawiEqAxgCpyO7sH/ZjlyEuNx8zpYTOU="},"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=":{"docHash":"UKSFnfmP9+qzrCh0heQQyb64jZTXsSYQ6SqiH2vVCEE="},"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=":{"docHash":"QG6VsXeWUDHBNMhO6FIOfrXnItiJIZJKpClGURs+CCA="},"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=":{"docHash":"nM/d+MBXef0QEUM7abRZ5zD9TQrZcc8h7Sp/dTNIjSY="},"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=":{"docHash":"PTlXsRGnkDt7pDbgzAK/XEbi6E4UwZrxkdLKUZcJR84="},"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=":{"docHash":"nsXECSpVwAFZFmvMKFwrdTf1ESE5E2wq+u1Qj8fGJJE="},"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8=":{"docHash":"iIOhIK4Hu6KgkX3tLKNw4Qv7bphywFEUUZTKZdTYHTU="},"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=":{"docHash":"Wuw/7kE210eDLGXjKyx1HvBU6l3L1vxTpQifcs4LoeU="},"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM=":{"docHash":"HHpmAXmdfdkjzC7Lht31OHpohEQpiNQtlF1u0rfemHA="},"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g=":{"docHash":"JAVbebnXVX31IlImARNWKH3ukfndHFS9mu1oiBxAnPM="},"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=":{"docHash":"X1IvUndNX2Bq/Dndi68BktPRmldIO5rfu0QBV+7Gm+o="},"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU=":{"docHash":"se0hDBUnr27nQk1eaaPuTluYaYRSLa//z5OKPqA7pOI="},"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk=":{"docHash":"FFHdPVKNqHdc3EdYdZPFhXOtKmApkKSHaDzUeLEljA0="},"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=":{"docHash":"AybwmWvQn2CE2N7yMPflLKVtj1mCPG0EP449Dyax66U="},"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=":{"docHash":"1BY9xbnp2S7V5bQ41JMmHXPDCFkflqE+QdbRk3wD5oo="},"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=":{"docHash":"/GZ7KOJyiQTcFVQtsgP+dBlbtKcaj6OADDP/m9epGKM="},"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=":{"docHash":"75z7VwW3KNRSeVxgLLyTWo9YkLmgZqbzqp9ePaCy3Nc="},"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ=":{"docHash":"jTIqfg6KPRQBmCAXEvpbdUYTHm0VLOib9qwS1aoAufo="},"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=":{"docHash":"VX9/xtX0nBzRSqF++RLqSa5uVOx7afJ4Nu+UQmKlx2Q="},"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=":{"docHash":"O3Zf5iMcsryD09tQbDvaFKBqgVs7oERZ0TgXL5wfUv0="},"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o=":{"docHash":"JnFd7d5//LxHF8OLAmQAW5JJi9GA7akqAbAGHcdjURs="},"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw=":{"docHash":"2tTmwOJDoEA2m2ChTjB0ch2gHl0hJl+QSq/TWMnbKIM="},"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM=":{"docHash":"uc1Il5wHopuI3jMlw4MOvV7bXkhFTDi/ryvfYuS5kM0="},"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU=":{"docHash":"Wc9iONz+7e3jYphTeo+zpn+T1w9Va6jUYyyOioyYhWs="},"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0=":{"docHash":"oPTSvUWVbKbjjG6r7nzkzomUe2tsCSKx1jx1p1OByn8="},"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ=":{"docHash":"VAFGJaS29Ho/lXO9zbsZf1TmGPYUkiWgyLryuQd/740="},"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE=":{"docHash":"mGfCKH3j6QTkR7XGHZdTJrTDTv8uPDXd3S8Do0F9rsc="},"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug=":{"docHash":"xjfEB3EtL8fNoAZHnuMFQdplBpCWKBEbYz/Wvfc2QYU="},"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=":{"docHash":"JK8KswQU8AQ02vylhim4m1CqxAHOuzGCsK43goFrtWY="},"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg=":{"docHash":"dJsE3Xsptcvf40/t5JBDMhhvZuGIgjLfuMOfhwNMdM4="},"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=":{"docHash":"1BU4GzKwXnnMm9m+Rz2CVn7mcqcBxfSxDdXLsAWdkh0="},"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE=":{"docHash":"eoKzheaZgpOxE9EFvdyZqMKAB4n+ZDsrhpyT90Fgwd4="},"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk=":{"docHash":"cklRoMNF6hDE0dbk1+BCpnm1nYloF4tA5+UAZexIpMI="},"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=":{"docHash":"XGukiNO55296pmMtN/4CcPQsZddXjOMQ4JvhGNin0z8="},"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k=":{"docHash":"1VR202pXNoIVZmOPuImvILQQiu21r+dk6c/FfeF7FTg="},"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=":{"docHash":"XaNNEdz97rC8WyAxpkqIpxzcq6QdW84/IZHs9xqvk/M="},"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc=":{"docHash":"1GWqhi960zSGHBS7faHtAJJn+pPjqAqjr69PU3Y7nxI="},"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM=":{"docHash":"1uDfv0Wbvvlj+0+89eBSdTaYKhUPZfVQJhXFzTY1Ebg="},"4e736425-14c1-498c-b62a-c1908e9e0bce":{"docHash":"0zFw6vz1v07gdGRj8FjD+kL9abaU8W4goDoX8iWw4fo=","refDocId":"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg="},"f446536f-8b98-44b8-a11c-308f9724f6b2":{"docHash":"TSLkgb7A/Gt2P/ow6jEZnPhPBnCuS4LQhOK8hFGH/Nw=","refDocId":"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w="},"783c90a2-de10-45da-a477-19de016440bd":{"docHash":"PMJPhfyNInleYUR+88O2E9lchkLYjVmlGUO+8TmOekg=","refDocId":"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8="},"99d1b22f-27ae-4800-a012-650ae78662f4":{"docHash":"gpUUTibAaiI6XkjVPaf/xZQ3YuqPEWQ9tPrFVxJQlSk=","refDocId":"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U="},"5ca37e76-eec4-4178-868d-af933ce10bfb":{"docHash":"++pogz4L5pKw8MAVmeOqPDH+1UU5s0kMHOJfMTciAMo=","refDocId":"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U="},"f62ebbcb-2b75-4cd2-9f62-33e407b7c560":{"docHash":"88+CxY2WkD0ikpQ2e2Rgk/n70WnSfgTsPmkRSO/1RsA=","refDocId":"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY="},"e2d51c89-5780-4499-8902-cb05407ee33c":{"docHash":"jf3Sg2j0K7K1g3flr1rfOs+y07T/uGEy4Mgf9Ye34T4=","refDocId":"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ="},"c54d583b-73f1-4433-9cf4-5a7c913a1f51":{"docHash":"fKykhHKVMXeHHAYEW40TEmNLjtILQ4+Hkxc4ghK3RlY=","refDocId":"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU="},"38cbf2ef-9d44-4479-b414-4f083cd81485":{"docHash":"N85fbi8X1m05DjB7PPd6Y4+AJKMc8vSY+IVBOiFt6o8=","refDocId":"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM="},"e80dc5e7-2ead-43e8-b01c-041c1b74055e":{"docHash":"9FpScaV8wICAWRo54BaZLdyWfKe6qqfFNmfEbIHJ1fE=","refDocId":"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU="},"301ef252-0e38-4b7c-9ae2-86f9c7459aa5":{"docHash":"cJvojJce9XZoLEfwwyPvyhi42SRfaR+j+s02+pIqai0=","refDocId":"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc="},"14d1f4b2-81d5-4da8-bd2d-bab9daa62c8b":{"docHash":"MOah9Gdmpw6Yk40lIIyDj+3mcW5iW5C3geQ5I8D+lJQ=","refDocId":"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8="},"66164a12-1c19-4de4-a298-69eebacc2e9b":{"docHash":"TjXLMqEDUrgSBP5JiOqvA7CuXwAYX5UuCLfswqallr4=","refDocId":"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc="},"b4064524-6e52-4fe5-8432-66f2de080066":{"docHash":"aFYqPH9x+eRJD51jGfamZ0Hq52LkyviaqxDAE9K/HiI=","refDocId":"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc="},"00cd24a8-7cc7-4ff5-a5e6-dbf20675feb6":{"docHash":"4C1Nq7kTSHvvDzROJ325Cju346PI03PSEyb+D9ExAjg=","refDocId":"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw="},"6242e2d4-28de-4883-89a3-b76bcf64e098":{"docHash":"gKb1hlA1QPvnUuoBjJbWHmjp0hyfSA/JL0cLjc8efgg=","refDocId":"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI="},"6f836dcf-8ff4-4453-88f4-7e3060a2b6a2":{"docHash":"R0isHOuaxhbMLEy7Rgc+ADKb7sHsWzZgqNo19Kn4PQE=","refDocId":"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI="},"f7a951e8-3dff-47a8-b35e-3815e0a6179d":{"docHash":"JBEifZ3Kpde1bw1w1uc0GoqooqJdT9Rf7K7f0E0K+JA=","refDocId":"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM="},"62e0437f-54c7-45a2-8466-a6e31b3c9520":{"docHash":"azIf48cDp9dGj4j+cG9Yv+xmSfEbUu263z5HbePpnRM=","refDocId":"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0="},"338d6d11-5d1d-4eb3-9f65-c8d14b9ae218":{"docHash":"wTJ+nOgSBsil6RWDYsjZcyg4GT4V2Vz1RTVfgbsKffM=","refDocId":"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM="},"5f8a7d96-9f5f-4c7f-adc9-999705d227b5":{"docHash":"SINpwFv+sgNGyxakP+BEko1DyVg02EFX+8jtrZEppSU=","refDocId":"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM="},"5c186e49-bf18-430b-970c-4e017e5d82e0":{"docHash":"8crIcSQXG9bMSjzgXLVbUVAvBTtZ0o5FfsUyfuotQrs=","refDocId":"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8="},"3cbf5927-93a6-48af-adaf-ed289c4a2b96":{"docHash":"KC/OJsNCwrzLM0L1aJnxkb65+oAx8V4w6fUQd97CRTE=","refDocId":"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8="},"b370bfdc-e568-4cca-9af7-e83b36e7e8dc":{"docHash":"zmUWlRJ6HgVORrDHIrKNVU/veBVa/0lO32thcF0GtpE=","refDocId":"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU="},"72c8f4cd-5d14-4b45-a3a5-80783ffef76d":{"docHash":"99wOZvpDC61d+n9dqVSwPKyTbO4x7A/GrdwD1ig/ktQ=","refDocId":"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU="},"cf82a094-29f4-4dad-bbb3-f2947f807567":{"docHash":"WzanZaT39Xf5T40zan3QVzdD/+iwmtGhOyFvHiaj8Yo=","refDocId":"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4="},"daa98a0f-c5ff-425d-b03e-5653c4722ec3":{"docHash":"WhwJWv39kRupCWShr8i9w+En2EIDgjtA3mfdnfYIjVQ=","refDocId":"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4="},"f72496a7-c2b5-4c76-93b0-0b195fd254b7":{"docHash":"VV9i2cQUehfOEkjIvwP53A8wevf8rLPuDegEezpp7gs=","refDocId":"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg="},"33124dfe-3933-4a54-ad34-eac7e17e4c00":{"docHash":"XqEVTIrnPAU21aVtyYN+kAFWaAc7B+h8zEYRmrTS7w4=","refDocId":"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg="},"21c2ed46-4801-4698-b179-1a4655496fea":{"docHash":"5nvZujJkT1IBdepLViF6ehGJ0p0q60PRCvXUGoibYvM=","refDocId":"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE="},"b51be96f-24b9-4e6d-bd35-5eb9514cd4fc":{"docHash":"bJZxg3t11FjOMQRDIrzeng63jrFsp7Z+EGZwFCx+WzM=","refDocId":"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE="},"a117f3e2-cfed-49bc-9788-db9bbc48c778":{"docHash":"Qy92oB1bLpkNbRwuA38tSKToWY/U2j0AMYs/2EN3T1A=","refDocId":"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk="},"2da7c9de-b231-4340-84e8-0bea89f6d5b2":{"docHash":"W1qoDTJTsoWmCOfwHMxZBRc93CIeEOtYyfhcnqNJrR4=","refDocId":"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk="},"0f187707-3726-45ce-b55f-6c8828dde66f":{"docHash":"e8i2WaYq5XEgmRHuseSvsNRPKtdPGMPFDN9kUCPlbcI=","refDocId":"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU="},"62c9c3db-36ce-4f86-a572-4809451a6c58":{"docHash":"d1XjxqZokVxlew5PjfQH674tPm896GL4ZA/IYGnBUuc=","refDocId":"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg="},"d2bc6156-4452-4bc9-9a98-5abce84a319d":{"docHash":"K7SgaYKHJ+KDNFt5euVx3kW/nJzzVUl3v/3WSyOM/o4=","refDocId":"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg="},"187ea013-8172-4a63-8d3c-1c0793eeb1c8":{"docHash":"rz+1n/SASYkEZYCea5rZ7AJQlZlXpvdTSO7ebkIELAY=","refDocId":"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ="},"ced30b2c-c030-433f-b28f-8c822d4e279c":{"docHash":"n3wDkmDya6ReAhUrSvGGmrtg3ssHYrgyZ0iIFdOYLsI=","refDocId":"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA="},"eff5d9d6-ba84-4c21-ad93-100764c93daf":{"docHash":"41ofC7BaEV2dzSqogp956M8rW4yClINTOj2ZORzk4SQ=","refDocId":"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI="},"1c82daaa-4f20-48c6-bdff-d543a1a7efd6":{"docHash":"Rfldr4bAO/4VpYbnv6ZoBQtchdBmrcpupIuR/n68xzI=","refDocId":"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI="},"9e288555-86e9-46bb-8c4d-b64c4904cbd7":{"docHash":"1A8XaswWqJwChl6SsLtVLukU2AzwVjzIC8Pq4Kzf7no=","refDocId":"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4="},"57028f4a-401d-428d-bb1e-00765089dc4a":{"docHash":"Bx6g2wYx5N2p2ogU+uP7nE3wingGogoU67q6ObKROYc=","refDocId":"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4="},"fb5fd238-0d1b-4eb0-9d6d-3207fa91ea37":{"docHash":"Cl1OPbhCfjnCwbsY5nNm+MArpbTzPXrGDnogwSjdGUY=","refDocId":"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA="},"af8cab08-f5a3-430a-9862-82e63f50cdda":{"docHash":"9l+Qvo/PH5pcPlIys2Xg5GLgHw2GXqBv3Z2/8IhbuEM=","refDocId":"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA="},"65fdec14-2873-4223-a403-d832c9096598":{"docHash":"wW/Eay91l+mV4j8XZQ0hEhYw6f9vL+4hzvGcVS+UbvY=","refDocId":"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM="},"32f4ccdb-b0f0-497d-af16-9830649187a2":{"docHash":"xvyCAYIGwParmkUCdc5Ncg4KBWkjTVVjAV3hNxL+7lk=","refDocId":"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM="},"d12974d0-db79-473e-a6a6-04468147e087":{"docHash":"kYyvL0qcaIgrmH/MIqcna3q3v36TxpL0LNvwLWIpOcU=","refDocId":"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ="},"c94c5f19-e000-4740-bcbc-cb95c5f9e7ec":{"docHash":"ReRolVzFd0gnoOtugxwMpGtqTFaRLhWT3zGeK0au70Y=","refDocId":"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ="},"7d839580-309d-4da8-9715-845fce715b78":{"docHash":"/oJiA7Ui76Z/SXT85ecpAVb6nXcvyTbrhiALZeE1Jxo=","refDocId":"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU="},"0f1ee0ec-5436-484a-bc73-f87169740788":{"docHash":"Vs0mBj8gz2CKqb1YJGOm0EAXD3OPJjwPwN12Jw2UfUU=","refDocId":"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU="},"e82b5b61-6f3a-4a25-b8ab-ac9e8a393f06":{"docHash":"J/PCNvQNSHbvRE/JAYCPPy0NdfhH9LHFbEbP4Fta0h0=","refDocId":"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU="},"fc2aa07d-e4c2-4d25-9b02-b2b9180ff808":{"docHash":"YyZzVUs3dFjhF1XAhUr0eGWcuNrZcGoM5jgGx3aHlxw=","refDocId":"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU="},"4905a0c7-5cda-471e-948a-4f0859dfb4b5":{"docHash":"J1pWsNzsLFpJAMu8cwbwOdA6Q2XUy3lbXvJv4wjnt3o=","refDocId":"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0="},"aac696f2-f977-4cb3-bc5a-fe1d91510f73":{"docHash":"2PzDQG6p8oSoY0OweK2qTTT/jho14JT8kd8qhICz87Y=","refDocId":"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0="},"80e012ec-f049-4d1a-a369-200f683934b0":{"docHash":"nBc1lvBHcDYAuV/rZS3pwHgkFfKHFKCiMVSvgCmqKZg=","refDocId":"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg="},"8feaf6e3-ac3b-4bc8-90e5-f175a0e3d036":{"docHash":"dQ+UuHVlX82QIOtXl/vOYEIeWksxMH/cuYJjsSh6bvo=","refDocId":"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM="},"1eb2b829-27e9-4a08-a15a-dfec65e3cb70":{"docHash":"ALrSLXWwRZSWpH5sV1ZTluMOL2zy86VlcMkZFpZp/kc=","refDocId":"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM="},"f4d7dae3-5ce2-42d4-92ad-6a5a8ade3a71":{"docHash":"U/r4uLZA0dktQ88/f1CwGYEmZbnFWz2CT/i2sOQlaNY=","refDocId":"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg="},"3d5daaa9-9b83-428b-a5d9-411ade6ac998":{"docHash":"3BSf/ZzVERL3Cz8l+xXeWwXih4GOLlwiIGc76vPispo=","refDocId":"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U="},"f8887d97-de7d-4078-b667-f64e3f00b653":{"docHash":"AxQk4gPzpajKSLokp8SMapYvN/k/C1gUsZtvdYOOvIk=","refDocId":"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U="},"d9e5236f-5892-417d-86ed-c145fb31d8bd":{"docHash":"bl/B5znho/z37hGBP41iD2HSp3JWC02bbG5MO7GQFOI=","refDocId":"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY="},"d1687814-dc7f-4d24-9e4a-4e7e2fddecac":{"docHash":"cqcC0bkINz26i8KzB5xSaUKy+CsuRYSj1ubWF6FDVUw=","refDocId":"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY="},"96250b22-b1cb-4729-94b3-899f15568476":{"docHash":"0c5Y5F8VaItUQR7pObwxGFNbco5oVQClvAcBXRVp1m0=","refDocId":"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0="},"40c50d99-f54a-4799-902a-dea29f59c023":{"docHash":"pS9agdnPIJZryXx1pCnITDfUR/GN/6cSO0D97ykBH5c=","refDocId":"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E="},"17ae5752-f40c-461b-b67d-e30ed6a8df1e":{"docHash":"YBglg5o1rXm2Bj2A+O859BLD0zvPJjJuPwOF2kPfkAo=","refDocId":"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E="},"66319e95-c495-4456-a173-bfd9c70c2177":{"docHash":"DIlTYkDGcnBHSsyf1LQkMnoc9ix9aDsNoVrPx31Qyts=","refDocId":"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo="},"7b245276-3b8f-4589-8582-f0d6c33577a3":{"docHash":"3RZnYwYFgKJky3jHOHH+T9LInPqc5RAu7mf0J+XEaEs=","refDocId":"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo="},"fa1515d8-2f1b-4595-a760-2e4a0ac0e854":{"docHash":"4A1gPJJI5D78Oh0yS0pcB5EipWD4RniCKWINlRGCbv4=","refDocId":"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s="},"e96ede56-560c-4729-b462-2f5cd92ca9c7":{"docHash":"u2zPpZR0Jozgnx7NWm/k7ukTZ0VDeVhKhP/97y8vvJ0=","refDocId":"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s="},"1e134db7-119e-4932-be85-5c187df1e2c5":{"docHash":"o5bJYopRowri/wCPcYd+he1tAxls3DxmeuhWiwCbXB0=","refDocId":"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY="},"083e4f87-67c8-4c9f-991e-feb4278797ec":{"docHash":"OxWiGfrlm7Rf21Q6jLeP8+tf3PXzJi20fr/NJPTKfGw=","refDocId":"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY="},"944df452-0b1b-4d3e-90f7-a5a27a70ced5":{"docHash":"uWw9/L3OQLWhj0nq79vly6veCjFNm192+1VeBiJ70C4=","refDocId":"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0="},"f165ce7a-3c9b-439f-97b3-ea86899a91e9":{"docHash":"SqpvReNcS/XayD2muORDbU6nKhuB/TCy+jGD0y3zUtE=","refDocId":"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0="},"b08751ab-44ec-4c1f-9036-731db0e685f5":{"docHash":"2QigIfbsxZ5mR04w7exHZcn/J3Kj5WbQYdig++GFCrA=","refDocId":"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA="},"2c37d416-59b2-4cd8-ade3-df368ade9933":{"docHash":"/8UyT0XaMl8EkwQRFUMiM2BA7i+nadnYCkrckxx194w=","refDocId":"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA="},"c837d974-7007-4fcd-bc0c-c574f14ae4f9":{"docHash":"K+eV/B7jJEIjnsR5lOsF35FOmz+AYvHPTK2TjB6aPLo=","refDocId":"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA="},"8f0ee030-e54b-4716-9f12-91fcb218161b":{"docHash":"O0el6aJmq3qlywTOOwcjNFu7K4H2pdHf1ZGK2cbs+Jg=","refDocId":"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY="},"6464c543-98c8-4a32-908b-25bd8c5fc43d":{"docHash":"ndXI69T+in6JjldNEx5UNpUZum4NqlbLhWl1UWPJH/o=","refDocId":"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8="},"604b3270-3cb5-4887-a558-aad874cebd26":{"docHash":"NcBRS5wV3gUYHtJDZez2/9GAx/O7qay1QQq32iDvZN0=","refDocId":"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM="},"e0f76b55-8a18-4e29-a2f2-9d0af1ddf954":{"docHash":"581uevCGJnkd3T6SGS2CnUQhKhkSDs2/LsEpV9KUzR4=","refDocId":"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM="},"1b528f78-8fcd-467e-9203-38eb6cf86a59":{"docHash":"5bgGNTjipSjS7mwMRDSlRMiN4jOL5AylHYaRaB06f3Y=","refDocId":"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4="},"d180a23d-af3d-4e4a-bbcf-26f752501f71":{"docHash":"vj5ZqwOd4kUFLG8RtKxbj4XhxLXUT3CB5M1qLyDb4dg=","refDocId":"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4="},"c59e3577-dc1f-4c9f-bd29-9386b018bb27":{"docHash":"aPTqxfwGZK2YjKxK1b6faY8tVkaxjPfsi4mVxQtKYPM=","refDocId":"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg="},"87c6f760-5787-4b2c-92f4-ca85dcc809f7":{"docHash":"o3pQAE/hoRKcRF5JIsv6WvOxq2W+0I5yl1Th/qvJPUo=","refDocId":"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg="},"818ab586-8d29-4067-8592-1063af04e2de":{"docHash":"SI6/ZnhKSQ2N/0MmlNrFquOyqUed8YWL508PvTVG8+Q=","refDocId":"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk="},"f685225a-8712-4b61-9abc-427eaae41917":{"docHash":"46isGKYfR/82V7lLWwbBgRnrQg7xNWX/6C3BYcIK0Gw=","refDocId":"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk="},"02e621d4-2dca-47c3-876c-c6da6fb3e288":{"docHash":"1DeMw4vjJtkrGC2iUYfC8+K/Ecg+nCFnQTUMCEY4gmA=","refDocId":"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o="},"cdbdbecf-e3b0-411b-a065-fe6ec7986b2a":{"docHash":"CJ7i+5DFPFI1IXVh2T7mDb31G5Qo8r14tgnKx7M27ZY=","refDocId":"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0="},"c235af7e-0dd9-4d87-a31c-804b83d76216":{"docHash":"O2LNCKdjOqXGIZd/mpuxMQqJukp7YCnZQnH9mLbERiI=","refDocId":"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0="},"ed3b19e2-3ba2-4652-87e8-4a9fec6b03e3":{"docHash":"moPtoeLZmrRcWuUGMfsoQuObm6bHKn02msp3oYL/h/4=","refDocId":"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY="},"dc700125-0925-4600-bea7-b861053dac24":{"docHash":"ig1ZMnD2T7Nyg19FAdjD6zka7Lz2AJwMk2qbbxFkKzA=","refDocId":"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY="},"e7b05585-4341-42a9-8f5c-54189fba93d7":{"docHash":"5jpHUHcvx8B1Xhj6NXz4W/VIKA9YiGuxPij69g93cA8=","refDocId":"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY="},"ee11d3c7-bc2c-4fbf-844d-17e9aeb8ab47":{"docHash":"7yw0l8iMlF0lXGt0R+lmBY54VCpbrGe4aaehHpYrjOc=","refDocId":"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A="},"38806129-47f2-4e37-96d9-2515045254c1":{"docHash":"GoPd+sPDAvSc+dTq1JNT60Txztb3AZhHJJA34F1DJKM=","refDocId":"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A="},"52db26fc-149c-40cf-9693-6ff92e5b0818":{"docHash":"5Z2FTeJAvm/kDwhEpPiKsCMo/iUrkx/ua5Jg1gWEFBs=","refDocId":"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk="},"2c0cc92a-6610-4361-83bd-85372acf9c2a":{"docHash":"PBDQg1ET78+ONfCi9UAuxPc0LAaAeM9oVC1kyC1Q56o=","refDocId":"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk="},"0adfe9a2-b2c6-4965-a359-29904fe98ecf":{"docHash":"/eVHfiRboqMVFHBxQel9TGZ+wAIfMqrpw1i5jFwrKE0=","refDocId":"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI="},"67ce45df-bd52-4495-beba-422a4f121884":{"docHash":"YM/uX4Vcwi5gg05WPU1nVpMDYR41xdxEtUH1oNqSxtU=","refDocId":"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ="},"47f41e1f-c06d-4626-bdfd-87a8f498619b":{"docHash":"P6MF5fqjjzl9RH7Nmniao0n72etKrvFN+GKr2h7aBgU=","refDocId":"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ="},"c72c9529-1e1e-40d2-a1d3-425d87dc5ab7":{"docHash":"WXJmfUEK2ymu1DEO40R6AU1tIHQxnGXaQlZhgtpEIbw=","refDocId":"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8="},"f22cfc1a-d58e-44ed-8381-f866f2ff368c":{"docHash":"H4gaZAPsDRYSPDVitDABvjah6wBFmfNBC4lz7b/L+EA=","refDocId":"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw="},"c704e0c7-3737-4d35-91cc-50d768f70b3f":{"docHash":"UrM1i4oFTseRKsB9McKTjCuOV7SduD6ozwJAPjvTv8o=","refDocId":"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g="},"2dbc4503-75d7-40ba-b336-1789e9b2f523":{"docHash":"QrvNPBOxogMuFoyGGCwubx+TQibjkkFPK8Z7uLdmDt4=","refDocId":"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI="},"eb7bf19e-f111-4e9c-a189-9764bdea02a0":{"docHash":"PFFbJjeHUWLZ8rGe3zs46j8ictA9HjQPGV9U74Gz7cE=","refDocId":"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI="},"376b6163-97ba-47d0-ad2d-d795c3b8d25b":{"docHash":"61Sur5pINjfh3m7iy0gkyIGbEeq2mcFPghg54Oqh1AM=","refDocId":"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs="},"cc5209a8-0f5f-4deb-8108-462f87cd5f09":{"docHash":"ZvnuA+mx8e6lx+9tsVY9Q1B2PJmNlg3kV65YG2fat08=","refDocId":"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs="},"06fb35fa-d4b9-4912-9278-d4be0161cada":{"docHash":"nFOIMVhv5r2xZFTTgl0Zv9TA5vftsFNncaJuvyZfY/0=","refDocId":"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc="},"9ccbe727-6b55-45eb-878e-3bdfb3f75272":{"docHash":"BMn0L9sgrdzZrwjxTF+BpvDKSifjAdcwPmO4xY38rOo=","refDocId":"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc="},"7f33a9ac-9294-467e-8255-76ffb14a34ff":{"docHash":"o1ytzAropdzn5IAqTUMGe9WheGTd4iGQe1JpxhpbO1I=","refDocId":"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo="},"fe3eae2e-4c99-48d7-a89e-21225726254e":{"docHash":"Sp7bErfy4mWay3y6dyk58C1drvPDcflJDRA4vfgpyjo=","refDocId":"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo="},"fe7e3d14-6995-4abf-8382-dbd0757a47f1":{"docHash":"Fyfei2dRjjIK3Tq3AqMJzIuiuD/ORkJutdE4E95QaLw=","refDocId":"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw="},"5ae1244f-ea31-4088-b50c-f56d83b7df59":{"docHash":"P2w6hvtxlA+dRZxTF+hXIro1RQ7JFucwQU5QW91YOb0=","refDocId":"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw="},"f0bb12ea-cf12-4134-8e99-5acab626f296":{"docHash":"lpOsl9Dnnt675D+f0hjsAbrYGfB36NedPcBcPEMr0Pw=","refDocId":"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo="},"0540dfce-5203-4eac-a2c1-fbc502702f83":{"docHash":"YwsTEKVQWzzWnfjVK4DvJGwYGmGjyamVKt7BSytNfwk=","refDocId":"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo="},"1f31021f-f85b-4470-beca-265ad7c9301f":{"docHash":"XPoc4HzxysZ+NLAEjEiVmYHm4FhNyRbS+hI5AUgMlHA=","refDocId":"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0="},"c74d51fb-57d7-495c-8807-ac909c592a3b":{"docHash":"Pac+CY2SdWUBZp8pUCv0zkgKHTwsdF6F4biSRQSznIM=","refDocId":"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0="},"a7d53572-051c-40d2-8212-6b1de7ca217f":{"docHash":"Nx792F06K7Craiepgry1sSkTAf6oFkLqWTiW9gxsKcs=","refDocId":"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8="},"69698a5e-95fb-45d8-a276-d4a6a358a868":{"docHash":"FAuQzsmjS+fzQ+FHcceHe+F/4lGE6DltA1VD9yk7dfI=","refDocId":"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8="},"26937d06-fee4-4c2e-aa5b-e55c05757e30":{"docHash":"WCvg7euiqYins6Lz7QEtfd5nrU88fwkD9xyKRugn08I=","refDocId":"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8="},"1d5f9651-d363-4c24-85ee-4cb3be119023":{"docHash":"ghy54G/vUNyr+RYk6sv0sPPdPOIzxIvQ6KIlNocFRZU=","refDocId":"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8="},"2bb566d5-58c7-4532-a5df-82c9ab155d83":{"docHash":"NciNYOz4EdY2p4587NymJ3XYWx8kuHQHZrWc7i5CdN4=","refDocId":"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0="},"d0a6c791-f5bb-4986-9769-72736f2b63da":{"docHash":"KTb9EDHxkBNeEzqAofz05IJV0wVjshEmpzorkbNGkPk=","refDocId":"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0="},"90c45171-b8f5-4a61-8a6d-47af914ac84e":{"docHash":"5y0c6Ls759qS8rKi45AWQgAL3PrNqPvxEO6f6QMY+xE=","refDocId":"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U="},"feb2613d-4fc0-43bc-a4d3-32a6828e3be1":{"docHash":"d1bVD9E4DSLgKSIXpaRq3gAlo0jo903zmyFgipsXYlo=","refDocId":"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U="},"db71f0db-75fc-477c-ad0a-702da736810e":{"docHash":"DoruKHzNRxYqSP+wdGDgmx22ziHPn8lNysno7M45Dbo=","refDocId":"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ="},"2e912b10-4364-41e1-be29-b7f3de6c23f3":{"docHash":"OL4J1AW7LcHbg/L+YTo55LKdJYh7RTHKmo9a5c0AVXM=","refDocId":"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ="},"c74ca66b-ab29-4b31-a133-3cd4c4206555":{"docHash":"C0D/O3WxiOzIAgJB1f9D2KxnvyhcQN+CMR21vLsxdFI=","refDocId":"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I="},"ff08b052-d589-40a9-b3e5-3055ed7fd3fa":{"docHash":"tuzAH8ZrOZqBecK9V7S4x/iBCb6PRLT1pqjoRm6UP/s=","refDocId":"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I="},"eff603ff-c5a6-4337-83fe-a3845fa8d670":{"docHash":"6SUub8PQmvEe8ZsnGZoV+YW1u+ybxKLU3ZqiJX8EKg4=","refDocId":"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0="},"6203af4a-0c79-4e99-914b-0f4254925b81":{"docHash":"bk0WMlt2B4v+tBsBJAMkqQwoawFzgrP2ZcQDaTyfub4=","refDocId":"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0="},"9f991503-a675-46f5-8c6f-b4e874075dd6":{"docHash":"JpTtFcUIQyO3+PrwGTclfEO2hFap66GT6t5S52hSpnc=","refDocId":"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI="},"2de002cb-5c29-4202-a5a8-34e1b2983581":{"docHash":"+oe2WN2CCUaukNWPDMA2osMjGl6IqKMit6ocAyXJKuY=","refDocId":"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI="},"2a57b49e-6f11-4b9a-af45-0bef4719371b":{"docHash":"pnUtQZymSv4wIzHVkyhwbeUvIiidFYApVgxu6B7aVjg=","refDocId":"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM="},"68cf49ae-0a86-4b21-a783-1fbb52793a9f":{"docHash":"vosm9bIcoGv8nyBOoifGA6k0dcvc3ayMe/MhmHHur4A=","refDocId":"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM="},"a7b76924-607e-41ce-aeb7-b31031c02b91":{"docHash":"JjoRrPv/upHWvvoeEe2Z5O1UJ3phQB+tRnaiyhs1F+4=","refDocId":"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo="},"b4e7948f-113b-4bc0-88c0-22a37b4de589":{"docHash":"gTLEPMh0zeBbhUUQEN0WF0E/PkJqKSy0kRh5xKE23mo=","refDocId":"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo="},"f3525cc5-4144-44fc-acea-c3f669719eb8":{"docHash":"Oss8csYkuXs/Wv4clOV0P7DXFgle+l3s1ViDJ9E/O98=","refDocId":"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck="},"ac640b80-1ccc-4eb5-bb70-b28212113a11":{"docHash":"x1H7+/cxJQGwQhYHZYgNcpXZqIzTwJ8NFgNMHjwpd1Q=","refDocId":"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck="},"3e26e34c-1f0d-4bb2-850e-4393475d5159":{"docHash":"4oJB6ggzCAcpUiIP/Us24TP5P2YQkKeqosLSO6fcwdg=","refDocId":"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o="},"b10157e8-0c70-48b8-8149-7137ae729f7d":{"docHash":"LgL9dNSwYenALwlxJsdQPw6EMivvTUfgPpeoTh8DG+U=","refDocId":"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o="},"5094272c-5049-4c17-8ff2-e22c3792944d":{"docHash":"VmPGpyRV+BflzbnBksM4jnqeQONdS2FGa/Tr4QLrV5k=","refDocId":"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw="},"96f5ecdb-2be7-4448-a4ab-ab8177d120fc":{"docHash":"bwRHDG+gJG8DYam1aP+UmMgHB0pfdsvmrSPtNTT2qFY=","refDocId":"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw="},"acb408c0-f737-4a31-a5e7-ea5bf9f21a42":{"docHash":"NdXCbx5ArIN09RbQSjX275LmUhhXQz0jr1rPbj5UQE0=","refDocId":"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M="},"f00ffd4d-01f5-4609-a5c4-76194d818ca1":{"docHash":"jn30ERgjo7hdqb13jaabyd5SYCzoFLv8vh2nrTb7e1s=","refDocId":"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI="},"022666f0-f43a-4a2c-a1cb-7fa81a115ed5":{"docHash":"4EVQW7aQi7uzwxhp1CbvPkuuHDqUvRCns8GAOHnEnIA=","refDocId":"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI="},"17e0af00-6021-436d-82a5-c4c86c692922":{"docHash":"5nXo8e9JcePha2522+NyMTyQYW+Da8Gg2CUyo1U/D34=","refDocId":"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A="},"bce4f34f-2a3e-4f54-b744-993881611ba6":{"docHash":"4lztqzpIfaPYxO6VwbeF9rONXB4YgxFJg/egwAb6e+0=","refDocId":"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A="},"41b7fec3-74ce-4197-90fe-48cc01279378":{"docHash":"gar8eE7MG/pFfx2ACxSdDNizNTnW0e2BQTaC0cOGUzQ=","refDocId":"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0="},"7abdda93-a076-4126-8150-d73c2e1930c4":{"docHash":"bjPMYgKXvCUzTRJyfldVK5wEbLuF+9u/IlYUUbUf7X4=","refDocId":"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0="},"a6155d24-a1f5-41b2-bd37-a03e726b20b1":{"docHash":"S1ko1pgcO2Hbp0F3UCgJkDM1butZYwuCfBt0rwH8gWo=","refDocId":"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc="},"10435700-df1e-49c8-b1b4-cfe3f6b2ebe4":{"docHash":"3ma6kAggAd1fn/olJQs+vcrk+JAiDh6TME6VPE/CL70=","refDocId":"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc="},"b301b977-6b19-4f49-8497-a4476e4e6fd3":{"docHash":"nLBorvZxsim0JoEf8+5EvmgSTjKEBAUUWqoHTeqGSdE=","refDocId":"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY="},"d04fc9a2-8604-4d10-b25a-9c8c44c3c39c":{"docHash":"NXbK86di8yi6BEJJBur9DgkvPL9AZSh9LJpiJ2v0RKI=","refDocId":"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY="},"d40c57a2-410c-43c4-a67a-d0701f4c644a":{"docHash":"fgeudAi/EV69moCgl4HzLxsmNe/OWktF93Dettqvigw=","refDocId":"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg="},"7dd61319-8dd9-4712-acf9-dcfed6c98bdf":{"docHash":"6K2oOQL3gsRfiAT+gqsRvRqYTCUS03SzM8CcVrnps6c=","refDocId":"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI="},"ba3742f3-03e1-4188-ad11-2bbb564c0a72":{"docHash":"ZGfwShyLQLi/9Dm3e4ryqs+pyPozQkRdwxB6qGZSqdY=","refDocId":"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI="},"4a25f09b-3d71-4a88-9483-211314a4109d":{"docHash":"9/Nt+lGBO+8V34jXPEvleQh4/vo0ziU+8VYHRiusb20=","refDocId":"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0="},"459919e8-d2e8-4207-8016-6b921a59c921":{"docHash":"ah4m5bYGSaP3pu1CDDSbFj/YJkL7MvTdZ3q+NhHq+Xk=","refDocId":"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0="},"5cb40645-eff6-4c84-b903-b41699f34fdd":{"docHash":"OzaXnlkPrUeTsA4q8vfG3WymD3tV/lRKn2cHKGMcWyA=","refDocId":"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw="},"291ddf6c-0afd-4166-90be-c975977d0478":{"docHash":"blukN9Sl1ygMLfReV9SO2VFbPutUEmMLRImlKPiZ/yc=","refDocId":"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw="},"17dd9616-4525-4bac-8947-0920f12297e1":{"docHash":"QIKOLaNlXioPnyDuF0HqYZuKMiL4LrHuQe65QpvJEy8=","refDocId":"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE="},"b7593919-5114-4048-83fd-e0d4a4f21866":{"docHash":"7juas5MeT7vgErerhHE+q1xlCiDKSznnIgABn+dlYfs=","refDocId":"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE="},"d6212ce9-abeb-465f-a8a2-024c0ea2d339":{"docHash":"EprGON0n+Q82RDsI3Lfllw7Z8TkZdxiAX2ShaGp9gOY=","refDocId":"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y="},"5abf20f8-7570-4979-a6a7-d16d0654a758":{"docHash":"VNs+QuU9NiwtbYvs0pE5pNUy319Sql2jFCnRFo0ZJ7g=","refDocId":"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y="},"1363ed2f-169a-43e2-9c37-57ad2fbcbbda":{"docHash":"rq9+TIcqsnfNx3eNv64EEm4jCi4eNgZnRMwJuTEE/90=","refDocId":"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE="},"a57ddf2f-0254-4b3d-9ade-0ee96c7d555d":{"docHash":"dMT+YhyJqmIojca7zfUhXS0qZMyGkmeefqfABx7DkR8=","refDocId":"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE="},"9e717a5e-621c-40f1-ade4-5eee41ab5181":{"docHash":"QW9VxP/3hePVguEKeWVJX12vGVehhrpdFaiglEzJ29A=","refDocId":"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0="},"1622b80d-0375-4bdb-b4cd-d73dadec3dae":{"docHash":"ByuXp8IaK05NwAcP/clgCuy1YTD+mMYbTM8sfgm675o=","refDocId":"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0="},"685cd3b4-d3b0-4d5e-8fb7-f01351560a84":{"docHash":"jR6Phk66nBrw7e/dPfYgZ0MLXSCTQOd5oFNuIpJe6XI=","refDocId":"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4="},"0946d886-7cb4-4a85-9a40-73e9cd11d3d8":{"docHash":"//0MQleIgxZ3DixlU9CY+eviWUObmx2+D7EnkF0mfNw=","refDocId":"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28="},"9a50b003-0da1-45cb-a4fa-413b1600be22":{"docHash":"oQXMw/96gI+gySDvAMNvjLBsYpdK+0agRM1sqbLJ9sg=","refDocId":"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA="},"b6094174-85ac-46d7-ac63-392a2467765f":{"docHash":"EV6SdolozNvKTu0jLqSBBr5cY+FSwVRABpFqVyLA/iE=","refDocId":"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg="},"49f68d76-3e1b-4934-908f-c94e2af50c42":{"docHash":"oYN97dShq4iAFOOfK+WW2IH5DPGdm1+/7mRIe0tDTuA=","refDocId":"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE="},"c2e4be1a-459f-4847-89cc-7e3408c59888":{"docHash":"BwMIumY87o4+o+qcOpjjOn4jjpZsRVytveX+0n+5ZtE=","refDocId":"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE="},"29849171-95a2-4a08-a49f-0cac9b956e93":{"docHash":"Xzw26RPmG89ovU7sa0PjODi3+A9ijUHLTsrnC+0guqU=","refDocId":"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U="},"869d52e4-ff02-464c-a16b-aa347f93d75c":{"docHash":"WqEBjHgjEMPOvzhDixiQ9XF5zESOjx44v5czsULsX8I=","refDocId":"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw="},"46197096-ac27-47eb-98b1-1338caca0a4d":{"docHash":"2stQniTBbr7RIl9MtUZa3RvRjgZmCVLBJQKE4EGh2IU=","refDocId":"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso="},"abc888a7-eeac-454c-b643-59f6cb67a5be":{"docHash":"zAGrtWq5iDh9fLY3uu1tcZ4/BkHA4pWXRRM2Om7HXjg=","refDocId":"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc="},"978b75b4-633a-46a2-97ad-a3c33fc231ee":{"docHash":"f+mXOWmxZ0TkFxWA1U+eDoQbgq2s8fLRCzFuDZgL5HI=","refDocId":"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs="},"1246c188-5202-422d-9c6b-7608018cdce5":{"docHash":"czzH5l0utFCNtxzcKzsw8W7FqJqD0eRjVlAI4pnxSKY=","refDocId":"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg="},"ef963765-bd08-4bfa-a264-d388f535bd6a":{"docHash":"ezEyAUOio2ShdFpjQ+0z5kCTgcxXdo2s7CzuoZrO81k=","refDocId":"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM="},"1b320066-0048-468a-b961-fdea0d5c8bf9":{"docHash":"t8rnagANlnUQqx3ezX6wHd3cCFEjOiTLfvQ+oXHFaJ4=","refDocId":"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM="},"0c2b9b29-0ab7-4b62-85c6-9c064d53807c":{"docHash":"UtJegJ886r+KScveBqKQw5aWYdpHzXLeO15WWqgtadc=","refDocId":"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM="},"ebe5b1fa-365e-404d-ac7c-a1112017b49f":{"docHash":"a87Q8ePerBwkb+wRxUQMWHxx3fG7XVPa5jmho5zY/FI=","refDocId":"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM="},"cb03bb28-e9c8-4499-81f2-1e3ede77d43f":{"docHash":"zoLz3r698cDsy/mfs+AGX/U/bq4q2gcHougb0HOaC3Y=","refDocId":"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM="},"0abbc996-c2cc-4e78-83b0-529987b5a4e8":{"docHash":"pE5fsnJQJ3gyNRXqXsZV8mGXp0Iqg/EmcqAzBD4Rm08=","refDocId":"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM="},"2c366125-f652-4fe4-9d86-05bd842cf6b7":{"docHash":"Z4IaESYU+mu1ULbn9d90fovH8TcwjUGHkUBtL6pxKUs=","refDocId":"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY="},"b3cd2f06-23fa-4ba3-a67b-f9a49dfebb7b":{"docHash":"1XBMRnELLurKv4Ds5V1o56HUJC3licKhqWHskgS6Ijw=","refDocId":"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY="},"c785a4c7-12f8-4f25-9cb6-fc9f1669d588":{"docHash":"uPhUfot9qwMw61+2+WY4qxugW4Q6Tco0QgNzZTLnznM=","refDocId":"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0="},"19dc0c9c-25e8-416b-a8d5-fd0c9ab28bba":{"docHash":"FVfkCh9H/bw9mdHTrxYYX2YVb4CpC7Zb24Oq214hYCQ=","refDocId":"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0="},"0792f5d1-5056-41e9-b72d-ac5a7d0f0203":{"docHash":"t8C331L1ROFn32/Boho2Lw38FtzLZwY3RzJlHRB1Ctw=","refDocId":"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk="},"d9d7fa3f-263e-4b79-a1fb-b0318b3644d5":{"docHash":"tNRrBB6g/LLugAbjnG+rsn34VAma9aLNVN3132fsjoI=","refDocId":"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk="},"ecd91e7e-2b9e-4ccc-9828-b23e2d6de7cd":{"docHash":"25xEDS4G4Jb86Ui7ty1uJKcugn0xqbjG+8EtVA+Y1gc=","refDocId":"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g="},"0a272e46-6450-4818-a3bc-a551452f61bc":{"docHash":"7wh9V16rT5JSQ1kuhFuoe1oEL6RUNTd2i1ctUpYSFSY=","refDocId":"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g="},"bc8c2107-19f3-4157-8b42-4394b45fe9f0":{"docHash":"LbuxIFQ7qzT75dWiKeweEex90fR59VICA5u50SLV4jk=","refDocId":"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g="},"0a8e4313-e442-4638-a970-b82bae9fdf9b":{"docHash":"uXFaUxKaENhu4VQ2XarsfOquOFgmaUea1nPaq8lTQog=","refDocId":"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA="},"9507da77-b1e6-4556-9493-59644f405a97":{"docHash":"RL7Uq1kZo/xkNqp5289Qt96FQsFHX+/YlcgevMWki00=","refDocId":"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA="},"ccb13e8d-124a-4d88-bbae-da7f6e95ec18":{"docHash":"JUA9fxM7JI7E3egZv9Yz7H04efKqHQG2PijTl0zY/NU=","refDocId":"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0="},"bb1a7dc2-1530-42c6-a80c-ad0011a540bd":{"docHash":"mtoFI8b/PXjlmnvm2sO83ru8Y1YgR1VsyMQMPkvX+9E=","refDocId":"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0="},"f099ca4a-3cb0-4bc3-9ee8-025183cf639f":{"docHash":"VTROXhBef0ZEVfW39eKiZ8fr3gE1QbfVQ+yfaCH8R0s=","refDocId":"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y="},"a070aeac-d2b1-40a7-917c-d5b1060be878":{"docHash":"iIqu/4bMp/B9xjnYfEZSwKRmmf27q5rEjlrRxVowUkw=","refDocId":"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y="},"040d97e6-24f8-427b-b583-5c30bd6ec851":{"docHash":"DWZ8CRdgTlDDwflVBy0xmwhrbdedi2VSJ+GphiIn/4s=","refDocId":"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw="},"7c0dcc2c-76d0-45bb-8e79-d6ba5ce08ad6":{"docHash":"yEHNZxrdureQq31/M5bGrif1EnDD1jOUZ3i3Sz4xpKo=","refDocId":"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw="},"200d2d53-a568-40cf-97ae-3146a140e611":{"docHash":"yJZrvG3HPdwLiwDbIEbII5hfrGik8CspvQBdRFHVpXI=","refDocId":"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM="},"33ec521c-aeca-4244-96ab-68cc4c92484a":{"docHash":"DIHl7rKyMfHxoDaHUCoxPPy/sHDbKZ67Ybg/fSK8G2I=","refDocId":"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM="},"d21bb666-0572-4c31-98c6-363ec06937f3":{"docHash":"x/WYqix1w1siTGgAYx/b8/w0FhQTDIMubkIw5EE3Ogc=","refDocId":"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA="},"4b3ec772-087b-433c-a4b3-34c5b3b8bd9f":{"docHash":"J7knanj1TKZE2Ctbd/743oFkSDbVO2KIdkc5sDAO1Qw=","refDocId":"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA="},"f51c473d-8e8d-42b3-88f4-d06dba361173":{"docHash":"VMZ7TluuelcGGkwxdTsy0uN64M9Ga9SoXH8E/UIqnoY=","refDocId":"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY="},"b6dc0fce-89f7-4be9-bbd5-cfe406486129":{"docHash":"Dysb2Eh8UEKJ9d4diA4nCiYyL98Z6p4ebXlNYJaFGKc=","refDocId":"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ="},"6e893aae-83b9-44e3-b729-a6b9ed7f6870":{"docHash":"uNVAb/v5M+4t1nflXli3U2y29KXf4QF26lGlH0xUkiU=","refDocId":"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ="},"2b022c03-a341-40fc-bf5b-93605c411640":{"docHash":"1jgMqvL2jp/Id4YX67xlo304RmIkOmhi3h6EeUNfYZU=","refDocId":"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs="},"faa97fcc-4401-4f4d-8af6-d95cbae1ded5":{"docHash":"apiNEws8NgJ2pM8q6lUybHxZaXurBc65jt0fniArrps=","refDocId":"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs="},"028eae0c-fc43-42c4-8eae-32797f2cb712":{"docHash":"oNE9yPrRmWchHR9gv6qxPwuDcdwRPsrC9RaqLQM91wk=","refDocId":"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM="},"9563351e-dd0f-4c68-ad89-c82caa4fce79":{"docHash":"GXPDsWUfmclVRJh2bb5eUkZwNMgN810z9DodgHcy2w8=","refDocId":"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4="},"bde967c5-7f63-482a-b67c-250df4104972":{"docHash":"nII9GIi11IUPuwPl+c6ErCcW6P9ks4eZOGr5/RGTyaE=","refDocId":"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4="},"8daf6de3-24c6-4055-b5fb-567a21b08be6":{"docHash":"VwXaB1Ev6RyPbr+1ikO2JV1XY3kcKtNUXOj5QfFD2E4=","refDocId":"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw="},"938476aa-3631-4142-bd77-6589fd5b641c":{"docHash":"qKMGcBiRzsWI1uc/PgAnCMUF7ZIrcdN+Ssho2eQUuRQ=","refDocId":"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q="},"41383054-bd48-4e50-93ac-2d8961468764":{"docHash":"kYHD7iN7UIoxmTeFTc1t/tA4myIt5+56nQkQSf1fOQ8=","refDocId":"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q="},"ff45564a-82eb-4433-a139-074b4d2bc411":{"docHash":"1r+9GcXjzlI463BEDGogvraGi9Zv+8hyA1kUtotfHLk=","refDocId":"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs="},"878c25ff-2c41-478d-bcd7-391f1ac1f63b":{"docHash":"dQlg0Vv/JYdhSer2pjgXrjkGEMWZIVozr1MrQ1K2+fw=","refDocId":"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs="},"4b6e037d-f021-4ef7-9747-5fda03b722cb":{"docHash":"jbkSV+vQpIq06O7ri1hJjIzuj8b891G6Zg4MOZ91ZFI=","refDocId":"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc="},"5843c362-f69f-454d-973f-b36524d3050d":{"docHash":"AooEmZa2eL4/BY/54NNRYUX7LCdm/DCutY2sF/SF/9E=","refDocId":"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc="},"44e15f0b-6871-472d-a910-9e4a39f2fb08":{"docHash":"moqrrwg4R/ga0wdkz0wreFtr4esTgUkFqusmKxYSRlc=","refDocId":"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M="},"f543b89c-5a9d-4951-a7e4-cae83a3fb8e6":{"docHash":"dOQ/MbJDX6YuRqa0F0RTLz+EfS/KRSNyLVvTPWoGb+Y=","refDocId":"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk="},"54a44230-6bd6-4b01-93fa-1265f5b8b6f5":{"docHash":"uP0xwG2144sC34QOuqmSCyIXyWLHARMwYtUJCUZ97Z4=","refDocId":"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk="},"ae4b8ed0-b01a-4673-bf7f-1c14b87f8bcc":{"docHash":"JVmj5G1q4iXtzYjn3w1Nbq/Tb52rXh0/7WVTVfQsckc=","refDocId":"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg="},"1e585908-6d57-4ad6-bca9-e39c2bcd78ec":{"docHash":"jvXcN6txgegPNFwWexXO3dnuvFFRrLwLW0BvfFRNd40=","refDocId":"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg="},"e3b8f920-9d9e-43cf-890b-e3d7696537f5":{"docHash":"nuTeCFVdG+cnFBUhIl7/TdULbSpllBnUtDzsjv6wVzI=","refDocId":"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM="},"1c9751c6-4c46-4c6b-aef2-f9a4dfd5b94e":{"docHash":"0z76I4GIhTfNFqYaDsaVT3Dz4Sot2GOfioCe0RRZ+/Q=","refDocId":"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0="},"77783bbf-7f9d-4db1-baaf-ea5b137e1914":{"docHash":"1uuLvBukxF4uD1fwSz5aX67I1T0YIOs23h4PJqrjBIk=","refDocId":"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0="},"6748ec9a-0e5e-4c66-8063-00371988107f":{"docHash":"RKo++HaOZe/y/rWh/OPyaTjZhMcZHkq5NGQNJEIsW6Y=","refDocId":"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s="},"f5397d58-d7ec-4ee5-95d4-0298c122761b":{"docHash":"Uw+lIMKAPtHETVmp7xzYA7WGNVf0YZUZh2U3SkmBoqk=","refDocId":"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s="},"d1a6ffbf-adec-4010-a9ea-4cd1c8f18f45":{"docHash":"6TYgDVPDz2hl63qCj0xwdWCh8W8UA30CfT1meAiA3Zw=","refDocId":"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk="},"af351923-49b5-4fc1-a6df-fdc1a2b79edc":{"docHash":"1EjMrKWsmV0ZJK9vqbSGQMIjAgl25/mnuPLEADwIa08=","refDocId":"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk="},"6d97d59d-407b-4cd1-a9f4-75d28b7784b5":{"docHash":"vCMzpVNweanRz8SuSMOIezoI4m66B0x9wtUI1WDDgbE=","refDocId":"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg="},"dc13287c-3760-4cb4-a541-cc5e912c6372":{"docHash":"LfukeWExHBUvYS1OhektgNPsmM93szPUr/AGoFpmKmg=","refDocId":"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk="},"dd605920-6eb6-4a85-b8f0-715c6061e417":{"docHash":"ZZumZhSF6EAIB+fkEa7RRa7Db+m9k6zuaWjauNGNrIQ=","refDocId":"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk="},"21ad7398-7190-417e-910d-b0b99848233d":{"docHash":"ptvpbP+y9MXjaxJVuGrr3BV9/JLHVTBIrySDIDRJKgs=","refDocId":"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM="},"47fdfa52-3790-42ce-ad82-5afd8c4edcd9":{"docHash":"GcXaQIT7Ilo9JC+kfGyBh9L9Z3yox8Nhz/6LBNGdsr8=","refDocId":"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM="},"35924aac-1ce9-4db0-8f12-261755508822":{"docHash":"3LJyiDwT8ptDll1lrF+ScrzRoPPTbZEVY961178FrJs=","refDocId":"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA="},"e759b9b9-c9c1-4b88-8920-e8a4c8c9aebf":{"docHash":"DJpBrUejkJy6aIv4klcx5Istwl0GusDiFC1NQwvB4kg=","refDocId":"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA="},"1fc9ab6d-e03e-4540-9184-c82e114a8c70":{"docHash":"V8hlC5ghMNcszeM7cLKm9O3VOYcpmsimeHbjAPMpRDs=","refDocId":"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss="},"49d9fc2b-169e-4285-bcf0-3e8e2e57ab70":{"docHash":"+tAitZq5NVsWYY/iDQWLaeonixuB/TKhO3K6yNiKdaA=","refDocId":"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss="},"514611f2-8c87-495c-a7da-fab3e6422188":{"docHash":"cXs7T/lSRS7LuNwoUXFsNKdoSU/Nqw+VawXCuAtDzWc=","refDocId":"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU="},"2616df8c-b6f0-411a-a381-766d4dcb6b05":{"docHash":"92l75jmNQW6sW+ViKVIdlQDJ/Iwx5vRofzlfBTa/FHs=","refDocId":"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM="},"fdaba380-1b41-4e01-b32e-6c3e452bcf52":{"docHash":"LxiHmG6zPIiZ1RPpAqR7b5++QDXv4xAoZrOG4ocjQ7k=","refDocId":"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY="},"d43b6952-2bd1-4013-b95c-60ead99ec042":{"docHash":"e9AVkze2eGtdBuSbbqheF44spp4NNzpNPNQCx75tdj0=","refDocId":"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY="},"7ce326f6-25fa-4acd-a652-4674d661aeeb":{"docHash":"wd9K1buIH118NHiYwtspHkn/mCzGe2jFkQ0UuB3NvBI=","refDocId":"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q="},"0970194a-f14f-4b9c-a796-423f2f30be0d":{"docHash":"FQUwkCghzGyYu0OnRomn0nBfY1z2sp5LR7SCpJWCH8k=","refDocId":"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q="},"7fd2e358-4499-4899-8f93-f5ec3bb7f9f4":{"docHash":"XsPZM3/H6dGwIL5JnsxmOaiZks5jZQjssSwhkDZxzZc=","refDocId":"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw="},"7bd4f4f6-acdd-4e7e-83ce-052e95148c06":{"docHash":"i7vBIktFo691bNQuUGQ88fX/+6k0+4qFd8lllFuQgtE=","refDocId":"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw="},"427e4d99-c00f-4bc7-aade-28738b45269a":{"docHash":"6NTodgwTN3rhZpnNqjOyO6yTPwKdKqc0Oom8vqbc4Wc=","refDocId":"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4="},"a532ee6a-53f9-4dce-86b7-8d7ca5232c77":{"docHash":"xF/XN5j8zhsqUFVwtsgfqdtwMWULvQ+HtkJ0WYgDM+c=","refDocId":"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4="},"ab91d245-58aa-48b6-a57f-fb4ad8429a92":{"docHash":"H169jkmpdMRFppXsOCxEwbW4K6iEDQ8Poa4Mbror3k8=","refDocId":"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM="},"6a125127-6d40-403d-95df-ff758ea4b38b":{"docHash":"+fYMTP/ao9eRkDwpR2wReeQLWTPMsZXJINCO4BkuF88=","refDocId":"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c="},"96d387ea-7544-4b01-84f7-0f96208aec33":{"docHash":"aa39nbqx6xGnIRVFNmD1Gz++hz1iod/3Z6kYYRRLOz4=","refDocId":"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A="},"928496ee-57c0-41f9-bf34-8fcb85572b0b":{"docHash":"PRJQFBc4AWGutUnybrh8EZEDt8689ZPdjIrKztKPxxU=","refDocId":"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A="},"34a96388-919e-4a0e-932d-c31b47cf142f":{"docHash":"3xy6kuN78MZcBF+8SL+W948u9pG4KZQsPTCa7tZHi80=","refDocId":"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4="},"7b5c8a97-f8b0-4ae2-a3dd-bcfb4c31f16e":{"docHash":"xYTyWZ9eWcLILYky39yxGNkMynkOb7ZTI3rGd4yq6ck=","refDocId":"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4="},"487e1fb8-b853-45ab-9c75-3e80df0e94ee":{"docHash":"WvpkRCONgu3G8kHNBcbSUydnJd7vO3LO7CxYO07hYlE=","refDocId":"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ="},"2e206e6a-40f5-48b9-adba-38469e007cc0":{"docHash":"7Tz6aptCwf1+XyZfEq1Xnt+wT/rCsrxtPk6PLeGIF2I=","refDocId":"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg="},"b5f8f0bf-f94d-4e09-932e-09057eb435b6":{"docHash":"j9v37bVCLKuusclPhrzq+TfTxYWYLeRuJPuotcBqyuQ=","refDocId":"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg="},"3331107f-8898-472f-956d-dc58a655e4cc":{"docHash":"OzR9eKdINWsMChSEkmSaxdi+aNmiDGfssIE8c+68sYM=","refDocId":"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA="},"a307f2f6-94c0-442d-be9e-43285b8d4596":{"docHash":"IpPL+GuukEMYIQvNKzGq2jZiwtk0zRH1vb6WPlOL4Vk=","refDocId":"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA="},"7205750c-a709-4ec8-b891-1bfbd45fa2ee":{"docHash":"icfQPobDaw0/7SiZHmWp+hzOk4dDcpeW/ifULidyKtU=","refDocId":"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM="},"1505ac46-6860-4b22-9542-6ca41a2785c0":{"docHash":"JIAzoXSmIPaYgUVlHM0mamrdsJzzvuhGQ6ab+ra9zzw=","refDocId":"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM="},"887e1e5c-40f6-47f1-a69c-91e71f608065":{"docHash":"O43e6nLVNQtUz+B3e9GOzlzJR+Xkvo8uDL/Eo9hfPBk=","refDocId":"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k="},"89af273e-afc9-4505-969a-890a6246c3c7":{"docHash":"E+uwWPegwc/VsEvZmxkyAfhdNBFBsMI71raOEuQNcrk=","refDocId":"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE="},"8c074c0c-b9b7-4ee5-8fb6-b38502f7b7ae":{"docHash":"DOO3lscn7WSGGna1dQk2Y/p2mGnYUNVljkTuezRXcIM=","refDocId":"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so="},"97ed85cd-b622-44d7-a66d-3e2c608b2fc7":{"docHash":"5A8UgL/kmyj7G1BYThVpUOW9IfZMFHh9SGSHGtyxW8A=","refDocId":"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI="},"e9bb9dbb-1e0d-408e-b7b5-3bd79a5cf243":{"docHash":"COntgrulvrX4tENj/KStfet6PvF15seBdORlo9HAQHk=","refDocId":"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI="},"84190798-f296-4a5a-9959-55d8bf2b52b1":{"docHash":"q3k0LSsWyU6iWg/P5waEHa71zJIrd5NFbwBOVt4ay7g=","refDocId":"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc="},"babd6cc2-bbc6-4d23-9594-a94b6c4d95a2":{"docHash":"8Os+/cl1xVE50e9ux7U00kNKbSuSweD9kpe8jOKzSzE=","refDocId":"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE="},"4f6da2e8-8b37-4b34-a2b1-d524304c8617":{"docHash":"63ZXMw05D88VQ38LXYL35LmUTbKj1X3iRQatX1FccDU=","refDocId":"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8="},"4d1f9e00-e399-49b8-a2c5-6ab2038947e8":{"docHash":"j8/ugoDPcNBGCbn29lJnbiW+sMj/qbshkBpxH02m17w=","refDocId":"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g="},"f2e80ae2-3821-4808-a910-a3ab3148b6ba":{"docHash":"0BakzlZabqeN5gfQWp+MzgsiYd0aCVn0DZJXyS9pnS4=","refDocId":"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU="},"d3636e9f-6dc9-4d49-807e-470d5c3ba1ef":{"docHash":"aOgjJs1BbnZyZmkSDQuxpYNBipXPeXEwtPXJX/1AB8Q=","refDocId":"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0="},"8dca0a45-c049-4672-89c6-717824cde823":{"docHash":"oA9siYdD1xpu/+KYbf8AR9+I+Js/xkm239AJ0jXdt1U=","refDocId":"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU="},"00d0bebb-2b8a-4447-95bf-4ffc00468879":{"docHash":"dua/yo+zG153Qf/dcwtZtmvmoH2ZrWZEydTQnH+8iBk=","refDocId":"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg="},"832a4700-4e13-460f-adf4-e1d4067423c0":{"docHash":"QpQmjuWdXoY1+dn5PHshaZFnOT/CU6tocoYOKIMnQv8=","refDocId":"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno="},"8334e940-e466-4c77-b188-db831b9da067":{"docHash":"1vAjktMRwDxIJcRMCdlJBy9GQFwsX//on5UKOVztZwg=","refDocId":"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8="},"183e48ce-91af-46f6-85e0-ba97ddeefe8c":{"docHash":"goDKXsfPXAqSxFBA2Voypb5GQFIM1szx0TjGlFYU7FY=","refDocId":"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc="},"d13bf743-0c3b-4bd9-8c87-1e12e76e2396":{"docHash":"ZWTJoDYrJnx6ZoVp3fc/R7fvKg0wZHNlxFqCEdf9O8g=","refDocId":"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc="},"81984f19-980a-4dd1-9b7e-0dd77969c178":{"docHash":"eDR+COiswqtrGDqvptJxLzaFRVMv9kNgXqbAJBRBejg=","refDocId":"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI="},"cd473bb0-b02e-49be-b9fe-0e7ce7e7f3c3":{"docHash":"i9y/zFceB0LiCqlTDoynILrhG0hJtfwmKt2Ej/THUqE=","refDocId":"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU="},"5fdbf467-ae4b-4a32-9597-365289978e55":{"docHash":"kDBra96fxDLbIV0i8q7WQz0Vh9YhlpeXU1StGavP7p0=","refDocId":"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU="},"cd0a5739-8795-44bb-aa87-dba6e2bd006a":{"docHash":"XLoBX+9RgJ0SPzy/cp0o2Zc1/WAHF15f4KVIhetsP+A=","refDocId":"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0="},"38828114-fd5a-4134-877a-2f9a0311da60":{"docHash":"kG+cstuq4Rl91YUUc6yPZdwVwGlmfXWQga/OHkwNiX8=","refDocId":"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4="},"542a7092-adfe-4125-8247-3ae829b91ed4":{"docHash":"/MuA5t7/YNCK9HF5q9idMf1XxBsRmJ40VLPJb9Hv9QE=","refDocId":"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg="},"0bdb5241-980f-4812-b12b-060c5a798863":{"docHash":"DbTFvhyWLcuh7Qx7IDLV4PhfVbQ3h1Rvk/O8/aE6gAQ=","refDocId":"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0="},"60318c43-37b0-4480-a2b4-68f143b1e988":{"docHash":"Am+W7K+Cm1pmo7+3VmSOcQnemlYWK2Y3lkLePEYhIH4=","refDocId":"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk="},"f9aaf97f-ac08-4a2a-bb84-463d7e41165f":{"docHash":"JBGwYsgD2Bvt5qQ0msk0MxSP9gkdELRx6ux5VwXe808=","refDocId":"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk="},"6ecd5469-f1c8-4334-96f6-826e7ad06683":{"docHash":"s6G6J5lHYkPAIiX8KXhpJCuFTn1Xeod42H/AxsPlxVI=","refDocId":"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE="},"d7b0c74b-0fb5-417b-9b72-5b1db2978f2e":{"docHash":"nlOBYUMaKSgdu+k3CWh8sffB6Vc+maojTbyjGws0eGs=","refDocId":"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY="},"1ca74c22-5cdc-4adb-a5f7-4b20e422fb14":{"docHash":"F5RL7GQ2y4AeJUyfOttAr2Idb35gu37+mRZQKnKzZSw=","refDocId":"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY="},"45a335cb-6157-45e2-9fa8-f11fa59a4674":{"docHash":"gWEBh5N89BKV4kUXyr69EIiIMvCSElgNMYBU5QoquIc=","refDocId":"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I="},"00d4bea5-e48a-4c92-8b96-e686edf9b207":{"docHash":"Gy9c1975qaNLlZE9bVnnOiWcupLr6k3JPcBHgXDq0RA=","refDocId":"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I="},"5505da06-2729-4367-ac40-738eb00fcf80":{"docHash":"tjXkpRaD0TME9PY3pGwZP/uDsrA5wS3rE1PZXn/U9qU=","refDocId":"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE="},"aef0e372-6e25-4565-9238-eeb36a1969af":{"docHash":"Ic2C61k23D/yKqFJmM/HcY69eYJiUZwM7Np3vD8M7Fc=","refDocId":"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE="},"dec6f4a1-aea4-4886-b21f-a9340116eb9b":{"docHash":"mLAWgGb6L5sIljg414ptil6Tf4cV+odGWjkGaTGe+Zw=","refDocId":"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU="},"da6fd213-0164-4f27-89df-caf6f2d89d55":{"docHash":"A58EckOJ+OpUgvmIClZpjGedQvtOhpWrsBZk6hvFvKY=","refDocId":"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ="},"2810d80b-4359-4921-a2e8-a3a9de4351d3":{"docHash":"h697iUsRPITZI5Cxna9cysgnSzOZ5VE38dp/sdupWdo=","refDocId":"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ="},"104683a2-1e80-4ad7-ab2f-e6b9a6e04294":{"docHash":"VD2cONwZE5GJsoBnSfhOvKTk5A/J2ioQkNlb3uU5E/s=","refDocId":"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4="},"db9b6242-711b-4310-afac-056dfc67a4ba":{"docHash":"//ghT8ESoQYrQp0jVy6pwMDTw7B+xQq/WnigKazw5Rk=","refDocId":"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk="},"2bee2348-1517-4ab9-82e9-e84598bf5163":{"docHash":"nzlcbkAhoyOqvwH+O+0BTbMzbh3NcRiHmNy35ruStH0=","refDocId":"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk="},"f7ee7519-6f46-435d-b346-d2a97e4dbe89":{"docHash":"ep84u2Sdoh6+q/Hk3ciBWrgQrWMnK656yXqxvICGc5I=","refDocId":"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4="},"f7f7a2d6-1f05-4b22-ad42-b906a1dd246c":{"docHash":"dOmx6F3lSYw6hBBwc3A/WX7A5yglYcAdYhyWzLyZ184=","refDocId":"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4="},"f772b783-95f0-4961-9ca2-6e6e96b37544":{"docHash":"Cs4DNfR40JKAclrIPT4PdF6Daag3Xe7SItLxId19U1k=","refDocId":"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw="},"9b28fa33-65f8-4b1b-b6a4-7ffe08db6654":{"docHash":"jkHi29/Q5fgamcf3drmHrtPeZWOHnjFIP6M4L4AFbqo=","refDocId":"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw="},"a15aa0c3-c3aa-44d9-98e2-f9d7e77e7d08":{"docHash":"1Y5if6GUM46joCwBdLg3NpqZFZ+hvfnjx0LBXhdMXK0=","refDocId":"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s="},"d1d80bd8-80fe-4d1f-a7b6-c7df284c0b09":{"docHash":"3NJw3FP2VuxmwCeNFY4EukseiStm5q6Ybv2qwxcPMo8=","refDocId":"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s="},"b36c200c-3f93-43ed-b95a-3ca8eff37fcd":{"docHash":"NEliUiaLnheWE3sPAOlV0OgrqlytlvAEn0Ywi01UxCk=","refDocId":"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k="},"d92626cb-eec7-43f0-b8b3-361c487b538d":{"docHash":"lxBlOKCmshVBxKrvLp/jXkDsBum/dOKQYdJ5Bh2nW2g=","refDocId":"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k="},"514ea394-b563-4da4-b7da-5167e0014c13":{"docHash":"k2asBx4SkMJdq47RBIjSmteyE99IdqTynlJ10ZB9cn8=","refDocId":"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ="},"b7b42ce6-27dc-435e-b82c-9ebed0001cbf":{"docHash":"hoVLFLDWdz6FKj2BHafml3hoCAck9qsSpWwcLdBHlDw=","refDocId":"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ="},"2c0b1261-78f4-48e0-96fe-fe52b4516950":{"docHash":"efn1tx9wcthiMCQiHGaHgRkzfuvbiVvYkrHvhsBpHK0=","refDocId":"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss="},"7c36a6da-8e6a-43a6-b599-c233615141ba":{"docHash":"tjXZq7x9wXmFLRaJNRVnewJnWnPmZJ2fRiGrcJLZkT4=","refDocId":"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc="},"c9a0495e-03c2-45dc-b249-a8ff5c2edb42":{"docHash":"otykmWG+n9cPC+Khje9q8GFvKTvdyWJRK2LQI8LeSUk=","refDocId":"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8="},"166119bb-1890-490e-b2c0-a9596bdbe07c":{"docHash":"kRX8XrrZQzYncwXwjOr0HKg2z1Lrn7B6VvKhrDyA5QU=","refDocId":"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I="},"ad9ff015-bf6a-4f8e-b864-0a3ea3f21b7d":{"docHash":"42MIvMWVDckxd4RR/gJWAUrlk2u39aNa6qtSGQiP8gM=","refDocId":"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8="},"2c0deab9-40df-4eb9-b0c0-7574f53436f6":{"docHash":"XrhQsnmoRZ5DGLOf+xd3NMcpSbG3XElZUPw/t+NeF8A=","refDocId":"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8="},"72973ca0-5ff8-43c8-bc2a-18baefc4c7e5":{"docHash":"Ymp8NCKlDIk42jPGtsMb9Pe61+4Nw0uRWSMTjGx+aQk=","refDocId":"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM="},"92742760-d425-4f99-8977-b3510119cd7a":{"docHash":"9ZmkUQTWjmmj2Vi7M2LtJCYc2XvkiWV0u4Z4oMg6cPk=","refDocId":"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM="},"6cafb0cd-49bf-436c-a34b-0ce3555f272c":{"docHash":"vr+WDEuZUR6J2MocwfwwXs1cUHDmxrgco0GzQs8idUg=","refDocId":"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8="},"7d509185-1186-4b8d-ba60-58f08b06d8a0":{"docHash":"5kli4Cu7CODM2Cg1fR+p01E4V8ocLg3JPE9lh7f9XtA=","refDocId":"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8="},"b23ed2ac-2365-49f2-9c91-ddd49399fa58":{"docHash":"kMIznz6GjSGswY+fQOtSflmnkMJ1cXlPFMQLsVg3bik=","refDocId":"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y="},"dffb0b09-100a-48b9-9c43-e9c72e847b2f":{"docHash":"e1Y8v2jb+7dxTGO22iADKhTsrxvfX1Yenhm4ve2kaRQ=","refDocId":"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y="},"ee56f081-1108-46b4-b78d-416698f341dd":{"docHash":"xT1/OwwKZLE19lcXWvtPWv9XsT5y3xHWAPm2VFA+XyU=","refDocId":"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA="},"1c304d1f-bde9-4f38-9dcc-d5c470632545":{"docHash":"qGY0x6a/03nfZWbvz+72UBt9k9WyAQ4dSpK4BIVQSvQ=","refDocId":"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU="},"98b4ab87-9c6e-410d-b860-c8480b72d757":{"docHash":"09CJggjs/t53UhO/5KP9nNui6k5P1N4Ri93iq9yFosM=","refDocId":"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU="},"5dc200f8-16a1-4618-b963-2cd9ea30a518":{"docHash":"knoNMwL5bxXoeGqlwFuz7ypNmW6FJOKG9LIS4GGMNZU=","refDocId":"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI="},"21f0f3ee-8db9-4448-8e9f-033a51a1cbdc":{"docHash":"O6rAy16gAoHa+dGxf2N/mNifce37hR+Uc8/YKLHi8U4=","refDocId":"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU="},"ee62a491-3bd5-4382-92c0-ded1560ffc63":{"docHash":"TB/hpK/3tVWucYACPdeEW06jLBzxtbqjfI6XbNZnvdk=","refDocId":"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM="},"8d16253c-9163-4334-8236-b83d4c38209e":{"docHash":"h/5qiMknB4W3+JP/pHywLHkdRsZMiqposN5oc71UGQI=","refDocId":"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE="},"b9520915-4220-45b7-87b9-4d7161dae506":{"docHash":"UGVn84EAC7ReEi91RWV1YD6SrVfcQ3KuKO5ot/Z5mWg=","refDocId":"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE="},"06a733f4-0eff-4936-8661-4913f6c4e9db":{"docHash":"jYP36IUsWw3okOBvA2xtafmunvEc4+EaeHnbYvWBOp0=","refDocId":"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE="},"c970f46d-4279-47bc-8682-53d4dddba83d":{"docHash":"Bqv+tTTy/yE5IQWg+p8ZiVQ0f+8pzsWT1o0VHxUH3Mk=","refDocId":"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE="},"4e7b7c94-9dbe-441c-923b-42c446a798bf":{"docHash":"CAbupJmMT3y+oKGRuinc7eDBEwSmeFzSV1FsDhhb1Rc=","refDocId":"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM="},"d94515d7-12f5-4571-bacc-6f936baefba2":{"docHash":"j15YBGHXKZPBG6MfHyb2aKtrlIf5e5yIeDULiMgzrhM=","refDocId":"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw="},"a2e9d125-ffda-4f91-914e-429c1f8b275c":{"docHash":"99VttM8/CLLhISEEbMnQawLN4IqVPZm+gXh3Le0wH5Y=","refDocId":"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw="},"c6ff9337-2ff6-4408-afb7-5168bf2b78b3":{"docHash":"3kXomifzxXkv772URd2TDvrnnIpMYpaIovEbHx/eRHI=","refDocId":"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI="},"28a0b424-6fed-4df8-be65-d397f05538fe":{"docHash":"n6JFgcR4EzxPIlUmjB6fTcY2jo4coF3RDNGniwROnEU=","refDocId":"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI="},"0964e824-d044-42e2-bfe5-6af8e3d2f92b":{"docHash":"88fBEcd/33m9e9WjnX5lR8R7r/tDHOiKBHp7YKt7qCY=","refDocId":"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0="},"076da3f8-85d4-4ae2-aeb3-653214b9b9f4":{"docHash":"VTl4u8z6BJaDH3fTOFiD869PXBUhd9aENe5+XzkbY48=","refDocId":"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI="},"4b4d5ab5-2cce-4942-87e4-28460bcbba9b":{"docHash":"D9fDdIKA0mIcFCEXomiDsn6MExJTVqnW26/hsDpK0I4=","refDocId":"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y="},"b615930e-2a93-4de8-ba8e-0ab8fb84cbce":{"docHash":"/njJCJuoGwiL/V0rigBzH0WbL222c6vjFkxc43AQXVU=","refDocId":"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c="},"2144f510-6a13-44ef-8e19-654e6f60ba90":{"docHash":"V0ZATMot5/D3mAd8Usd9E4sM8BlbZ3TCSR4LFPerAbE=","refDocId":"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c="},"9b48335b-946c-4a5f-8f94-05d25abc83b1":{"docHash":"NgtfJEKklstfbKgwg+ghtB2OIKBBgzlalidgdINdBaM=","refDocId":"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw="},"d4ca2a64-a530-4e37-942d-e96ff8dadd97":{"docHash":"lfshXitTatAU+P3YthOXAJiqUXXOV4/XqOwssB3GYQQ=","refDocId":"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE="},"240f4c7f-5802-4aee-bb66-574700f27534":{"docHash":"sFprTdNWtp2aWzFN1tTzjd4OCz6Uwx/2d+lh6eLXULA=","refDocId":"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY="},"8ce09345-dcf7-4383-a005-89d8500f8ef2":{"docHash":"uNaG4/O2IsfOoEdVe0qCCut42eFeu+7DN5QH08/LmtY=","refDocId":"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY="},"830be76d-92bf-4964-98b6-2403d6608edd":{"docHash":"TPNviAxqueoD+lM+tGKrEZmJLQBUdqMLefFgfJL9OiY=","refDocId":"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY="},"35b5eb63-e313-4402-b2cf-b6d0b6237a1b":{"docHash":"hha9U1kLK4NgrOA+L0ssh7W4rTwJdMZDUNfFgEw10ck=","refDocId":"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A="},"058dae20-cb74-42f4-9ce9-66c6efdd23a2":{"docHash":"HXG4F9JBvZciUJOWGTDpRBKbmotb9d7+weKVqUYpiZM=","refDocId":"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg="},"e930ab16-5676-4535-a079-92f287486dba":{"docHash":"m+cF03ypLTrN+RIXQoDcY77KBdRpbv92pcDAjkX5CVI=","refDocId":"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY="},"df7ff2f6-808e-4184-9b42-bb3cc8346780":{"docHash":"oDbpgYWpPPmQJl0ztgeKtdkQW4Y9KEaD13f6NSIQpVI=","refDocId":"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY="},"7c0333a9-1879-4919-be20-0776c1626292":{"docHash":"WQJJCyhPq+mRQx6Q452sVYFNmMmh9IuGDIhWV7zdNHE=","refDocId":"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo="},"9b210bca-e19e-455b-b391-8752eb856397":{"docHash":"kGhZSjhjIpJ8l8g4dxC9/s9kwo2oa4fLd62OoowRasg=","refDocId":"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo="},"cd606310-60a2-4a63-82db-d8419cb37560":{"docHash":"0HYPCnAT7a3SLXN05GSb0xsOWdZ5mFE7qIQ6z8YEDZU=","refDocId":"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0="},"10f1d26e-0741-4189-bddb-6974cbe73d36":{"docHash":"/u9C4r1xIt+BconMnFK86cl33mHvJg0ffzCZN65w0aA=","refDocId":"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0="},"56600b2f-ce2b-4b69-bafb-9c9c5750eaf0":{"docHash":"L6ff4nNYZ/EFBuzE9Xwe89FBXHCiPN1LPcHjnWgnexM=","refDocId":"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo="},"45aec5b0-1b1b-4e19-8295-8bc02d37158a":{"docHash":"DXgbm7U4tEL+92PdUYQcOi6XJBTyH7dxoi533b7cCGo=","refDocId":"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo="},"4330931a-d821-42c6-908c-a0b560e8af51":{"docHash":"I6NekowNdHv+zUHXMKWEHptYqAscAlxNWsbKyNrWZig=","refDocId":"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY="},"b49bb85a-b701-41a5-a084-60d50bc74057":{"docHash":"9hcSyVaBfEZfVwl8/Mkf3jeu9scEHiRNQ3wN/xrETXM=","refDocId":"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY="},"450f323a-1a10-45a1-abb9-b0ad78ee8165":{"docHash":"y0zR/+rY+kEZW2qLnk1PXlrmniQD2hJyz7vQ0dWyjs8=","refDocId":"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA="},"d623b610-89ad-47a8-88e9-f77b81e581c2":{"docHash":"cQ+qFowYS+WrQ2tp6IHs7D/lX72QeUhcAbZ/H7Gt6Qc=","refDocId":"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA="},"34a60fe0-26d6-4f9d-81f0-dd18aecd24c2":{"docHash":"Vs7/eL8y72+hrsmD/tg2W1RaXuIyilBpdqaebxeswgw=","refDocId":"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8="},"240dc09f-0070-41d3-9483-488f1c67c82d":{"docHash":"3tG5Mfpp0LVZD2IJQAzFwJOQq2et0Lz0Ih6V80wdRH8=","refDocId":"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE="},"04cc5ec8-d1c1-4a2a-b281-f2b6c2f09312":{"docHash":"PmbNkcUf5Y+92RGjaLMtU8BA51Uw4YLvzCIJhPGMTp8=","refDocId":"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE="},"4e4b5308-adbf-41b9-8398-ba4496383d12":{"docHash":"L69oTQSgw1c8qVR/qRMfDMu4xm3ZNBDBDgRkCDXV6Tw=","refDocId":"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM="},"bc493aab-384c-4bfe-8c67-0005e0538bd2":{"docHash":"dSpB8hIePAnWwhXLNhArhmaan25XNzqHoNh/G273FGk=","refDocId":"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g="},"0921754f-bfba-4de5-b528-f9f790c29c4f":{"docHash":"CQkMQT3uCyU2mhxSNYEq+Zy28SXkqHnu1sjcKpnF65k=","refDocId":"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68="},"2e330c73-780f-48c8-911f-0b16edaec899":{"docHash":"v6eY+HiJBHaxrlIh6DPy8612HIZdqK+yWkrRzz5VNQg=","refDocId":"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68="},"b223e6bf-e803-4dc3-9814-2add93819723":{"docHash":"a+CLH3UV760uf7+PzmcFVe1AVnuIXPau0T2Af4WKOyA=","refDocId":"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU="},"433de789-5490-4bd6-8131-ed9547de2cf3":{"docHash":"ctaGNBEc1grQgPc+w03ylYoR2LjGZSG58AAcUEKxWvc=","refDocId":"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk="},"67466221-6728-4db9-a30f-0847851c5895":{"docHash":"3nxJi7/7I7EptEQ9NVd3QWM4OmCm2CO0bYF2PN/of1A=","refDocId":"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U="},"9c77bb0b-f7d9-4cff-a928-ec2460bec4a5":{"docHash":"29MroDxHFFQouGaZn4CHQje7uuSLLY/Ff9RRcQHiWcs=","refDocId":"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U="},"724e9f9f-c924-483e-b957-32ed2479e971":{"docHash":"U0VZkOCs+z9joXsl/UqylP7mJtUw8SK0NvWhKkdRt9M=","refDocId":"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0="},"10e4a941-e34a-4b56-a7a9-22a2d37258b7":{"docHash":"Y5FAbP3pSojGyVEv5XzmTGPYnHJaFnWjKhhaOWbHAAo=","refDocId":"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0="},"5f5d4886-9542-43ce-a01a-4f717cfbb863":{"docHash":"q12MDkTFZ50hwW70+QubVCslM5NlPFN8hjtd5PUOqvE=","refDocId":"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w="},"99ee810e-398c-4b7d-8c6d-8193738433e7":{"docHash":"WwcFNsTO05/289baRCrtFP7h+lfHCCbmI04wFi9D2kU=","refDocId":"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w="},"16efbc4d-8a31-408b-8b3a-d9f963368406":{"docHash":"SBrZcWg0n45350YEQcG3H88dXcjoolWffDM9zhPPTjU=","refDocId":"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA="},"95354c36-ae8e-40a0-a1a2-cdad7d9001ec":{"docHash":"cFuTrdqEsS4OkWoZT7kg4MKr4avq4TbqT+WPFo3CHJw=","refDocId":"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA="},"24060caf-93fc-4060-8f35-246de1153287":{"docHash":"WGyUzz7QmjyBehoYeLoEt3DRXfJz2KIEiELva6yGJn8=","refDocId":"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ="},"5f630e83-9acb-46fa-8783-b9634dc84030":{"docHash":"IaWq3gMhgr9eSvAphz9JyARIqRmbAhmimmBHMwQBKJ4=","refDocId":"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo="},"e7bf28b2-f8e0-40a9-8ea4-c44e1a78a8ea":{"docHash":"yw4UU6OtPqAcIofdMj6aFaaVW5KQrs2cxBfTT5utrh8=","refDocId":"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo="},"60195c81-ac7a-4e5b-bf50-27709a477af8":{"docHash":"q6/bw0/wtfZVXiWLQV5O2LEizKJ9yJlUt/sgI9tXIT0=","refDocId":"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY="},"10011a19-a59b-494e-ba76-4612fad55235":{"docHash":"dss+Yq1sfY9b5DEeloYiEwcJPgv11eWap6C4Jklpz2U=","refDocId":"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY="},"e398ba17-cb21-4c11-af5f-970ce90eb854":{"docHash":"YDqYbiy6nzabLW3LesYAZaEFdS4345XMz9hWLw0Qh8U=","refDocId":"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o="},"86eb0be7-a722-4c6e-b318-c2d263e1741f":{"docHash":"POQrn9OInKL5fovQ9GSspwS/hi7nfp9r37csuAlIStI=","refDocId":"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw="},"e282cbd4-4d65-4c87-a63e-8c7db181dcbd":{"docHash":"CtiV739KmJS+qL0o8vkhaoZ0TFNskc9Zsw/rt+S2jz8=","refDocId":"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM="},"f760db03-8d0b-4d2d-bfde-423d15be22cf":{"docHash":"BhC/YwM7ueBwvyxTrvLcxdvp2M6ZiHzMctZ4+jxI2XY=","refDocId":"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU="},"8046f1db-3e3c-4305-8085-708c49acc942":{"docHash":"ka4EoqD3cP6TSIk7UyXpdYEzySEm4F2XXftAqE+zS10=","refDocId":"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0="},"45c084be-3210-4f20-a3ef-95f2d768aeb9":{"docHash":"IeH4my+4P+DqDGp8KNMGKikZm0RaxyfyNIYJgtSFVyw=","refDocId":"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ="},"31eee4be-ee09-4360-af8d-47c1e4b90dc2":{"docHash":"cvQVpYJfbbPNx+ermogFynY69fa7yIeHboK1rHwj9wI=","refDocId":"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE="},"b14eb0f9-7586-46cb-9140-97137e4d2b46":{"docHash":"rN5F3qz1esPEhsi4LF2iJDEzQvuNvKANvsaHjqP3siE=","refDocId":"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug="},"1af9a8be-32ae-4b16-a158-909f81321b7c":{"docHash":"yomcO+OcTfRILcraXy212koBCOeBu5vP3k3bKsABLCA=","refDocId":"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw="},"f2e8340a-fe51-4162-9ff6-14da579d58d9":{"docHash":"1xcV4S8s34xQD8yfRf0zl8RkVcQmU76bOUtjKEoCxPc=","refDocId":"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw="},"f075f47b-9388-4d25-9d25-7d6c2b77b6eb":{"docHash":"O3keuQia/GtAkQiNB+GeqdqZ4/hBujdQ580wBh0Y8Ac=","refDocId":"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg="},"44cb540c-78fe-4071-9430-2c4750ccbf4a":{"docHash":"oApECtMhQr7LWcgWvegEZjCg3+yW7RWbizToJwFS3lU=","refDocId":"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M="},"db462bbd-22c7-4672-9f4f-f75e2774c6a0":{"docHash":"U7QCuP3aOcIzXwS+Ih7xw0qf1ypCI5aNPLygllZlxzY=","refDocId":"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M="},"b3a5321c-2eaa-4800-a129-1d9b59608d60":{"docHash":"2ZMts5XyVjv+XVAev1tqmCgLmUJwQwQuzSfOUdmHl8A=","refDocId":"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE="},"a845a58b-5ba9-47bc-a73a-d4e40c45aae9":{"docHash":"M+Oq0yBgxv90gJKV3p+gDek9QtqLYseLe60X1PpaCOw=","refDocId":"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk="},"a499d3c0-26e0-4225-8788-843ef75524af":{"docHash":"/NsbfX18Wh5+q3KnnAJt6omYbzSQQ95Ko7/5S0sXiyY=","refDocId":"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0="},"2740f4d2-2c33-4dbf-92bb-1e1e5dbb34ab":{"docHash":"iGoZ2zOH1MLZUSTIjrS4VLxKMmg13/lr3AH4UbVOVTo=","refDocId":"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0="},"281c8653-b2ed-4269-86c1-faa04595b241":{"docHash":"yeUrWpqOLrWtd9QBYKDa1+FES9U+SdpjENR7oIiSwTA=","refDocId":"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k="},"21f04604-a5f4-4069-b322-c6d31d15fd3f":{"docHash":"SU6+M5kg4GblHZJS/AabXdonKxaNdnhKqaBJWnNjgMc=","refDocId":"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg="},"95717588-040f-4c40-93f3-2eb6e1394455":{"docHash":"KNVwxXTctaA41hKNGrxvP2smQjCFeOB5FlgkAD00hlk=","refDocId":"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg="},"d02a17e0-324f-4ffb-89e6-9457121b5d22":{"docHash":"yy+X+rrcsL7oov8SGh5SlTfyAbeUvhY9GeEhFJZS66Y=","refDocId":"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc="},"f3172ab1-d713-46e8-8f54-f431f0cf89c6":{"docHash":"C3096gQ67TEKku+kg/dxJX3r44Yj+w8W33JO6vr0tuI=","refDocId":"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM="}},"docstore/data":{"frcCV1k9oG9oKj3dpUqdJg1PxRT2RSN/XKdLCPjaYaY=":{"__data__":"{\"id_\":\"frcCV1k9oG9oKj3dpUqdJg1PxRT2RSN/XKdLCPjaYaY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"E4DK+l2P7nvw5uqGFI76nawW8ADkXSvaL72FFLQSAZs=\",\"text\":\"\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg=":{"__data__":"{\"id_\":\"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"o02IrKW+80Vpb+k9fqyYebOmN2ShOhJAI16H4tO8+EA=\",\"text\":\"\\r\\nInside the  \\r\\nAndroid\\r\\nTM\\r\\n OS\\r\\n9780134096346_print.indb   125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w=":{"__data__":"{\"id_\":\"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"lQAvzSXiVTmOs+RmhHmGHjig57l98wFKDuEqebigL6g=\",\"text\":\"\\r\\nThe Android™ Deep Dive Seriesis for intermediate and expert \\r\\ndevelopers who use Android Studio and Java, but do not have \\r\\ncomprehensive knowledge of Android APIs and want to bolster their \\r\\nknowledge of fundamentally important topics.\\r\\nEach book in the series stands alone and provides idioms, frameworks, \\r\\nand engineering approaches. They provide in-depth information, correct \\r\\npatterns and idioms, and ways of avoiding bugs and other problems.\\r\\nVisit informit.com/androidfor a complete list of available publications.\\r\\nAndroid™ Deep Dive Series\\r\\nMake sure to connect with us!informit.com/socialconnect\\r\\nAndroid_DeepDive_7x9.indd   15/21/2021   3:45:50 PM9780134096346_print.indb   225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8=":{"__data__":"{\"id_\":\"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1he7PZ0pIMljsd5LmFJ0ZX0dgg/kLkVkcPv+ghPi5EM=\",\"text\":\"\\r\\nInside the  \\r\\nAndroid\\r\\nTM\\r\\n OS\\r\\nBuilding, Customizing, \\r\\nManaging and Operating \\r\\nAndroid System Services\\r\\nG. Blake Meike\\r\\nLarry Schiefer\\r\\nThe Android™ Deep Dive Seriesis for intermediate and expert \\r\\ndevelopers who use Android Studio and Java, but do not have \\r\\ncomprehensive knowledge of Android APIs and want to bolster their \\r\\nknowledge of fundamentally important topics.\\r\\nEach book in the series stands alone and provides idioms, frameworks, \\r\\nand engineering approaches. They provide in-depth information, correct \\r\\npatterns and idioms, and ways of avoiding bugs and other problems.\\r\\nVisit informit.com/androidfor a complete list of available publications.\\r\\nAndroid™ Deep Dive Series\\r\\nMake sure to connect with us!informit.com/socialconnect\\r\\nAndroid_DeepDive_7x9.indd   15/21/2021   3:45:50 PM\\r\\nBoston • Columbus • New York • San Francisco • Amsterdam • Cape Town \\r\\nDubai • London • Madrid • Milan • Munich • Paris • Montreal • Toronto • Delhi • Mexico City \\r\\nSão Paulo • Sydney • Hong Kong • Seoul • Singapore • Taipei • Tokyo\\r\\n9780134096346_print.indb   325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=":{"__data__":"{\"id_\":\"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"8kiCkUX6g9gvMUP/Qm56aRLxcQ07eJjVF815ccFeVpE=\",\"text\":\"\\r\\nEditor-in-Chief\\r\\nMark Taub\\r\\nAcquisitions Editor\\r\\nMalobika Chakraborty\\r\\nDevelopment Editor\\r\\nSheri Replin\\r\\nManaging Editor\\r\\nSandra Schroeder\\r\\nSenior Project Editor\\r\\nLori Lyons\\r\\nCopy Editor\\r\\nPaula Lowell\\r\\nProduction Manager\\r\\nAswini Kumar/codeMantra\\r\\nIndexer\\r\\nKen Johnson\\r\\nProofreader\\r\\nDonna E. Mulder\\r\\nCompositor \\r\\ncodeMantra\\r\\nMany of the designations used by manufacturers and sellers to distinguish their products \\r\\nare claimed as trademarks. Where those designations appear in this book, and the  \\r\\npublisher was aware of a trademark claim, the designations have been printed with initial \\r\\ncapital letters or in all capitals.\\r\\nAndroid is a trademark of Google, Inc.\\r\\nThe authors and publisher have taken care in the preparation of this book, but make no \\r\\nexpressed or implied warranty of any kind and assume no responsibility for errors or  \\r\\nomissions. No liability is assumed for incidental or consequential damages in connection \\r\\nwith or arising out of the use of the information or programs contained herein.\\r\\nFor information about buying this title in bulk quantities, or for special sales opportunities \\r\\n(which may include electronic versions; custom cover designs; and content particular to  \\r\\nyour business, training goals, marketing focus, or branding interests), please contact our  \\r\\ncorporate sales department at corpsales@pearsoned.com or (800) 382-3419.\\r\\nFor government sales inquiries, please contact governmentsales@pearsoned.com. \\r\\nFor questions about sales outside the U.S., please contact intlcs@pearson.com. \\r\\nVisit us on the Web: informit.com/aw\\r\\nLibrary of Congress Control Number: 2021940286 \\r\\nCopyright © 2022 Pearson Education, Inc.\\r\\nAll rights reserved. This publication is protected by copyright, and permission must be \\r\\nobtained from the publisher prior to any prohibited reproduction, storage in a retrieval  \\r\\nsystem, or transmission in any form or by any means, electronic, mechanical, photocopying,  \\r\\nrecording, or likewise. For information regarding permissions, request forms and the  \\r\\nappropriate contacts within the Pearson Education Global Rights & Permissions Department, \\r\\nplease visit www.pearsoned.com/permissions/.\\r\\nISBN-13: 978-0-13-409634-6 \\r\\nISBN-10: 0-13-409634-7\\r\\nScoutAutomatedPrintCode\\r\\n9780134096346_print.indb   425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY=":{"__data__":"{\"id_\":\"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"fV4YIo8jSXdpe8GZn+AepjHW3AGJ1Rp7FigbGuneQAk=\",\"text\":\"\\r\\nv\\r\\nBlake: For my siblings: Rusty, Annemarie.  \\r\\nMercy, and Roger. One!\\r\\nLarry: For Aidan and Ian. Don’t ever stop  \\r\\nexploring and learning.\\r\\nv\\r\\n9780134096346_print.indb   525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ=":{"__data__":"{\"id_\":\"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"l5+SMPuAXFMUKDa5bKeKB1eC/OlU4vf7tQZIiG2BCYE=\",\"text\":\"\\r\\n9780134096346_print.indb   625/06/21   6:27 PM\\r\\nThis page intentionally left blank \\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU=":{"__data__":"{\"id_\":\"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"2IiAhk/vwpG2Fm+71fXxMPK22ZZ01EnjUrgrjWIcRQA=\",\"text\":\"\\r\\nContents at a Glance\\r\\nPreface xiii\\r\\n  1  Why Android? 1\\r\\n  2  Booting Acme 9\\r\\n   3  Getting Started 35\\r\\n  4  The Kernel 49\\r\\n  5  Platform Security 67\\r\\n  6  System Startup: Installing and Booting the System 93\\r\\n  7  Android Startup: Dalvik and Zygote 115\\r\\n  8  Getting to Android: The HAL 133\\r\\n  9  Getting to Java: The JNI 153\\r\\n10  Project Treble: Binderized HAL 183\\r\\n11  Creating a Custom Binderized HAL 199\\r\\n12  Clients for a Custom Binderized HAL 219\\r\\n  Index 233\\r\\n9780134096346_print.indb   725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM=":{"__data__":"{\"id_\":\"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"4yL7XqrpNfQqU70eFZfqBrubAvpE4Iu43F4DMuCLYqI=\",\"text\":\"\\r\\nContents\\r\\nPreface xiii\\r\\n 1 Why Android? 1\\r\\nAdopting Android 1\\r\\nFull Stack 2\\r\\nBroad Acceptance 2\\r\\nBeautiful UI 2\\r\\nLinux Based 2\\r\\nPowerful Development Environment 3\\r\\nOpen Source 3\\r\\nAOSP and Google 5\\r\\nOther Choices 6\\r\\nMicro-Controllers 6\\r\\nOther RTOSs 7\\r\\nSummary 8\\r\\n 2 Booting Acme 9\\r\\nSetting Up a Build Machine 10\\r\\nDownloading the Code 11\\r\\nRepo 11\\r\\nForking the Source 15\\r\\nAndroid Version Selection 16\\r\\nLocal Mirror 17\\r\\nHosted Git Repositories 18\\r\\nTree Snapshot 19\\r\\nRepository Commit Pinning 19\\r\\nExample: Local Mirror of Forked Repositories 19\\r\\nBuilding an Image 24\\r\\nDevice Tools  27\\r\\nfastboot 28\\r\\nadb 29\\r\\nFlashing the Device 30\\r\\nSummary 33\\r\\n9780134096346_print.indb   925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU=":{"__data__":"{\"id_\":\"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HrjvaDTXVD4qEcj4NXnLXKbVo7SI6Mn6BlvV0Y59zhY=\",\"text\":\"\\r\\nxContents\\r\\n 3 Getting Started 35\\r\\nPutting Android in Its Place 35\\r\\nHardware 36\\r\\nThe Linux Kernel 36\\r\\nSystem Libraries 37\\r\\nApplications 38\\r\\nThe Android Framework 39\\r\\nThe Android Service Model 40\\r\\nExploring the Source 43\\r\\nOther Sources 44\\r\\nWhat’s in the Box? 44\\r\\nSummary 48\\r\\n 4 The K                ernel 49\\r\\nThe Linux Kernel 49\\r\\nKernel Process Management 50\\r\\nKernel Memory Management 51\\r\\nThe Android Kernel 53\\r\\nAndroid Kernel Features 54\\r\\nBuilding a Kernel 62\\r\\nThe Build System 63\\r\\nDownloading the Source 63\\r\\nSummary 66\\r\\n 5 Platf              orm Security 67\\r\\nTypes of Security 67\\r\\nVerified Boot 68\\r\\nOperational Security 69\\r\\nAndroid Software Layers 70\\r\\nThe Process Sandbox 70\\r\\nSE Linux for Android 72\\r\\nSE Policy Definition 73\\r\\nAndroid Permissions 76\\r\\nFile Systems 79\\r\\nUser Protections 82\\r\\nCustomizing Permissions 83\\r\\nSample Custom Permission–Protected App 83\\r\\nSample Custom Permission Client App 88\\r\\nSummary 92\\r\\n9780134096346_print.indb   1025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc=":{"__data__":"{\"id_\":\"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"R6lcXelPHFCwF0o/QDOmSxRktRVND4vAA/a8hcPwyGc=\",\"text\":\"\\r\\nxiContents\\r\\n 6 System Startup: Installing and Booting the System 93\\r\\nThe Boot Process 93\\r\\nBootloader 95\\r\\nFastboot 99\\r\\nKernel 100\\r\\nThe File System 102\\r\\ninit 104\\r\\nRecovery 106\\r\\nBuilding a Daemon 107\\r\\nCreating the Acme Device 107\\r\\nRepo Again 110\\r\\nStarting the Daemon 111\\r\\nSummary 114\\r\\n 7 Android Startup: Dalvik and Zygote 115\\r\\nDalvik 116\\r\\nART 120\\r\\nART Basics 120\\r\\nHybrid ART 122\\r\\nZygote 123\\r\\nZygote Memory Management 123\\r\\nZygote Startup 127\\r\\nRuntime Initialization 128\\r\\nSystem Service Startup 129\\r\\nSummary 131\\r\\nCitations 131\\r\\n 8 Getting to Android: The HAL 133\\r\\nWhy a HAL? 133\\r\\nIs a HAL Necessary? 135\\r\\nDesigning the HAL 136\\r\\nBuilding a HAL 137\\r\\nCode Structure 138\\r\\nImplementing the HAL 140\\r\\nSummary 151\\r\\n9780134096346_print.indb   1125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8=":{"__data__":"{\"id_\":\"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"iCclMyASs83dxPauHbJyzL9bHxcsazfCaPON72CAtQ8=\",\"text\":\"\\r\\nxiiContents\\r\\n 9 Getting to Java: The JNI 153\\r\\nCode Structure 154\\r\\nUsing the Device 155\\r\\nUsing the HAL 157\\r\\nUsing the Java Native Interface 159\\r\\nExecuting Native Code 160\\r\\nJNI: The Java Side 161\\r\\nJNI: The Native Side 162\\r\\nA Java Proximity Application 165\\r\\nJNI: Some Hints 176\\r\\nSummary 182\\r\\n10 Project Treble: Binderized HAL 183\\r\\nHIDL Architecture 183\\r\\nhwservicemanager 185\\r\\nHIDL Services 185\\r\\nHIDL Client Applications 186\\r\\nHardware Interface Definition Language (HIDL) 186\\r\\nHIDL Types 191\\r\\nHIDL Services 194\\r\\nHIDL Clients 197\\r\\nSummary 198\\r\\n11 Creating a Custom Binderized HAL 199\\r\\nAcme Custom HIDL 199\\r\\nSummary 217\\r\\n12 Clients for a Custom Binderized HAL 219\\r\\nNative C++ Aproximity Client 219\\r\\nSE Linux for Android Changes for aproximitycl 224\\r\\nBuild aproximitycl into Acme 225\\r\\nJava/Kotlin Aproximity Client 226\\r\\nSE Linux for Android Changes for AproximityClient 229\\r\\nBuild AproximityClient into Acme 229\\r\\nSummary 231\\r\\nIndex 233\\r\\n9780134096346_print.indb   1225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=":{"__data__":"{\"id_\":\"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"st8EO88RB5VxyM64vhyMLiYmqsKsFxOQnAQ2KfklLp4=\",\"text\":\"\\r\\nPreface\\r\\nI started this book nearly 10 years ago. At the time, it seemed obvious to me that Android \\r\\nwould be important in the burgeoning Internet of Things (IoT) world. Both Larry and I taught \\r\\nthe Android Internals course for the great Marakana (later, New Circle). That class was so \\r\\npopular that both of us got to see a lot of the world while teaching it. I was certain that a book \\r\\nthat described the general process of customizing Android for a new device without getting \\r\\nbogged down in details could be a hit.\\r\\nOn the other hand, I recall sitting in the restaurant in Grand Central Station with the editor of \\r\\none of the books I co-authored (a man I very much respected) as he laid out comparable titles \\r\\nand explained in inexorable detail the chances that such a book would succeed. They were not \\r\\ngood.\\r\\nSometime later, my co-author on O’Reilly’s Programming Android, Zigurd Mednieks, proposed \\r\\nthe Android Deep Dive series to Addison-Wesley. The idea was a series of small, replaceable titles, \\r\\nnone of which had the overhead of a large book. If a volume became obsolete, it could be \\r\\nreplaced or updated without impact to the rest of the series. In this lower-risk environment, my \\r\\nbook made sense. It was green-lighted, and I started work on it.\\r\\nSomewhere around the time I got the first few chapters written, Laura Lewin (the series \\r\\neditor at that time) and Zigurd pitched another book to me. That pitch turned into Android \\r\\nConcurrency. I am very proud of that book, but it took several years to write and completely \\r\\nstalled work on this one.\\r\\nWhen I finally returned to this book, I was no longer teaching Internals. Cyanogen had shut \\r\\ndown, and both Android and I had moved on. When I picked up the book again, I discovered \\r\\nthat Android had changed so much in the interim (ART, Treble, and SE Linux) that each time I \\r\\ncaught up, it had already moved on. The book was nearly canceled.\\r\\nI had the great luck to have Larry Schiefer on board as a technical reviewer. When I finally \\r\\nconceded that the project was swamped and on the verge of drowning, our superstar editor \\r\\nMalobika Chakraborty suggested I take on a co-author. Talk about luck: Larry volunteered! He \\r\\npulled the book out of its hole, laid down some fantastic knowledge, and made this project \\r\\nrelevant again. I’m gonna buy him a t-shirt with a big yellow “S” on it.\\r\\nBefore you dig into the first chapter, let me offer a gentle reminder: This is not a cookbook. \\r\\nThe book contains code examples, and they are all available online. They have all compiled \\r\\nsuccessfully and run at least once. That, however, is no guarantee that they will compile and \\r\\nrun for you (though we hope they do!). Tool chains change. Android changes. Devices change. \\r\\nThings that work today may well not work at all tomorrow. Our intention is that the content \\r\\nhere is a guidebook, not a map.\\r\\nGood luck!\\r\\nBlake Meike, May 2021\\r\\n9780134096346_print.indb   1325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw=":{"__data__":"{\"id_\":\"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"KTUdm5enzN9qCqBRLto/TCJYuPtN37WlILaoJp1k1oo=\",\"text\":\"\\r\\nxivPreface\\r\\nExample Code\\r\\nMost of the code shown in examples in this book can be found on GitHub at  \\r\\nhttps://github.com/InsideAndroidOS. \\r\\nNote \\r\\nSometimes a line of code will be too long to fit on one line in this book. The code continuation \\r\\nsymbol (➥) indicates that the line continues from the previous line.\\r\\nRegister Your Book\\r\\nRegister your copy of Inside the Android OS at informit.com for convenient access to downloads, \\r\\nupdates, and/or corrections as they become available.  To start the registration process, go to \\r\\ninformit.com/register and log in or create an account. Enter the product ISBN 9780134096346 \\r\\nand click Submit. Look on the Registered Products tab for an Access Bonus Content link next \\r\\nto this product and follow that link to access any available bonus materials. If you would like \\r\\nto be notified of exclusive offers on new editions and updates, please check the box to receive \\r\\nemail from us.\\r\\nA01_Meike_FM_pi-xvi.indd   1425/06/21   9:10 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=":{"__data__":"{\"id_\":\"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"sC9J4VqYItbjyJpVe/8n9Okw4qUmAWi+v2QWSR71zTU=\",\"text\":\"\\r\\nAcknowledgments\\r\\nBlake: Many people contributed to this book over the years. Author and colleague, Zigurd \\r\\nMednieks, made it possible as part of a series of small, replaceable titles. My agent, Carol Jelen, \\r\\nhelped me pitch it, and the original editor, Laura Lewin, guided it during the first years. Adnan \\r\\nBegovic and Gil Zahaiek kept us honest technically, and Sheri Replin is our maven of prose. \\r\\nThe incredibly patient Malobika Chakraborty supported the project through some very dark \\r\\ndays. Lori Lyons and Aswini Kumar carried it over the finish line. Most of all, though, thanks to \\r\\nmy co-author, Larry Schiefer, whom I was thrilled to score as a tech reviewer and who rescued \\r\\nthis book from oblivion, breathed new life into it, and made it worth reading. You absolutely \\r\\nrocked it, Larry.\\r\\nLarry: I would like to start by thanking my amazing wife, Shannon. Your never-ending \\r\\npatience and encouragement were essential to making this project happen. I could not have \\r\\ndone it without you. I also want to thank my sons, Aidan and Ian, for your understanding \\r\\nwhen Dad was distracted or spending long hours writing. I love the three of you more than \\r\\nyou’ll ever know.\\r\\nI’d like to thank my co-author G. Blake Meike for the opportunity to work with you on this \\r\\nproject. Writing a book was something I’ve always wanted to do, but I never knew how to get \\r\\nstarted or had the courage to take the first step. This has been a great experience, and I’ll be \\r\\nforever grateful.\\r\\nA technical book like this is very challenging to write, especially for a moving target like \\r\\nAndroid! I would like to thank our technical reviewers for your hard work and feedback. \\r\\nAdnan Begovic and Gil Zahaiek, your insight as Android experts was invaluable. To our editors, \\r\\nMalobika Chakraborty and Sheri Replin, thank you for your understanding, patience, and a \\r\\ngood prodding when needed. Through all the challenges, you both have stood steadfast in \\r\\nmaking sure this book happened, and I’m grateful for both of your insights and efforts.\\r\\n9780134096346_print.indb   1525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM=":{"__data__":"{\"id_\":\"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Oj66s659idRSMvE9+5Mq1Hf5wczKuBebLMMSqAOB2HE=\",\"text\":\"\\r\\nAbout the Authors\\r\\nBlake Meike is a passionate engineer, code poet, and veteran of more than 10 years of \\r\\nAndroid development at organizations including D2, Realm, Twitter, and Cyanogen. As a \\r\\nteacher, he has trained hundreds of new Android developers. He is author of several books \\r\\non Android development, including O’Reilly’s bestselling Programming Android and Addison-\\r\\nWesley’s Android Concurrency. He holds a degree in Mathematics and Computer Science from \\r\\nDartmouth College and lives in the Pacific Northwest.\\r\\nLarry Schiefer is the CTO and co-founder of HIQES, LLC, a mobile platform and app \\r\\nengineering services company. He has made a career out of creating software solutions \\r\\nfor mobile, embedded, and desktop systems. He started his career at Motorola working on \\r\\nlarge area telecommunications systems then moved to startups in the telecommunications, \\r\\nnetworking, and embedded spaces. Digging into Android’s internals was a natural progression \\r\\nwith his background in telecommunications, embedded systems, and Linux kernel work. He \\r\\nhas traveled around the world training engineers at Intel, Qualcomm, Bose, and others about \\r\\nthe internal workings of Android. In addition to being an entrepreneur and technical leader, he \\r\\ncontinues to stay involved with the development of new software and platform solutions.\\r\\n9780134096346_print.indb   1625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0=":{"__data__":"{\"id_\":\"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HAehIKFVcX+M5Xea3I0cxc22IwwJ41/kRH04lwKxy/k=\",\"text\":\"\\r\\n1\\r\\nWhy Android?\\r\\nAndroid was built for small. It has scarcity designed deep into its DNA.\\r\\nIt was created in the early 2000s, a time when mobile devices were divided into categories like \\r\\n“smart phone” and “feature phone”; when flash drive program/erase cycles were counted in \\r\\ntens of thousands; and when 64 megabytes was a lot of RAM. The idea at Android’s very core—\\r\\nthat because there is no backing store to which to swap running programs, when memory gets \\r\\ntight the operating system has no choice but to terminate them—is the inescapable legacy of its \\r\\n fixation on frugality.\\r\\nModern smart phones have all the capabilities that laptops had at that time. Were it designed \\r\\ntoday, Android would likely be a very different thing. Although battery life is still a subject of \\r\\nmuch concern, a modern mobile OS could swap to flash memory as effectively as a modern \\r\\nlaptop swaps to its SSD. Modern Android developers are supplementing—even replacing—the \\r\\nsimple, frugal libraries built into Android with new and powerful but much more resource- \\r\\nintensive libraries such as GSON and RxAndroid.\\r\\nAt the same time that mobile phones, the original target of the Android OS, are outgrowing its \\r\\narchitecture, a new and possibly larger opportunity is appearing: the Internet of Things and the \\r\\nsmart devices that comprise it. In much the way that even small companies found, around the \\r\\nturn of the century, that they needed a web presence to compete, so many of the same compa-\\r\\nnies are now discovering that their products need a web presence to compete. From medical \\r\\ndevices and on-board systems in cars, to homes, appliances, and even clothes, all sorts of prod-\\r\\nucts are being supplemented with built-in intelligence. Many of these devices have substantial \\r\\nconstraints on the processor they can support. Price, design, and flexibility make Android an \\r\\nexcellent choice for powering these types of devices. \\r\\nAdopting Android\\r\\nThere are a lot of reason that Android might be a good choice for a new smart device.\\r\\n9780134096346_print.indb   125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=":{"__data__":"{\"id_\":\"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eeLF7qELTEThGKTZgLL4GCZgbpMp50n9z/IIimftf04=\",\"text\":\"\\r\\n2Chapter 1  Why Android?\\r\\nFull Stack\\r\\nThe Android OS addresses the full stack of product requirements. From hardware and the \\r\\nkernel to stereo audio and displays on multiple screens, Android offers flexibility and provides a \\r\\nwealth of options. One can think of Android as similar to a distribution of GNU/Linux such as \\r\\nMint or CentOS. It transforms a device from a warm piece of silicon to a useful computer with \\r\\nbasic functionality.\\r\\nBroad Acceptance\\r\\nPerhaps the most obvious reason for choosing Android for a hardware project is that it is ubiq-\\r\\nuitous. Some versions of Android run out of the box on nearly any common chipset. In fact, \\r\\nmost SoC (system on a chip) vendors provide reference hardware kits with a version of Android \\r\\nand a backing Linux kernel. At least as important is that many developers are familiar with the \\r\\nAndroid system. Building a team, from front-end application and UI experts to those with the \\r\\ndeep understanding of Android necessary to modify its core, should not be an impediment.\\r\\nBeautiful UI\\r\\nThe Android system is capable of producing stunning user interfaces, which is perhaps its \\r\\nmost important feature. Support for most popular audio and video media is baked right in \\r\\nand is relatively easy to use. Offering full lighting and shadowing, the tools for animation and \\r\\n3D display are top-notch. One has only to look at some of the simply gorgeous applications \\r\\nsuch as Feedly or Weather View to grasp the nearly unlimited potential of the Android design \\r\\npalette. When the existing Android UI framework is not enough, the system supports both \\r\\nOpen GL ES and Vulkan for low overhead, high-performance 3D graphics.\\r\\nLinux Based\\r\\nThe Android operating system is based on the Linux operating system. Linux is one of the \\r\\nmost popular and widely used of all operating systems. It is everywhere. Whether a chip is \\r\\nARM-based, Intel-based, or something radical, nearly every chipset manufacturer provides a \\r\\nversion of Linux that runs on their device. Bear in mind, however, that Android is officially \\r\\nonly available for ARM- and Intel-based processors (both 32 and 64 bit.) This means the \\r\\nAndroid Open Source Project (AOSP) tree’s build system, pre-built tools, test suites, and the \\r\\npublicly available native development kit (NDK) only support these architectures. That is not to \\r\\nsay Android cannot run on some other architecture, just that the toolchains and build systems \\r\\nfor those architectures are not supported.\\r\\nWhile simply getting Linux ported and running on a new board is an important first step, quite \\r\\na bit of work may well be necessary to get all the hardware accessible to software. Frequently, \\r\\nbecause the Linux kernel is licensed with the GNU Public License (GPL), the custom code \\r\\nnecessary to support a particular sensor, display, or port will already be available for free online. \\r\\nEven if this is not the case, a large community of developers exists that is very familiar with the \\r\\n9780134096346_print.indb   225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=":{"__data__":"{\"id_\":\"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"/3KC8/aWqIXTGlOqiTdXRT6AL1/fJh8ruXJD/CBAlyE=\",\"text\":\"\\r\\n3Adopting Android\\r\\nprocess of building new drivers for Linux. Accommodating a new board or a new device is, if \\r\\nnot always simple, at least fairly straightforward.\\r\\nPowerful Development Environment\\r\\nThe Android toolchains are quite powerful and are undergoing constant improvement. Both \\r\\ntoolchains—that for building Android’s infrastructure and that for building Java applications \\r\\nthat run on top of Android—are based, largely, on common off-the-shelf tools.\\r\\nThe Android source code, the Android Open Source Project (AOSP), is well supported. Creating \\r\\na build of the version of Android used in this book, API 29, is relatively straightforward on \\r\\nrecent OSX and Linux platforms. The build system with its directory-based mechanism for \\r\\nper-hardware customizations was originally based on GNU make. With the Nougat release, the \\r\\nsoong build system replaced make. Soong uses two additional tools, kati and ninja, to make \\r\\nthe build much faster than it was using make. Existing makefiles continue to work as-is along-\\r\\nside the new soong build files.\\r\\nMost of the development for an Android system—even most of the system-level \\r\\n programming—is done in Java. Android Java developers will use tools like Android Studio  \\r\\n(a fork of IntelliJ’s IDEA IDE) and Gradle, the standard build tool for Android applications. \\r\\nGradle is very definitely sufficient for building, testing, and packaging even system applica-\\r\\ntions with native components.\\r\\nAs mentioned previously, as of about 2014, several new, interesting, and powerful development \\r\\nframeworks are available for use in Java Android application. Although some are large and all \\r\\nare a trade-off in battery life, tools such as Realm DB, RxAndroid, and Retrofit can drastically \\r\\nimprove the effectiveness of a development team.\\r\\nOne of the most important advancements in Android development was the announcement \\r\\nof Kotlin as a first-class supported language in May of 2017. Kotlin is clear, succinct, power-\\r\\nful language that seamlessly integrates with existing Java and even native code. Although it is \\r\\nnot widely used within AOSP’s core (yet), it can be used by applications written for a custom \\r\\nAndroid platform.\\r\\nOpen Source\\r\\nBuilding an embedded device necessarily involves negotiating a minefield of legal issues. This \\r\\nbook is technical, not legal. We are not lawyers and nothing in this or any of the subsequent \\r\\nchapters should be interpreted as legal advice. If you intend to attempt marketing your own \\r\\ndevice, you will need the help of a qualified lawyer. That said, some broad generalizations \\r\\nmight help a budding device developer to understand the moving parts. Figure 1.1 is a very \\r\\nhigh-level model of code ownership in the Android system.\\r\\n9780134096346_print.indb   325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=":{"__data__":"{\"id_\":\"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"l93DY82kkoBLXgvcMH6NVaaFtSMJvQN9p51i9SgxNKA=\",\"text\":\"\\r\\n4Chapter 1  Why Android?\\r\\nProprietary Application Code\\r\\nProprietary Hardware Code\\r\\nAOSP\\r\\nProprietary Google Code\\r\\nFigure 1.1 Android Code Ownership\\r\\nAt the bottom of the stack is proprietary hardware code. It is usually obtained from the hard-\\r\\nware vendor, who may license it at no cost or, perhaps, impose some kind of fee. This code \\r\\nis frequently not open source. It is essential, but it may be delivered as pre-built binaries and \\r\\npossibly with strict legal injunctions about reverse engineering. Quite possibly you will never \\r\\nsee the source and even the documentation for it might not be very good. Android’s primary \\r\\ninterface to this code is the Hardware Abstraction Layer (HAL), discussed in Chapters 8 and 10.\\r\\nAt the top of the stack are applications. These are things like the controller for a proprietary \\r\\nhome-entertainment system or the Facebook and Twitter apps. Apps are also likely to be propri-\\r\\netary and, again, unless they are apps you develop yourself, you may never see their source \\r\\ncode. If your platform needs specific applications, you will either have to make agreements \\r\\nwith their owners or provide some kind of service (a store or marketplace) from which an end \\r\\nuser can acquire them.\\r\\nIn between these two proprietary layers is the code base for Android itself, the Android Open \\r\\nSource Project (AOSP). It is completely open source. You can read it, copy it, customize it, and \\r\\nuse it pretty much as you like. Nearly all of it is protected with licenses that even allow you \\r\\nto redistribute only pre-built binaries, should you choose to do so. You can take as little or as \\r\\nmuch as you need.\\r\\nPeople are frequently confused about the openness of the AOSP code base, because Google \\r\\nstrictly controls contributions. It is true that you are unlikely to be able to contribute a change \\r\\nto the canonical AOSP codebase as you could with most other open-source projects. What \\r\\nyou can do, though, is create a fork of the relevant code repository, change it in any way you \\r\\nchoose and use it wherever you want.\\r\\nAlthough the AOSP code is truly open source, it is not necessarily free of legal encumbrances. \\r\\nMany of the technologies built into Linux and the Android services based on top of it have \\r\\nbeen the subjects of large and small legal battles. Among the technologies that you might need \\r\\n9780134096346_print.indb   425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=":{"__data__":"{\"id_\":\"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"xN/4CFa/xmkyFxfhxQbO//FSxPwH08bY6Vkunqh4PmQ=\",\"text\":\"\\r\\n5AOSP and Google\\r\\nto license are things such as Wi-Fi, Bluetooth, multimedia codecs, and other more esoteric \\r\\nthings (like a file system!).\\r\\nWhat makes this even more confusing is the AOSP tree includes software implementations of \\r\\nsome of these components (such as multimedia encoders and decoders) as placeholders. They \\r\\ndo not come with any kind of patent or license grant from Google or the intellectual property \\r\\n(IP) holders. When you build a new device, these third-party components must be carefully \\r\\nexamined to ensure the device is in compliance with technology-specific licenses.\\r\\nMicrosoft, in particular, has a portfolio of patents that it has successfully used in strong-\\r\\narming an estimated $1 billion in license fees from various Android device manufacturers. The \\r\\nexact contents of this portfolio were a closely held secret for many years. In 2014, however, \\r\\nthe Chinese government leaked the contents of the portfolio, and you can now easily find it \\r\\nonline.\\r\\nAOSP and Google\\r\\nGoogle holds its control over the Android OS in two ways. First, most consumer Android-\\r\\nlabeled systems contain a feature-rich, proprietary Google platform that is not part of AOSP. \\r\\nThis platform includes things such as Google Play Services, Google Maps, and the Play Store.\\r\\nSecond, to install any of these proprietary services—or even, for that matter, to label the system \\r\\nas an Android™ system and adorn it with the Android robot icon—a device manufacturer \\r\\nmust ensure the device complies with the Android Compatibility Definition Document (CDD) \\r\\nand passes the Android Compatibility Test Suite (CTS) and the Vendor Test Suite (VTS). After a \\r\\ndevice is verified as compliant, Google Mobile Services may be licensed for the device, allowing \\r\\nit to ship with Google’s proprietary add-ons.\\r\\nThese constraints—the Google proprietary code, the licensing agreement, compliance with the \\r\\nCDD, and passing the CTS and VTS—do not affect the use of the AOSP codebase. Developers \\r\\nand device creators are free to use and adapt the AOSP code as long as they neither label the \\r\\nresulting device as “Android” nor need the Google proprietary code and its associated function-\\r\\nality (marketplace, cloud services, and so on).\\r\\nSeveral examples exist of forks of the AOSP codebase. Perhaps the best known of these is Fire \\r\\nOS, used on Amazon devices such as the Kindle, Fire TV, and the Fire Phone. Many, if not most, \\r\\napplications built for Android will run on Fire OS. Nonetheless, Fire OS cannot be labeled as \\r\\nAndroid, cannot include the Google Play Store, and does not support Google Play Services.\\r\\nBoth Samsung and LineageOS (formerly CyanogenMod) also maintain operating systems that \\r\\nare heavily modified versions of the AOSP codebase. Both of these forks, though, have managed \\r\\nto pass the CTS and stay on Google’s good side. Both are labeled as Android.\\r\\nMany other examples of AOSP code in non-Google devices exist, from popular phones and \\r\\ntablets in China and India to the UI for Comcast’s Xfinity service. Although each of these \\r\\ndevices has its own legal story and its own legal concerns, the use of the AOSP codebase is not, \\r\\nin itself, a problem for any of them. Depending on whether a manufacturer feels that it can \\r\\n9780134096346_print.indb   525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=":{"__data__":"{\"id_\":\"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"pZcL7B/I7psF/CKlfGMnZ96VXjvNlUSEqgbxyWzB+9k=\",\"text\":\"\\r\\n6Chapter 1  Why Android?\\r\\nprovide an alternative to the Android label and the accompanying Google proprietary services, \\r\\nit either does or does not invite Google into its AOSP-based product. The devices it creates \\r\\nusing AOSP code do not need be visible to Google in any way and do not need any permission \\r\\nor participation from Google.\\r\\nWhere it gets complicated is devices in the middle ground between the two ends of the spec-\\r\\ntrum just described: a device that does not need or want the Android label but on which the \\r\\nmanufacturer wants to include apps with which users are familiar but are provided by Google. \\r\\nFor example, consider a kiosk for renting movies that is powered by Android. The manufacturer \\r\\nwould like to bundle YouTube so that users can view video trailers. Google’s position is this \\r\\narrangement is not supported. The manufacturer needs either to ensure the device is CDD/CTS \\r\\ncompliant or find an alternative way of providing the desired functionality.\\r\\nOther Choices\\r\\nThe number of products with embedded systems may be exploding but the idea of embedded \\r\\ncomputing itself is nothing new. Many alternatives to Android are available as the intelligence \\r\\nfor an IoT device; Real Time Operating Systems (RTOSs), some much older than Android and \\r\\nsome newly developed.\\r\\nAn even better alternative, though, might be no OS at all. \\r\\nMicro-Controllers\\r\\nEven with the falling prices and increasing power of single-board computers (SBCs), at the time \\r\\nof this writing, a board that can run Android will cost something in the $20–$50 range. It will \\r\\nalso occupy around 20 cubic centimeters of space. That can be a lot of overhead for a small \\r\\ndevice.\\r\\nWhen cost and space are of paramount importance, a micro-controller like the wildly popular \\r\\nArduino may be an attractive alternative. Most micro-controllers are not full-fledged processors \\r\\nand cannot support multiple simultaneous processes, Linux, or a flashy UI, let alone Android.\\r\\nAt the time of this writing, so-called “mini” micro-controllers are a full order of magnitude \\r\\nless expensive than SBCs and may require less than a single cubic centimeter of space. Over \\r\\ntime, certainly, the line between SBCs and micro-controllers will blur. SBCs will get smaller, \\r\\n micro-controllers will become more powerful, and RTOS capabilities will scale linearly with the \\r\\nhardware. Even now, though, it is possible to accomplish some very impressive magic with one \\r\\nor more small, simple micro-controllers.\\r\\nAn important limitation of micro-controllers, to be considered before choosing one as \\r\\nthe brains for a project, is its upgradeability. While it is certainly possible to update a \\r\\n microcontroller-based system over the air, it can be difficult and might require additional \\r\\nspecialized hardware. If over-the-air (OTA) updates are part of your device strategy, you might \\r\\nneed a  full-fledged OS.\\r\\n9780134096346_print.indb   625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=":{"__data__":"{\"id_\":\"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"c/WnYZ8FJtKdQV3J46rOKrXJ/5nKje6NPSkd8vjnCk0=\",\"text\":\"\\r\\n7Other Choices\\r\\nSimplicity is a double-edged sword. A system that can be updated can be hacked. Hacking a \\r\\nmicro-controller is entirely possible. Think Stuxnet. However, doing so is probably difficult and \\r\\nnot interesting to an attacker. A simple read-only memory (ROM)-based micro-controller that \\r\\nis just sufficient to power your project may save you from a substantial security budget and \\r\\nkeep your product out of the headlines during the next distributed denial of service (DDoS) \\r\\nincident.\\r\\nOther RTOSs\\r\\nThe list of operating system alternatives to Android is long. Each of them solves some set of \\r\\nproblems and introduces others.\\r\\nQNX\\r\\nQNX was the most popular embedded OS in the world before the advent of Android. Originally \\r\\ncalled QUNIX, it is a micro-kernel-based system and was developed by two students at the \\r\\nUniversity of Waterloo. It was released in 1984 as QNX to avoid trademark infringement. Since \\r\\nthat time it has been rewritten several times, and sold, first to Harman International and then \\r\\nto Research In Motion, now Blackberry. Shortly after Blackberry acquired QNX, it restricted \\r\\naccess to the source.\\r\\nVxWorks\\r\\nIf your device needs the kind of reliability and dependability that powers the Martian probes \\r\\nand military aircraft, you should consider VxWorks. VxWorks is a proprietary OS originally \\r\\ndeveloped by RTOS pioneers, Wind River. Wind River is now a wholly owned subsidiary of \\r\\nIntel.\\r\\nThe VxWorks kernel is monolithic (unlike QNX), but the system is nicely modularized and the \\r\\ntoolchain well developed. All of this, of course, comes at a price: Vxworks is proprietary and \\r\\nclosed source. Wind River also produces Wind River Linux, a hardened kernel with a custom \\r\\nbuild system.\\r\\nAndroid Things\\r\\nAndroid Things is Google’s version of Android stripped down for IoT. Codenamed Brillo, this \\r\\nstripped down version of Android was designed to be used by low-power IoT devices with \\r\\nsignificantly less RAM (as low as 32 MB) while still including Bluetooth Low Energy (BLE) and \\r\\nWi-Fi support. Android Things requires manufacturers to use supported single-board computers \\r\\n(SBCs) or System on Modules (SoMs). Such devices would automatically receive OS and security \\r\\nupdates from Google. Additionally, Android Things included a standard framework for develop-\\r\\ning custom hardware interfaces without requiring changes to the underlying kernel or Android \\r\\nframework. This approach allowed IoT manufacturers to focus on their specific purpose and not \\r\\nworry about the underlying OS, its security, or system-level updates.\\r\\n9780134096346_print.indb   725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=":{"__data__":"{\"id_\":\"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"9nMMvOddb+LklY+/I1HFYuTlrrvyuoqf7iRoFCL+LRw=\",\"text\":\"\\r\\n8Chapter 1  Why Android?\\r\\nUnfortunately, in early 2019 Google announced that Android Things had been refocused on \\r\\nsmart TV and smart speaker systems and that broader long-term support is at end of life.\\r\\nOthers\\r\\nWindows CE has been a very popular embedded OS as is evidenced by the blue screens of \\r\\ndeath on everything from subway and traffic signs to vending machines and museum kiosks. \\r\\nMicrosoft recently introduced a successor to CE, called Windows 10 for IoT.\\r\\nNucleus RTOS, from Wind River’s long-time rival, Mentor Graphics, found a home in a number \\r\\nof Samsung, LG, and Motorola phones. Riot OS, Arm Mbed OS, and Green Hills Integrity are all \\r\\nalso players.\\r\\nNearly all of these popular RTOSs are proprietary and closed source. Free and open-sourced \\r\\nRTOSs are out there, though—FreeRTOS, MontaVista, and Contiki, to name a few—but none of \\r\\nthem has the kind of history and support that Android has.\\r\\nSummary\\r\\nYou can find many alternatives to Android. Few, however have the collection of features and \\r\\nsupport that make it such a great choice for an IoT project:\\r\\n ■It is free. Take as much or as little as you like; use it as you please.\\r\\n ■It is portable. Android can be made to run on virtually any type of hardware. Getting any operating system running on a new device can be very difficult. Android is no exception. \\r\\nThere is, though, a lot of existing code and a large community with lots of experience \\r\\nwith porting it.\\r\\n ■It is adaptable. Plumbing support for new peripherals into the Android framework is a straightforward and usually simple task. Doing so is the subject of the rest of this book.\\r\\n ■The toolchain is good. The low-level C and C++ code use standard tools augmented with a baroque but useful build system. Most of the code—high level and written in Java—is \\r\\nsupported by Gradle, a couple custom plug-ins, and Android Studio. All of these tools are \\r\\nundergoing constant improvement.\\r\\n ■It supports reactive and beautiful UIs. Android can handle a variety of media, both audio and video. It has powerful tools for animation, and supports three-dimensional layouts \\r\\nand both touchscreen and D-pad input.\\r\\n9780134096346_print.indb   825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU=":{"__data__":"{\"id_\":\"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"kJ1BCGSI+bTlCPiPxV8uoJ71ELNGbTCl1wQdx/HMjew=\",\"text\":\"\\r\\n2\\r\\nBooting Acme\\r\\nLet’s get started! Consider a project: customizing Android for a new device, the Acme device. \\r\\nThe hardware engineers for the Acme project have, fortunately, chosen hardware that turns out \\r\\nto be fairly similar in architecture to a HiKey960. That means the Acme project will be based on \\r\\nthe well-supported HiKey variant of AOSP and gradually modified to suit the project goals.\\r\\n \\r\\nNote\\r\\nThe code and examples in this book were built and run on a HiKey960, using the release tag \\r\\nandroid-10.0.0_r33 for the Android AOSP source tree and compiled on a Linux Ubuntu 16.04. \\r\\nWhile, of course, this is not a guarantee of reproducibility, it is some guarantee of consistency.\\r\\nEven for developers who are not so fortunate as to have such a lucky choice of hardware for \\r\\ntheir project, the general strategy described in this chapter should be completely applicable. \\r\\nThe absolute pre-requirements for the development process described in the rest of this book \\r\\nare a code-base that\\r\\n ■Is under source control and can be reproduced exactly\\r\\n ■Can be built with a stable, available toolchain to create a flashable image\\r\\n ■Produces an image that successfully boots into Android\\r\\nBringing up a device is work for wizards; it can be frustrating, time consuming, and unique to a \\r\\nparticular device. It is unlikely that any book could describe it. Even if such a book did exist, it \\r\\nwould be obsolete by the time it got to the printer.\\r\\n \\r\\nNote\\r\\nDevelopers at the interface between hardware and software call the process of getting a basic \\r\\noperating system running on a new device as “bring up.” Bringing up a board is, usually, an \\r\\niterative process, first getting some small simple code running and then using it to bootstrap a \\r\\nboot loader and, eventually, an operating system. \\r\\n9780134096346_print.indb   925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=":{"__data__":"{\"id_\":\"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nxqwgjv4sm8TSca/Ci8+xMkSlYe4dTWXOBPMnmQu00Q=\",\"text\":\"\\r\\n10Chapter 2  Booting Acme\\r\\nAlthough this chapter is a skeleton for the process, there is some wild hand waving: This is not \\r\\na cookbook. Being able to get from source to running Android, however, is absolutely a pre-\\r\\nrequirement for proceeding. To follow the topics discussed in the rest of this book, a developer \\r\\nmust be able to test incrementally and revert changes when they do not work.\\r\\nSetting Up a Build Machine\\r\\nThe two supported options for a build machine are Linux and OSX. Although developing \\r\\nAndroid applications from Windows is possible, no support for building Android itself on \\r\\nWindows exists.\\r\\nAndroid is definitely most comfortable on Linux. A plurality of the work done on the Android \\r\\nsystem is done on Linux platforms. The tools, the support community, and even the code itself \\r\\nall originate and are most thoroughly used and tested in the Linux environment. Developers \\r\\nwith Linux development platforms and comfortable using Linux systems are on the best main-\\r\\ntained trail.\\r\\nMany developers prefer to work on OSX. Fortunately, most versions of most of the Android \\r\\ncode can be built from OSX. Linux kernels, custom drivers, and native Linux services can also \\r\\nfrequently be built on OSX.\\r\\nChoosing OSX as a build platform, however, is a charged decision. Developers who depend on \\r\\nOSX for building their products can expect to spend a significant amount of time porting and \\r\\ndebugging tools. The ability to do an OSX native build can certainly be an important time-\\r\\nsaver for an engineer developing on an OSX machine—when it works. The distinction between \\r\\nexpecting a native OSX build to work most of the time and depending on having them work all \\r\\nthe time may seem subtle. It can become very clear, though, when a deadline looms and the \\r\\nOSX native C compiler refuses to compile the most recent source.\\r\\nPerhaps surprisingly, virtual machines can be realistic alternatives. They are the only way to do \\r\\nbuilds on a Windows system. Of course, builds definitely run slowly on a virtual machine. With \\r\\na little forethought, though, the possibility exists that full builds may be necessary only rarely. \\r\\nDepending on the size of the incremental build, a virtual machine may be viable.\\r\\nNote\\r\\nUnfortunately, at least at the time of this writing, one of the most appealing possibilities, a \\r\\nshared folder, visible from both an OSX host and a Linux guest, does not work using either \\r\\nrecent versions of VirtualBox or VMWare Fusion for virtualization. A flaw in the mapping \\r\\nbetween guest and host file permissions prevents the build from completing successfully.\\r\\nComplete, easily followed directions for setting up the build machine are available on the AOSP \\r\\nsource website at https://source.android.com/setup/build/initializing.\\r\\n9780134096346_print.indb   1025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ=":{"__data__":"{\"id_\":\"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Qv0vyu1N27n/s81RDNkSvrBJw4MeJxENLuw3z2hrdGw=\",\"text\":\"\\r\\n11Repo\\r\\nWhen building with OSX, creating a separate, case-sensitive volume to hold the source code \\r\\nis especially important. The volume can be a mountable disk image file or a physical external \\r\\ndrive but it must, unlike the normal OSX file system, be case sensitive.\\r\\nThe next step is downloading the source.\\r\\nDownloading the Code\\r\\nThe process of downloading the Android source tree is also well documented at the source \\r\\nwebsite. The full source is fairly large (around 100 GB) and nearly twice that much space will \\r\\nbe necessary for a complete build. Both the download and build processes can be quite lengthy \\r\\nand take hours, even on a fairly powerful machine with a good network connection.\\r\\nThe code is structured as a forest of git repository trees and maintained with a tool called \\r\\nrepo. As described in the documentation, downloading the source consists of\\r\\n1. Obtaining the repo tool\\r\\n2. Obtaining the repo manifest\\r\\n3. Using repo to download the git repositories named in the manifest\\r\\nRepo\\r\\nRepo is an interesting and powerful tool. It is a Python program that uses git to provide func-\\r\\ntionality similar to that provided by git submodules. Repo, however, was around well before \\r\\nsubmodules.\\r\\nThe following discussion assumes a good working knowledge of git. Several excellent resources  \\r\\nfor developers that are new to git are available, including Jon Loeliger and Matthew McCullough’s  \\r\\nexcellent Version Control with Git (Loeliger, 2012) and the complete and readable documentation \\r\\nat GitHub (https://help.github.com).\\r\\nRepo manages an interesting two-layered versioning system. The following command line \\r\\ninitializes a directory as a Repo workspace:\\r\\nrepo init –u https://android.googlesource.com/platform/manifest \\\\\\r\\n          -m default.xml\\r\\nRunning this command in a directory creates a new top-level subdirectory named .repo. That \\r\\ndirectory contains, among other things, the manifest repository—a git repository identified \\r\\nin the initialization command by the argument of the –u option. The manifest repository is \\r\\ncloned into the .repo directory and named manifests.\\r\\nThe manifest repo may contain all kinds of things, but it must contain one or more manifest \\r\\nfiles. The manifest file that is named as the argument of the –m command line option (or the \\r\\n9780134096346_print.indb   1125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA=":{"__data__":"{\"id_\":\"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"lexj1PFWlLUmaMU/6NWOhsq7c7s+IwwFwltYAS38heM=\",\"text\":\"\\r\\n12Chapter 2  Booting Acme\\r\\nfile named default.xml, if no –m option is specified) is soft-linked or included from the top \\r\\nlevel of the .repo directory as manifest.xml. The manifest.xml file controls the structure of \\r\\nthe rest of the repository. Figure 2.1 illustrates the structure of the repo workspace.\\r\\n.repo\\r\\nmanifests\\r\\nGit RepoGit RepoGit Repo\\r\\ndefault.xmlmanifest.xml\\r\\nFigure 2.1 Repo Workspace\\r\\nAfter the workspace is initialized, repo can download the actual source. This is done by issuing \\r\\nthe sync command from the command line:\\r\\nrepo sync\\r\\nIn response to this command, the repo program parses manifest.xml, which is a list of git \\r\\nrepositories. It clones each git repository into a location, also specified in the manifest. When \\r\\nthe sync command completes, the working directory is an identical copy of every other work-\\r\\nspace created with the same commands.\\r\\n \\r\\nCaution! \\r\\nDo not copy a repo workspace as you might a normal git repository. Repo workspaces make \\r\\nheavy use of soft links. A simple file copy will actually refer to the exact same workspace as \\r\\nthe original.\\r\\n9780134096346_print.indb   1225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=":{"__data__":"{\"id_\":\"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"xGdaBocu2NcZg1xT3JyebPbOUmui6nGzXD9d3vBhp9c=\",\"text\":\"\\r\\n13Repo\\r\\nBecause the manifest itself is kept in a git repository, it may be versioned: It is a versioned list \\r\\nof names of versioned repositories. The manifest directory, in addition to having different \\r\\nmanifests—say, one for each of several different customers—may also contain multiple versions \\r\\nof each of those manifests, each on a separate git branch. Repo’s –b option allows the developer \\r\\nto check out the version of a manifest on a particular branch. That versioned manifest may, in \\r\\nturn, point to specific branches (or even commits) within each of the repositories that make up \\r\\nthe workspace. A subsequent sync command will populate the workspace as specified by the \\r\\nbranch version of the manifest.\\r\\nA manifest is a fairly simple XML document. Listing 2.1 gives a partial example.\\r\\nListing 2.1 Repo Manifest\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\"..\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n   <project path=\\\"build/blueprint\\\" name=\\\"platform/build/blueprint\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  \\r\\n  <project path=\\\"build/blueprint\\\"\\r\\n           name=\\\"platform/build/blueprint\\\"\\r\\n           groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  </project>\\r\\n  <project path=\\\"abi/cpp\\\" name=\\\"platform/abi/cpp\\\" groups=\\\"pdk\\\" />\\r\\n  <project path=\\\"art\\\" name=\\\"platform/art\\\" groups=\\\"pdk\\\" />\\r\\n  <project path=\\\"bionic\\\" name=\\\"platform/bionic\\\" groups=\\\"pdk\\\" />\\r\\n...\\r\\n</manifest>\\r\\n9780134096346_print.indb   1325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=":{"__data__":"{\"id_\":\"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"sdNeRzuUqgn/75SyjgOjpIL1PEVTlYc+JtOw6ndWr1M=\",\"text\":\"\\r\\n14Chapter 2  Booting Acme\\r\\nThe full syntax for the manifest file is specified in the documentation accompanying the \\r\\nrepo source at https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.md. \\r\\nEssentially, each project element in the XML identifies a git repository by its name, relative to \\r\\nsome base URL, its remote; and where that repository should be placed in the local workspace, \\r\\nits path. The manifest in Listing 2.1, for instance, identifies a git repository named “platform/\\r\\nbionic”, to be placed at the top level of the workspace in a directory named “bionic”.\\r\\nDeciphering the full URL for the “bionic” source git repository requires a bit more investiga-\\r\\ntion. Because no explicit remote is specified for the bionic project, repo will use the default \\r\\nremote. The default remote for this manifest is specified up in the default element near the \\r\\ntop of the manifest. The manifest in Listing 2.1 specifies the remote named “aosp” as the \\r\\ndefault. The “aosp” remote is defined in the element immediately above the default element. \\r\\nNormally a remote definition would include a name and a base URL. Instead, the “aosp” \\r\\nremote includes the somewhat cryptic “fetch” attribute “..”, which has a special meaning. It \\r\\nindicates that the URL for this remote should be derived from the URL used to initialize the \\r\\nworkspace (the argument to the –u option, the URL of the original manifest) by leaving off the \\r\\nlast element. In this example, that URL was https://android.googlesource.com/platform/ \\r\\nmanifest. Removing the name of the manifest repository and the last path element leaves a \\r\\nbase URL of https://android.googlesource.com/. Putting this all together, then, the URL for the \\r\\n“bionic” repository is https://android.googlesource.com/platform/bionic.\\r\\nThe “..” trick is essential for organizations that want to reduce network bandwidth usage by \\r\\ncreating a local source mirror. Because the source for Android is very large and may take as \\r\\nmuch as an hour to download at WAN speeds, a distributed company with offices in Boston \\r\\nand Seattle, for example, might find that maintaining mirrors on each site’s local network is \\r\\npreferable. The initialization-relative addressing made possible by repo’s fetch=\\\"..\\\" attribute \\r\\nmakes it possible for the developers in the two offices to use identical manifests to download \\r\\ntheir workspaces from two different sources. The next section covers forking the tree and local \\r\\nmirrors in more detail.\\r\\nBecause each project in a manifest specifies its own source, creating a manifest that downloads \\r\\ncode mostly from the canonical source and adds or replaces only things that must be custom-\\r\\nized for a particular development project is easy. It is unlikely, for instance, that customizing \\r\\nAndroid for a particular device will require modifications to the Android runtime (Dalvik or \\r\\nART) or that it will require changes to one or more of the core Java libraries. Most projects’ \\r\\nmanifests can continue to refer to the canonical AOSP source for the runtime but their own \\r\\nrepository for core libraries.\\r\\nRepo is capable of several other excellent tricks. The copyfile, linkfile, and include \\r\\nelements all do just what their names suggest. The first two allow, for instance, placing files at \\r\\nthe top level of the workspace (not otherwise possible, because the top-level directory is not a git \\r\\nrepository). The include element allows multiple manifests to explicitly share common configu-\\r\\nration (in fact, modern repo now “include”s the target manifest, instead of soft-linking it).\\r\\nThe groups attribute within the XML project element allows even further customization of a \\r\\nworkspace by allowing the creation of coherent subsets of repositories. Consider, for instance, \\r\\na codebase that is being developed for both Intel and ARM hardware architectures. Although \\r\\n9780134096346_print.indb   1425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=":{"__data__":"{\"id_\":\"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"H0bN1VJ+Q2Jw+XZojA0Vy6YRSYzo5KgYaJFQD1Apv9M=\",\"text\":\"\\r\\n15Forking the Source\\r\\nintegration testing must verify that all tests pass on both platforms, most developers will \\r\\nprobably work only on one or the other. A developer working with the Intel platform might \\r\\nprefer not to download and build source related only to ARM architectures. Tagging project \\r\\nelements with groups makes it possible to do this.\\r\\nRepo supports the Gerrit continuous integration tool used in the open source community and \\r\\nat Google to fold contributions back into AOSP. A typical repo workflow might look like this:\\r\\nrepo checkout working proj1 proj2 proj3\\r\\n# normal edit/git commit cycle in project directories\\r\\nrepo upload --cbr proj1 proj2 proj3\\r\\n# repeat edit/git commit to respond to code reviews\\r\\nrepo upload --cbr proj1 proj2 proj3\\r\\nrepo abandon working proj1 proj2 proj3\\r\\nHere, the developer starts a new feature branch called “working” in three repositories: “proj1”, \\r\\n“proj2”, and “proj3”. After doing some work using git, normally, to commit incremental \\r\\nupdates and rebase, merge and squash as usual, the developer pushes the current state for all \\r\\nthree of the working branches to Gerrit for review.\\r\\n \\r\\nNote \\r\\nrepo upload is not atomic—it does not necessarily all succeed or all fail. Each of the three \\r\\nprojects in the preceding example is a separate repository. It would be entirely possible that \\r\\ntwo of the three pushes succeed but that one fails, leaving the workspace in an inconsistent \\r\\nstate.\\r\\nAs usual, the review/revise loop iterates until the new work is accepted and merged at the \\r\\norigin. After the merge is complete, the local branches can be abandoned. \\r\\nTwo final repo features may also be useful. One is the forall command. Forall executes a \\r\\nshell command in each of the named projects. For instance:\\r\\nrepo forall –c 'git reset --hard HEAD; git clean -xdf'\\r\\nis one way of resetting all repositories to their initial state.\\r\\nA second useful feature is repo support for local manifests. A local manifest—either .repo/\\r\\nlocal_manifest.xml (deprecated) or all of the files .repo/local_manifests/*.xml, in \\r\\nalphabetical order—are merged with the manifest in manifest.xml as part of the sync \\r\\ncommand. By using local manifests, developers can further customize their local workspace, \\r\\nadding definitions for remotes or for additional projects as appropriate.\\r\\nForking the Source\\r\\nThe first step to modifying Android for a new device is to create your project fork of the AOSP \\r\\nsource. There are a number of ways of creating such a fork with repo and git. The choice of \\r\\nwhich approach to take is up to the development team and what makes sense for the organiza-\\r\\ntion. Not all of these options are a good fit for all organizations. This section outlines several \\r\\n9780134096346_print.indb   1525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=":{"__data__":"{\"id_\":\"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"M8VUTz3AZejQa1QTF7d2uPZt209nkliI/o8IER4hptU=\",\"text\":\"\\r\\n16Chapter 2  Booting Acme\\r\\napproaches that a team might choose. In each case, a customized manifest specifies the projects \\r\\nthat make up the platform. The details of the manifest changes are slightly different for each \\r\\nchoice.\\r\\nAndroid Version Selection\\r\\nBefore diving into the options for creating a fork of the Android sources, ensure that you select \\r\\nthe correct version of Android. This is not as straightforward as one might think, partly because \\r\\nof variations in system on a chip (SoC) vendor support and the ever-changing landscape of \\r\\nAndroid’s internals (as will be obvious in this book).\\r\\nSoC vendor support for different Android versions presents a challenge for any project. Android \\r\\nis driven by mobile handset development, which has less than an 18-month lifecycle. This \\r\\nmeans that it is likely that the development for SoC chipsets used in new phones released \\r\\ntoday was started 18 months ago. It also means the chipsets have a support lifetime that is typi-\\r\\ncally around 18 months after release. Traditionally, because Google has Android on roughly an \\r\\nannual release schedule, a given chipset is likely to receive vendor support for only one major \\r\\nOS version update after it is first released. At that point the SoC vendor moves its focus to its \\r\\nnew “flagship” SoC.\\r\\nThis can present challenges when creating an IoT device that does not require the latest and \\r\\ngreatest chipset features and performance, not to mention the hefty price point that comes \\r\\nwith newer chipsets. Finding a chipset with the right price point, capabilities, and support for a \\r\\nversion of Android appropriate for the product is a balancing act.\\r\\nFurther complicating version selection is Android’s internal structure. Although Android’s \\r\\noverall architecture has remained intact since its first release, it has had many enhancements to \\r\\nits internals over time. For the third-party app developer, these revisions are usually transpar-\\r\\nent. Exceptions exist, of course, such as the Android permission system overhaul that happened \\r\\nin the Android 6 (Marshmallow) release. The normally friction-free development environment \\r\\ndoes not apply when creating new products and working at the system level. Platform vendors \\r\\nare much more susceptible to Android’s changing internals, which also factors in to the SoC \\r\\nvendor level of support over time.\\r\\nOne of the most disrupting changes for platform creators came with Android 8 (Oreo): project \\r\\nTreble. Project Treble completely changed the way that platforms/SoC expose hardware-related \\r\\nfunctions to the OS. The entire Hardware Abstraction Layer (HAL) was re-architected to allow \\r\\nvendors to upgrade to future versions of Android. All of these features come at the cost of \\r\\nincreased complexity. The HAL is covered in more detail in Chapters 8 through 12, but it is \\r\\nworth an early word of caution.\\r\\nIn short, vendor integration prior to Android 8 was simpler from a HAL perspective. The \\r\\nvendor needed only to provide a kernel with the required hardware support, a set of shared \\r\\nlibraries that followed a specific naming model, and a set of APIs at the C/C++ level. Starting \\r\\nwith Android 8, the HAL forces a strict vendor interface that is exposed using Binder (Android’s \\r\\ninterprocess communication [IPC] mechanism). While this makes forward migration faster and \\r\\neasier, it complicates the platform developer’s job when bringing up a new device.\\r\\n9780134096346_print.indb   1625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=":{"__data__":"{\"id_\":\"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"euknRt+hc2fLF/lZCdHndGnzOkauyXCG5GBbcyywxEM=\",\"text\":\"\\r\\n17Forking the Source\\r\\nUnfortunately, there is no one right answer when picking an Android version for use on a new \\r\\nplatform. To benefit from fixes and enhancements made to future Android versions, going \\r\\nwith Android 8 or newer is the way to go. Choosing such a recent release, however, can make \\r\\nthe initial system bring-up process much more complicated, particularly if the device utilizes \\r\\ncustom hardware or features not provided by the SoC vendor.\\r\\nThe choice of Android version also depends on whether the SoC vendor supports Android \\r\\n8 or newer. If a product does not require regular updates or need to take advantage of new \\r\\nOS features, going with Android 7 (or even earlier) may be a good choice. Even if a product \\r\\nis released with an Android version prior to 8, updating units in the field via an over-the-air \\r\\n(OTA) update may still be possible. Of course, implementing a safe, secure OTA update mecha-\\r\\nnism is difficult, completely up to the platform vendor, and well outside the scope of this book.\\r\\nLocal Mirror\\r\\nAlthough it is not strictly necessary, creating a local mirror of the Android source is almost \\r\\ncertainly a good idea. Google maintains special repo manifest (not the manifest for AOSP \\r\\nsource) to be used for creating a mirror. The process is documented in detail in the section \\r\\n“Using a local mirror” on the AOSP Downloading page (https://source.android.com/source/\\r\\ndownloading).\\r\\nSeveral reasons exist for using a local mirror. The chief reason is that local file copy or, at worst, \\r\\nlocal network transfer, is likely to be much faster than an Internet connection. Although the \\r\\nmirror takes a fair amount of space (around 150G) and takes more time to download than just \\r\\nthe AOSP source, it all becomes worthwhile the first time it is necessary to check out the AOSP \\r\\nsource at a new and different git tag or to download the source for some big component a \\r\\nsecond time.\\r\\n \\r\\nNote \\r\\nUnderstanding the file-system size requirements when building an AOSP derived tree or creat-\\r\\ning a local mirror are important. As noted previously, the local mirror size is around 150GB of \\r\\ndisk space. This is the bare git repository size, not the size of an actual working tree used for \\r\\ndevelopment. Each instance of the AOSP tree that is initialized and synchronized will consume \\r\\nanother 60+GB of space in its pristine state and close to double that size when fully built. \\r\\nThere is also compiler cache, which consumes more space (but is configurable in size).\\r\\nThe bottom line is that when using a local mirror on the same system that is being used for \\r\\ndevelopment, the total disk space needed is the size of the mirror plus the size of all the AOSP-\\r\\nbased trees in use for development or building.\\r\\nA second reason for creating a mirror is that doing so provides more control over the way the \\r\\nlocal fork of the source is updated. As described in the previous section, the repo tool maintains \\r\\na manifest: a list of git repositories. The repo sync command clones each of the repositories \\r\\nlisted in the manifest into the local workspace and then checks out the contents. As is usual \\r\\npractice with a git repository, the repo tool checks out the HEAD of a branch.\\r\\n9780134096346_print.indb   1725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=":{"__data__":"{\"id_\":\"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"p8xt9h5sOsYuz6xmvd9/1EJFaveRqB5lAE2dzLf3d0k=\",\"text\":\"\\r\\n18Chapter 2  Booting Acme\\r\\nThe whole point of a git branch, though, is that it is a moving target. The commit that is head \\r\\nof a given branch today is not the commit that was the head of that branch a week ago. For \\r\\nthis reason, creating a local mirror is valuable because it makes local checkouts repeatable. \\r\\nThe mirror is a static snapshot of the AOSP source. Unless the mirror itself is updated, two \\r\\ncheckouts made weeks apart will result in identical source. Obviously, this is not the case if the \\r\\ncheckouts are made directly from the Google source.\\r\\nThe Acme device manifest uses the tag android-10.0.0_r33 of AOSP. Note this is different than \\r\\nusing one of the similarly named Android release branches, like android10-mainline-release. \\r\\nThe HEAD of a branch may change between two repo syncs. Using tags or pinning specific \\r\\ncommits mitigates this problem: Tags generally do not move. In fact, Google and SoC vendors \\r\\noften provide a manifest for Android on a particular SoC or development kit in exactly this way.\\r\\nWhen using a local mirror, you have two different approaches: a local file-system copy (which \\r\\nis described on the AOSP Downloading page), or a local git server setup, a mirror of the Google-\\r\\nhosted repositories. The local filesystem mirror is a great approach for single developers but \\r\\ndoes not easily allow multiple developer contributions. This is where the local git server mirror \\r\\nis a better choice.\\r\\nA local git server mirror, however, comes with the added overhead of setting up a hosted, acces-\\r\\nsible git server. Although there are plenty of resources available online for this, it may be more \\r\\nof a burden than some teams are willing to incur.\\r\\nIt is also worth noting that we definitely do not recommend using a single monolithic git \\r\\nrepository. The AOSP source tree is made up of several hundred individual source code trees. \\r\\nMany of these are within the main Android sources whereas others come from existing open \\r\\nsource projects. Putting all of these separate codebases into a monolithic repository would make \\r\\nit nearly impossible to stay in sync with either AOSP or third-party sources. Instead of pulling \\r\\na single repository’s git history into the local mirror, you would need to manually apply each \\r\\npatch to the appropriate directory within the tree.\\r\\nHosted Git Repositories\\r\\nAnother common alternative is the use of hosted git repositories, such as GitHub, Bitbucket, \\r\\nor GitLab. Many software development organizations are already using these services for their \\r\\nday-to-day work. Adopting them for an Android project allows teams to leverage the existing \\r\\nworkflows and infrastructure with which they are already familiar. In addition, hosted reposito-\\r\\nries may already have IT support, provide useful continuous integration tools, and have refined \\r\\ncontrols for team member access.\\r\\nThere can be complications, though. Cloud-hosted repositories such as GitHub typically do not \\r\\nsupport the path-like, name-spaced layout used by AOSP. A common way around this issue is  \\r\\nto replace the path separator (a slash) with an underscore. For example, the AOSP repository \\r\\n“platform/hardware/libhardware” becomes “platform_hardware_libhardware.”\\r\\nAdditionally, hosted git services usually place a size limit on each repository. For most git repos-\\r\\nitories, this is not a problem. However, some repositories within the Android build tree exceed \\r\\n9780134096346_print.indb   1825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=":{"__data__":"{\"id_\":\"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"tysBDOxPxKhg4Nj+9sXR1n0Ts+7C6ALAdm8thcrZHUQ=\",\"text\":\"\\r\\n19Example: Local Mirror of Forked Repositories\\r\\nstandard GitHub size limits (typically 2GB) and cannot be hosted with their full history. These \\r\\ninclude the frameworks/base and the Linux kernel repositories. The best approach to take when \\r\\nusing a cloud-based service is to host only the repositories under active development. All other \\r\\nrepositories should be pulled from Google or a local mirror.\\r\\nTree Snapshot\\r\\nAnother and somewhat more space-expensive way of providing this stability is simply to snap-\\r\\nshot the entire AOSP source tree. That certainly is a very safe approach. If the space is available \\r\\nand the target version of the Android source to be used for the project is not sufficiently stable, \\r\\nit may also be the best. This is definitely not a recommended technique, though, especially \\r\\nwhen teams are developing the platform, because it removes the use of remote git repositories.\\r\\nRepository Commit Pinning\\r\\nAs mentioned earlier in the “Local Mirror” section, one of the big advantages of a mirror is \\r\\nhaving a consistent “snapshot” of the AOSP tree at a point in time that does not change. When \\r\\nteam members are setting up new machines, a continuous integration (CI) server, and so on, \\r\\nusing the same source revisions to build the platform is critical. Local mirrors, though, are not \\r\\nalways practical due to team size, IT infrastructure, or file system space constraints. The next \\r\\nbest approach is specific commit pinning within the manifest file. In Listing 2.1, the remote \\r\\nproperty for the “aosp” specifies a revision attribute that points to a specific tag, android-\\r\\n10.0.0_r33. This means that all repositories fetched from the aosp remote will be checked out \\r\\nat this specific tag unless it is overridden at a given project’s entry.\\r\\nThe same revision attribute, specifying a tag, branch, or even git commit ID can be used within \\r\\na project tag to specify an individual repository within the manifest. For example, if a platform \\r\\nneeded the Bionic C library implementation at commit 8c43445152e3372ea284b65845012fd \\r\\nfe7270f82, it could specify that commit hash in its manifest as shown in Listing 2.2.\\r\\nListing 2.2 Manifest Project Entry with Revision\\r\\n  <project groups=\\\"default\\\" name=\\\"platform/bionic\\\" path=\\\"bionic\\\"  revision=”8c43445152e3372ea284b65845012fdfe7270f82”/>\\r\\nExample: Local Mirror of Forked Repositories\\r\\nThis example uses the repo tool to replace only the individual portions of the AOSP code base \\r\\nthat will be changed locally, in a more fine-grained and specific way. This partially forked \\r\\nconcept can be used with a local mirror, third-party hosted git repositories, internally hosted git \\r\\nrepositories, or a hybrid of these. \\r\\n9780134096346_print.indb   1925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=":{"__data__":"{\"id_\":\"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"cgLLvLLqAdBaO60qE4bnRJ/sbhSF/aWGMlkf0g8htOY=\",\"text\":\"\\r\\n20Chapter 2  Booting Acme\\r\\nTo use the repo tool to create partially forked source, first clone the AOSP manifest repo itself:\\r\\ngit clone https://android.googlesource.com/platform/manifest -b refs/tags/android-10.0.0_r33\\r\\nThis manifest will become the manifest for the Acme project fork of Android source. It, and not \\r\\nthe AOSP original, is the manifest that Acme developers will use to check out the Acme source \\r\\ncode.\\r\\nThe new, local clone of the manifest directory contains the repo manifest file “default.xml” as \\r\\nshown in Listing 2.3.\\r\\nListing 2.3 The AOSP Manifest File\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\"..\\\"\\r\\n           review=\\\"https://android-review.googlesource.com/\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n  <project\\r\\n    path=\\\"build/blueprint\\\"\\r\\n    name=\\\"platform/build/blueprint\\\"\\r\\n    groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  <project>\\r\\n  <!-- ... />\\r\\n  </project\\r\\n    path=\\\"device/linaro/hikey-kernel\\\"\\r\\n    name=\\\"device/linaro/hikey-kernel\\\"\\r\\n    groups=\\\"device,hikey,pdk\\\"\\r\\n    clone-depth=\\\"1\\\" />\\r\\n9780134096346_print.indb   2025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg=":{"__data__":"{\"id_\":\"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JV5rFW2NmlqfZXfejMmNxkobu31MMaF/nK/8Th0PREU=\",\"text\":\"\\r\\n21Example: Local Mirror of Forked Repositories\\r\\n  <!-- ... />\\r\\n<manifest>\\r\\nCreating a clone of the source requires only a few small changes, as illustrated in Listing 2.4 \\r\\nafter the comment, “Acme Projects.”\\r\\nListing 2.4 Manifest for a Forked AOSP Source\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <!-- Acme Remote -->\\r\\n  <remote  name=\\\"acme\\\"\\r\\n           fetch=\\\".\\\"\\r\\n           revision=”master” />\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\"https:/acme.net/acme/source\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <!-- Acme Projects -->\\r\\n  <project path=\\\"device/linaro/hikey\\\"\\r\\n           name=\\\"platform/device/linaro/hikey\\\"\\r\\n           remote=\\\"acme\\\"\\r\\n           revision=\\\"acme\\\"\\r\\n           groups=\\\"device,hikey,pkd” />\\r\\n  <project path=\\\"device/acme/one/acme_one\\\"\\r\\n           name=\\\"platform/device/acme/one/acme_one\\\" remote=\\\"acme\\\" >\\r\\n    <linkfile src=\\\"AndroidProducts.makefile\\\" \\r\\n              dest=\\\"device/acme/one/AndroidProducts.mk\\\" />\\r\\n    <linkfile src=\\\"acme_one.mk\\\" dest=\\\"device/acme/one/acme_one.mk\\\" />\\r\\n  </project>\\r\\n  <project path=\\\"device/acme/one/include\\\"\\r\\n           name=\\\"platform/device/acme/one/include\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/lib\\\" \\r\\n           name=\\\"platform/device/acme/one/lib\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/daemon\\\"\\r\\n           name=\\\"platform/device/acme/one/daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n <project path=\\\"device/acme/one/app/simple_daemon\\\"\\r\\n           name=\\\"platform/device/acme/one/app/simple_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n9780134096346_print.indb   2125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=":{"__data__":"{\"id_\":\"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"pLR3j/t+oOJYk9GwnkJyiGfAr4gcl9fTpxkouj9wGZg=\",\"text\":\"\\r\\n22Chapter 2  Booting Acme\\r\\n  <project path=\\\"device/acme/one/hidl\\\"\\r\\n           name=\\\"platform/device/acme/one/hidl\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"vendor/acme/one/interfaces\\\" \\r\\n           name=\\\"platform/vendor/acme/one/interfaces\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <!-- AOSP -->\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n  <project\\r\\n    path=\\\"build/blueprint\\\"\\r\\n    name=\\\"platform/build/blueprint\\\"\\r\\n    groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  </project>\\r\\n  <!-- ... />\\r\\n<manifest>\\r\\nFirst, the new manifest defines a new remote, \\\"acme\\\", for the Acme project. The \\\"fetch\\\" \\r\\nattribute for the acme remote is \\\".\\\", indicating that projects downloaded from this remote \\r\\nwill have URLs that are the same as that used for the manifest file itself; that is, if the repo \\r\\ncommand used to initialize an Acme project workspace is: \\r\\nrepo init –u https:/acme.net/acme/source/manifest\\r\\nThe repo tool will search for the repository that contains the source for a project whose name \\r\\nattribute in the manifest has the value “zork” at the URL:\\r\\nhttps:/acme.net/acme/source/zork\\r\\nNext, note that the “review” attribute has been removed from the “aosp” remote. The process \\r\\nby which new code is submitted, reviewed, and committed, and the tools for doing so, are one \\r\\nmore topic that is beyond the scope of this book. The repo tool does support a wide variety of \\r\\n9780134096346_print.indb   2225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg=":{"__data__":"{\"id_\":\"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"te19Jte3pSYQPhB7QgkxMXZwNP9ir3QtmAuzqjpetg0=\",\"text\":\"\\r\\n23Example: Local Mirror of Forked Repositories\\r\\ncommit processes and local customization. To find out more about this topic, look at the docu-\\r\\nmentation for the repo tool’s “repo-hooks” element at \\r\\nhttps://android.googlesource.com/platform/tools/repohooks/+/master/README.md\\r\\nThe next modification to the manifest points the “aosp” remote explicitly at the local AOSP \\r\\nmirror. Instead of using the relative location “..” (a relative reference similar to the one now \\r\\nused by the “acme” remote), the AOSP source now comes absolutely from the mirror (located \\r\\nin this example at https:/acme.net/acme/aosp).\\r\\nFinally, the new manifest contains the specifications for the several non-AOSP projects at paths \\r\\nlike “device/linaro/hikey” and “vendor/acme/one/interfaces”.\\r\\nKernel source and some pre-built binaries necessary to boot the HiKey960, the device used as \\r\\nthe baseline for the Acme One device, are easily available.. Instructions for cloning them can be \\r\\nfound in device/linaro/hikey/hikey960/README. Because it is very likely that you will need \\r\\nto modify the kernel source, you will probably also maintain forks of these repos, as well.\\r\\nNearly every Android-compatible device will require similar device-specific customization \\r\\nnecessary to build a system image that will boot on the device. Finding, acquiring, and inte-\\r\\ngrating the device-specific additions into the AOSP source code is an essential first step toward \\r\\nbringing up a device.\\r\\nThe directory structure for the server providing the source for the Acme project now looks \\r\\nsomething like Figure 2.2. \\r\\nhttps://acme.com/acme\\r\\nmirrorsource\\r\\nmanifestkernelbuild\\r\\nFigure 2.2 The Acme Source Tree\\r\\n9780134096346_print.indb   2325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=":{"__data__":"{\"id_\":\"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"7hUm1ZpAEKj6xtSiJZzgpvAdLxXFK/jl/BJYKk612II=\",\"text\":\"\\r\\n24Chapter 2  Booting Acme\\r\\n \\r\\nNote \\r\\nYou can find a manifest similar to the one shown in Figure 2.2 by using the following URL in the \\r\\nrepo init command (discussed next): https://github.com/InsideAndroidOS/acme_platform_\\r\\nmanifest.git. This manifest contains references to repositories holding the code and changes \\r\\nfor the Acme One platform covered throughout this book.\\r\\nTime to build a workspace! \\r\\n> cd workspace\\r\\n> repo init –u https:/acme.net/acme/source/manifest\\r\\n# output elided...\\r\\n> repo sync\\r\\n# lots of output elided...\\r\\nThe sync operation will certainly take a while; possibly several hours. It should, however, \\r\\ncomplete successfully. If it does not, carefully debug the manifest before proceeding.\\r\\nBuilding an Image\\r\\nThe Android build system is large, complex, and not well documented. A full explanation of its \\r\\nhistory and usage is beyond the scope of this book. Future chapters address adding new pieces \\r\\nto the build relevant to the components being developed. Fortunately, for the moment, the \\r\\ngoal is simply to get from code to a running Android.\\r\\nAn important part of the build system’s complexity is the ability to customize it to produce \\r\\nimages for the prodigious number of Android devices. The customization is accomplished by \\r\\nsetting a number of shell variables using a tool called lunch.\\r\\n \\r\\nNote \\r\\nDistributions of the Android source code other than AOSP, as well as some versions of AOSP \\r\\nthat have been extended with third-party code, may use variants of lunch, usually with cute \\r\\nnames like snackbar, brunch, or some such thing. These alternatives all essentially accom-\\r\\nplish the same task: assigning values to a set of shell environmental variables used to config-\\r\\nure the build system.\\r\\nThe lunch tool is itself a shell script loaded by running another shell script build/envsetup.sh.  \\r\\nNote that it is essential that the definitions provided by envsetup.sh are loaded into the \\r\\ncurrent shell (using “.” or “source”). Just running envsetup.sh from the command line \\r\\naccomplishes nothing at all.\\r\\n> source build/envsetup.sh\\r\\nincluding device/asus/fugu/vendorsetup.sh\\r\\nincluding device/generic/car/car-arm64/vendorsetup.sh\\r\\nincluding device/generic/car/car-armv7-a-neon/vendorsetup.sh\\r\\nincluding device/generic/car/car-x86/vendorsetup.sh\\r\\nincluding device/generic/car/car-x86_64/vendorsetup.sh\\r\\n9780134096346_print.indb   2425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=":{"__data__":"{\"id_\":\"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"r++O8KCMSVI2htBIG/wG6TmAinMUGsDLP6uOQj6KTO4=\",\"text\":\"\\r\\n25Building an Image\\r\\nincluding device/generic/mini-emulator-arm64/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-armv7-a-neon/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-mips/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-mips64/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-x86/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-x86_64/vendorsetup.sh\\r\\nincluding device/generic/uml/vendorsetup.sh\\r\\nincluding device/google/dragon/vendorsetup.sh\\r\\nincluding device/google/marlin/vendorsetup.sh\\r\\nincluding device/huawei/angler/vendorsetup.sh\\r\\nincluding device/lge/bullhead/vendorsetup.sh\\r\\nincluding device/linaro/hikey/vendorsetup.sh\\r\\nincluding sdk/bash_completion/adb.bash\\r\\nNow that all the tool definitions from the envsetup.sh script have been incorporated into the \\r\\ncurrent running shell, they can be used from the command line. In this particular example, \\r\\nconfiguring the build system to build an image for the Acme project, based on HiKey960-like \\r\\nhardware, the appropriate lunch menu selection is “3”: acme_one-userdebug.\\r\\n> lunch\\r\\nYou're building on Linux\\r\\nLunch menu... pick a combo:\\r\\n     1. acme_one-eng\\r\\n     2. acme_one-user\\r\\n     3. acme_one-userdebug\\r\\n     4. aosp_arm-eng\\r\\n     5. aosp_arm64-eng\\r\\n     6. aosp_blueline-userdebug\\r\\n     7. aosp_bonito-userdebug\\r\\n     8. aosp_car_arm-userdebug\\r\\n     9. aosp_car_arm64-userdebug\\r\\n     10. aosp_car_x86-userdebug\\r\\n     11. aosp_car_x86_64-userdebug\\r\\n     12. aosp_cf_arm64_phone-userdebug\\r\\n     13. aosp_cf_x86_64_phone-userdebug\\r\\n     14. aosp_cf_x86_auto-userdebug\\r\\n     15. aosp_cf_x86_phone-userdebug\\r\\n     16. aosp_cf_x86_tv-userdebug\\r\\n     17. aosp_coral-userdebug\\r\\n     18. aosp_crosshatch-userdebug\\r\\n     19. aosp_flame-userdebug\\r\\n     20. aosp_marlin-userdebug\\r\\n     21. aosp_sailfish-userdebug\\r\\n     22. aosp_sargo-userdebug\\r\\n     23. aosp_taimen-userdebug\\r\\n     24. aosp_walleye-userdebug\\r\\n9780134096346_print.indb   2525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0=":{"__data__":"{\"id_\":\"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"I9rc3TiDUelZvdvKjlhYxwNau9+cr/Z+o98jlORWvjI=\",\"text\":\"\\r\\n26Chapter 2  Booting Acme\\r\\n     25. aosp_walleye_test-userdebug\\r\\n     26. aosp_x86-eng\\r\\n     27. aosp_x86_64-eng\\r\\n     28. beagle_x15-userdebug\\r\\n     29. car_x86_64-userdebug\\r\\n     30. fuchsia_arm64-eng\\r\\n     31. fuchsia_x86_64-eng\\r\\n     32. hikey-userdebug\\r\\n     33. hikey64_only-userdebug\\r\\n     34. hikey960-userdebug\\r\\n     35. hikey960_tv-userdebug\\r\\n     36. hikey_tv-userdebug\\r\\n     37. m_e_arm-userdebug\\r\\n     38. mini_emulator_arm64-userdebug\\r\\n     39. mini_emulator_x86-userdebug\\r\\n     40. mini_emulator_x86_64-userdebug\\r\\n     41. poplar-eng\\r\\n     42. poplar-user\\r\\n     43. poplar-userdebug\\r\\n     44. qemu_trusty_arm64-userdebug\\r\\n     45. uml-userdebug\\r\\nWhich would you like? [aosp_arm-eng] 3\\r\\n============================================\\r\\nPLATFORM_VERSION_CODENAME=REL\\r\\nPLATFORM_VERSION=10\\r\\nTARGET_PRODUCT=acme_one\\r\\nTARGET_BUILD_VARIANT=userdebug\\r\\nTARGET_BUILD_TYPE=release\\r\\nTARGET_ARCH=arm64\\r\\nTARGET_ARCH_VARIANT=armv8-a\\r\\nTARGET_CPU_VARIANT=cortex-a73\\r\\nTARGET_2ND_ARCH=arm\\r\\nTARGET_2ND_ARCH_VARIANT=armv8-a\\r\\nTARGET_2ND_CPU_VARIANT=cortex-a73\\r\\nHOST_ARCH=x86_64\\r\\nHOST_2ND_ARCH=x86\\r\\nHOST_OS=linux\\r\\nHOST_OS_EXTRA=Linux-4.4.0-184-generic-x86_64-Ubuntu-16.04.6-LTS\\r\\nHOST_CROSS_OS=windows\\r\\nHOST_CROSS_ARCH=x86\\r\\nHOST_CROSS_2ND_ARCH=x86_64\\r\\nHOST_BUILD_TYPE=release\\r\\nBUILD_ID=QQ2A.200405.005\\r\\nOUT_DIR=out\\r\\n============================================\\r\\n9780134096346_print.indb   2625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=":{"__data__":"{\"id_\":\"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"VbiXJnqtJbdG4tboEoL4WuE2RV0/xh02ojKjLe1nlws=\",\"text\":\"\\r\\n27Device Tools \\r\\nThe build system is now configured and ready to go.\\r\\nThe make command starts the build. It takes a wide variety of argument flags. For now, the \\r\\nimportant argument is –j, which tells it how many processes to run simultaneously. Common \\r\\nwisdom seems to suggest that a good choice for this number is two more than the number of \\r\\navailable processors. Thus, on a build machine with an eight-core Intel processor, the build \\r\\ncommand might look like this:\\r\\n> make –j10\\r\\n# ... pages and pages of output elided\\r\\nEven on a very fast machine, the build is likely to take hours. The name of the configuration \\r\\ncommand, “lunch,” is appropriate for much more than the process of choosing the target \\r\\nbuild device. Fortunately, the long build time is generally only for “clean” builds of the source. \\r\\nIterative builds are usually considerably faster, often completing in just a few minutes.\\r\\nWith luck, the build will complete successfully. Unfortunately, hundreds of ways exist that it \\r\\ncan go wrong. That is an important reason that getting something that builds reliably is such \\r\\nan important first step!\\r\\nMany build failures involve incorrect or incompatible toolchains. This is especially common \\r\\nwhen trying to build on OSX. Another common cause of failure is that a particular device, \\r\\nalthough listed in the lunch menus, is simply not supported in the version of the Android \\r\\nsource checked out in the workspace. It is absolutely not the case that every lunch option is \\r\\ntested on every git branch or at every git tag of the AOSP source.\\r\\nNo magic bullets exist for fixing a source that won’t build. If the problem is something as small \\r\\nas a recognizable syntax error, something supported by some C++ compilers but not by others, \\r\\nsimply patching the source may be possible. It is at least as likely, though, that a more effective \\r\\nstrategy is finding (through the community or possibly even trial and error) some other version \\r\\nof the source or toolchain that does work.\\r\\nDevice Tools \\r\\nWhen the build completes successfully, the directory out/target/product contains several file \\r\\nsystem images ready for installation on the target device. Installing the images on the device \\r\\nand then working with the running system requires two specialized tools: fastboot and adb. \\r\\nGetting familiar with them before proceeding makes sense.\\r\\nThe sources for both tools are part of AOSP. More conveniently, though, compiled versions  \\r\\nare distributed as part of the Android SDK in the platform-tools folder. The Android SDK  \\r\\nis available from the Android Developer Website (https://developer.android.com/studio/ \\r\\nindex.html) either as part of the Android SDK Developer Bundle (which includes Android \\r\\nStudio, the standard Android IDE) or separately as a zipped, stand-alone folder. Versions  \\r\\nare available for each of the three most common development platforms: Linux, Mac,  \\r\\nand Windows. \\r\\n9780134096346_print.indb   2725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=":{"__data__":"{\"id_\":\"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"x1+4hQgHRHw9fR+A+JTgdJxfk8vI0fZihilRvuYOHWg=\",\"text\":\"\\r\\n28Chapter 2  Booting Acme\\r\\nfastboot\\r\\nfastboot is an overloaded term: It is both a boot mode for a device and the name of a tool \\r\\nused to communicate with a device when it is in fastboot mode. Incidentally, it is also the \\r\\nname of the protocol that the tool and device use to communicate when the device is in fast-\\r\\nboot mode.\\r\\nBooting an Android device into fastboot mode is very similar to booting a larger computer \\r\\ninto its BIOS. In much the way one can boot a laptop computer into its BIOS by holding down \\r\\na key-chord during boot, the most common way of booting an Android device into fastboot \\r\\nmode is to power cycle it while holding a specific set of buttons (frequently power and volume \\r\\ndown). Instead of starting the normal bootloader, boot phase-2 instead loads and begins execut-\\r\\ning the fastboot program. (Figure 6.1 in Chapter 6 illustrates the boot process.)\\r\\n \\r\\nWarning! \\r\\nBricking a device with fastboot is really, really easy to do!\\r\\nThe fastboot program may have complete and unrestricted access to device memory. Overwriting  \\r\\nnot only the operating system and the backup recovery system but also the fastboot program \\r\\nitself may be possible. A device on which all phase-3 boot programs are garbage cannot be \\r\\nbooted and cannot be repaired without physical access to device memory. \\r\\nBy default, the fastboot program communicates with a device over a USB connection. Perhaps \\r\\nsurprisingly, when a device is booted into fastboot mode, it is likely to have a USB device iden-\\r\\ntifier that is different from the one it presents after a normal boot. An operating system that \\r\\ncontrols access to naked devices (as udev does on Linux) may have to be configured to allow a \\r\\nfastboot connection, even if adb connections to the normally booted device work perfectly.\\r\\nAfter the device is in fastboot mode and properly attached to a client, it will be visible to the \\r\\nfastboot program, invoked from the command line:\\r\\n> fastboot devices\\r\\nZX1G324JBJ       fastboot\\r\\n> fastboot getvar all\\r\\n(bootloader) slot-count: not found\\r\\n(bootloader) slot-suffixes: not found\\r\\n(bootloader) slot-suffixes: not found\\r\\n(bootloader) version: 0.5\\r\\n(bootloader) version-bootloader: moto-apq8084-72.01\\r\\n(bootloader) product: shamu\\r\\n(bootloader) board: shamu\\r\\n(bootloader) secure: yes\\r\\n...\\r\\n9780134096346_print.indb   2825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=":{"__data__":"{\"id_\":\"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"fNfCUEba2pNZSxpuKpYx3knMoPEHsdiguPiwQl5MSqE=\",\"text\":\"\\r\\n29Device Tools \\r\\nUntil the devices command shows a device, no other commands will be useful. It is the indi-\\r\\ncation that the tool has successfully established a connection to the device.\\r\\nFastboot supports a long list of commands, most of which have to do with flashing the device \\r\\nmemory. As usual, the –h flag will cause fastboot to print a help message. You can discover \\r\\nadditional commands not described in the help text by reading the fastboot source.\\r\\n \\r\\nNote \\r\\nAs of late 2016, there is code in the fastboot tool to support TCP connections. For this to work, \\r\\nof course, the fastboot program on the device (as well as the client tool) must be recent and \\r\\nsupport TCP connections. TCP fastboot may be particularly valuable for small, proximity-charged \\r\\ndevices that do not have a USB port. To use TCP fastboot, specify the IP address of the target \\r\\ndevice on the command line as follows:\\r\\nfastboot –s tcp:<ip/hostname>[:port] <command>\\r\\nadb\\r\\nAdb is probably the most important tool in the Android system developer’s toolbox. It is the \\r\\nSwiss Army knife of Android and provides a variety of functions: file transfer, shell, application \\r\\ninstallation, and logging.\\r\\nAdb communicates with the Android adb daemon, adbd, which is started early in the boot \\r\\nprocess of both the recovery and normal Android systems (but not fastboot). Like fastboot, the \\r\\nadb tool is most commonly used over a USB connection. Also, like fastboot, it supports TCP. \\r\\nUnlike fastboot, however, adb supports multiplexed communications. It can be used to follow \\r\\na device’s logging output in one window at the same time that another window is running an \\r\\nactive shell.\\r\\nA properly connected device should become visible to adb shortly after its boot screen appears. \\r\\nAs with fastboot, use the devices command to verify that adb can connect to the device \\r\\ndaemon process.\\r\\n> adb devices\\r\\nList of devices attached\\r\\nZX1G324JBJ     device\\r\\nDepending on how the Android image running on a device was built, the adbd daemon may \\r\\nnot start as root, and its value as an investigative tool will be severely limited. In such a case, if \\r\\nit is possible to run the daemon as root, the command adb root will do so. Note that, because \\r\\nof security restrictions, the daemon cannot be run as root on commercial or “user” builds. \\r\\n> adb shell\\r\\nshamu:/ $ \\r\\n> adb root\\r\\nrestarting adbd as root\\r\\n> adb shell\\r\\nshamu:/ # \\r\\n9780134096346_print.indb   2925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=":{"__data__":"{\"id_\":\"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ehLeyaLNNtVG90apYZM2gUZK0SyPfs7fdSWy3IQly3k=\",\"text\":\"\\r\\n30Chapter 2  Booting Acme\\r\\n \\r\\nNote \\r\\nAlthough the tools described here will work for nearly any Android system, some development \\r\\nboards also support a UART console. With a little work—sometimes even a stock piece of addi-\\r\\ntional hardware—it is likely that this console can be adapted to use USB and monitored from a \\r\\ncomputer using a serial console program such as minicom or GNU screen. The access to the \\r\\nstartup logging available from such a console almost certainly makes it worth the effort.\\r\\nFlashing the Device\\r\\nCertainly the most convenient way of flashing a device is to remove its memory card and insert \\r\\nit into a card reader/writer attached to the build machine. On the build machine, all the stan-\\r\\ndard partitioning and file system maintenance tools are available. In addition, a device that \\r\\nboots from removable memory is nearly impossible to brick: a huge advantage.\\r\\nMany devices, even those that do not normally do so, are completely capable of booting from \\r\\na memory card. Making this possible typically requires installing a custom bootloader. The \\r\\ncustom bootloader, usually U-Boot, takes the place of the standard second-phase bootloader \\r\\nand boots from the removable memory card instead of from the on-board memory. Setting up a \\r\\ndevice so that it boots from removable memory is ideal.\\r\\nThe more common way of flashing images to a device, though, is by using fastboot. Again, the \\r\\nprocess of getting a device to fastboot mode is hardware dependent. On some devices, holding \\r\\nsome combination of buttons immediately after powering on the device will cause it to enter \\r\\nfastboot mode. Some devices have DIP switches that in some configuration force the board \\r\\ninto fastboot mode at boot. Nearly any device, if running, can be forced to reboot into fastboot \\r\\nmode with the command:\\r\\n> adb reboot bootloader\\r\\nWhen booting into fastboot, a device should power up and, after much less time than it takes \\r\\nfor a full boot, should be visible from the flashboot program:\\r\\n> fastboot devices\\r\\nZX1G324JBJ       fastboot\\r\\nIt will not be visible from adb.\\r\\nWhat happens next depends on the version of Android to be flashed to the device. Those \\r\\nopaque binary blobs of proprietary software mentioned earlier in this chapter have always \\r\\nbeen a part of Android. They are the genesis of the Hardware Abstraction Layer (HAL) \\r\\ndiscussed in Chapters 8 and 10.\\r\\nPrior to Android Oreo, standard practice was to drop the binary blobs into a device-specific \\r\\nsection of the build tree along with the customized make files that knew where to find them. \\r\\nThe blobs would then be incorporated into the installable image during the build process and \\r\\ninstalled as part of the image.\\r\\nClearly, however, that implies that each Android image is customized for a specific hardware \\r\\nplatform. The Android Nougat image for a Nexus 5 device will almost certainly not work on \\r\\n9780134096346_print.indb   3025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=":{"__data__":"{\"id_\":\"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eXLec7vrxAgQIJyQhtL6OE2OPZbZ2wWJL6zJ6lUYLYU=\",\"text\":\"\\r\\n31Flashing the Device\\r\\neven the fairly similar Nexus 5X. In addition to causing a proliferation of images, this neces-\\r\\nsary customization also gave carriers a way to drag their feet providing updates. It was not \\r\\nenough for Google to produce a new version of Android. In addition, each phone vendor had \\r\\nto produce a new image for each phone, incorporating all the changes.\\r\\nWith the advent of Android 8, Oreo, this changed. A Google project called Treble worked to \\r\\nstandardize the Android image. Under Treble, proprietary binary blobs go into new file system \\r\\npartitions reserved exclusively for device- and carrier-specific binaries, where they are not \\r\\naffected by system updates. New releases of the Android system replace or rewrite partitions \\r\\nthat belong exclusively to the Android system. The possibility exists that a single Android \\r\\nimage will work for many devices. This is the way the Acme device is configured. Chapter 10 \\r\\ncovers the updated HAL (HIDL) in more detail.\\r\\nThe change is important when flashing an Android version 8 or later to a device, because the \\r\\nAndroid that you flash will expect to find the proprietary shims in those new file system parti-\\r\\ntions. If they are not there, the device will fail to boot.\\r\\nThe code that installs the device binary shims should be part of the device-specific bundle \\r\\ndownloaded to customize the basic AOSP source for the device. For the Acme device based on \\r\\nthe HiKey960, the script flash-all.sh in the directory device/linary/hikey/install/ \\r\\ndoes the trick. The initial flash for the new Acme device looks like this:\\r\\n> cd device/linaro/hikey/installer/hikey960\\r\\n> adb reboot bootloader\\r\\n> fastboot devices\\r\\n0483826824000000        fastboot\\r\\n> chmod a+x flash-all\\r\\n> ./flash-all.sh \\r\\nandroid out dir:./../../../../..//out/target/product/hikey960\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'ptable' (196 KB)...\\r\\nOKAY [  0.059s]\\r\\nwriting 'ptable'...\\r\\nOKAY [  0.075s]\\r\\nfinished. total time: 0.134s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'xloader' (151 KB)...\\r\\nOKAY [  0.048s]\\r\\nwriting 'xloader'...\\r\\nOKAY [  0.269s]\\r\\nfinished. total time: 0.317s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'fastboot' (3346 KB)...\\r\\nOKAY [  0.138s]\\r\\nwriting 'fastboot'...\\r\\nOKAY [  0.074s]\\r\\nfinished. total time: 0.211s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'nvme' (128 KB)...\\r\\n9780134096346_print.indb   3125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA=":{"__data__":"{\"id_\":\"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eb/VAHha2oN5Os3vjabZP2YdqQ4yNdlPlh4Rhfcb5Fk=\",\"text\":\"\\r\\n32Chapter 2  Booting Acme\\r\\nOKAY [  0.045s]\\r\\nwriting 'nvme'...\\r\\nOKAY [  0.087s]\\r\\nfinished. total time: 0.132s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'fw_lpm3' (212 KB)...\\r\\nOKAY [  0.047s]\\r\\nwriting 'fw_lpm3'...\\r\\nOKAY [  0.054s]\\r\\nfinished. total time: 0.102s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'trustfirmware' (145 KB)...\\r\\nOKAY [  0.049s]\\r\\nwriting 'trustfirmware'...\\r\\nOKAY [  0.053s]\\r\\nfinished. total time: 0.102s\\r\\n# more uploads elided...\\r\\n> \\r\\nRunning this initialization script again should not be necessary. Only a few changes could \\r\\nrequire it:\\r\\n ■The manufacturer discovers an important bug and offers an update.\\r\\n ■The Project Treble interface standards change, and a future Android is incompatible.\\r\\nAll that is left to do is to flash the newly built image:\\r\\n> cd ../../../../..\\r\\n> pwd\\r\\n/home/acme/workspace\\r\\n> fastboot flash boot out/target/product/hikey960/boot.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'boot' (9650 KB)...\\r\\nOKAY [  0.345s]\\r\\nwriting 'boot'...\\r\\nOKAY [  0.124s]\\r\\nfinished. total time: 0.468s\\r\\n> fastboot flash dts out/target/product/hikey960/dt.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'dts' (14 KB)...\\r\\nOKAY [  0.047s]\\r\\nwriting 'dts'...\\r\\nOKAY [  0.048s]\\r\\nfinished. total time: 0.095s\\r\\n9780134096346_print.indb   3225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=":{"__data__":"{\"id_\":\"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"EBsJTS+DeZbhtENRYU4C2B9L1ZDnmm0f0qf+o77jsv0=\",\"text\":\"\\r\\n33Summary\\r\\n> fastboot flash system out/target/product/hikey960/system.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending sparse 'system' 1/3 (445539 KB)...\\r\\nOKAY [203.250s]\\r\\nwriting 'system' 1/3...\\r\\nOKAY [ 10.197s]\\r\\nsending sparse 'system' 2/3 (447504 KB)...\\r\\nOKAY [198.764s]\\r\\nwriting 'system' 2/3...\\r\\nOKAY [  8.254s]\\r\\nsending sparse 'system' 3/3 (109822 KB)...\\r\\nOKAY [ 46.770s]\\r\\nwriting 'system' 3/3...\\r\\nOKAY [  1.566s]\\r\\nfinished. total time: 468.801s\\r\\n> fastboot flash cache out/target/product/hikey960/cache.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'cache' (4280 KB)...\\r\\nOKAY [  0.189s]\\r\\nwriting 'cache'...\\r\\nOKAY [  0.154s]\\r\\nfinished. total time: 0.343s\\r\\n> fastboot flash userdata out/target/product/hikey960/userdata.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'userdata' (147713 KB)...\\r\\nOKAY [  4.627s]\\r\\nwriting 'userdata'...\\r\\nOKAY [  5.587s]\\r\\nfinished. total time: 10.214s\\r\\n> \\r\\nYou should now be able to boot your board!\\r\\nSummary\\r\\nThis chapter introduced the Acme project, an example of customizing Android for specific \\r\\nhardware. The project consists of a build system, managed source, and a device based on well-\\r\\nsupported hardware, the HiKey960. It described a couple of strategies for organizing source and \\r\\nthe basic tools necessary to build and install the source on a device. \\r\\nIt is very likely that the process of creating a real project for a real device will not be as simple \\r\\nas the process described in this chapter. It might easily take days, even weeks, to get a board to \\r\\nboot at all. It might take many more weeks to find source that reliably and repeatably produces \\r\\na running Android. It might even take several days to find a build machine that can be config-\\r\\nured with a toolchain that will consistently build a flashable image without error.\\r\\n9780134096346_print.indb   3325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY=":{"__data__":"{\"id_\":\"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"aYGae7MURwjafE52xZXhIxG3yK7O1qQfJtJfhjIXph0=\",\"text\":\"\\r\\n34Chapter 2  Booting Acme\\r\\nUnfortunately, like the unhappy families in Tolstoy’s Anna Karenina, each of the problems \\r\\nencountered on each individual project will be more or less unique to that project. Google and \\r\\nthe community of people who have used similar hardware are the key resources. Finding the \\r\\ntwo other people in the world who corrupt their NTS+ file systems every time they run a build, \\r\\nthe person who has figured out how to set the video resolution for the LCD panel you are \\r\\nusing, or the one who has discovered the proper GNU Screen setting for your board’s UART can \\r\\nbe incredibly time consuming. It is, however, usually quite a bit faster than trying to solve each \\r\\nof those esoteric problems yourself.\\r\\nDespite the warning, this chapter provides a powerful framework. It presents a path that will \\r\\nlead from chaos to the solid ground from which it is possible to move forward boldly and with \\r\\npredictable, measurable progress. If your project is forced from the described path at various \\r\\npoints, the best course of action is to address the specific, limited problem and to get back on \\r\\nthe path.\\r\\nAfter you can repeatably build a working Android from a duplicable code base, you are out of \\r\\nthe zone where dragons be. The rest is just engineering. \\r\\n9780134096346_print.indb   3425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8=":{"__data__":"{\"id_\":\"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"s/UJnSYnJiMQv8fFqMTQ4OAOwUvzbrOaKrfEn94+ho0=\",\"text\":\"\\r\\n3\\r\\nGetting Started\\r\\nThis chapter is an overview that provides context for the rest of the book. It will present three \\r\\ndifferent, high-level views of the Android system. It is divided into two parts, a conceptual \\r\\nsection followed by a practical section.\\r\\nThe conceptual half of the chapter explores Android, metaphorically, from the side. This \\r\\nsection models Android as a geologist might, as a stack of strata. Each layer in the model has its \\r\\nown significance, and each supports the layer above it. The exploration will reveal most of the \\r\\nmajor components of the Android system as well as several key architectural structures.\\r\\nThe second half of the chapter—the practical half—explores the AOSP source. It addresses \\r\\nacquiring the code, its organization, its customization, and some of the tools used to maintain it.\\r\\nPutting Android in Its Place\\r\\nYou have almost certainly seen one of the many illustrations of Android as a layer cake before. \\r\\nFigure 3.1 is another version.\\r\\nSystem\\r\\nServices\\r\\nNative\\r\\nApplications\\r\\nAndroid\\r\\nServices\\r\\nAndroid\\r\\nApplications\\r\\nAndroid API Libraries\\r\\nAndroid\\r\\nNative\\r\\nLibraries\\r\\nHAL\\r\\nBinder\\r\\netc.Linux Kernel\\r\\nHardware\\r\\nSystem Libraries\\r\\nDalvik/\\r\\nART\\r\\nZygote\\r\\nFigure 3.1 Android Layer Cake\\r\\n9780134096346_print.indb   3525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=":{"__data__":"{\"id_\":\"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"YzEmxJ/hkBs6SvDWixnoC8MCKAbCeu2iQ34lE8Kysj4=\",\"text\":\"\\r\\n36Chapter 3  Getting Started\\r\\nFigure 3.1 shows the Android system in its context. The left half of the figure could be a generic \\r\\nLinux distribution such as Ubuntu or Mint. The right half illustrates the components specific to \\r\\nAndroid.\\r\\nIn the model, the system is divided into four major layers, each based on the one underneath \\r\\nit. Starting at the bottom, they are:\\r\\n ■Hardware: This is the physical device; a piece of metal you can hold in your hand.\\r\\n ■Linux Kernel: The kernel is software that creates the process and memory environments in which all applications run. As noted in Chapter 1, Android uses the \\r\\nvery popular Linux kernel.\\r\\n ■System Libraries: System libraries are software libraries, frequently supplied as opaque binaries by third-party providers that implement services used by multiple applications.\\r\\n ■Applications and System Services: Applications use the environment provided by the lower layers to do work useful to the user. A set of special, long-running applications, \\r\\ncalled system services or sometimes “daemons,” perform periodic tasks and manage \\r\\nsystem state.\\r\\nIn this model, most Android developers work predominantly in the block labeled “Android \\r\\nApplications” at the top right of the figure. They develop the applications that run in the \\r\\nAndroid environment. These developers spend their time learning and using the environment \\r\\nprovided by the surrounding Android system.\\r\\nThe rest of this book is about customizing Android itself to adapt it to new hardware. Its focus \\r\\nis the shaded areas outlined with the bold border, most of which is in the System Services layer \\r\\nof Figure 3.1. Before launching into the discussion of the Android-specific components, though, \\r\\nreviewing the rest of the environment in which those components run will be useful. \\r\\nHardware\\r\\nIn this model, the bottom of the stack is the hardware. The hardware is the motivation: some \\r\\ndevice with cool new features. It is the part that you, the reader, bring to the party. The purpose \\r\\nof the entire software stack above the hardware is to enable the creation of applications that \\r\\nprovide a human user with appropriate and intuitive control of some new, innovative hardware \\r\\nfeatures.\\r\\nDesigning and bringing up hardware are dark arts that are well outside the scope of this book. \\r\\nRoger Ye’s book, Embedded Programming with Android (Ye, 2016), part of the Android Deep Dive \\r\\nSeries, is an excellent introduction to “bare-metal” programming and the process of bringing \\r\\nup a device from scratch.\\r\\nThe Linux Kernel\\r\\nAs noted in Chapter 1, Android’s kernel is a variant of the Linux kernel. Linux is wildly \\r\\npopular, especially in embedded devices because it is open source and fairly easy to adapt to \\r\\nnew hardware. Chapter 4 discusses it again in more detail.\\r\\n9780134096346_print.indb   3625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=":{"__data__":"{\"id_\":\"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"oiTJxvWvFDwK0hSwKNT7EsuadjCxVobu5R/EQz11GEg=\",\"text\":\"\\r\\n37Putting Android in Its Place\\r\\nThe kernel is the Android system’s primary porting layer. The process of porting Android to a \\r\\nnew device consists in large part of getting an Android variant of the Linux kernel running on \\r\\nthe target device and then pulling the rest of the Android stack over on top of it.\\r\\nAlthough a kernel is a key part of Android, building a kernel is not normally part of building \\r\\nan Android system. Instead, the Android build tools treat the kernel as a black box: a pre-built, \\r\\nthird-party binary. As Chapter 4 will illustrate, it is a device developer’s responsibility to assem-\\r\\nble the working kernel and to provide it for inclusion into the device-installable file system \\r\\nimage that the Android build system creates.\\r\\nYou might be surprised to hear that the kernel is Android’s primary porting layer. Much of \\r\\nAndroid programming is done in the Java programming language, whose motto was “write \\r\\nonce, run anywhere.” For Android, however, Java source code is compiled into instructions \\r\\nfor Dalvik and ART, not instructions for the Java Virtual Machine (JVM). The purpose of the \\r\\nAndroid VM is to make applications portable across Android devices. Unlike the JVM, multi-\\r\\nplatform and OS portability was not a goal at all in the design of Android’s virtual machine.\\r\\nSystem Libraries\\r\\nThere are  common capabilities and functions that are used by multiple applications. Some \\r\\nof these capabilities—cryptography, video and audio rendering, a web browser—are large and \\r\\ncomplex. Implementing them as libraries that can be used by multiple applications makes \\r\\nsense.\\r\\nMost system libraries are included in the Android system, as is the kernel, as third-party, black \\r\\nbox binaries. They are essential to Android but are neither built nor maintained as part of the \\r\\nAndroid source tree.\\r\\nThis is an important area of customization for the developer of a new device. If software already \\r\\nexists—and that definitely includes software written in a language other than Java—that can be \\r\\nused as part of the interface to a new device, it can be included as part of this layer.\\r\\nEnterprises that already have extensive investments in software may be, quite understandably, \\r\\nreluctant to abandon that investment simply to move to the Android platform. Including the \\r\\nproprietary code as a system library and then plumbing it into the Android framework with \\r\\nJava bindings may preserve the investment at a reasonable cost.\\r\\nOne of the system libraries that is part of a standard Android system and that deserves particu-\\r\\nlar attention is Bionic. Bionic is Android’s equivalent of the standard C library.\\r\\nMost applications do not request kernel services directly. Instead, they use a standard library, \\r\\nthe C library, to request them. The standard C library interface was specified originally as part \\r\\nof the ANSI C standard and subsequently accepted by ISO. The widely established POSIX C \\r\\nlibrary standard is an incremental superset.\\r\\nThe C library standards are expressed as C header files (.h) against which applications are \\r\\ncompiled. These header files define symbols that allow a compiler to emit code for macros, \\r\\nconstants, variables, and functions in the application source code. Building an application \\r\\nrequires only the header files. The actual implementations of the C library are not included in \\r\\nthe compiled application.\\r\\n9780134096346_print.indb   3725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=":{"__data__":"{\"id_\":\"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"0MNAEmn7bItqKwCqSh97eWPPixoTgvNR1KQCnptg1bI=\",\"text\":\"\\r\\n38Chapter 3  Getting Started\\r\\nInstead, at run time, a linker binds the compiled application dynamically to the implementa-\\r\\ntion of the C library that is present on the system on which the application is running. Because \\r\\nthe API definitions against which the application was compiled are (with luck!) identical to \\r\\nthose actually implemented by the host system library, everything works. Usually, this just \\r\\nmeans that the C library is compiled using the exact same header files that the library clients \\r\\nuse when they are compiled. A given piece of code can be binary compatible across multiple, \\r\\nsimilar platforms, as long as all the platforms have C libraries that implement the exact  \\r\\nsame API.\\r\\nBionic is Android’s version of the standard C library. As part of Android’s ongoing battle for \\r\\nfrugality, it has been pruned relentlessly and is dramatically smaller than its BSD ancestors. \\r\\nIt is so small, in fact, that it does not meet even the ANSI standard, let alone the ubiquitous \\r\\nPOSIX standard. Applications that run perfectly well on other platforms may not run at all on \\r\\nAndroid, because Bionic does not support the functionality they require. \\r\\nThe implication that Bionic has its roots in BSD may come as a surprise. Most operating \\r\\nsystems based on a Linux kernel use a version of the GNU C library, glibc. Instead, Bionic is \\r\\nderived from the BSD UNIX, libc. There are several reasons for this but the most obvious is \\r\\nthat libc is licensed under the BSD license and is thus free of the constraints that its LGPL \\r\\nlicensing imposes on glibc. One of the goals in Android’s design was to eliminate any possible \\r\\nimpediment to its acceptance. That goal absolutely implies removing any possible licensing \\r\\nconstraints.\\r\\nMany existing applications, libraries, and utilities may be used on Android as long as they are \\r\\nrecompiled against the Android platform. Obviously, some limits exist because of the extent of \\r\\nthe pruning in Bionic. For example, existing code that uses System V IPC or certain functions \\r\\nin the kernel concurrency feature, pthreads, cannot be built or run on Android. Additionally, \\r\\nas this chapter will make clearer, the Android software stack is fundamentally different than \\r\\na typical Linux stack, which sometimes makes the use of existing Linux programs difficult or \\r\\nimpossible.\\r\\nAugmenting an Android system by adding one of the standard C-library implementations is \\r\\nentirely feasible. This simple and very common augmentation makes it possible to run many \\r\\nstandard Unix applications and libraries on an Android system.\\r\\nApplications\\r\\nSystem services are those special applications, typically with minimal user interfaces, that main-\\r\\ntain various subsystems: indexing files for search, locating and connecting to Wi-Fi networks, \\r\\nmounting and unmounting removable media, and so on. One special system service, init, \\r\\nis the first application run on system startup. It is responsible for much of the system startup \\r\\nprocess, including bringing up the other system services. It is discussed in more detail in \\r\\nChapter 6.\\r\\nThe Android system service environment is not the same as that on typical Linux systems. On \\r\\na Linux system, running the command:\\r\\nps –ef\\r\\n9780134096346_print.indb   3825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=":{"__data__":"{\"id_\":\"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"d1TPU1ZAuGyamMrr1WJhMyAAItKakHEe50xUDgY9ljA=\",\"text\":\"\\r\\n39Putting Android in Its Place\\r\\nproduces a list of currently running applications. On one of these systems, running this \\r\\ncommand will typically result in tens of lines of output describing many processes. Even if the \\r\\nsystem has just been finished booting and is not yet running many user applications, there \\r\\nare still likely to be quite a few applications running. These are the system services: the long \\r\\nrunning “daemons.” \\r\\nComparing the list of system services for a generic Linux system with a similar list from an \\r\\nAndroid system is instructive. Although the 30 to 40 system services that run as part of most \\r\\ncommon Linux distributions are fairly similar, the overlap with those running on an Android \\r\\nsystem is relatively small. The Android system has unfamiliar system services such as installd, \\r\\nrild, surfaceflinger, and vold instead of more common services such as udevd and \\r\\nsyslogd. Although Chapter 6 addresses some of these daemons in a bit more detail, in-depth \\r\\ndiscussion of the differences between the daemons in the Android universe and those in the \\r\\nstandard Linux universe are not the focus of this book. Linux daemons are well documented \\r\\nelsewhere. Although slightly dated, Karim Yaghmour’s excellent book Embedded Android \\r\\n(Yaghmour, 2013) is a fantastic resource for work in this area.\\r\\nThe Android Framework\\r\\nFigure 3.1 illustrates some of the Android-specific components of an Android system and their \\r\\npositions within the broader model of a working Linux system. The right side of the figure \\r\\nshows the Android framework in relation to the larger OS. Android has components that \\r\\noperate within each of the layers of the system model. From the bottom up, the components of \\r\\nthe Android system are\\r\\n ■Binder and other kernel plug-ins: Android requires several non-standard kernel  capabilities to function. These extensions are implemented as standard kernel extension  \\r\\nmodules. Chief among these extensions is Binder. Binder is an Interprocess Communi-\\r\\ncations service and is, perhaps, the heart of Android.\\r\\n ■HAL: The Hardware Abstraction Layer (HAL) is a system library that supports binary compatibility for the Android system across multiple hardware/driver platforms. The \\r\\nHAL, actually a group of libraries, serves as the interface between Android and certain \\r\\ngeneric types of hardware devices. Like the C library, the HAL is, essentially, a set of \\r\\nheader (.h) files that define an API for each of several common categories of hardware. \\r\\nThe HAL abstracts an interface between the underlying hardware and Android almost \\r\\nexactly as the C library abstracts the interface to the kernel and other common  \\r\\nfunctionality. The HAL has evolved over Android’s lifetime. Newer versions of Android \\r\\ncombine a library and a daemon/service to push the abstraction even farther. Most HAL \\r\\ncode is written in C or C++ and compiled to device native binaries. Chapters 8 and 10 \\r\\ncover this in greater detail. \\r\\n ■Dalvik, ART, and the Native Libraries: These are the special system libraries that comprise the virtual machine and runtime environment in which Android applications \\r\\nexecute. ART (and Dalvik, which it replaced) are Android’s analog of the Java virtual \\r\\nmachine and the libraries it provides. Both the runtime and many of the libraries that \\r\\nsupport it are written in C/C++ and compiled to native code for the device. Above \\r\\n9780134096346_print.indb   3925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o=":{"__data__":"{\"id_\":\"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"m0Hn82RoQRUI6JtFkhpkuQbw5O1VA7+Uh/BOJ9nvPBA=\",\"text\":\"\\r\\n40Chapter 3  Getting Started\\r\\nthis layer, however, nearly all source code is written in Java and compiled to virtual \\r\\ninstructions. Chapter 7 discusses ART and Dalvik.\\r\\n ■Android API Libraries: These are system libraries written in Java, compiled to dex virtual machine code, and translated to near-machine code (.oat files) during installation. \\r\\nThey are bound to Android applications at runtime, almost exactly as the C Library \\r\\nis bound to native applications. The code they contain, though, cannot be executed \\r\\nwithout the help of the virtual machine and its runtime environment. These libraries are \\r\\nthe APIs to Android services.\\r\\n ■Android Services: The Android analog of a system service, these privileged Android applications written in Java provide essential Android functionality. The Zygote service, \\r\\nespecially, plays a key role in an Android system. Zygote is covered in Chapter 6. The \\r\\nAndroid service model is covered in the next section and seen again in Chapters 10 and \\r\\n11 as part of the binderized HAL.\\r\\n ■Android Applications: These applications are developed for Android, compiled against the Android API, and run within the runtime environment. Building an Android \\r\\napplication is unlike developing applications either for other varieties of Linux or for \\r\\nother mobile platforms. Many other resources are available to a developer building an \\r\\napplication. Application building is discussed only peripherally in this book.\\r\\nThe Android Service Model\\r\\nA second, side-on view of the Android system gives a more functional perspective. Shown in \\r\\nFigure 3.2, it illustrates the basic structure of Android’s service model.\\r\\nApplication\\r\\nProcess\\r\\nAndroid\\r\\nApplication\\r\\nAndroid API\\r\\nLibraries\\r\\nService\\r\\nProcess\\r\\nAndroid\\r\\nService\\r\\nAndroid API\\r\\nLibraries\\r\\nAndroid Native\\r\\nLibraries\\r\\nHAL\\r\\nBinderLinux Kernel\\r\\nHardwareScarceResource\\r\\nFigure 3.2 The Android System Model\\r\\n9780134096346_print.indb   4025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=":{"__data__":"{\"id_\":\"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Kxz7gpHjipZIk418oedYW+fUlNkaJ8bNI8jI2EP8HlU=\",\"text\":\"\\r\\n41The Android Service Model\\r\\nThis diagram is key. It illustrates two applications in two separate processes, one on the right \\r\\nand one on the left. The application in the process on the left side of the diagram needs access \\r\\nto the scarce resource at the bottom of the diagram. The arrow from the application to the \\r\\nscarce resource represents its request.\\r\\nIn the diagram the scarce resource is shown as hardware because it often is. Examples of scarce \\r\\nhardware resources might include a phone’s screen, status lights, or a buzzer. Allowing all appli-\\r\\ncations unrestricted access to these things wouldn’t make sense. At best, applications would \\r\\nhave to coordinate access among themselves. At worst, a malicious application could make a \\r\\ndevice unusable by seizing one or more of the essential resources and refusing to release them.\\r\\nHardware resources, of course, are not the only things that can be scarce or that need protec-\\r\\ntion. A list of accounts or a database of acquaintances might require similar protection. Android \\r\\nuses the same mechanism to protect non-hardware resources.\\r\\nIn Figure 3.2, the arrow illustrating the application’s intended request for the scarce resource is \\r\\nmarked with an “X.” The “X” indicates that application is blocked by the system from making \\r\\nthe request directly.\\r\\nThe portal through which an application interacts with hardware—its driver—is almost \\r\\ncertainly catalogued as a file in the /dev directory. Recall that as the creator of the file system \\r\\nabstraction, the kernel is able to represent nearly anything as a file. The driver is a special kind \\r\\nof file but still a file. To interact with the resource directly, the application must open the driver \\r\\nfile and read and write from it.\\r\\nLike all files in the Linux file system, the driver file is catalogued with permissions. These \\r\\npermissions determine which processes the kernel will allow to open the file.\\r\\nListing 3.1 shows excerpts from the listing of the contents of the /dev directory from a typical \\r\\nAndroid device. Most of these files are drivers for one device or another. In most cases, the file’s \\r\\npermissions (the first column) limit access to the file’s owner (second column) or owning group \\r\\n(third column). Only a couple of the files in this example allow unrestricted access (crw-rw-rw).  \\r\\nThe others are accessible only by processes with specific UIDs.\\r\\nListing 3.1 Files in /dev\\r\\ncrw------- root     root     233,   0 1970-07-29 16:48 adsprpc-smd\\r\\ncrw-rw-r-- system   radio     10,  56 1970-07-29 16:48 alarm\\r\\n...\\r\\ncrw-rw---- system   audio     10,  40 1970-07-29 16:48 audio_slimslave\\r\\ncrw-rw---- nfc      nfc       10,  70 1970-07-29 16:48 bcm2079x-i2c\\r\\ncrw-rw-rw- root     root      10,  62 1970-07-29 16:48 binder\\r\\ncrw-r----- radio    radio    230,   0 1970-07-29 16:48 hsicctl0\\r\\ncrw-r----- radio    radio    230,   1 1970-07-29 16:48 hsicctl1\\r\\ncrw-r----- radio    radio    230,  10 1970-07-29 16:48 hsicctl10\\r\\n...\\r\\ncr--r----- root     system    10, 183 1970-07-29 16:48 hw_random\\r\\n9780134096346_print.indb   4125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=":{"__data__":"{\"id_\":\"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JVOUuhznpqhEMI/nj4IT89GM8f+PKajUGO2QAVtgh+g=\",\"text\":\"\\r\\n42Chapter 3  Getting Started\\r\\ncrw------- root     root      89,   0 1970-07-29 16:48 i2c-0\\r\\n...\\r\\ncrw-rw---- system   camera   239,   0 1970-07-29 16:48 jpeg0\\r\\n...\\r\\ncrw-rw---- system   camera   251,   0 1970-07-29 16:48 media0\\r\\n...\\r\\ncrw-rw---- root     mtp       10,  43 1970-07-29 16:48 mtp_usb\\r\\n...\\r\\ncrw-rw---- radio    vpn      108,   0 1970-07-29 16:48 ppp\\r\\n...\\r\\ncrw-rw---- system   drmrpc   244,   0 1970-07-29 16:48 qseecom\\r\\ncrw------- root     root      10,  92 1970-07-29 16:48 ramdump_adsp\\r\\n...\\r\\ncrw------- root     root     232,   3 1970-07-29 16:48 smd3\\r\\ncrw------- root     root     232,  36 1970-07-29 16:48 smd36\\r\\ncrw-rw---- system   system   232,   4 1970-07-29 16:48 smd4\\r\\ncrw-rw---- system   system   232,   5 1970-07-29 16:48 smd5\\r\\ncrw-rw---- system   system   232,   6 1970-07-29 16:48 smd6\\r\\ncrw-rw---- bluetooth bluetooth 232,   7 1970-07-29 16:48 smd7\\r\\ncrw------- root     root     232,   8 1970-07-29 16:48 smd8\\r\\ncrw-r----- radio    radio    231,  25 1970-07-29 16:48 smd_cxm_qmi\\r\\ncrw-rw---- bluetooth net_bt_stack 248,   0 2017-01-22 12:16 ttyHS0\\r\\ncrw------- media    media    248,   3 2017-01-22 12:16 ttyHS3\\r\\ncrw------- root     root     247,   0 1970-07-29 16:48 ttyHSL0\\r\\ncrw-rw---- system   vpn       10, 200 1970-07-29 16:48 tun\\r\\ncrw-rw---- system   net_bt_stack  10, 239 1970-07-29 16:48 uhid\\r\\n...\\r\\ncrw-rw-rw- root     root       1,   9 1970-07-29 16:48 urandom\\r\\ncrw-rw---- root     usb       10,  41 1970-07-29 16:48 usb_accessory\\r\\nWhen Linux was first developed in the 1990s, it was designed for computers that were shared \\r\\nby many users. At that time, security in an operating system meant, exactly, protecting users \\r\\nof the same computer from each other. Although attacks from across a network were not \\r\\nunknown, it was far more likely that one of the users of a system would compromise another’s \\r\\nresources on a single system than it was that an attack would originate externally. Over years of \\r\\nuse, the ability of the Linux system to protect individual user accounts from one another has \\r\\nbeen tested, retested, and tested again. It is quite secure.\\r\\nThe permissions system is what prevents the request for the scarce resource shown in Figure 3.2  \\r\\nfrom succeeding. The application’s process is not running with the user and group IDs that \\r\\nprotect the resource and, therefore, the application does not have read or write permission on \\r\\nthe driver. It does not have any way to obtain direct access to the resource.\\r\\nStarting with KitKat, Android included an adaptation of SE Linux that further enhanced \\r\\naccess controls. The original discretionary access control (DAC) model of permissions was not \\r\\n9780134096346_print.indb   4225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=":{"__data__":"{\"id_\":\"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"BQV08bHZycOGrDQAUHBX+YMQD8+i+L6dTU4egg1x0Gg=\",\"text\":\"\\r\\n43Exploring the Source\\r\\nenough to prevent a system from being compromised. For example, using only DAC, a highly \\r\\nprivileged system service (such as init), if compromised, might allow unfettered access to \\r\\nthe system. SE Linux for Android introduced mandatory access control (MAC). It allows each \\r\\nrunning process to be further constrained from a security standpoint. All applications, includ-\\r\\ning system processes, are assigned SE context that is enforced by the kernel. This limits the \\r\\ndamage any one process can do, if compromised.\\r\\nAs Chapter 5 will demonstrate, writing and extending SE policies is a non-trivial task. Unless \\r\\nabsolutely necessary, not altering the SE policies that are provided in the AOSP tree is best \\r\\nbecause they are CDD/CTS compliant. This is particularly important if the device is to be certi-\\r\\nfied as an Android device.\\r\\nThe series of unblocked arrows in Figure 3.2 show how Android applications actually do get \\r\\naccess to scarce resources when they need them. Instead of requesting the access directly, they \\r\\nuse an interprocess communication (IPC) mechanism, Binder, to make a request to a system \\r\\nservice. Normally, the IPC request is completely hidden from the caller because it is wrapped in \\r\\nin the Android API libraries. The client app sees only a call to a local method.\\r\\nWhen the client app wants to obtain access to a scarce resource, it simply calls one of the \\r\\nmethods in the Android API. The method call actually initiates an IPC conversation with \\r\\nAndroid service applications in one or more remote processes. These service processes, unlike \\r\\nthe client, have the necessary security privileges that do permit them to access the scarce \\r\\nresource. The service can coordinate the requests as appropriate and manage access and control \\r\\nclient use of the resource. Services provide fine-grained control over application access to the \\r\\nscarce resources they manage by declaring permissions. A permission is nothing more than a \\r\\nunique string that is recognized by the Android system. Android strictly manages permissions: \\r\\nApplications that want to use them must declare their intentions in their manifests and must \\r\\nget explicit approval from the application user before the permissions are granted. When an \\r\\napplication requests access to a scarce resource from a service, the service can provide access in \\r\\nthe firm knowledge that the application is acting on behalf of an informed user.\\r\\nThis mechanism, access to resources through a proxy service, is the key to hardware access in \\r\\nAndroid.\\r\\nExploring the Source\\r\\nThe last of this chapter’s high-level views of Android is, as promised, much more practical. It’s \\r\\ntime to look at the AOSP code-base.\\r\\nThe primary source for Android code is the Android Open Source Project (AOSP) site at https://\\r\\nsource.android.com/. Android system developers should be familiar with this site whether it is \\r\\nthe source of the code for their project or not. Android originates here, and documentation and \\r\\nupdate information are available here before being available anywhere else.\\r\\nIn particular, the Overview section of the AOSP website contains important information about \\r\\nsource branching and tagging strategies and the legal constraints on the use of the Android \\r\\n9780134096346_print.indb   4325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=":{"__data__":"{\"id_\":\"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"t1nCIh0AzRJ3cWTD27E2107Xbvg8/bqXq4l2GTyC4/o=\",\"text\":\"\\r\\n44Chapter 3  Getting Started\\r\\nname, logos, and so on. Anyone working with Android code should read this documentation \\r\\nand be, at the least, generally familiar with it.\\r\\nOther Sources\\r\\nSeveral other sources for forks of the AOSP code exist, each with its own advantages and disad-\\r\\nvantages. Among these forks, perhaps the best known are AOKP and MIUI. Sadly, one of the \\r\\nmost important forks, CyanogenMod, has disappeared from the scene. The support community \\r\\nhas rebranded it as LineageOS, and it may return to viability in the future.\\r\\nWhat’s in the Box?\\r\\nThe remaining sections of this chapter assume that the developer/build machine has been set \\r\\nup as described in Chapter 2. Let’s take a quick walk through the source, just to get the lay of \\r\\nthe land. Listing 3.2 shows the top-level directory structure.\\r\\nListing 3.2 Source Top Level\\r\\nlrwxr-xr-x    1 aosp  staff     19 Oct 13 09:26 Android.bp\\r\\n-r--r--r--    1 aosp  staff     92 Oct 13 09:26 Makefile\\r\\ndrwxr-xr-x   35 aosp  staff   1564 Oct 13 09:26 art\\r\\ndrwxr-xr-x   14 aosp  staff    816 Oct 13 09:26 bionic\\r\\ndrwxr-xr-x    3 aosp  staff    102 Oct 13 09:26 bootable\\r\\nlrwxr-xr-x    1 aosp  staff     26 Oct 13 09:26 bootstrap.bash\\r\\ndrwxr-xr-x    5 aosp  staff    374 Oct 13 09:26 build\\r\\ndrwxr-xr-x    3 aosp  staff    102 Oct 13 09:26 compatibility\\r\\ndrwxr-xr-x   12 aosp  staff    748 Oct 13 09:26 cts\\r\\ndrwxr-xr-x    8 aosp  staff    476 Oct 13 09:26 dalvik\\r\\ndrwxr-xr-x    5 aosp  staff    170 Oct 13 09:26 developers\\r\\ndrwxr-xr-x   20 aosp  staff    748 Oct 13 09:26 development\\r\\ndrwxr-xr-x   10 aosp  staff    340 Oct 13 09:27 device\\r\\ndrwxr-xr-x  310 aosp  staff  10540 Oct 13 09:30 external\\r\\ndrwxr-xr-x   15 aosp  staff    510 Oct 13 09:31 frameworks\\r\\ndrwxr-xr-x   12 aosp  staff    408 Oct 13 09:31 hardware\\r\\ndrwxr-xr-x    5 aosp  staff    170 Oct 13 09:31 kernel\\r\\ndrwxr-xr-x   20 aosp  staff   1258 Oct 13 09:31 libcore\\r\\ndrwxr-xr-x    8 aosp  staff    680 Oct 13 09:31 libnativehelper\\r\\ndrwxr-xr-x    9 aosp  staff    306 Oct 13 09:32 packages\\r\\ndrwxr-xr-x    6 aosp  staff    272 Oct 13 09:32 pdk\\r\\ndrwxr-xr-x   10 aosp  staff    374 Oct 13 09:32 platform_testing\\r\\ndrwxr-xr-x   30 aosp  staff   1020 Oct 13 09:36 prebuilts\\r\\ndrwxr-xr-x   24 aosp  staff   1054 Oct 13 09:36 sdk\\r\\ndrwxr-xr-x   37 aosp  staff   1258 Oct 13 09:36 system\\r\\ndrwxr-xr-x   10 aosp  staff    340 Oct 13 09:36 test\\r\\ndrwxr-xr-x    4 aosp  staff    136 Oct 13 09:36 toolchain\\r\\ndrwxr-xr-x   21 aosp  staff    714 Oct 13 09:37 tools\\r\\n9780134096346_print.indb   4425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI=":{"__data__":"{\"id_\":\"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"OJbIwXuGwDE963yhb+UCBV7LiTl4LrCTiZyvlcO/cJE=\",\"text\":\"\\r\\n45Exploring the Source\\r\\nAndroid.bp\\r\\nThe build system for Android is in transition. Up through the Marshmallow release, Android \\r\\nused an extension of GNU make as the underlying build system. The system used build files \\r\\nnamed Android.mk dispersed throughout the build tree, selected using a configuration describ-\\r\\ning the particular device being built. The process resulted in a large in-memory makefile to \\r\\ndo the build. While powerful, this approach had limitations and never scaled well, especially \\r\\nnoticeable as the Android source tree grew in size.\\r\\nNougat introduced a new build system, Soong, which is inspired by Bazel and uses a Go syntax. \\r\\nWith Soong, the Android.mk files are replaced with Android.bp (blue print) files. As announced \\r\\nin late 2020, Google will be further transitioning the build system to Bazel in the near future.\\r\\nMakefile\\r\\nMakefile is the top-level makefile used in the legacy GNU make build system. It is copied here \\r\\nfrom the build directory when repo sync is executed.\\r\\nart\\r\\nThe art directory contains the code for the Android Runtime (ART), an ahead-of-time compiled \\r\\nruntime that replaces the original Android virtual machine, Dalvik.\\r\\nbionic\\r\\nThe bionic directory contains the code for the Android Standard-C-like library, Bionic. The \\r\\nearlier section of this chapter, “System Libraries,” describes Bionic.\\r\\nbootable\\r\\nThe bootable directory contains the source for the recovery executable. Recovery is used to \\r\\napply OTA updates, write new firmware, and perform a factory data wipe.\\r\\nbootstrap.bash\\r\\nThe bootstrap.bash script is part of the new build system, Soong.\\r\\nbuild\\r\\nThe build directory contains the both the old and the new build systems. In particular, it \\r\\ncontains the shell script envsetup.sh, used to configure the build environment. In addition to \\r\\nsetting up required environment variables, this script introduces helper aliases and shell func-\\r\\ntions, such as lunch, which are used to configure and execute the build, as discussed in detail \\r\\nin Chapter 2.\\r\\ncts\\r\\nThe cts directory contains the Android Compatibility Test Suite tests. Passing these tests is \\r\\nthe minimum requirement for certification as an Android device.\\r\\n9780134096346_print.indb   4525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=":{"__data__":"{\"id_\":\"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"GYej/q95d17wxjFTVng6QneL0Xrgenmz/f9P9Bg9zAQ=\",\"text\":\"\\r\\n46Chapter 3  Getting Started\\r\\ndalvik\\r\\nThe dalvik directory contains the source for Android’s original VM, Dalvik.\\r\\ndevelopers\\r\\nThe developers directory contains three different repositories of mostly legacy example code. \\r\\nThe example Gradle plug-ins may be of interest.\\r\\ndevelopment\\r\\nThe development directory contains odds and ends that may be useful to developers. It \\r\\ncontains things such as tools for editing Android source using one of the popular IDEs, Eclipse \\r\\nor IntelliJ; more example code; developer debug applications; configurations for checkstyle, the \\r\\nemulator; and other tools.\\r\\ndevice\\r\\ndevice is an extremely important directory for a device developer. The Android source and \\r\\nbuild system are designed with the intention that all device-specific code—device-specific \\r\\nconfiguration of the build system, toolchain customizations, kernel selection, and even special-\\r\\nized versions of applications—go here. Although most device developers will find that very \\r\\nconstraining, it is a smart strategy to keep as much device-specific code as possible in this direc-\\r\\ntory. Only broader, more generic cross-platform changes should be made outside of the device-\\r\\nspecific directory. Much of the work in the rest of this book will happen in this directory.\\r\\nexternal\\r\\nexternal contains all the buildable packages that are used, but not maintained, as part of \\r\\nAndroid. It contains things like bouncycastle, the Android cryptography library; expat, an \\r\\nXML parser; junit, a standard testing framework; and so on. All of these things are essential \\r\\ncomponents of a running Android system but are obtained from external providers. Placing the \\r\\ncode for these components in this directory makes the dependency explicit and makes Android \\r\\nless susceptible to versioning issues.\\r\\nframeworks\\r\\nThe frameworks directory is the heart of Android. The public Android API is located \\r\\nhere, in the directory frameworks/base/core/java. Core system services such as the \\r\\nActivityManagerService and PackageManagerService are in frameworks/base/\\r\\nservices/core/java. Input event management and sensors code can be found under  \\r\\nframeworks/base/native. You can usually find native implementation code next to java \\r\\ndirectories in sibling jni directories and static resources in directories named res.\\r\\nhardware\\r\\nThe hardware directory contains the HAL. This is the abstraction layer code for common \\r\\ndevices: Wi-Fi, Bluetooth, and baseband radios; sensors; cameras; and so on. Although this \\r\\n9780134096346_print.indb   4625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8=":{"__data__":"{\"id_\":\"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"cGdJih2o/RdmY+iSUQi/q4WvO3qhEXf+2Fh18WVUe4w=\",\"text\":\"\\r\\n47Exploring the Source\\r\\ndirectory contains shim code for many common devices, it is the device directory that \\r\\ncontains customizations for a specific board and any one-off hardware on that board.\\r\\nlibcore\\r\\nThe most interesting things that live in the libcore directory are the sources for the Apache \\r\\nHarmony base implementations of the Java API. For example, the file\\r\\nlibcore/ojluni/src/main/java/java/lang/Class.java\\r\\nis the source for Android’s implementation of the Java type Class.\\r\\nlibnativehelper\\r\\nAs the name implies, the libnativehelper directory contains native helper functions. It is \\r\\nsort of a “commons” directory for HAL code that leverages Java Native Interface (JNI) to bridge \\r\\nthe gap between the runtime code and backing native code.\\r\\npackages\\r\\nThe packages directory contains applications that will be included as part of the system. The \\r\\ndirectory packages/apps, for instance, contains the standard DeskClock, Phone, and Camera \\r\\napps that are pre-installed (and not uninstallable) on a typical Android device.\\r\\npdk\\r\\nThe pdk directory contains the platform development toolkit (PDK). It is given to original \\r\\ndevice manufacturers (ODMs) so that they can develop HAL and other specialization soft-\\r\\nware for their devices. The PDK is a subset of the full Android source, so this directory doesn’t \\r\\ncontain much that is useful as part of the Android source tree.\\r\\nplatform-testing\\r\\nThe platform-testing directory contains odds and ends of tools for testing device \\r\\nfunctionality.\\r\\nprebuilts\\r\\nThe large prebuilts directory is very similar to the external directory, except that the things \\r\\nthat it contains are not built as part of the system build process. For instance, it contains the \\r\\nbinaries for the clang and gcc, C compilers; the Python and Go language SDKs; and the kernel \\r\\nfor the QEMU-based Android emulator. \\r\\nsdk\\r\\nsdk, a mostly historical directory, contains source for some of the Android development tools \\r\\nas they were just before Android Studio was introduced. Since Android Studio, the SDK tools \\r\\nhave their own, partially overlapping, repo-maintained build tree (see http://tools.android.com/ \\r\\nbuild). Most of the code here is obsolete.\\r\\n9780134096346_print.indb   4725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw=":{"__data__":"{\"id_\":\"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"I5U6/xkQdUT8ldHLbO91VgqGquc4Wzeee7eRvndveYg=\",\"text\":\"\\r\\n48Chapter 3  Getting Started\\r\\nsystem\\r\\nAnother very important directory, system contains the native daemons, system libraries, and \\r\\ndata essential to an Android system. In here are the sources for vold, the SE Linux policies, and \\r\\nthe system trusted certificates. These are the parts of the Android system that are illustrated in \\r\\nthe top-left of Figure 3.1 and discussed in Chapter 7.\\r\\ntoolchain\\r\\nThe toolchain directory contains a set of automated tests that can be executed to gather \\r\\nbenchmarking data. Building and running these tests require patching the source tree.\\r\\ntools\\r\\nThe tools directory contains a number of helper tools, such as ones to ease the creation of \\r\\nAndroid AVDs and to analyze atrace data captures.\\r\\nout\\r\\nThe out directory is not part of the build environment maintained by repo. It is, however, the \\r\\ndefault scratchpad for the build system. None of the previously mentioned directories should \\r\\nbe affected in any way by a system build. From the build’s point of view, they are all read only. \\r\\nRestoring a build environment to its pristine state should always be possible by simply deleting \\r\\nthis directory. All intermediates as well as the final build artifacts are put here.\\r\\nSummary\\r\\nThis chapter has been a very high-level tour of the Android system. It inspects Android from \\r\\nthree very broad points of view: as a series of layers of abstraction, starting at the hardware and \\r\\nending with user applications; as a client-server architecture in which servers regulate access to \\r\\nscarce resources; and as a build environment, with source and tools for generating the running \\r\\nsystem.\\r\\nSubsequent chapters walk up the stack illustrated in Figure 3.1, illustrating the relation between \\r\\nthe source code and the running system and demonstrating at each layer how to customize \\r\\nbehavior.\\r\\n9780134096346_print.indb   4825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g=":{"__data__":"{\"id_\":\"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"COG/C6kCy+eZMUscOGjciSIEhJIrM07PuTt3RifoXHU=\",\"text\":\"\\r\\n4\\r\\nThe Kernel\\r\\nAs mentioned previously, the Android system uses a Linux kernel. The Linux kernel is a very \\r\\nlarge and extremely complex piece of software. Some developers spend their entire careers \\r\\nunderstanding and modifying it. It is the subject of many books, including the excellent \\r\\nBuilding Embedded Linux Systems, 2nd ed. (Yaghmour, 2008) and Linux Device Drivers, 3rd ed. \\r\\n(Corbet, 2005). This chapter is not, of course, a substitute for any of those books—or for a  \\r\\nfew years of experience.\\r\\nBringing up a kernel for a brand new device—setting up a build environment, choosing the \\r\\ncorrect compilation flags, and getting all the necessary drivers debugged and working—is a dark \\r\\nart that is likely to require a significant investment of time. A developer with specific kernel \\r\\nporting experience is likely to be able to accomplish the task in a fraction of the time required \\r\\nby even a very talented and motivated novice.\\r\\nThe Linux kernel is incorporated into an Android system as an essential but completely opaque \\r\\nbinary. It is—at least from the point of view of the Android build system—just a dependency. \\r\\nThere are, however, several very specific modifications, kernel modules, that are unique to \\r\\nthe Android system. Those features are the central topic of this chapter.\\r\\nThe Linux Kernel\\r\\nThe kernel creates the virtual environment in which applications live. As discussed in Chapter 1,  \\r\\nmany kinds of kernels exist and create many kinds of environments. Linux is a member of the \\r\\nfamily of kernels that provide two broad environmental features to client applications: a virtual \\r\\nexecution space and a file system. Other members of this class (chosen fairly arbitrarily) are the \\r\\nWindows NT Kernel, Dartmouth DTSS, and Digital Equipment Corporation’s RSTS/E.\\r\\nThe astute reader will notice that two of these three kernels, Dartmouth DTSS and Digital \\r\\nEquipment Corporation’s RSTS/E, are not exactly household words today. That is because \\r\\nwithin its family of operating systems, UNIX-like systems are by far the dominant genus. In \\r\\nparticular, the Linux species has pretty much won the evolutionary battle, especially in the \\r\\nembedded system niche.\\r\\n9780134096346_print.indb   4925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=":{"__data__":"{\"id_\":\"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"4kDzkXDLpaWRI9QTSNiHriyP3E7ogwbeKN8QpTTEC2Q=\",\"text\":\"\\r\\n50Chapter 4  The Kernel\\r\\nIn addition to managing a virtual environment, the Linux kernel is also Android’s porting \\r\\nlayer. The process of porting Android to a new device is, for the most part, porting Linux \\r\\nto that device and then pulling the rest of the Android stack over on top of it. The Android \\r\\nvirtual machines, Dalvik and ART, discussed in Chapter 6 and responsible for executing the \\r\\nvirtual machine code into which Java language programs for the Android system are compiled, \\r\\nalthough analogs of the JVM, have very little to do with portability.\\r\\nKernel Process Management\\r\\nMost modern computing hardware has, at its center, a small number (probably more than one \\r\\nbut probably less than ten) of processing units (also called cores or sometimes processors). \\r\\nThese are the components of a device that execute machine instructions.\\r\\nA piece of computing hardware is capable of running a number of simultaneous processes more \\r\\nor less equal to the number of processors that it has. Simplistically, each core starts executing \\r\\na stream of instructions when the power to the chip is turned on and stops when the power is \\r\\nturned off.\\r\\nThe other essential ingredient for a von Neumann architecture computer is memory. Modern \\r\\nhardware typically has several different kinds of memory, each of which is a different balance \\r\\nbetween cost and speed: registers, several levels of cache, and on-board and external RAM \\r\\n(random-access memory).\\r\\nIn an ideal, theoretical machine, each core has identical capabilities and identical access to all \\r\\nthe memory. In practice, there are exceptions. Registers and, perhaps, some kinds of cache may \\r\\nbe available only to a specific, associated core. Most memory, though, is globally accessible \\r\\nto all the processors. In the hardware environment, it is completely unremarkable for a value \\r\\nwritten by one CPU to be overwritten by another.\\r\\n \\r\\nNote\\r\\nNot all hardware is ideal. In an attempt to get the most bang for the buck, some hardware has \\r\\nspecialized cores that have differing capabilities: more cores for common tasks, fewer for less \\r\\ncommon. One example of unequal core capability is hardware popular for many Android devices, \\r\\nwhich is capable of adjusting the clock speeds independently for each core. On such hardware, \\r\\ntasks of lesser importance may be assigned to slower processors.\\r\\nThe first job of the kernel is to create a virtual execution environment on top of the hardware. \\r\\nThis virtual environment is very different from the hardware environment described earlier. In \\r\\nit, a nearly infinite number of processes appear to run simultaneously. Each process appears to \\r\\nuse one or more virtual CPUs to execute instructions and to have its own, private address space \\r\\n9780134096346_print.indb   5025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=":{"__data__":"{\"id_\":\"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"OJ8NcYi5h6NvYnO64C1qLb+Zh7J+dsY1t1RlMYEyvbU=\",\"text\":\"\\r\\n51The Linux Kernel\\r\\nin which the memory cannot be accessed from other processes. In this virtual environment, the \\r\\nCPUs are ideal and identical, and it would be very surprising if one process could overwrite a \\r\\nmemory that belonged to another. This is the environment with which most application devel-\\r\\nopers are familiar.\\r\\n \\r\\nNote\\r\\nWithin this book, a thread of execution, or simply thread, is a sequence of instructions  \\r\\nexecuted one at a time in order by a single, possibly virtual CPU, or processor. A process is  \\r\\none or more threads of execution with a single, private address space not shared with any \\r\\nother process. \\r\\nAn application is a collection of code with a single purpose. Frequently, but not always, an appli-\\r\\ncation runs as a single process.\\r\\nKernel Memory Management\\r\\nManaging memory is the second major task of a kernel. Hardware memory can roughly be \\r\\ndivided into two categories: random-access and block-structured. Information can be \\r\\nstored into or retrieved from random access memory, RAM, exactly as its name suggests, simply \\r\\nby addressing the specific cell of the memory that is of interest. When the CPU requires the \\r\\nvalue that it stored at address 3730, it requests the value at address 3730 explicitly as part \\r\\nof executing an instruction. Access to address 3730 is completely independent of access to \\r\\naddresses 3731 or 3729.\\r\\nIn an ideal computer, all memory would probably be random access. In actuality, because \\r\\nrandom-access memory is expensive, most computer systems also have block-structured \\r\\nmemory. Block structured memory is usually cheaper, bigger, and, most likely, slower to access \\r\\nthan random access memory. Think of a disk drive or its modern equivalent, a solid-state  \\r\\ndrive (SSD).\\r\\nWhereas a processor can directly access random access memory by address, accessing block-\\r\\nstructured memory is considerably more complicated. Typically, a process that needs data that \\r\\nis stored in block-structured memory must first reserve a contiguous piece of random-access \\r\\nmemory. Next, it must communicate to the block-structured memory device that contains the \\r\\ninformation that it needs, the addresses of both the block of memory in which it is interested, \\r\\nand the location and size of the RAM it has reserved.\\r\\nThis initiates a data transfer. The block-structured memory device copies the contents of the \\r\\nrequested block from its internal store to the RAM. When the transfer is complete, it notifies \\r\\nthe processor. The requested block of memory is now available as RAM.\\r\\n9780134096346_print.indb   5125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=":{"__data__":"{\"id_\":\"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"N9Z7X6OcirdNjS+Hrgb3XtKPv46kSsj55YIMuo40/B0=\",\"text\":\"\\r\\n52Chapter 4  The Kernel\\r\\nNote\\r\\nThe differentiation between the two different types of memory is not arbitrary. Of course, it is \\r\\ntrue that both types of memory are block structured and addressable: The only real distinction \\r\\nis in the size of the block and the amount of time that it takes to move one of them across \\r\\na device’s data paths. As usual, though, size matters—a lot. If the number of bits in a block \\r\\nis less than or equal to the number of bits that can be transported simultaneously through \\r\\nthe device (the device word size), the memory is considered random access. If the number of \\r\\nbits in the memory block requires that the block be transferred sequentially, word by word, the \\r\\ndevice is considered block structured.\\r\\nBlock-structured memory is used in two very important ways. The first is as a way of creating \\r\\nthe virtual memory spaces in which applications run.\\r\\nWhen an application process is not actively using some part of its memory (it is waiting; \\r\\nperhaps for user input or for a certain amount of time to elapse) the kernel, using a process \\r\\nthat is exactly the reverse of that just described, can free the memory for other use. The kernel \\r\\nmarks a section of the application’s RAM as unavailable and requests that a block-structured \\r\\ndevice store it.\\r\\nAfter the transfer is complete (the contents of the RAM have been “swapped” to block storage), \\r\\nthe RAM can be reallocated for use by other processes and other purposes. Of course, when \\r\\nthe paused application once again needs access to the piece of its address space that has been \\r\\nswapped to disk, the kernel must, once more, reverse the process. It reallocates memory for the \\r\\nstored data, reads it from the block storage device, and replaces the contents exactly as they \\r\\nwere the last time the application looked. This is virtual memory, one of the main tools \\r\\nnecessary to allow the sum of the memory used by all the applications running on a device to \\r\\nbe much greater than the amount of hardware RAM that is installed in the device.\\r\\nAt the time Android was designed, the block-structured memory devices on most computers \\r\\nwere hard drives: spinning magnetic disks with moveable read-write heads. Hard drives are fairly \\r\\nfragile and running them requires amounts of power that are out of the question for a battery-\\r\\npowered device.\\r\\nMobile devices, in contrast, even then used solid-state memory, similar in many respects to the \\r\\nmemory ubiquitous in modern laptops: SSDs. The big difference between solid-state memory \\r\\nthen and now is that, in 2002, solid-state memory devices deteriorated significantly with each \\r\\nwrite operation. At that time, a bit on a disc drive might be good for millions of read/write \\r\\ncycles, whereas a bit on a flash card might fail after only tens of thousands of cycles.\\r\\nThe implication is that, although storing data persistently was possible, the operating system \\r\\nhad to be quite parsimonious in its use. In particular, trying to use flash memory as virtual \\r\\nmemory swap space, in addition to being slow, would severely limit the life of the device.\\r\\nStarting with Android 4.4 (KitKat), Android included a kernel module, zram, to provide swap \\r\\ncapability. zram targets devices with very little  memory: as low as 512MB of RAM. It provides \\r\\n9780134096346_print.indb   5225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=":{"__data__":"{\"id_\":\"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"/KtVD+D810Sax0PxzBFD6oWa9iWTz+uw5cOXjCsMExw=\",\"text\":\"\\r\\n53The Android Kernel\\r\\na compressed memory space used to swap out process pages, just as they are swapped to non-\\r\\nvolatile block storage. This may seem counterintuitive: The kernel carves out a bit of RAM \\r\\nto use as swap space for application memory pages. The zram module, though,  compresses \\r\\npages as they are stored using a fast compress/decompress algorithm: LZ4 or LZO. Because it \\r\\nuses RAM as a virtualized swap space, zram is fast and efficient. zram notwithstanding, lack of \\r\\nvirtual memory is second only to power as the most important constraint in the design of the \\r\\nAndroid system.\\r\\nThe kernel’s second memory management trick is the catalog tree. Moving blocks of stored \\r\\ninformation in and out of RAM is nifty, but it doesn’t go very far toward the nearly univer-\\r\\nsally accepted abstraction for long-term memory, a tree of folders (catalogs) containing both \\r\\nother folders and sequentially accessible files. The kernel has one or more components, called \\r\\nfile systems, which manage different varieties of block-structured memory hardware and use \\r\\ndifferent strategies to create the tree-of-files abstraction.\\r\\nAn important thing to remember about the file tree is that the kernel creates it out of thin air. \\r\\nA block-structured memory device has not even the faint whiff of a tree structure about it. It \\r\\nis just a big, flat array of bits. If a kernel can make block-storage look like a tree-structured file \\r\\nsystem, it can make nearly anything else look like a file just as easily. This capability comes up \\r\\nagain in Chapter 5, when we discuss Android’s security and again in Chapters 8 and 10 in the \\r\\ndiscussion of Android’s hardware abstraction layer.\\r\\nThe Android Kernel\\r\\nAlthough the Android system is based on the Linux kernel, it is not the case that any Linux \\r\\nkernel will support Android. The Android system requires several very special kernel features. \\r\\nAt least two of these features have been the source of extended and sometimes acrimonious \\r\\ndiscussion in the Linux community. These features can be a major hurdle in porting Android  \\r\\nto a new device: finding a kernel that supports both the target hardware and Android at the \\r\\nsame time.\\r\\nLike most kernels, Linux implements a plug-in system that allows it to be customized for \\r\\nvarious hardware and software requirements. These plug-ins are either kernel modules or \\r\\ndevice drivers. The kernel software components that manage a mouse, a keyboard, speakers, \\r\\nand network communication are all examples of device drivers.\\r\\nDevice drivers have two roles. First, a driver may manage a specific piece of hardware. The \\r\\ndriver may be programmed with the device protocol nearly at the level of controlling voltages \\r\\nand pulse timing. \\r\\nUsually, the driver is also the public interface to the hardware. The driver is the definition of \\r\\nthe hardware API. Drivers usually expose, for application use, either a random-access or a block-\\r\\nstructured virtual interface that abstracts the details of a hardware device away from the rest of \\r\\nthe system: no other code need be aware of it. An application that wants to use a given hard-\\r\\nware mechanism will do so by connecting with that mechanism’s device driver and interacting \\r\\nwith it according to the driver’s interface. \\r\\n9780134096346_print.indb   5325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=":{"__data__":"{\"id_\":\"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hEc7uMtJQrHFI/xjUi6qaGB8dravu1X7Dlos4Ddpy5s=\",\"text\":\"\\r\\n54Chapter 4  The Kernel\\r\\nAndroid adds an additional layer of abstraction between user space Android framework \\r\\nprocesses and the hardware, called the Hardware Abstraction Layer (HAL). This additional \\r\\nlayer of abstraction allows Android to use a single API for several different kernel drivers that \\r\\nprovide access to similar types of devices, despite the fact that each is controlled by its own \\r\\ndriver and that each of the drivers defines it its own, unique API.\\r\\nDevice drivers execute as part of the kernel. A driver can do anything any other part of the \\r\\nkernel can do, from scribbling in the memory of any application to changing what instructions \\r\\nit executes. An error in the driver frequently manifests as a “kernel panic” and is likely to bring \\r\\ndown the entire system. Because of this, by convention, device drivers are as small and simple \\r\\nas they can possibly be.\\r\\nIn their seminal book, Linux Device Drivers, authors Corbet et al. admonish:\\r\\n... it emphasizes that the role of a device driver is providing mechanism, not policy. \\r\\nThe distinction between mechanism and policy is one of the best ideas behind the \\r\\nUnix design. Most programming problems can indeed be split into two parts: “what \\r\\ncapabilities are to be provided” (the mechanism) and “how those capabilities can be \\r\\nused” (the policy). If the two issues are addressed by different parts of the program, \\r\\nor even by different programs altogether, the software package is much easier to de-\\r\\nvelop and to adapt to particular needs. (Corbet, Rubini, and Kroah-Hartman, 2005)\\r\\nThis is probably the reason that the Linux community has been so reluctant to accept the \\r\\ndevice drivers required by Android, in particular Binder and wakelocks.\\r\\nFor quite a while, the Linux kernel used in Android systems was a complete fork of the Linux \\r\\nkernel. Android kernels could not be downloaded from the canonical Linux website, kernel.org. \\r\\nInstead, they were hosted on Google websites. The ensuing debates between the two communi-\\r\\nties, Linux and Android, were unpleasant and prolonged.\\r\\n \\r\\nNote\\r\\nAs an example of the conflict, wakelocks and the debate surrounding them are discussed in \\r\\ndetail by Rafael J. Wysocki in his Linux Weekly News article, “An alternative to suspend block-\\r\\ners” (Wysocki, 2010) and the articles it references at https://lwn.net/Articles/416690/.\\r\\nAlthough it might be optimistic to say that the rift has been healed, a certain pragmatism \\r\\nhas prevailed. Android has accomplished what no other Linux distribution has accomplished: \\r\\nmaking Linux ubiquitous. By orders of magnitude, most devices using Linux today are Android \\r\\ndevices. Android is popular, and the Linux community has proved itself mature enough to \\r\\nassimilate the popularity. Downloading an Android Linux from kernel.org is now possible.\\r\\nAndroid Kernel Features\\r\\nBuilding an accurate catalog of the differences between a generic Linux kernel and a kernel \\r\\nnecessary to run an Android device is difficult. Several people have attempted it over the years, \\r\\nand a small but useful body of literature on the topic exists (mostly rooted at http://elinux.org).\\r\\n9780134096346_print.indb   5425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=":{"__data__":"{\"id_\":\"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"K06CRh6UoPF5B67O3YxtBpKlgV7MOZ1+Gna1A8LCbbI=\",\"text\":\"\\r\\n55The Android Kernel\\r\\nBecause the Android kernels are stored in git, creating the patch set necessary to create the \\r\\nAndroid kernel from the vanilla kernel on which it is based is a relatively straightforward \\r\\nprocess. However, at last check, the exercise creates something just under 300 patches with a \\r\\ncombined size of around 4 megabytes. What do all these patches do? The following subsec-\\r\\ntions, while not exhaustive, describe most of the important features specific to Android kernels.\\r\\nWakelocks\\r\\nSourceNow part of the standard Linux kernel\\r\\nOne of the special features required by Android is the wakelock. Wakelocks or suspend-\\r\\nblockers are a form of opportunistic power control.\\r\\nBy default, most Linux devices are running. Although it may seem obvious to point that out, \\r\\nit is important because at the time that Android was developed, most Linux devices were also \\r\\nattached to practically infinite supplies of power.\\r\\nOn a mobile device, the most important resource by far is the battery. At the time that Android \\r\\nwas in its early development, running a standard Linux on a mobile device meant battery life \\r\\nthat was measured in minutes, not in days. One of the first hurdles the original Android team \\r\\nhad to leap was dramatically reducing the battery drain. An important step in this direction \\r\\nwas reversing the default wake state. Like the dormouse from Alice in Wonderland, the Linux \\r\\nkernel on an Android device prefers to be asleep.\\r\\nObviously, although being asleep is great for battery life, it isn’t much good for getting work \\r\\ndone. Enter wakelocks.\\r\\nA wakelock is a simple binary flag. The kernel is constantly trying to go to sleep. If any wake-\\r\\nlocks are set, however, they prevent it from doing so. Application programs seize wakelocks and \\r\\nbecome responsible for keeping the kernel (and, by extension, the hardware) awake until they \\r\\ncomplete whatever useful work they are doing. A responsible application, when it is done with \\r\\nuseful work, releases any wakelocks it holds. If no other applications are holding wakelocks, the \\r\\nkernel immediately puts the device to sleep.\\r\\nThe original implementation of wakelocks from the Google/Android team contained a serious \\r\\nrace condition (described in detail in the article cited in the earlier Note). Because of this race \\r\\ncondition, the possibility existed for the kernel to fail to notice an application’s request for a \\r\\nwakelock if the request happened while the kernel was already in the process of powering down \\r\\nthe device. A device could sleep despite an application’s attempt to keep it awake.\\r\\nIn 2010, as part of healing the fork between the Android and the standard Linux kernels, Arve \\r\\nHjønnevåg rewrote the original Google/Android patches, renamed them, “Suspend Blockers,” \\r\\nand resubmitted them. They were accepted into the mainline kernel source. Subsequently, \\r\\nAndroid wakelocks were rewritten. They are now based on standard Linux suspend blockers.\\r\\nIn addition, Android introduced two additional power management tools in version 6.0 \\r\\n(Marshmallow): Doze and App Standby. When a device enters Doze mode, it may continue to \\r\\n9780134096346_print.indb   5525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=":{"__data__":"{\"id_\":\"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"6oNNrQbVnGCzv+rd+5pyV3I8KKMfVhTATFDzYQrgSX4=\",\"text\":\"\\r\\n56Chapter 4  The Kernel\\r\\noperate but not at full power. The mode imposes some severe restrictions on apps, including \\r\\nlimits on network access, Wi-Fi scanning, and other power-hungry operations. Because a device \\r\\nonly enters Doze mode when the user is not actively interacting with it, the system assumes \\r\\nthat applications do not have any valid reason for holding a wakelock and completely ignores \\r\\nthem.\\r\\nBinder\\r\\nGoogle Source            Several locations, most commonly  \\r\\n/drivers/staging/android/binder.c\\r\\nCanonical Source/drivers/android/binder.c \\r\\nExposed as/dev/binder\\r\\nBinder is an interprocess communication system based on shared memory that, as introduced \\r\\nin Chapter 3, is at the very heart of Android. It turns up again in Chapter 10, in the context \\r\\nof Binderized HAL (Project Treble). Binder’s central role in the Android environment becomes \\r\\napparent with a reconsideration of wakelocks and the way Android handles memory pressure.\\r\\nAs described in the previous section, the wakelock system places the responsibility for allowing \\r\\na device to sleep with the user application. It takes only a moment’s consideration to realize \\r\\nthat that situation is simply too dangerous to permit. Clearly, a malicious application could \\r\\nstage the equivalent of a denial-of-service attack against a device on which it is installed, drain-\\r\\ning the battery by keeping the device awake. It is at least as likely, though, that an ignorant or \\r\\nincompetently programmed application might seize a wakelock and then crash before releasing \\r\\nit. Unless the system has some way of cleaning up after the crashed application, the wakelock it \\r\\nseized will keep the device awake until its battery dies.\\r\\nTo protect itself from this kind of problem, Android uses the architecture described earlier in \\r\\nthe book in Figure 3.2, the Android System Model. The scarce resources, in this case, wake-\\r\\nlocks, are not directly available to user applications. Instead, they are controlled by a system \\r\\nservice. Specifically, wakelocks are controlled by the PowerManager. User applications cannot \\r\\ndirectly seize wakelocks. The Android system security model prevents normal applications from \\r\\ninteracting with them directly. Only system services, in this case, PowerManagerService and \\r\\nits process, are granted the necessary permission. Instead, applications use the interprocess \\r\\ncommunications system, Binder, to ask the system service to seize a wakelock on their behalf.\\r\\nAnother situation that requires similar treatment is that of low memory, described in more \\r\\ndetail in the following section. Android does not have the near-infinite memory space avail-\\r\\nable to it that desktop Linux systems do. Instead, it must ruthlessly control available RAM and \\r\\nwill kill processes to reclaim memory for use by another, more important process. Like the DoS \\r\\nexample mentioned earlier, this could result in a process being killed while holding resources or \\r\\nIPC connections to other processes without being given a chance to release those resources.\\r\\nMost interprocess communications systems are peer-to-peer and are, themselves, applications. \\r\\nCommon IPC systems, whether System V IPC centered implementations of the D-Bus protocol, \\r\\n9780134096346_print.indb   5625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=":{"__data__":"{\"id_\":\"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"iorNgtwOWQgAvNua1QPiZcrxGBGf+l0QZ3fTVxmPLA8=\",\"text\":\"\\r\\n57The Android Kernel\\r\\nor based on some other architecture, are just applications. Though frequently special system-\\r\\nlevel applications, they support communications architectures in which all participants are \\r\\nequivalent. In these systems, distinguishing between a client that doesn’t happen to be talking \\r\\nat the moment and one that cannot talk and will never talk again (for example, it has crashed) \\r\\ncan be quite difficult.\\r\\nRecall that the kernel is the thing that creates processes. It is the absolute authority on which \\r\\nprocesses exist and which have terminated. Because it is part of the kernel, Binder has immedi-\\r\\nate access to this information. Binder can tell, without a shadow of a doubt, whether one of \\r\\nthe ends of an interprocess conversation is simply occupied elsewhere or whether it will never \\r\\nrespond again. It can supply that information to other clients.\\r\\nThis is the solution to the wakelock and low memory killer problems. A system service controls \\r\\nwakelocks. Client applications do not have sufficient permission to seize their own wakelocks. \\r\\nInstead, they use Binder IPC to request that the system service (which does have permission) \\r\\nhold a wakelock on their behalf. The system service, in return, registers with Binder for notifi-\\r\\ncation of the death of the client app. Now the system service can guarantee that the wakelock \\r\\nwill be released, either because the client app explicitly releases it or because it is eventually \\r\\nterminated. Processes using Binder to communicate with each other can register for notification \\r\\nabout a peer process’s death. This allows any application to manage resources that are no longer \\r\\nrequired because a peer ceased to exist.\\r\\nBinder started life as part of BeOS, the would-be replacement for Apple’s Classic Macintosh \\r\\nOS. Apple had other ideas. It offered a scant $125 million for BeOS. BeOS, for better or worse, \\r\\nrejected the offer. Instead, Apple ended up buying NeXTSTEP (along with Steve Jobs) for  \\r\\n$429 million. BeOS (and the rights to Binder) were eventually sold to Palm, Inc., where Binder \\r\\nbecame the basis for their Cobalt OS. Around the time of the demise of Palm, a version of \\r\\nBinder called OpenBinder was released as open source under the Mozilla Public License  \\r\\nVersion 1.1.\\r\\nAndroid’s version of Binder, while clearly related, is none of these. It was reimplemented from \\r\\nscratch near the start of the Android project and added to Google’s fork of the kernel tree in \\r\\nearly 2009. Over time, it became available from kernel.org (www.kernel.org/) but was relegated \\r\\nto a special “staging” area (drivers/staging/android). Late in 2014—again, with much debate \\r\\nabout its security and stability—it was moved into the “real” part of the kernel (drivers/\\r\\nandroid). There has been discussion (though little progress) toward writing a binder-compatible \\r\\nlibrary that uses the stable, supported Linux kbus mechanism. At the moment, Android abso-\\r\\nlutely depends on Binder, and other Linux systems are warned to use it at their peril.\\r\\nLow Memory Killer\\r\\nGoogle Sourcedrivers/staging/android/lowmemorykiller.c\\r\\nCanonical Sourcedrivers/staging/android/lowmemorykiller.c\\r\\nDaemon Sourcesystem/core/lmkd\\r\\nExposed asOriginally /proc/<pid>/oom_adj, now /proc/<pid>/oom_score_adj\\r\\n9780134096346_print.indb   5725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=":{"__data__":"{\"id_\":\"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"zOyjHAxV39H0kSWi7jA+t4hTblOEayoCCpltvFhiSYg=\",\"text\":\"\\r\\n58Chapter 4  The Kernel\\r\\nAs noted earlier, the early Android systems had to be careful about their use of persistent \\r\\nmemory. Flash memory at the time simply could not support swapping and virtual memory. \\r\\nThe Linux kernels for Android devices are configured with little (zram) or no swap space.\\r\\nThis presents a conundrum. The device is practically guaranteed to run out of memory! If the \\r\\nuser of a mobile device keeps starting new applications, in the manner to which they have \\r\\nbecome accustomed with their other computer devices, eventually memory is filled and the \\r\\nsystem cannot start another. This almost never happens on, for instance, a laptop, because \\r\\nolder applications are swapped to the nearly limitless virtual memory space. Without virtual \\r\\nmemory, though, a device runs out of memory fairly quickly.\\r\\nGiven this constraint, only a couple of possible choices exist. Users would never tolerate a \\r\\ndevice on which an incoming call (which causes the phone application to run) generated an \\r\\nout-of-memory condition and forced the user to select an application to terminate, before \\r\\nallowing her to answer the call. The plausible alternatives are either that there is a limit on the \\r\\nnumber of applications that can be running at any given time so that there is always sufficient \\r\\nmemory to run an important app or that the operating system can terminate any application \\r\\nto recover the memory that the application is using.\\r\\nMost mobile operating systems chose the former path—limiting the number of applications \\r\\nthat the OS allows a user to run. Users of most mobile OSs were limited to a small number of \\r\\nsimultaneously running applications (usually one). A few designated special applications—\\r\\nmaybe a camera, a music player, or the phone—were immune from the constraint. Most appli-\\r\\ncations, though, had to be run one at a time.\\r\\nHowever, Android from the very start allowed users to start as many applications as they \\r\\nliked. It is just that Android reserved the right kill those applications, any time it liked! This \\r\\nis, perhaps, the hardest thing for new Android developers to understand. On most comput-\\r\\ners, terminating an application abruptly (Unix signal kill -9) is a very rare occurrence. On \\r\\nAndroid, it is the most common way for an application to end.\\r\\nAll Linux kernels have an out-of-memory killer. If some process on a server in a rack some-\\r\\nwhere misbehaves and runs out of memory, it is much preferable that the operator be able \\r\\nto connect to the device remotely, perhaps conduct some simple analysis, and then do a soft \\r\\nreboot, rather than having to walk into the data center, locate the crippled machine, and turn \\r\\nit off and on again. If the machine is out of memory, though, it is possible that no memory is \\r\\nleft in which to start the remote connection application.\\r\\nThe Linux out-of-memory killer addresses this situation. When the kernel finds that it is danger-\\r\\nously low on memory, it will kill some processes to start others based on a priority table. \\r\\nAndroid, which, as described earlier, is constantly in a dangerous low memory situation, simply \\r\\nextends this facility.\\r\\nThe Android OOM-Killer is dynamic and based on two tables. The first table is static, is constructed \\r\\nat startup, and creates several priority groups for applications. For each of the priority groups, it \\r\\nestablishes the memory threshold at which applications of that priority may be killed. On the  \\r\\noriginal Android systems this table always identified 31 priorities, numbered from –16 to 15.  \\r\\n9780134096346_print.indb   5825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=":{"__data__":"{\"id_\":\"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HRjySv18U34C3iGTr7ZVSresu8VGUA2m3aZfA6njJ9k=\",\"text\":\"\\r\\n59The Android Kernel\\r\\nOn a device with 192MB of RAM, for instance, the table specified that applications with prior-\\r\\nity 15 should be killed if there were less than 8192 4k pages of free memory. On the other \\r\\nhand, applications with priority 0 could be killed only if there were fewer than 2048 pages of \\r\\nfree memory.\\r\\nThe second table assigns each process a priority dynamically, depending on how important it is \\r\\nto the user at the moment. Android’s Activity Manager Service manages this second table.\\r\\nStarting with Android 4.4 (KitKat), the low memory killer was moved out of the kernel and \\r\\ninto user space as the low memory killer daemon (lmkd). This daemon is accessed via the \\r\\nActivity Manager Service over named socket, when it is available. When the daemon is not \\r\\npresent in the system, Activity Manager Service reverts to the kernel low memory killer. The \\r\\ndaemon leverages existing Linux kernel vmpressure events to perform the same operations as \\r\\nthe kernel driver. The daemon, however, is more extensible and can be configured by OEMs. \\r\\nAs of Android 9 and kernel 4.12, the kernel low memory killer (but not its behavior) has been \\r\\ncompletely removed from Android.\\r\\nShared Memory: Ashmem\\r\\nGoogle SourceOriginally mm/ashmem.c, now drivers/staging/android/ashmem.c\\r\\nCanonical Sourcedrivers/staging/android/ashmem.c \\r\\nExposed as/dev/ashmem\\r\\nBinder works, as noted earlier, by mapping a single block of physical memory into the virtual \\r\\nmemory spaces of one or more applications. Any write by any of the applications sharing the \\r\\nmemory block will be visible in all the other applications. Interprocess communication is very \\r\\nefficient when no copies are necessary; the recipient sees the exact bits that the sender wrote. \\r\\nAshmem makes this possible.\\r\\nThe Android team found the existing Linux shared memory system “shmem” insufficient for \\r\\ntheir needs and introduced a variant “ashmem.” Ashmem, according to its documentation is, \\r\\n“a new shared memory allocator, similar to POSIX SHM but with different behavior and sport-\\r\\ning a simpler file-based API.” Its distinctive feature appears to be the ability to shed memory \\r\\nunder pressure. Ashmem-allocated memory is reference counted and depends on Binder for \\r\\nsharing the reference to the ashmem-allocated memory between processes.\\r\\nPMEM and Ion: Shared Memory\\r\\nGoogle Source            Pmem was drivers/misc/pmem.c\\r\\nIon was drivers/gpu/ion/* but is now  \\r\\ndrivers/staging/android/ion/*\\r\\nCanonical Sourcedrivers/staging/android/ion/* \\r\\nExposed as/dev/ion\\r\\n9780134096346_print.indb   5925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=":{"__data__":"{\"id_\":\"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ny7c10k4H4JRsYXU3ZJeXJe8jbVdmkHzJxXZLqZ+/Y4=\",\"text\":\"\\r\\n60Chapter 4  The Kernel\\r\\nAndroid needs other ways of sharing memory across processes. The most obvious of these \\r\\nneeds comes from drawing on the screen.\\r\\nOne of the remarkable things about Android at the time of its first releases was its commitment \\r\\nto OpenGL. From the very start, the Android system included as standard components both \\r\\n2D (Skia) and 3D graphics libraries. The latter library was a software implementation of the \\r\\nOpenGL API, providing OpenGL ES 2 compatibility. Because Android included this library as \\r\\npart of the system, it guaranteed that an application that used the OpenGL API would run on \\r\\nany Android device, whether the device itself supported OpenGL or not. \\r\\nTo operate efficiently, both the 2D and 3D drawing libraries require that the client be able \\r\\nto write to the memory that represents the pixels on the screen. Early versions of Android \\r\\nreserved the physical memory and mapped it into each process as it took control of the screen. \\r\\nRendering, then, simply meant writing bits into the screen’s physical memory.\\r\\nThe kernel module that allowed this mapping of specific regions of physical memory in early \\r\\nAndroid was called pmem. Pmem is very similar to its cousin ashmem, except that where \\r\\nashmem allows the sharing of blocks of virtual memory, pmem allocates and shares blocks of \\r\\ncontiguous physical memory.\\r\\nFor a time, Skia was removed from Android and the entire rendering chain depended on \\r\\ncompiling small graphics programs run by a GPU. Google has reversed direction on this, \\r\\nhowever. Starting with Android 9, Skia has resurfaced and has a GL backend. The Android \\r\\nsystem also needs a way to reserve and share blocks of physical memory to handle the camera.\\r\\nModern Androids use Ion, pmem’s successor, to manage pools of shared physical memory.\\r\\nLogger\\r\\nGoogle Sourcedrivers/staging/android/logger.c (obsolete)\\r\\nCanonical Source        No longer used\\r\\nDaemon SourceSystem/core/logd\\r\\nExposed as                See Table 4.1\\r\\nAs another consequence of having to be careful about its use of persistent memory, Android \\r\\ncannot write its system logs, as they normally are, to files. Spewing kilobytes per minute to a \\r\\nflash memory–based file system—even if the files were carefully managed to prevent filling the \\r\\nlimited space on a mobile device—would wear out the flash memory very quickly.\\r\\nAndroid addressed this problem by writing its logs to a circular buffer in the kernel: Logs do \\r\\nnot go to files. If the drawbacks of this idea are not immediately obvious, they will become \\r\\nobvious during attempts to diagnose an unmonitored system crash. When an Android system \\r\\nreboots, its memory is reinitialized and all logs are lost.\\r\\nThe Android kernel logger supports four separate log buffers, shown in Table 4.1.\\r\\n9780134096346_print.indb   6025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=":{"__data__":"{\"id_\":\"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hoOvO6bo7vxLhCE+4aeaPPQRDCjLsyziGxl0TCUFRKY=\",\"text\":\"\\r\\n61The Android Kernel\\r\\nTable 4.1 Android Logs\\r\\nLocationUse\\r\\n/dev/log/mainApplication logs. Where messages from the android.util.Log class go.\\r\\n/dev/log/systemSystem logs. Where messages from the hidden android.util.Slog \\r\\nclass and the native liblog library go. \\r\\n/dev/log/eventsBinary log of system events: garbage collections, ActivityManager state, \\r\\nand so on\\r\\n/dev/log/radioLogs from the baseband processor\\r\\nNote that although these logs are catalogued in the file system, they are not files. This is an \\r\\nexample of the kernel’s ability to make anything, including a circular buffer in its own memory, \\r\\nlook like a file.\\r\\nAs with the low memory killer support, logging functionality has also been moved into user \\r\\nspace with the daemon logd. The daemon allows OEMs to adjust log buffer size instead of \\r\\nforcing a fixed size circular buffer size as the kernel driver did. The daemon also supports \\r\\nan additional buffer type: a crash buffer. The crash buffer provides a single place for process \\r\\ncrashes, which usually include stack backtraces and register information and is not intermixed \\r\\nwith the main logcat output. Unlike the kernel logger interface, logd exposes a named socket \\r\\nfor processes to read and write logs. The details of this, however, are abstracted away in the \\r\\nAndroid logging APIs.\\r\\nAlarms\\r\\nGoogle SourceOriginally drivers/rtc/alarm.c, now  \\r\\ndrivers/staging/android/alarm-dev.c, replaced by POSIX alarm  \\r\\ntimers, kernel/time/alarmtimer.c\\r\\nCanonical Sourcekernel/time/alarmtimer.c\\r\\nExposed as/dev/alarm (Android Alarm Driver)\\r\\ntimerfd_create and /dev/rtc*\\r\\nAndroid depends on the ability to wake itself up at a pre-scheduled time. Even when in their \\r\\nlowest power modes, nearly all mobile chipsets include a clock capable of sending an interrupt \\r\\nsignal that causes the rest of the chip to power up. Android supports this capability with the \\r\\nalarm driver, which allows applications to request that the kernel schedule a wakeup call at a \\r\\nspecific time. This, in combination with a wakelock, allows an application to schedule itself at a \\r\\ntime at which the system is otherwise asleep.\\r\\nAndroid initially used a custom driver to supply this alarm and wake functionality. That driver \\r\\nwas developed outside of the Linux kernel community and did not adhere to the best practices \\r\\nfollowed by the kernel team. It was never accepted into the tree. In 2011, John Stultz of Linaro \\r\\nintroduced a POSIX alarm driver into the Linux kernel. This driver eventually replaced the \\r\\n9780134096346_print.indb   6125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=":{"__data__":"{\"id_\":\"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"u/156lj2uOA1fFk6xNMTs6tNUaabBeaTQgQ6VLZDmfY=\",\"text\":\"\\r\\n62Chapter 4  The Kernel\\r\\nAndroid alarm driver in the kernel and in 2016 became the officially supported alarm support \\r\\nfor Android.\\r\\nParanoid Networking\\r\\nGoogle Sourcenet/ipv4/af_inet.c, net/ipv6/af_inet6.c, drivers/net/tun.c, \\r\\nsecurity/commoncap.c\\r\\nCanonical Sourcenet/ipv4/af_inet.c, net/ipv6/af_inet6.c, drivers/net/tun.c, \\r\\nsecurity/commoncap.c\\r\\nExposed asN/A\\r\\nOn most operating systems, networking, if it is available at all, is provided to all applications as \\r\\na general service. The designers of Android thought it important that users be able to control \\r\\naccess to the network.\\r\\nThere are several reasons for this. Perhaps the most important is that use of the network may, \\r\\ndepending on your carrier, cost money. If something costs money, the user ought to be able \\r\\nto control it. Another possible reason is that a user may want control over what information \\r\\nleaves her device. She may be willing to give an application access to her list of contacts or to \\r\\nthe network, but never both.\\r\\nParanoid networking, unlike the previous Android-specific kernel features, is not a separate \\r\\ndriver. Instead, Android implements network access control with a very simple bit of code in \\r\\nthe IP v4 network driver, switched by the compile time flag, CONFIG_ANDROID_PARANOID_\\r\\nNETWORK. This code simply checks the group ID (gid) of the application making the network \\r\\nrequest. Unless the application belongs to the process group AID_INET, the request is denied.\\r\\nOn an Android system, each new application is assigned its own unique user ID when it is \\r\\ninstalled. At the same time, it may be assigned to one or more process groups. If the application \\r\\nrequests access to the network, it is assigned to the AID_INET group and will thus be able to use \\r\\nthe network.\\r\\nAndroid’s security features and its use of group and user IDs are the subject of the next chapter.\\r\\nOther Custom Drivers\\r\\nThese are just the largest, most easily categorized features. In those four megabytes of patches \\r\\nthere are, clearly, many other customizations. Among these smaller changes are specializations \\r\\nfor the USB subsystem, the Bluetooth subsystem, and a RAM console that stores kernel panic \\r\\ninformation across reboots, in /proc/last_kmsg. \\r\\nBuilding a Kernel\\r\\nFortunately, starting from scratch is not usually necessary. Most hardware manufacturers recog-\\r\\nnize the barrier that kernel development represents for potential customers. Most SoC vendors \\r\\n9780134096346_print.indb   6225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=":{"__data__":"{\"id_\":\"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"c7uQWtk7M/4t24MP7V8hHufbSAC2d9a+jufhLtv3XKA=\",\"text\":\"\\r\\n63Building a Kernel\\r\\nsupply pre-built kernels—probably even Android compatible kernels—along with their chips. \\r\\nNearly any vendor for external hardware (sensors, touchscreens, network interfaces, and so on) \\r\\nwill provide, at the very least, a template Linux driver. Also, unless the target hardware is bleed-\\r\\ning edge, it is very likely that a community effort addresses it.\\r\\n \\r\\nNote\\r\\nAs mentioned in the introduction, the complexities of getting a kernel running on any specific \\r\\npiece of hardware can be quite daunting. This chapter is not a recipe for building a kernel for \\r\\nyour device. In fact, even if you follow the process step-by-step for building a kernel for one of \\r\\nthe hardware devices discussed in this chapter, you may not end up with a working system! Tiny \\r\\nchanges in versions, both in hardware and in the software, may break things in ways that are \\r\\nquite mysterious and difficult to diagnose. Although we absolutely guarantee that we were able \\r\\nto build a working system, as described, with our copy of the source and our hardware, there is \\r\\nno way to guarantee that the same steps, even followed carefully, will work for you and yours.\\r\\nThe Build System\\r\\nAs noted in Chapter 2, the best way to build a Linux kernel is on a machine running Linux. As \\r\\nwith building the AOSP source, building the kernel takes significant compute power. Investing \\r\\nin a build machine with fast processors and plenty of memory may be worthwhile.\\r\\nAlso, as noted in Chapter 2, a virtual machine running a Linux distribution on a normal devel-\\r\\nopment host machine is a plausible second choice. Attempting to build a kernel, native, on a \\r\\nnon-Linux machine may work in specific cases but is not generally a workable solution.\\r\\nThe examples here use a standard installation of Ubuntu 16.04 running either on bare metal or \\r\\nin a VirtualBox.\\r\\nDownloading the Source\\r\\nThe choice of source is probably the most important decision. Obviously, a kernel that is \\r\\nknown to work for a given chipset, even if it will require significant modification, is the best \\r\\nchoice. Time spent in research, even significant time, can easily be a very worthwhile trade-off \\r\\nagainst frustration and bring-up time. Probably the best starting point is the chipset manufac-\\r\\nturer and any attached support community.\\r\\nMany board manufacturers supply not only custom kernels but extensive systems for custom-\\r\\nizing the AOSP build. They include the various board configuration files necessary to appropri-\\r\\nately customize AOSP to run on the board. Many of them also integrate the kernel build into \\r\\nthe AOSP build system. \\r\\nAlthough these third-party systems definitely can work, several of them ride roughshod over \\r\\nthe standard AOSP tools: git, make, and so on. Different SoC manufacturers support Android \\r\\nwith different levels of tools usage, and some are better than others. Regardless, where it is \\r\\n9780134096346_print.indb   6325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=":{"__data__":"{\"id_\":\"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"x7ZJcW4HH2BenPCC6iVVyBXyozECHl0ILlrnORHDD2M=\",\"text\":\"\\r\\n64Chapter 4  The Kernel\\r\\npossible to do so, try to keep the patches that these systems install on their own git branch. At \\r\\nthe very least, this will make cherry-picking patches from the AOSP source much easier to do.\\r\\n \\r\\nOpinion\\r\\nGoogle stopped building the kernel as part of the source in 2009 and made it, instead, an \\r\\nexternal binary dependency. The AOSP build is plenty complex already. Build the kernel sepa-\\r\\nrately. Drop it into the Android build when it changes.\\r\\nAutomating the process of moving the kernel after it is built to a canonical location in the AOSP \\r\\nsource is entirely reasonable. Trying to make the AOSP source build depend, in the sense of \\r\\nmake, on the kernel build, exponentially increases the complexity of the build system. You have \\r\\nbeen warned!\\r\\nThis example builds a 4.9.176 kernel for the HiKey-960 board, used throughout this book as the \\r\\nAcme project. At the time of this writing, the AOSP pages include instructions for download-\\r\\ning and building the kernel for this board at https://source.android.com/setup/build/devices. \\r\\nHowever, in the interest of completeness, a walkthrough of acquiring the sources and building \\r\\nthem follows.\\r\\nBegin by setting up the AOSP tree, acquired in Chapter 2, to build for the HiKey-960:\\r\\n$ source build/envsetup.sh\\r\\n$ lunch hikey960-userdebug\\r\\nNext, clone the kernel git repository into this tree, creating a new subdirectory, hikey-linaro. \\r\\nImmediately change into this directory.\\r\\n$ git clone https://android.googlesource.com/kernel/hikey-linaro\\r\\n$ cd hikey-linaro\\r\\nThis is the kernel source directory. Unlike kernel source trees provided by some vendors, this \\r\\ntree contains the git history for the HiKey kernel. Before attempting to build, the tree needs to \\r\\nbe checked out to the correct release branch, android-hikey-linaro-4.9:\\r\\n$ git checkout -b android-hikey-linaro-4.9 origin/android-hikey-linaro-4.9\\r\\nThe kernel build depends on a couple of environment variables. The first is clear enough:\\r\\n$ export ARCH=arm64\\r\\nThe HiKey-960 is based on a Cortex A73/A53 ARM processor in a big.LITTLE architecture. The \\r\\ntarget architecture is arm64.\\r\\nThe next variable setting is significantly more mysterious:\\r\\n$ export CROSS_COMPILE=aarch64-linux-android-\\r\\nDo not make the mistake of thinking that this is a directory path or a specific file! This is a \\r\\nstring that is prefixed onto the names of the major tools that the build process uses when \\r\\nbuilding the kernel. If you look in the directory, ../prebuilts/gcc/linux-x86//aarch64/\\r\\naarch64-linux-android-4.9/bin/, you will find common tools—ar, cpp, gcc, ld, and so \\r\\non—all with prefixes added to their names. The value of the variable must exactly be the prefix!\\r\\n9780134096346_print.indb   6425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=":{"__data__":"{\"id_\":\"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"3lYo5asQciJUQqD982Ep3j6LrJ5KI0wiR1hWXA2lNRI=\",\"text\":\"\\r\\n65Building a Kernel\\r\\nTo make sure that the build directory is in a pristine state, clean it:\\r\\n$ make distclean\\r\\nThe distclean target does not remove the config file (discussed in a moment). To do that, so \\r\\nthat you start completely fresh, also type:\\r\\n$ make mrproper\\r\\nThe first step in building a kernel is configuring the build. “Configuring” sets the values of a \\r\\ncouple hundred compile time variables that determine which drivers and which other features \\r\\nare included in the new kernel.\\r\\nIf the target device is already running, often the config file that was used to build it can be \\r\\nfound in the directory /proc/config.gz. Simply download it, expand it, put it in the kernel \\r\\ndirectory, and rename it .config.\\r\\nThe Hi-Key960 kernel source contains a basic config file for the board. Use make to copy it into \\r\\nplace:\\r\\n$ make hikey960_defconfig\\r\\n  HOSTCC  scripts/basic/fixdep\\r\\n  HOSTCC  scripts/kconfig/conf.o\\r\\n  SHIPPED scripts/kconfig/zconf.tab.c\\r\\n  SHIPPED scripts/kconfig/zconf.lex.c\\r\\n  SHIPPED scripts/kconfig/zconf.hash.c\\r\\n  HOSTCC  scripts/kconfig/zconf.tab.o\\r\\n  HOSTLD  scripts/kconfig/conf\\r\\n#\\r\\n# configuration written to .config\\r\\n#\\r\\nTo make any further customizations, just edit the .config file. Alternatively, the kernel build \\r\\nsystem includes a simple menu-driven system for editing the config. Invoke it, again using \\r\\nmake:\\r\\n$ make menuconfig\\r\\nmenuconfig requires the ncurses libraries. If the build system does not have them installed, \\r\\nyou will need to use the apt-get package management tool on Ubuntu to install them before \\r\\ninvoking it.\\r\\nFinally, build the kernel. It will take about 15 minutes on a bare-metal machine with a quad \\r\\ncore i7 processor, 16GB of RAM, and SSD storage.\\r\\nmake -j4\\r\\n  \\r\\nscripts/kconfig/conf  --silentoldconfig Kconfig\\r\\n  CHK     include/config/kernel.release\\r\\n  WRAP    arch/arm64/include/generated/asm/bugs.h\\r\\n  WRAP    arch/arm64/include/generated/asm/clkdev.h\\r\\n  WRAP    arch/arm64/include/generated/asm/cputime.h\\r\\n  WRAP    arch/arm64/include/generated/asm/delay.h\\r\\n9780134096346_print.indb   6525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo=":{"__data__":"{\"id_\":\"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"KONXmoxtPJbDGladUtYn8XW0pdalGdz2JuqU8+sZ9zM=\",\"text\":\"\\r\\n66Chapter 4  The Kernel\\r\\n  WRAP    arch/arm64/include/generated/asm/div64.h\\r\\n  WRAP    arch/arm64/include/generated/asm/dma.h\\r\\n  WRAP    arch/arm64/include/generated/asm/dma-contiguous.h\\r\\n  WRAP    arch/arm64/include/generated/asm/early_ioremap.h\\r\\n  CHK     include/generated/uapi/linux/version.h\\r\\n  WRAP    arch/arm64/include/generated/asm/emergency-restart.h\\r\\n  UPD     include/generated/uapi/linux/version.h\\r\\n  ...\\r\\nAs previously mentioned, kernel builds and flashing for each SoC and/or board are unique and \\r\\nare not something this book can discuss in general. In the case of the HiKey-960, though, now \\r\\nthat the kernel has been built, we’ll need to create a new boot image that contains it. To do \\r\\nthis, first copy the device tree information and the newly created kernel image into the HiKey-\\r\\n960 device tree, and then rebuild the boot image.\\r\\n$ cp arch/arm64/boot/dts/hisilicon/hi3660-hikey960.tdb ../device/linaro/hikey- kernel/hi3660-hikey960.tdb-4.9\\r\\n$ cp arch/arm64/boot/Image.gz-tdb ../device/linaro/hikey-kernel/Image.gz-dtb-hikey960-4.9\\r\\n$ cd ..\\r\\n$ m bootimage –j 24\\r\\nSummary\\r\\nThis section introduced the Linux kernel as modified for Android. It describes the major \\r\\nfeatures unique to the Android version of the kernel: Binder, the low-memory killer, wakelocks, \\r\\nand several others.\\r\\nIn addition, it demonstrated building a kernel for an Android system. Although not a recipe for \\r\\nbuilding a kernel for every Android system, it is a starting point and, perhaps, provides a few \\r\\nhints that will make the process less distressing.\\r\\n9780134096346_print.indb   6625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo=":{"__data__":"{\"id_\":\"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"d5HeMZeqIQF+7uXd8oe64eJFVAc7fguhf0Zcjay5oPc=\",\"text\":\"\\r\\n5\\r\\nPlatform Security\\r\\nSecuring an embedded platform is extremely challenging, especially with a large system such \\r\\nas Android. Android’s security infrastructure permeates up through the entire software stack. \\r\\nSecurity encompasses numerous technologies and concepts. From encrypting data with the \\r\\nlatest cryptographic techniques to ensuring that data in one application is not accessible by \\r\\nanother, the system needs to be constructed so it can readily support the various facets of plat-\\r\\nform security.\\r\\nAndroid’s security stack starts with the kernel and is built up from there. It leverages readily \\r\\navailable technologies, using common Linux concepts with a twist, and finishes out with some \\r\\nAndroid specifics. This chapter examines how Android’s security stack is constructed and which \\r\\npieces are often customized for new devices.\\r\\nTypes of Security\\r\\nA platform like Android must be concerned with numerous types of security. When most \\r\\npeople think of security and computing systems, they think of what cryptographic technique \\r\\nor protocol is in use. But there is more to security than just taking one set of bits and encrypt-\\r\\ning it into another set of bits. As with the layers of software in the stack, you must consider \\r\\nmultiple facets of security:\\r\\n ■Chipset: How does the system on a chip (SoC) know it is executing the right thing?\\r\\n ■Operational: How does the system know this operation is allowed?\\r\\n ■User: How do the app and system secure their data and operations?\\r\\n ■Customization: How can apps or the system extend what is available?\\r\\nAndroid addresses each of these facets with varying levels of complexity and completeness. An \\r\\noriginal equipment manufacturer (OEM) must understand not only how security is handled \\r\\nwithin the platform so it can be used effectively, but also how to avoid introducing security \\r\\nholes by inadvertently misusing the system.\\r\\n9780134096346_print.indb   6725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=":{"__data__":"{\"id_\":\"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"6S3hReG2JaXvPK5hDTGTWc9l+1/PMr7QzZryz1w8QTg=\",\"text\":\"\\r\\n68Chapter 5  Platform Security\\r\\nVerified Boot\\r\\nStarting with Android 7, verified boot is required for all Android devices. Android’s support for \\r\\nverified boot is derived from the secure boot techniques used in ChromeOS. It is a combina-\\r\\ntion of secure boot-chain support embedded in the silicon as well as the dm-verity feature of \\r\\nthe Linux kernel. Verified boot is used to ensure the system is only executing a trusted kernel \\r\\nand a trusted Android system. It is worth reiterating that although verified boot is required for \\r\\nall Android devices running Android 7 or newer, not all AOSP-based devices will be “Android” \\r\\ndevices.\\r\\nTypically, the chipset uses public cryptography techniques to ensure that the boot-chain is \\r\\nsecure. The chipset has a set of public keys (certificates) in one-time write storage on the device \\r\\n(that is, burned in). Just like the way X.509 certificates are used to secure TLS/SSL connections, \\r\\nthere is a trusted “root” within the chip’s ROM along with one or more intermediate signing \\r\\ncertificates. The OEM is responsible for creating its own set of keys/certificates, getting them \\r\\nsigned by the silicon vendor (or another trust present in the ROM), and ultimately “burning” \\r\\nthe OEM public certificate into the one-time write area of the chipset. A final one-time write \\r\\noperation permanently sets the secure boot operation, commonly referred to as “blowing the \\r\\nfuse” in the device. Depending on the chipset, this may be done when the OEM keys/certifi-\\r\\ncates are written or as a separate operation. This enables the device’s secure boot mode and \\r\\nrequires signed firmware/images to be present for it to execute the boot loader and start the \\r\\nLinux kernel.\\r\\nWhen the fuse has been blown in the chipset and the OEM’s certificate is present, the ROM \\r\\nboots the lowest level bootloader (trusted) and verifies the next bootloader in the chain. Most \\r\\nchipsets’ secure boot functionality verifies the validity up through the “application bootloader” \\r\\n(for example, what loads the kernel and ultimately Android). From this point, it is up to the \\r\\nOEM to provide the necessary support to verify that any kernel it loads is valid and trusted. \\r\\nThis is where it gets interesting for the OEM. Each silicon vendor may provide different appli-\\r\\ncation bootloaders to use, such as uboot or a custom bootloader. It is up to the OEM to either \\r\\nenable the silicon vendor’s support for secure boot or extend the provided bootloader to prop-\\r\\nerly provide this support.\\r\\nAfter the application bootloader has validated the Linux kernel using a crypto signature, the \\r\\nkernel is loaded and control transferred to it with details about the Android system image (and \\r\\npossibly vendor and oem images) and secure hash metadata that corresponds to it. Starting \\r\\nwith Android 8, a reference implementation of Android verified boot is provided as part of \\r\\nAOSP. You can enable this support to build secure images by adding a line to the platform \\r\\nmakefile (for example, acme_one.mk), as shown in Listing 5.1.\\r\\nListing 5.1 Makefile Change to Enable Android Verified Boot\\r\\nBOARD_AVB_ENABLE := true\\r\\nThis causes the build system to create a metadata image, vbmeta.img, for the target that \\r\\nincludes hash data for the boot image and hash tree details for the system image and sets up \\r\\n9780134096346_print.indb   6825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=":{"__data__":"{\"id_\":\"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"zi+bPu7g7ML9hcpza+8L0CPtEkTipS+laBaByVw764c=\",\"text\":\"\\r\\n69Operational Security\\r\\nthe command line boot arguments for the kernel to use dm-verity for the system image.  \\r\\nOther images, such as the vendor image used for vendor-provided binderized HALs, are  \\r\\nalso supported. The default implementation uses SHA-256 with an RSA 4096 bit key from \\r\\nexternal/avb/test/data in the AOSP tree. This must be overridden by the OEM and a \\r\\ncustom key provided. The algorithm and key content can be specified using two additional \\r\\nplatform makefile variables, as shown in Listing 5.2.\\r\\nListing 5.2 Makefile Change to Specify AVB Signing Key\\r\\nBOARD_AVB_ALGORITHM := SHA512_RSA4096\\r\\nBOARD_AVB_KEY_PATH := /path/to/rsa_key_4096bits.pem\\r\\nThe public portion of the provided key must be available for the bootloader to use to verify the \\r\\nimage(s). The reference implementation includes the tools necessary to extract this data into \\r\\nthe correct format. Additionally, the reference implementation includes a C library, libavb, \\r\\nwhich can be integrated into application bootloaders to provide the required support for veri-\\r\\nfied boot.\\r\\nAfter the boot image is validated, the kernel is loaded and instructed via its command line \\r\\narguments to use dm-verity to ensure certain images are secure. The kernel’s dm-verity \\r\\nsupport uses the secure hash data for validating the system image at runtime. Each block of \\r\\nthe file system is cryptographically hashed as part of a hash tree, up to a root hash. The root \\r\\nhash is what gets signed by the OEM at build time. At runtime, the kernel’s dm-verity driver \\r\\ncomputes the secure hash for a block of the file system any time it is read, up to the root hash \\r\\nin the tree. Although this sounds like it would hurt performance, the computation does not \\r\\nreally add significant overhead on top of the I/O wait times needed to read the data from \\r\\nstorage. The hash result is then compared to the signed hash in the metadata. If they differ, \\r\\nthe file system has been tampered with or corrupted. In this case, the kernel will return an I/O \\r\\nerror from the low-level file system driver, causing failures higher in the stack. This means that \\r\\ndm-verity can only be used to verify read-only file systems or ones that should not change for \\r\\na given build of Android for the device! The file systems that fall into this category for Android \\r\\nare system, system_ext, product, vendor, and odm images.\\r\\nFor more information about verified boot, dm-verity, and Android verified boot, see these \\r\\npages from the AOSP project:\\r\\nhttps://source.android.com/security/verifiedboot\\r\\nhttps://source.android.com/security/verifiedboot/avb\\r\\nhttps://source.android.com/security/verifiedboot/dm-verity\\r\\nOperational Security\\r\\nComplex operating systems, such as Android, are constantly performing operations by applica-\\r\\ntions or other types of processes. These operations may be simply executing the internal code \\r\\n9780134096346_print.indb   6925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=":{"__data__":"{\"id_\":\"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"zfzTkDa9FNvlyN7t6OkBwBJoHQ0dVEiglmp8rDKDi1g=\",\"text\":\"\\r\\n70Chapter 5  Platform Security\\r\\nof an application or performing some action based on the request of the application. In either \\r\\ncase, the system manages what operations are allowed and enforces the necessary restrictions. \\r\\nAndroid leverages several different mechanisms to ensure operational security: process sandbox-\\r\\ning, SE Linux for Android, and Android-defined permissions. Each of these plays an important \\r\\nrole with platform security. However, this is all made possible because of the distinct layers of \\r\\nthe software stack and the underlying Linux kernel.\\r\\nAndroid Software Layers\\r\\nRecall from Chapter 3 the concept of the Android software stack as a “layer cake,” shown again \\r\\nin Figure 5.1. At the bottom of this stack is the Linux kernel. Not only does the kernel control \\r\\nthe underlying hardware and all processes running in the system, but it also provides the base \\r\\nof the security architecture.\\r\\nSystem\\r\\nServices\\r\\nNative\\r\\nApplications\\r\\nAndroid\\r\\nServices\\r\\nAndroid\\r\\nApplications\\r\\nAndroid API Libraries\\r\\nAndroid\\r\\nNative\\r\\nLibraries\\r\\nHAL\\r\\nBinder\\r\\netc.Linux Kernel\\r\\nHardware\\r\\nSystem Libraries\\r\\nDalvik/\\r\\nART\\r\\nZygote\\r\\nFigure 5.1 Android Software Layers (reprise of Figure 3.1)\\r\\nThe Linux kernel is the primary security boundary within the system. The kernel is in complete \\r\\ncontrol of the underlying hardware, process scheduling, memory management, and SE enforce-\\r\\nment. The runtime used to execute application code (ART or Dalvik) provides no additional \\r\\nsecurity. That detail surprises most Android app developers but is crucial for understanding how \\r\\nthe system uses and enforces security. All user space processes, whether they are third-party \\r\\napplications (APKs) or daemons running native code, are subject to the same exact security \\r\\nboundaries. In other words, just because code is written in C/C++ or compiled using the NDK \\r\\ndoes not mean it can bypass system security. By default, each process in the system is “sand-\\r\\nboxed” into its own little world.\\r\\nThe Process Sandbox\\r\\nJust like other Linux-based systems, Android loads and executes applications within their \\r\\nown process. Each process has its own distinct memory space, providing isolation from other \\r\\nprocesses in memory. Further, each process is given a section of the file system which, by \\r\\ndefault, only it can access. Other areas of the file system are generally off limits. Processes really \\r\\n9780134096346_print.indb   7025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M=":{"__data__":"{\"id_\":\"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1DoE+B3/K61LQpMSD7Lu+p3hG2pIIThtz9Hw8TQ5EWs=\",\"text\":\"\\r\\n71Operational Security\\r\\ncannot interact with much outside of their own memory and file system space. As discussed in \\r\\nChapter 3 in the “Android Service Model” section, application processes cannot keep the device \\r\\nawake, access kernel device handles, and so on. Thus, the application is sandboxed. On the \\r\\nsurface, this sounds like a solid approach. However, even this is not enough. Some subtle details \\r\\nare at work to keep the various components in the system isolated. Figure 5.2 illustrates how \\r\\nprocesses, by default, are not only restricted from accessing scarce resources but also cannot \\r\\ndirectly interact with each other due to sandboxing and their Linux user ID.\\r\\nmediaserver\\r\\n(UID 1013)\\r\\nsystem_server\\r\\n(UID 1000)\\r\\ninit\\r\\n(UID 0)\\r\\napp1\\r\\n(UID 10001)\\r\\nLinux Kernel\\r\\nFigure 5.2 Android Process Sandbox\\r\\nThe traditional Linux UID concept (and GID) is turned on its head in Android. Rather than \\r\\na UID representing a specific person using the system, each application in Android is assigned \\r\\na UID when it is installed. When the running Android system is using multiple user profiles, \\r\\neach app is assigned unique UIDs for the app plus the specific user. \\r\\n \\r\\nNote\\r\\nWith the introduction of multiple user profiles in Android 4 (Ice Cream Sandwich), UID/GID \\r\\nassignment utilizes an “encoding” to bind together the application portion of the UID and the \\r\\nuser profile for which the application belongs. The general form is\\r\\nuser_app_uid = 100000 x user_profile_id + app_uid\\r\\nwhere app_uid is the same for all instances of a given app and third-party app assigned val-\\r\\nues starting with 10000, and user_profile_id is 0 for the first user (owner) then 10, 11, 12, \\r\\nand so on after that. When viewed via the ps command, an app process assigned app_uid \\r\\n10022 will be shown as u0_a22 for the first user, u1_a22 for the second user, u2_a22 for \\r\\nthe third user, and so on, and the actual encodings of each would be 10022, 1010022, and \\r\\n1110022, respectively. \\r\\n9780134096346_print.indb   7125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=":{"__data__":"{\"id_\":\"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"bUwSJHAdkji7TcO/yFPgFyWc4eaq3rz5daYYz/iDuM4=\",\"text\":\"\\r\\n72Chapter 5  Platform Security\\r\\nSystem processes (for example, daemons/services) get similar treatment: They are assigned \\r\\nspecial UIDs at build time. The UID and GID assignment ensures the running processes stay \\r\\nisolated from each other. Without this concept, each process would effectively be able to \\r\\nchange and manipulate things from other processes as they do on some other embedded real-\\r\\ntime operating systems.\\r\\nThe base UID/GID definitions in Android are defined within the AOSP tree at system/core/\\r\\ninclude/private/android_filesystem_config.h rather than in /etc/passwd and /etc/\\r\\ngroup as they would be on a traditional Linux system. Applications are assigned a UID when \\r\\nthey are installed on a device. The UID assignment does not change for as long as the app is \\r\\ninstalled on that device. After the app is removed, though, the UID is free and can be assigned \\r\\nto another app. The Android framework tracks installed app packages and their assigned  \\r\\nUID/GID via the file /data/system/packages.xml.\\r\\nThe use of UID/GID with the process sandbox provides very coarse-grained control of the \\r\\nsystem, also called discretionary access control (DAC). Originally, Android used only this tech-\\r\\nnique for app and system process isolation, as discussed in Chapter 3 with respect to scarce \\r\\nresource access. As Android grew in popularity and expanded its features, DAC was no longer \\r\\nadequate to protect the apps from each other and the system from itself. For example, a \\r\\ncompromised version of the system server process could potentially damage the entire system \\r\\nbecause it holds superuser privileges. Using DAC alone, there is no way to impose a consistent, \\r\\nsystem-wide policy to protect the system.\\r\\nAn alternative approach, known as mandatory access control (MAC), mitigates this problem. \\r\\nMAC allows all processes, even system processes running as the superuser, to be contained. Use \\r\\nof MAC allows a consistent, system-wide policy to be established in the system. Processes are \\r\\nnot only sandboxed in memory and via file system access but further restricted from perform-\\r\\ning other fine-grained operations in the system.\\r\\nReturning to our example of a compromised system server process, with MAC even a process \\r\\nwith superuser permissions can be restricted so that it is not allowed to fork another process, \\r\\naccess specific device files, and so on. MAC support was first added in Android 4 via SE Linux \\r\\nfor Android. With MAC, all packages, executables, devices, and so on are assigned contexts or \\r\\nlabels that are then granted permission to do things based on policy, which is defined at system \\r\\nbuild time.\\r\\nSE Linux for Android\\r\\nSecurity Enhanced Linux, or SE Linux, was created by RedHat and the NSA. It was first released \\r\\nin 2000. SE Linux is a combination of Linux kernel changes along with user space tools to \\r\\nmanage and control SE operations.\\r\\nJust like traditional DAC support in Linux, MAC enforcement is handled by the Linux kernel. \\r\\nSE Linux refines the way security is handled by the OS, making it much finer grained and \\r\\ncapable of restricting process functionality beyond the simple “owner-oriented” mechanisms \\r\\nused by traditional DAC. When enabled, the kernel is given a set of policies and what to do \\r\\nwhen a policy is violated.\\r\\n9780134096346_print.indb   7225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=":{"__data__":"{\"id_\":\"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hd2CPA7rkhEZ5TC+8kF2BJfSBiAgyRMBBE5AbiZsCeY=\",\"text\":\"\\r\\n73Operational Security\\r\\nThe two different operating modes for the kernel with SE enabled are permissive and enforcing. \\r\\nWith permissive mode, the kernel emits audit logs when policy violations occur, but does not \\r\\nstop the operation from continuing. Enforcing mode, on the other hand, both logs the viola-\\r\\ntion and stops the operation from continuing.\\r\\nAdding SE Linux to Android helped the platform to meet several goals for securing the OS: \\r\\n ■Prevent privilege escalation, even for system apps/executables, which would allow a process to access resources for which it would normally not have access \\r\\n ■Prevent data leakage between processes\\r\\n ■Prevent security bypass techniques\\r\\nSE is not a replacement for traditional DAC. Instead, the Linux kernel still has DAC controls \\r\\nin place, and SE simply builds upon it. This takes the Android process sandbox to a whole new \\r\\nlevel. The kernel is responsible for enforcing the SE policies. The kernel is loaded with the SE \\r\\npolicies at startup from the initram file system (read only). SE operates in a “default deny” \\r\\nmode. This means that unless a policy (rule) is defined that allows an operation, the operation \\r\\nwill be denied.\\r\\nThis shift from DAC to MAC is not a lightweight change. Policy definition is everything in SE. \\r\\nIf the policy is wrong and processes are not constructed in a way to handle failures, the system \\r\\ncan come to a very abrupt halt. Similarly, bad policy might inadvertently allow operations that \\r\\ncould compromise the system or an app.\\r\\nFor this reason, SE was rolled out slowly: first added in Android 4.2 (Jelly Bean) in permissive \\r\\nmode, then refined and placed in full enforcing mode in Android 5 (Lollipop). Taking a step \\r\\nback to look at a complete, Linux-based system architecture, the ideal architecture would be \\r\\nconstructed to have decentralized, least privilege, separation of concerns, and corresponding SE \\r\\npolicy along with it. Because of this, the SE policies and system structure continue to evolve to \\r\\nbetter contain critical operations. Chapter 10 builds on this idea in its discussion of the binder-\\r\\nized HAL, which, as of Android 8, allows for vastly improved separation and constraint of OEM \\r\\nand vendor components.\\r\\nSE Policy Definition\\r\\nSE policy definitions can be extremely granular. Essentially, anything that is known to the \\r\\nkernel can be protected using a policy. From device files to sockets and shared memory areas, it \\r\\ncan all be protected. With this functionality comes a large increase in complexity. Fortunately, \\r\\nSE for Android simplifies this slightly compared to desktop or server Linux.\\r\\nWith pure SE Linux, policies are made up of several fundamental building blocks: users, roles, \\r\\ntypes, labels, and multi-level security (MLS) levels. Adding to the complexity, types can be \\r\\ncalled “domains” and labels can be called “contexts.” The number of terms becomes dizzying \\r\\nvery quickly. Briefly, the key terms and their definitions are as follow:\\r\\n ■Users: SE-defined users, which are not the same as the Linux user. The SE user does not change during a session (as a Linux user can change using su or sudo.) It is worth noting, \\r\\nhowever, that in many configurations, there is a 1:1 mapping of SE user to Linux user.\\r\\n9780134096346_print.indb   7325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=":{"__data__":"{\"id_\":\"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"g8rGA5yW4Az4Px101Re0Nbodr2dFPEBOHf/DgXKJxcQ=\",\"text\":\"\\r\\n74Chapter 5  Platform Security\\r\\n ■Roles: A grouping of users.\\r\\n ■Types: A means of determining access to something. \\r\\n ■Domains: Process types can be referred to as domains. \\r\\n ■Labels: A combination of user, role, type, and MLS level. A label can also be referred to as a “context.” For example, on Android the device files /dev/tty* are given the label \\r\\ntty_device via the following label definition:\\r\\n/dev/tty[0-9]*   u:object_r:tty_device:s0\\r\\nThe preceding concepts are still rather vague, but it is clear that SE policies are both powerful \\r\\nand complicated. Because of Android’s nature, some of the complexity of SE Linux is reduced; \\r\\nin practice, Android does not use the concepts of users, roles, or MLS levels in their full general-\\r\\nity. Instead, there is only a single user, a single role, and a single MLS level used across all poli-\\r\\ncies. The user is always u, the role is always object_r, and the MLS level is always s0.\\r\\nWhew! Android’s approach to SE, using only a portion of all the available features, makes this \\r\\na lot easier to digest! Unfortunately, although this makes it a bit easier to grasp SE for Android, \\r\\nthere are still a lot of details in the policies.\\r\\nSo what exactly are SE policies? SE policies are a collection of “type enforcement” files that \\r\\nare compiled into a build for a device. These files have a .te suffix and are provided as part of \\r\\nAOSP and by OEMs/vendors. Policy rules can be built up as well as overridden. Rules have one \\r\\nof the following keywords:\\r\\n ■allow: A domain is allowed to use an SE type/object type with permissions.\\r\\n ■neverallow: A domain is never allowed to use an SE type/object type with permissions.\\r\\n ■dontaudit: Violations of rules for this domain are not logged/audited.\\r\\nThink of SE policies as rules: Rules that can say something like, “Allow/deny this domain when \\r\\nusing this type based on these permissions.” The snippet from the Android SE policy for the \\r\\ninit process, shown in Listing 5.3, will make this breakdown understandable.\\r\\nListing 5.3 A Snippet of init.te\\r\\nallow init tty_device:chr_file rw_file_perms\\r\\nThis rule states that the init domain (a process) is allowed to operate on something with the \\r\\nlabel tty_device, a character special file, using the permissions defined as rw_file_perms. \\r\\nConceptually, this is relatively straightforward.\\r\\nIn practice, some details here still may not be obvious when crafting new policies: what/where \\r\\nare chr_file and rw_file_perms defined? Beyond the .te files used to define policies, several \\r\\nother special files define different objects, contexts, and macros for use in the SE policy files.\\r\\n9780134096346_print.indb   7425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=":{"__data__":"{\"id_\":\"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"DMurAHSFHH/DYFoHhqK4KSsLGQVhOA4QL95usegP0Jw=\",\"text\":\"\\r\\n75Operational Security\\r\\nThe type chr_file is defined in a file called access_vectors, which establishes which kernel-\\r\\ndefined objects, entities, or operations make up this type. Similarly, rw_file_perms is defined \\r\\nin global_macros as a combination of read and write file operations exposed by the kernel.\\r\\n \\r\\nNote\\r\\nThe location of the AOSP files depends on the version of AOSP in use. Prior to Android 8, these \\r\\nfiles are in external/sepolicy within the AOSP tree. Starting with Android 8, the files are \\r\\nin system/sepolicy within the AOSP tree. These policies are CDD compliant for the specific \\r\\nversion of Android to which they belong. OEMs and vendors should ensure that any changes or \\r\\ncustomizations do not result in CDD violations!\\r\\nThe standard SE policies cover functionality defined by AOSP, protecting the system as well as \\r\\nprocesses from each other. However, what about when OEMs have customizations? Just like \\r\\nanything else in AOSP, the provided components could be modified, but an OEM should not. \\r\\nModifying the AOSP-provided SE policy files is an almost sure way for the device to fail to be \\r\\nCDD compliant. Even if an OEM is not seeking to have the device labeled as Android, modify-\\r\\ning the base SE policies potentially opens security holes in the end device. Instead, OEMs who \\r\\nneed to add to or revise SE policy should place SE policy additions or customizations beneath \\r\\nthe board-specific area and leverage special build variables. For example, the HiKey devices \\r\\ncontain some customizations to SE policies and can be found at device/linaro/hikey/\\r\\nsepolicy in the AOSP tree setup discussed in Chapter 2. \\r\\nThe Acme One platform built up throughout this book will need some SE policy additions, \\r\\ncovered in later chapters. If you used the Acme repo manifest from GitHub (refer to Chapter 2), \\r\\nsome SE policy files used in later chapters are present in device/acme/acme_one/sepolicy in \\r\\nthe build tree.\\r\\nTwo different build variables are available for vendors to use to pull in new SE policies or revi-\\r\\nsions. The first, BOARD_SEPOLICY_DIRS, specifies a directory to add to the SE policies when \\r\\nbuilding the platform. The contents of this directory will extend or override other policies. \\r\\nOnly .te files will be pulled from this directory when you’re compiling the policies for the \\r\\ntarget.\\r\\nThe second variable, BOARD_SEPOLICY_UNION, defines files that should be combined with \\r\\nexisting files from AOSP of the same name. This is how an OEM can create new type labels \\r\\nor extend existing type labels for a new executable or device file. Any file(s) called out here \\r\\nmust have the same name as files from the AOSP tree, such as file_contexts. For example, \\r\\nif the OEM, such as Acme used throughout this book, adds a new daemon to monitor a device \\r\\nfeature, called monitord, there would need to be a policy file defined as well as an addition \\r\\nto file_contexts so the executable is assigned the correct label. The net result would be two \\r\\nadditional files in the device/acme/one/acme_one/sepolicy directory: monitord.te and \\r\\nfile_contexts. In the board-level makefile, acme_one.mk, two additional lines will be added, \\r\\nas shown in Listing 5.4.\\r\\n9780134096346_print.indb   7525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=":{"__data__":"{\"id_\":\"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"y8rP7/RQVbECi7l3itTm9+jvqgWr7aSy5mfdrXUa/AM=\",\"text\":\"\\r\\n76Chapter 5  Platform Security\\r\\nListing 5.4 Example SE Policy Changes\\r\\nBOARD_SEPOLICY_DIRS += \\\\\\r\\n    device/acme/one/sepolicy\\r\\nBOARD_SEPOLICY_UNION += \\\\\\r\\n    file_contexts\\r\\nChapters 6, “System Startup: Installing and Booting the System,” and 12, “Clients for a Custom \\r\\nBinderized HAL,” demonstrate adding custom SE policies.\\r\\nAndroid Permissions\\r\\nAs described in the previous section, Android’s permissions system builds on top of the MAC \\r\\nand process sandbox systems to provide even more granular control. The permissions system, \\r\\nwhile powerful, can also be confusing for both developers and end users. Permissions are used \\r\\nto control access to apps, features, and even specific API calls. Unfortunately, this complexity \\r\\ncan sometimes be subtle and depends on good documentation to understand when, where, and \\r\\nhow permissions are used.\\r\\nPermissions are defined to be one of four protection “levels”:\\r\\n ■normal: Protects features that do not expose hardware, device specifics, user private data, and so on\\r\\n ■dangerous: Protects features that could expose hardware, device specifics, user private data, and so on\\r\\n ■signature: Can only be used (granted) by packages signed with the same certificate\\r\\n ■signatureOrSystem: Just like signature, but can also be used by system apps\\r\\nThe permissions themselves are implementation defined and identified simply by the name of \\r\\nthe permission.\\r\\nYou read that correctly: The permissions are just strings that have implementation specific \\r\\nmeaning. In certain cases permissions are defined by Android that are also tied to specific SE \\r\\ncontext or GID, but this is more the exception than the rule. Furthermore, there is no central \\r\\nauthority or required form for the permission names. This creates a potential for naming \\r\\nconflicts which are largely resolved by the system on a first come, first serve basis. As a best \\r\\npractice, when new permissions are being defined, they should be namespaced to minimize \\r\\nthe potential for collisions. For example, instead of creating a new permission, \\\"PROXIMITY_\\r\\nACCESS\\\", it would be better to use \\\"com.acme.permission.PROXIMITY_ACCESS\\\".\\r\\nEnforcing permissions boils down to two different approaches: automatic enforcement and \\r\\nmanual enforcement. Both approaches are needed for Android to provide the different types of \\r\\nprotection.\\r\\n9780134096346_print.indb   7625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg=":{"__data__":"{\"id_\":\"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"cN5knG8BdHfR2i5dRYEgPHbzSNsFbX8aRLvEXER7zSQ=\",\"text\":\"\\r\\n77Operational Security\\r\\nAutomatic Permission Enforcement\\r\\nThe AOSP framework provides automatic enforcement of permissions when they are used to \\r\\nprotect app components: Activity, Service, BroadcastReceiver, and ContentProvider \\r\\n(via URI). Apps, including system apps, that need to protect their components via a permission \\r\\ncan do so using the app’s manifest or in some cases at runtime.\\r\\nPermissions may be specified for a given component via the appropriate tag in the app’s mani-\\r\\nfest. For example, to protect a BroadcastReceiver so that only apps holding the permission \\r\\ncom.example.permission.USE_FEATURE may send it an Intent, the manifest entry would \\r\\nlook similar to what is shown in Listing 5.5.\\r\\nListing 5.5 Example Permission for a BroadcastReceiver\\r\\n<receiver android:name=\\\".FeatureReceiver\\\"\\r\\n          android:permission=\\\"com.example.permission.USE_FEATURE\\\">\\r\\n    <intent-filter>\\r\\n        <action android:name=\\\"com.example.action.FEATURE>\\r\\n    </intent-filter>\\r\\n</receiver>\\r\\nIf the sender of the Intent does not hold the required permission, the call will fail with a \\r\\nSecurityException. The same concept can be applied to <activity>, <service>, and \\r\\n<provider> elements.\\r\\nNote, however, that some features are available only for specific component types:\\r\\n ■Service: The permission is used to protect starting as well as binding to the specific service.\\r\\n ■ContentProvider: Separate readPermission and writePermission attributes can be used to specify separate permissions for read and write. Additionally, \\r\\ngrantUriPermission attribute and <grant-uri-permission> subelement can be  \\r\\nused to grant temporary access to apps based on a URI served by the provider.\\r\\nAlso, if the <application> tag within the manifest has a permission attribute set, that \\r\\npermission is a fallback for access to any of the components within the application!\\r\\nThe framework-provided enforcement is relatively coarse grained. The Android-provided \\r\\nSettings application again provides a working example of this. The Settings activity for request-\\r\\ning access to Bluetooth is protected by the permission \\\"android.permission.BLUETOOTH\\\". So \\r\\nany application that wants to enable Bluetooth or make the device discoverable (which it  \\r\\nmust do by running the Setting app) must have this permission. If it does not, its call to \\r\\nstartActivity() will fail.\\r\\n9780134096346_print.indb   7725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=":{"__data__":"{\"id_\":\"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"PuhKNzgOhfag3X9bk+xN2Jmkt0fPvaDSWgDlKzgcdiY=\",\"text\":\"\\r\\n78Chapter 5  Platform Security\\r\\nManual Permission Enforcement\\r\\nAutomatic permission enforcement is great for protecting an entire feature or component \\r\\nimplementing a feature. However, it is a broad level of protection. What if a specific API \\r\\nwithin a feature set needs to be protected, but not the feature as a whole? For example, \\r\\nConnectivityManager does not require a permission to call isDefaultNetworkActive(), but \\r\\nit does require the android.permission.ACCESS_NETWORK_STATE permission in order to access \\r\\nthe APIs that provide specific details about a network (such as getNetworkCapabilities()).  \\r\\nHow does this actually work?\\r\\nThese types of APIs are generally accessed via Binder-based calls (for example, AIDL-defined \\r\\ninterfaces). In fact, Android’s various “manager” classes, which are retrieved via  \\r\\nContext.get-SystemService(), are just wrapper APIs around binder proxies. System  \\r\\nservices and binder and Android’s service model were covered in Chapter 3. The API  \\r\\nimplementations manually check and enforce the permission requirements.\\r\\nThe approaches used by different implementations can vary, but permissions checks are typi-\\r\\ncally performed very early in the API implementation. The check must be done on the service \\r\\nside; otherwise, there is no way to enforce it! The framework’s Context object, part of the \\r\\nbacking service’s process, provides the APIs used to manually verify that the caller has the \\r\\nnecessary permission.\\r\\nTwo types of calls are available: check and enforce. The difference between the two is that the \\r\\n“check” calls simply return PackageManager.PERMISSION_GRANTED or PackageManager.\\r\\nPERMISSION_DENIED as appropriate. The “enforce” calls, on the other hand, automatically \\r\\nthrow SecurityException if the caller does not hold the required permission. \\r\\nThese APIs are called on the service side by code that is aware of the context of the calling \\r\\napplication. The service side “knows” the calling application’s process ID (PID) and user ID \\r\\n(UID), and the framework can use this information to check whether or not the caller has been \\r\\ngranted the required permission. This illustrates another reason the Binder subsystem is backed \\r\\nby a kernel module: the kernel provides details about the calling process’s context and resources.\\r\\nRevisiting the ConnectivityManager.getNetworkCapabilities() API, the backing service \\r\\nimplementation for Android 10 is in frameworks/base/services/core/java/com/android/\\r\\nserver/ConnectivityService.java. Listing 5.6 shows the relevant code.\\r\\nListing 5.6 ConnectivityManager Manual Check for Permissions\\r\\n    @Override\\r\\n    public NetworkCapabilities getNetworkCapabilities(Network network) {\\r\\n        enforceAccessPermission();\\r\\n        return getNetworkCapabilitiesInternal(\\r\\n            getNetworkAgentInfoForNetwork(network));\\r\\n    }\\r\\n...\\r\\n9780134096346_print.indb   7825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=":{"__data__":"{\"id_\":\"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"aboamc76t70NrN68xhM2bX1UbxFKXOx8YtCtWnuGIBk=\",\"text\":\"\\r\\n79Operational Security\\r\\n    private void enforceAccessPermission() {\\r\\n        mContext.enforceCallingOrSelfPermission(\\r\\n            android.Manifest.permission.ACCESS_NETWORK_STATE,\\r\\n            \\\"ConnectivityService\\\");\\r\\n    }\\r\\n}\\r\\nFile Systems\\r\\nThe final piece of the “operational level” security is the file system. A portion of this has been \\r\\ndiscussed briefly in the application sandbox and SE Linux for Android sections. However, more \\r\\ndetails are important for an OEM to understand.\\r\\nJust like other Linux-based systems, the file system layout in Android is a hierarchical tree that \\r\\nhas one or more backing physical devices and some virtual devices mounted at locations in the \\r\\ntree. What level of access is available to these mount points is dependent on the backing media \\r\\nand the SE policies of the platform.\\r\\nYou can find additional information on Android’s storage mechanisms, file systems, and parti-\\r\\ntions in these two AOSP locations:\\r\\nhttps://source.android.com/devices/storage\\r\\nhttps://source.android.com/devices/bootloader/partitions\\r\\nThe remainder of this section enumerates the key file systems and how security affects them.\\r\\nMount Point: / \\r\\nThis (/) is the root of the file system and is a Linux initial RAM disk. This image is part of the \\r\\nboot.img image file for the target. It contains startup scripts, SE policies, configuration files, \\r\\nproperty files, and so on. This file system is read-only, both in the way it is mounted and \\r\\nbecause it is an initial RAM disk. The contents cannot be modified at runtime.\\r\\nMount Point: /system \\r\\nTypically, this file system is backed by eMMC, NAND, or some other type of non-volatile \\r\\nstorage. Depending on the storage media, it might be formatted ext4, jffs, yaffs2, and so on. \\r\\nOn most modern Android builds, it is ext4. Its contents are exactly the system.img file after \\r\\na successful build. This is where the core Android services, framework, libraries, daemons, and \\r\\nnative binaries are stored. It is mounted as a read-only file system, which is critical from a secu-\\r\\nrity standpoint. See the previous section, “Verified Boot,” for more information.\\r\\n \\r\\nNote\\r\\nNon-production builds can often include the su command, which can be used to gain elevated \\r\\naccess and then remount the /system partition as read-write. This can be helpful during an \\r\\ninitial system bring up or debugging. However, it should never be possible on a production build. \\r\\nRewriting the /system partition on a release build is a huge security hole!\\r\\n9780134096346_print.indb   7925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=":{"__data__":"{\"id_\":\"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"E1bv2Y8Y5z+1gL9qZu8nFRB7VdL5KuqN0e4S3xdYFiI=\",\"text\":\"\\r\\n80Chapter 5  Platform Security\\r\\nMount Point: /data \\r\\nThe /data file system is also typically backed by eMMC or some other non-volatile storage. \\r\\nAlso like /system, most modern Android systems utilize the ext4 format for this file system. It \\r\\nis mounted read-write and contains data for both the platform as well as apps. Although it is \\r\\nmounted read-write, write access is strictly controlled by permissions and SE policy. The image \\r\\nfrom the build that is used for this file system is the userdata.img file.\\r\\nApp data is located at /data/data/<package name>. This is the file system portion of the \\r\\napplication sandbox, outlined earlier in this chapter. When an app wants to create a database, \\r\\nshared preferences, or even a regular file, this is where its app private storage is located. This \\r\\nis protected by file system permissions based on the application’s assigned UID/GID. This also \\r\\nmeans that it is possible for apps to “share” files from this private space by setting file system– \\r\\nlevel permissions (though this is generally not recommended).\\r\\nThe Android framework also uses portions of the /data file system for its own purposes. \\r\\nApplication installs, granted permissions for packages, new permissions, package native librar-\\r\\nies, and optimized DEX/OAT binaries are some examples of what the framework stores here. \\r\\nJust like the app private areas, these files are protected by file system–level permissions as well \\r\\nas SE policy so the contents are kept from prying eyes.\\r\\nMount Point: /sdcard \\r\\nPrehistoric Android phones included a SD/MMC slot used for additional storage or removable \\r\\ncontent, such as pictures or video. This is because back in the 2008 timeframe, NAND or other \\r\\nflash devices were relatively expensive per MB of storage but SD cards were not. Plus, in the \\r\\ndays of NAND flash, the typical Linux file systems (such as ext4) were not good about spread-\\r\\ning data throughout the device, or “wear leveling,” that was necessary to prevent the SSDs of \\r\\nthe time from failing.\\r\\nAlthough most devices in the market today do not have separate SD/MMC card slots, the \\r\\nsystem retains a symbolic link at the root file system, /sdcard. Depending on the hardware, \\r\\nthis can point to a real SD card device (which is mounted elsewhere) or to emulated “external \\r\\nstorage.”\\r\\nPerhaps even more confusing is the concept of “primary” versus “secondary” external storage. \\r\\nSecondary external storage devices are just like primary, with the exception that some of the \\r\\npermissions handling is different. On both types of external devices, apps can read and write \\r\\nto their own private namespace without any additional permissions. This is handled by synthe-\\r\\nsized permissions provided by the kernel and a user space file system (FUSE) daemon.\\r\\nApps can read other areas of external storage by holding the Android permission READ_\\r\\nEXTERNAL_STORAGE. However, the WRITE_EXTERNAL_STORAGE permission only gives apps the \\r\\nability to write to non-package private areas of primary external storage. Any secondary exter-\\r\\nnal storage device(s) can only be written by system apps or processes.\\r\\nWhen emulated external storage is used, the device is typically eMMC soldered on to the board \\r\\nand treated like an SD card. When no separate device exists for “external storage,” it is layered \\r\\non top of the /data file system, effectively sharing the same storage space. The intent of this \\r\\n9780134096346_print.indb   8025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=":{"__data__":"{\"id_\":\"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"CaFZiCX7w0kJs6ZMCYsjDtbM9Tfx4sz9cYCrRuY1/Nw=\",\"text\":\"\\r\\n81Operational Security\\r\\nstorage media is for larger files. Refer to the AOSP storage documentation for examples of exter-\\r\\nnal storage configurations: \\r\\nhttps://source.android.com/devices/storage/config-example\\r\\nMount Points: /product, /odm, and /vendor\\r\\nAndroid 8 introduced the concept of the /vendor image containing any vendor-specific propri-\\r\\netary binaries for a platform. This is typically where board or SoC-specific customizations, such \\r\\nas a HAL or custom daemon, are located.\\r\\nStarting with Android 9, manufacturers can use product file systems so that a single system \\r\\nimage can be used with different product images to support different software SKUs. With \\r\\nthis support in place, different Android software loads can be built for a single device using the \\r\\nsame core Android OS with only the manufacturer-supplied software differing for the various \\r\\nproducts.\\r\\nAndroid 10 introduced the concept of original design manufacturers (ODMs) file systems. These \\r\\nallow ODMs to further customize SoC or board-specific changes while having a common /\\r\\nvendor area. The concept is similar to the /product file system, except this is used to differen-\\r\\ntiate multiple hardware SKUs rather than software SKUs. \\r\\nThese mount points are treated like /system from a security perspective: They are read-only \\r\\nmount points that are typically secured using dm-verity to ensure they are not manipulated \\r\\nafter being flashed to the device.\\r\\nMount Points: /sys, /dev, and /proc\\r\\nThe Linux kernel can expose different types of virtual file systems to user space: These can be \\r\\nmounted like file systems–backed storage devices. As described in Chapter 4, the kernel creates \\r\\nthe file system out of thin air: It can put anything it wants into it.\\r\\nThese three mount points expose kernel internals, devices interfaces, and kernel runtime infor-\\r\\nmation. In Android, the content of these areas is generally locked down for access only by \\r\\nsystem or privileged processes. It is easy to understand why: Exposing kernel internals or direct \\r\\ncalling access can cause a number of security problems.\\r\\nThe AOSP framework’s SE policies allow for certain interfaces to be accessed by end apps (such \\r\\nas the binder interfaces), but by and large, most apps/processes cannot access these areas. In \\r\\nfact, the CDD specifically limits access, and there are CTS/VTS tests to verify this. Any OEM \\r\\ncreating a new device with new kernel interfaces needs to be especially careful not to allow \\r\\nunfettered access to custom kernel objects and interfaces!\\r\\nMiscellaneous Mount Points\\r\\nSeveral other mount points and partitions can exist in a running Android system. For example, \\r\\nthe /cache mount point is a read-write area that can be used by the system and applica-\\r\\ntions to store temporary data. Files and directories here are scoped per application, utilizing \\r\\na similar file system sandbox per application as used in the /data partition. Depending on \\r\\n9780134096346_print.indb   8125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=":{"__data__":"{\"id_\":\"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ztn7bnHqRmAmwP+SngZsV1AMSHm3w5tiqtuceukoQAA=\",\"text\":\"\\r\\n82Chapter 5  Platform Security\\r\\nthe manufacturer, other mount points may exist as well. As a general rule to keep with CDD \\r\\ncompliance, any mount point added to the system should be treated read-only or have  \\r\\nspecial SE policies defined to strictly limit access. For example, some manufacturers include a \\r\\n/firmware partition that contains firmware binaries for hardware on the board. This type of \\r\\npartition should be read-only and also protected with strict SE policy so only the OEM/vendor-\\r\\nprovided binaries and/or the kernel can use the contents.\\r\\nUser Protections\\r\\nAndroid is first and foremost a mobile phone operating system. Although it has been shipped \\r\\non numerous tablets and IoT devices, at its heart it was made to power a mobile phone. With \\r\\nphones and tablets, users really do carry their lives with them. From contacts and email to \\r\\nvideo players and social media apps, people have become accustomed to carrying their life’s \\r\\ndetails on a device that can be lost or stolen. Protecting this information is critical.\\r\\nAndroid has supported a variety of user identification mechanisms beyond simple passwords \\r\\nor drawing sequences. Face unlock capability was first introduced in API 14 (Android 4.0, Ice \\r\\nCream Sandwich). Since then, it has expanded to include fingerprint readers and other biomet-\\r\\nrics. For many IoT type devices, this functionality is likely to be less important. One feature \\r\\nthat is used to protect the user and could be useful for IoT devices is the encrypted file system \\r\\nsupport.\\r\\nFull disk encryption (FDE) was added to the platform as far back as API 11 (Android 3.0, \\r\\nHoneycomb). FDE was a great step in protections as it allowed users to protect data on the \\r\\ndevice until their credentials had been entered. One major drawback is that with FDE, the \\r\\ndevice can only perform some very basic operations until credentials are entered. No phone \\r\\ncalls can be made (other than emergency), no alarms set, and so on. Starting with API 24 \\r\\n(Android 7.0, Nougat), file-based encryption (FBE) was added to the platform.\\r\\nFBE is built on top of a feature called Direct Boot. With Direct Boot, devices have two different \\r\\ntypes of storage locations to manage device data before and after the user has entered creden-\\r\\ntials. The Credential Encrypted (CE) storage area is the default location for data storage. It is \\r\\navailable only after the user has unlocked the device.\\r\\nThe Device Encrypted (DE) storage area is available during Direct Boot as well as after the user \\r\\nhas entered credentials. Each area is protected using independent keys and encrypted data. Not \\r\\nonly does this allow Android and some system apps to operate before the user has unlocked the \\r\\ndevice, but it also better separates user profiles because each is encrypted with a different key.\\r\\n Note\\r\\nStarting with Android 10, all new devices are required to support FBE. There are also certain \\r\\nlimitations with FBE and adoptable storage, depending on the version of Android in use, if ear-\\r\\nlier than Android 10. See the AOSP documentation on file-based encryption for more details: \\r\\nhttps://source.android.com/security/encryption/file-based.\\r\\n9780134096346_print.indb   8225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=":{"__data__":"{\"id_\":\"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Pqix26pN3YQNkVCz+xJEopt+IFE0rQdRG3Adu8+O2tg=\",\"text\":\"\\r\\n83Customizing Permissions\\r\\nFBE and Direct Boot require several lower-level features to be supported in the platform: kernel \\r\\nsupport, keymaster support (using HAL 1.0 or 2.0), Trusted Execution Environment (TEE) to \\r\\nimplement keymaster and keystore, and hardware root of trust and Verified Boot bound to \\r\\nkeymaster initialization. Additionally, system apps that must work before the user unlocks \\r\\nthe device must add support for new lifecycle events and APIs so CE protected areas are used \\r\\nappropriately.\\r\\nYou can find details about FDE, FBE, and Direct Boot on the AOSP and main Android developer \\r\\nwebsites:\\r\\nhttps://source.android.com/security/encryption/full-disk\\r\\nhttps://source.android.com/security/encryption/file-based\\r\\nhttps://developer.android.com/training/articles/direct-boot\\r\\nCustomizing Permissions\\r\\nEarlier, this chapter described the Android Permissions model and showed how the permissions \\r\\nare leveraged by the framework to protect features. Although Android defines a multitude of \\r\\npermissions within the SDK, those are not the only permissions that are present in a running \\r\\nsystem. Some third-party SDKs, including some of Google’s SDKs for Android, define their own \\r\\npermissions, which may be used by apps. Both system-bundled applications and third-party \\r\\napplications can extend the system in this way.\\r\\n Note\\r\\nDefining new permissions is normally only necessary for system-level applications or apps that \\r\\nare part of a “suite” where there is a need to provide a level of protection when accessing cer-\\r\\ntain features and components. It is important to remember that in most cases, Android permis-\\r\\nsion protection for a package is a fairly low barrier for potential attackers to overcome if it is \\r\\nnot defined and used correctly.\\r\\nNew Android permissions outside of the core framework are defined by individual packages for \\r\\npackage-specific reasons. For system-bundled applications, the custom permissions are added \\r\\nto the system when the first boot optimizes and installs the APK on the platform. For apps \\r\\ninstalled by third parties or installed after first boot, the permissions are defined when the \\r\\npackage is installed.\\r\\nHow is this done? Via the application’s manifest, of course! The easiest way to understand \\r\\ncustom permissions is to see an example in action.\\r\\nSample Custom Permission–Protected App\\r\\nA simple example of using custom permissions requires both a “host” application, which \\r\\ndefines the permissions, and a “consumer” app, which uses the permissions. The Acme One \\r\\nplatform tree, set up in Chapter 2, contains both the host and client app. Rather than walk \\r\\n9780134096346_print.indb   8325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=":{"__data__":"{\"id_\":\"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"BysW6JSC1+AlOkxDTYgYKilHp/j3pxnG0eNSphB4h1Q=\",\"text\":\"\\r\\n84Chapter 5  Platform Security\\r\\nthrough creation of the build files, resources, and so on, this section and the next show only \\r\\nthe files relevant to customizing permission usage.\\r\\nThe host sample app is in device/acme/one/app/PermsSampleHost. The app defines  \\r\\ntwo new permissions, com.acme.one.permission.GET_MIN_TGT_SDK and com.acme.one. \\r\\npermission.NOTIFY_MIN_TG_SDK. These permissions are used to protect a BroadcastReceiver  \\r\\nand specific broadcast Intent response so that only apps granted the permissions can request \\r\\nand receive the minimum target SDK supported by the Acme platform. The minimum target \\r\\nSDK supported by the platform is stored in a system property (ro.build.version.min_\\r\\nsupported_target_sdk), but is not exposed via a public Android framework API. Although \\r\\nnot incredibly useful to the consumer application, it provides a clear illustration of how custom \\r\\npermissions can be defined and used with a simple example.\\r\\n Note\\r\\nThis contrived example of a custom permission protecting something within the platform also \\r\\nillustrates one of the dangers an OEM must bear in mind: accidentally exposing details to other \\r\\napps, which is called a side channel leak or feature leak. OEMs need to carefully consider what \\r\\nplatform private APIs or information is exposed via a custom API.\\r\\nWhen Android permissions are defined, they can be grouped together for organization  \\r\\npurposes. Surprisingly, permission cannot be granted or denied to groups as a whole. \\r\\nPermissions can only be controlled individually. In other words, permission groups are useful \\r\\nfor end users to view permissions via the Settings application. Otherwise, though, they do not \\r\\ncome into play. The manifest for the example host application defines a permission group and \\r\\nthe two new permissions. The new permission group for these two permissions is optional and \\r\\nshown here for completeness.\\r\\nListing 5.7 shows the manifest file for the sample host application.\\r\\nListing 5.7 PermsSampleHost AndroidManifest.xml\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<manifest xmlns:android=http://schemas.android.com/apk/res/android\\r\\n    coreApp=\\\"true\\\"\\r\\n    package=\\\"com.acme.one.permssamplehost\\\" >\\r\\n    <permission-group android:name=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                      android:description=\\\"@string/perm_group_tgt_info_descr\\\"\\r\\n                      android:label=\\\"@string/perm_group_tgt_info_label\\\" />\\r\\n    <permission android:name=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\"\\r\\n                android:description=\\\"@string/perm_get_min_tgt_sdk_descr\\\"\\r\\n                android:label=\\\"@string/perm_get_min_tgt_sdk_label\\\"\\r\\n                android:permissionGroup=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                android:protectionLevel=\\\"signature\\\" />\\r\\n9780134096346_print.indb   8425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4=":{"__data__":"{\"id_\":\"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"kX5O0vjOihkH9TV+hLfJil9kEaHOt7RzsS7gZfiAt4I=\",\"text\":\"\\r\\n85Customizing Permissions\\r\\n    <permission android:name=\\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\"\\r\\n                android:description=\\\"@string/perm_notify_min_tgt_sdk_descr\\\"\\r\\n                android:label=\\\"@string/perm_notify_min_tgt_sdk_label\\\"\\r\\n                android:permissionGroup=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                android:protectionLevel=\\\"signature\\\" />\\r\\n    <application android:label=\\\"@string/app_name\\\"\\r\\n                 android:icon=\\\"@drawable/app_launcher_icon\\\"\\r\\n                 android:supportsRtl=\\\"true\\\"\\r\\n                 android:allowBackup=\\\"false\\\" >\\r\\n        <receiver android:name=\\\".MinTargetReceiver\\\"\\r\\n                 android:label=\\\"@string/min_tgt_receiver_name\\\"\\r\\n                 android:permission=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\" >\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"com.acme.one.service.GET\\\" />\\r\\n            </intent-filter>\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"com.acme.one.service.NOTIFY\\\" />\\r\\n            </intent-filter>\\r\\n        </service>\\r\\n    </application>\\r\\n</manifest>\\r\\nNote how the permissions are defined in the <permission> subelements of the <manifest> \\r\\ntag, and both are signature-level permissions. Similarly, both are part of a new permission \\r\\ngroup, defined via the <permission-group> tag. Be very careful when using the group that the \\r\\npermissionGroup attribute in the permission matches exactly with the name attribute of the \\r\\npermission group! It must be exact, and the specified group actually defined in the manifest (or \\r\\nelsewhere in the system), otherwise the new permissions will not be created!\\r\\nThe soong blueprint file (see Listing 5.8) calls out the app as product specific and utilizes plat-\\r\\nform APIs. This means that the app will be built against the internal framework libraries, not \\r\\nthe one that is stripped for inclusion in the Android SDK. Because the app utilizes a hidden \\r\\nclass to access the system properties, it must be built this way.\\r\\nListing 5.8 PermsSampleHost Android.bp\\r\\nandroid_app {\\r\\n    name: \\\"PermsSampleHost\\\",\\r\\n    product_specific: true,\\r\\n    certificate: \\\"shared\\\",\\r\\n    srcs: [\\r\\n        \\\"app/src/**/*.java\\\",\\r\\n9780134096346_print.indb   8525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28=":{"__data__":"{\"id_\":\"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"RE28QvhstKNoObD9+WiK6rJFHXOYEX0/cLneD5kQZww=\",\"text\":\"\\r\\n86Chapter 5  Platform Security\\r\\n    ],\\r\\n    resource_dirs: [\\r\\n        \\\"app/src/main/res\\\",\\r\\n    ],\\r\\n    manifest: \\\"app/src/main/AndroidManifest.xml\\\"\\r\\n}\\r\\nThe main source of the application is a BroadcastReceiver, which is started via an explicit \\r\\nIntent and responds accordingly. \\r\\nThe requesting application sends the Intent with one of two actions specified. The GET \\r\\naction requires an extra to be included with a Messenger that the receiver will use to send \\r\\nback the response as a Message. The NOTIFY action will send a response via broadcast Intent \\r\\nwhich can only be received by applications that hold the NOTIFY_MIN_TGT_SDK permission. \\r\\nThe receiver code is contained in app/src/main/java/com/acme/one/permssamplehost/\\r\\nMinTargetReceiver.java, and Listing 5.9 shows the key portions of it.\\r\\nListing 5.9 PermsSampleHost MinTargetReceiver.java\\r\\npackage com.acme.one.permssamplehost;\\r\\n...\\r\\npublic class MinTargetReceiver extends BroadcastReceiver {\\r\\n    private static final String TAG = \\\"MinTargetReceiver\\\";\\r\\n    private static final String ACTION_GET = \\\"com.acme.one.action.GET\\\";\\r\\n    private static final String ACTION_NOTIFY = \\\"com.acme.one.action.NOTIFY\\\";\\r\\n    private static final String ACTION_NOTIFY_RESP =\\r\\n            \\\"com.acme.one.action.NOTIFY_RESP\\\";\\r\\n    private static final String EXTRA_MESSENGER =\\r\\n            \\\"com.acme.one.extra.EXTRA_MESSENGER\\\";\\r\\n    private static final String EXTRA_MIN_TGT_SDK =\\r\\n            \\\"com.acme.one.extra.EXTRA_MIN_TGT_SDK\\\";\\r\\n    private static final String PERMISSION_NOTIFY =\\r\\n            \\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\";\\r\\n    private static final String SYSTEM_PROP_MIN_TGT_SDK =\\r\\n            \\\"ro.build.version.min_supported_target_sdk\\\";\\r\\n    private static final int MESSAGE_MIN_TGT_SDK = 1000;\\r\\n    public int getMinTargetSdk() {\\r\\n        return SystemProperties.getInt(SYSTEM_PROP_MIN_TGT_SDK, -1);\\r\\n    }\\r\\n    @Override\\r\\n    public void onReceive(Context context, Intent intent) {\\r\\n9780134096346_print.indb   8625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA=":{"__data__":"{\"id_\":\"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"oYNuC5bnCmUm9Y1oO7t/fSFXqkwEfeqc3ay8uE1GE3M=\",\"text\":\"\\r\\n87Customizing Permissions\\r\\n        String action = intent.getAction();\\r\\n        if (action == null) {\\r\\n            Log.e(TAG, \\\"No action provided\\\");\\r\\n        }\\r\\n        if (TextUtils.equals(action, ACTION_GET)) {\\r\\n            Messenger msgr = intent.getParcelableExtra(EXTRA_MESSENGER);\\r\\n            if (msgr != null) {\\r\\n                Message resp = Message.obtain();\\r\\n                resp.what = MESSAGE_MIN_TGT_SDK;\\r\\n                resp.arg1 = getMinTargetSdk();\\r\\n                try {\\r\\n                    msgr.send(resp);\\r\\n                } catch (RemoteException e) {\\r\\n                    //  Ignore, client has died\\r\\n                }\\r\\n            } else {\\r\\n                Log.e(TAG, \\\"No Messenger provided for response\\\");\\r\\n            }\\r\\n        } else if (TextUtils.equals(action, ACTION_NOTIFY)) {\\r\\n            Intent respIntent = new Intent(ACTION_NOTIFY_RESP);\\r\\n            respIntent.putExtra(EXTRA_MIN_TGT_SDK, getMinTargetSdk());\\r\\n            sendBroadcast(respIntent, PERMISSION_NOTIFY);\\r\\n        } else {\\r\\n            Log.e(TAG, \\\"Invalid action: \\\" + action);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nAfter it is built into the system image, you can launch the application by sending the appropri-\\r\\nate Intent. Because the shell does not have the necessary permission granted, an attempt to \\r\\nrun the app from the command line will fail, as shown in the logcat output:\\r\\n$ am broadcast -a \\\"com.acme.one.action.GET\\\" \\\\\\r\\n-n \\\"com.acme.one.permssamplehost/.MinTargetService\\\"\\r\\nW/BroadcastQueue( 2742): Permission Denial: broadcasting Intent  { act=com.acme.one.action.GET flg=0x400010  \\r\\ncmp=com.acme.one.permssamplehost/.MinTargetReceiver } from null (pid=19015, uid=2000) requires com.acme.one.permission.GET_MIN_TGT_SDK due to receiver  \\r\\ncom.acme.one.permssamplehost/.MinTargetReceiver\\r\\n9780134096346_print.indb   8725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg=":{"__data__":"{\"id_\":\"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hYV6lIPwAnZpGZWvfT9oM2Njy3tD/2oWN8idlPNgseY=\",\"text\":\"\\r\\n88Chapter 5  Platform Security\\r\\nSample Custom Permission Client App\\r\\nTo complete the example of custom permissions, we’ll need a client app that uses the permis-\\r\\nsions. This sample can be found in device/acme/one/app/PermsSampleClient. This app uses \\r\\nthe permissions defined by the host app by declaring that it uses them in its manifest. When \\r\\nthe app is installed on the platform, it will be granted the custom permissions as long as it was \\r\\nsigned by the same certificate as the host. Listing 5.10 shows the manifest for the client app.\\r\\nListing 5.10 PermsSampleClient AndroidManifest.xml\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<manifest xmlns:android=http://schemas.android.com/apk/res/android\\r\\n    package=\\\"com.acme.one.permssampleclient\\\" >\\r\\n    <uses-permission android:name=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\" />\\r\\n    <uses-permission android:name=\\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\" />\\r\\n    <application\\r\\n        android:label=\\\"@string/app_name\\\"\\r\\n        android:icon=\\\"@drawable/app_launcher_icon\\\"\\r\\n        android:supportsRtl=\\\"true\\\"\\r\\n        android:allowBackup=\\\"false\\\">\\r\\n        <activity android:name=\\\".MainActivity\\\">\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"android.intent.action.MAIN\\\" />\\r\\n                <category android:name=\\\"android.intent.category.LAUNCHER\\\" />\\r\\n            </intent-filter>\\r\\n        </activity>\\r\\n    </application>\\r\\n</manifest>\\r\\nIt may not be obvious, but a potential race condition exists with custom permissions. What \\r\\nhappens if the client app is installed but the host app is not? In this case the custom permis-\\r\\nsions are not granted to the consumer app, because they do not exist in the system at the time \\r\\nthe consumer app is installed. This is true even if the host app is installed at a later point in \\r\\ntime! The client app’s permissions are not revisited just because the host app is installed.\\r\\nAnother interesting situation occurs when the host app is removed after its permissions have \\r\\nbeen granted to another app. In this case the custom permissions are wiped from the system’s \\r\\nknown permissions, but the client app retains the permissions being granted until it is removed \\r\\nor reinstalled!\\r\\n9780134096346_print.indb   8825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=":{"__data__":"{\"id_\":\"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"vXYFwSnpV0/98KBd9kotZljzcrlc2KTyCdclNFegpxU=\",\"text\":\"\\r\\n89Customizing Permissions\\r\\n Note\\r\\nAndroid custom permissions work on a “first come, first defined” basis. If two app packages \\r\\ndefine the same exact permission, the first one to be installed is the one that defines it from \\r\\nthe system’s point of view. Remember, it’s just a string associated with a package and signa-\\r\\nture! The exception to this is if the system (or system package) defines a permission. Since \\r\\nAndroid 4.4.3, the system ensures that system-defined permissions take precedence.\\r\\nThe client app has a painfully simple UI. It presents two buttons for retrieving the minimum \\r\\ntarget SDK, one using the “get” technique and the other using the “notify” technique. The text \\r\\nstatus area shows the result or a failure, if encountered. When the “get” button is tapped, an \\r\\nIntent is sent to the service and includes the Messenger where the response is to be sent. The \\r\\nMessenger is bound to a new Handler object that runs in the main thread of the app. When \\r\\nthe “notify” button is tapped, the Intent is sent to the service, and the BroadcastReceiver \\r\\nis listening for the response. Listing 5.11 shows the key parts of the activity source file, written \\r\\nin Kotlin. You can find detailed information about Messenger and Message in the book Android \\r\\nConcurrency, published by Pearson, Inc.\\r\\nListing 5.11 PermsSampleClient MainActivity.kt\\r\\npackage com.acme.one.permssampleclient\\r\\n...\\r\\nclass MainActivity : Activity(), Handler.Callback {\\r\\n    companion object {\\r\\n        private const val TAG = \\\"MainActivity\\\"\\r\\n        private const val ACME_MIN_TGT_RXR_PKG = \\\"com.acme.one.permssamplehost\\\"\\r\\n        private const val ACME_MIN_TGT_RXR =\\r\\n            ACME_MIN_TGT_RXR_PKG + \\\".MinTargetReceiver\\\"\\r\\n        private const val MESSAGE_MIN_TGT_SDK = 1000\\r\\n        private const val ACTION_GET = \\\"com.acme.one.action.GET\\\"\\r\\n        private const val ACTION_NOTIFY = \\\"com.acme.one.action.NOTIFY\\\"\\r\\n        private const val ACTION_NOTIFY_RESP = \\\"com.acme.one.action.NOTIFY_RESP\\\"\\r\\n        private const val EXTRA_MESSENGER =\\r\\n            com.acme.one.extra.EXTRA_MESSENGER\\\"\\r\\n        private const val EXTRA_MIN_TGT_SDK =\\r\\n            com.acme.one.extra.EXTRA_MIN_TGT_SDK\\\"\\r\\n    }\\r\\n    private lateinit var statusText: TextView\\r\\n    private lateinit var getButton: Button\\r\\n    private lateinit var notifyButton: Button\\r\\n    private val handler = Handler(this)\\r\\n    private val messenger = Messenger(handler)\\r\\n    private var active = false\\r\\n    private val respRxr = object : BroadcastReceiver() {\\r\\n9780134096346_print.indb   8925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U=":{"__data__":"{\"id_\":\"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Tu9dAWjRwezbDOx7vwVC2UxNogzz/Uc/DPK6Z5N9OI4=\",\"text\":\"\\r\\n90Chapter 5  Platform Security\\r\\n        override fun onReceive(context: Context, intent: Intent) {\\r\\n            when (intent.action) {\\r\\n                ACTION_NOTIFY_RESP -> {\\r\\n                    val minTgtSdk = intent.getIntExtra(EXTRA_MIN_TGT_SDK, -1)\\r\\n                    if (minTgtSdk != -1) {\\r\\n                        handler.obtainMessage(MESSAGE_MIN_TGT_SDK, minTgtSdk, 0)\\r\\n                            .sendToTarget()\\r\\n                    } else {\\r\\n                        Log.w(TAG, \\\"[onReceive] no min target SDK provided\\\")\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    private fun createReceiverIntent(action: String): Intent {\\r\\n        val intent = Intent(action)\\r\\n        intent.component = ComponentName(ACME_MIN_TGT_RXR_PKG, ACME_MIN_TGT_RXR)\\r\\n        return intent\\r\\n    }\\r\\n    override fun onCreate(savedInstanceState: Bundle?) {\\r\\n        super.onCreate(savedInstanceState)\\r\\n        ...\\r\\n        getButton.setOnClickListener {\\r\\n            val getIntent = createReceiverIntent(ACTION_GET)\\r\\n            getIntent.putExtra(EXTRA_MESSENGER, messenger)\\r\\n            statusText.setText(R.string.using_get)\\r\\n            Log.d(TAG, \\\"[GET] starting service\\\")\\r\\n            sendBroadcast(getIntent)\\r\\n        }\\r\\n        notifyButton.setOnClickListener {\\r\\n            val notifyIntent = createReceiverIntent(ACTION_NOTIFY)\\r\\n            statusText.setText(R.string.using_notify)\\r\\n            Log.d(TAG, \\\"[NOTIFY] starting service\\\")\\r\\n            sendBroadcast(notifyIntent)\\r\\n        }\\r\\n    }\\r\\n    override fun onResume() {\\r\\n        super.onResume()\\r\\n        ...\\r\\n9780134096346_print.indb   9025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw=":{"__data__":"{\"id_\":\"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ZS/99i5xM43LNzI3fetzJZ2FEIjCM1KL9Rgm0AwtBSA=\",\"text\":\"\\r\\n91Customizing Permissions\\r\\n        active = true\\r\\n    }\\r\\n    override fun onPause() {\\r\\n        active = false\\r\\n        ...\\r\\n        super.onPause()\\r\\n    }\\r\\n    override fun handleMessage(msg: Message): Boolean {\\r\\n        if (!active) {\\r\\n            ...\\r\\n            return true\\r\\n        }\\r\\n        when (msg.what) {\\r\\n            MESSAGE_MIN_TGT_SDK -> {\\r\\n                ...\\r\\n                statusText.text = getString(R.string.min_tgt_sdk_fmt, msg.arg1)\\r\\n            }\\r\\n            else -> {\\r\\n                Log.e(TAG, \\\"[handleMessage] unknown message type: ${msg.what}\\\")\\r\\n            }\\r\\n        }\\r\\n        return true\\r\\n    }\\r\\n}\\r\\n Note\\r\\nAlthough the sample client app does use Kotlin, note that it does not use any androidx librar-\\r\\nies or other third-party libraries. This is intentional, because the app is built as part of the \\r\\nAOSP platform, which does not use Gradle. This means “standard” libraries available in Android \\r\\nStudio via Maven repositories are not readily available with the built-in Android app package \\r\\nrules when building via soong. Integrating Gradle into the AOSP build is possible, but it is out-\\r\\nside of the scope of this book.\\r\\nThe build files and other resources are not interesting for this sample. Running the app on the \\r\\nplatform and touching the “get” button shows the output, and monitoring the logcat output \\r\\nshows the expected details:\\r\\nD/MainActivity(20455): [GET] requesting min target SDK\\r\\nD/MainActivity(20455): [handleMessage] received min target SDK: 23\\r\\n9780134096346_print.indb   9125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso=":{"__data__":"{\"id_\":\"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"moYE6RqCW6f6Uot3as5kEmayKeMG+TQNyforr5ripss=\",\"text\":\"\\r\\n92Chapter 5  Platform Security\\r\\nSummary\\r\\nAndroid utilizes numerous security features to keep the device, OS, and user data safe. This \\r\\nchapter looked at the basic security concerns of any computing environment:\\r\\n ■The device is running valid code.\\r\\n ■The operation being performed is allowed.\\r\\n ■The app or user data is safe.\\r\\n ■The security features can be extended and customized.\\r\\nThe chapter examined how Android verified boot works and how vendors enable or custom-\\r\\nize it. After Android is up and running, the process sandbox, SE policy and Android’s permis-\\r\\nsions system work to keep apps isolated from each other and user data safe. This sandboxing \\r\\nin memory, file system, and via SE policy has morphed over Android’s lifetime to better protect \\r\\nthe system. Rounding out this chapter is a sample of how Android’s permission system can be \\r\\nextended with custom permissions. Utilizing a custom permission can be particularly useful for \\r\\nOEMs or package creators where only certain packages should be able to use the functionality. \\r\\nPre-bundled app packages from the OEM or a suite of packages from an app vendor signed with \\r\\nthe same certificate are good examples of where this can be leveraged.\\r\\n9780134096346_print.indb   9225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc=":{"__data__":"{\"id_\":\"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"bjvB+pAYircEAsif8caiBaFVspDTzrL5xSOVEs9clg4=\",\"text\":\"\\r\\n6\\r\\nSystem Startup: Installing \\r\\nand Booting the System\\r\\nThe diagram of the Android system, shown in Chapter 3 in Figure 3.1, is more than simply \\r\\nallegorical. It is meant to show, from the bottom to the top, dependencies within the Android \\r\\nsystem. The kernel creates an environment for applications; system applications and libraries \\r\\ncreate an environment for the Android system; and so on up to the top of the chain: Android \\r\\nuser applications. Clearly, if each layer depends on the one beneath it, the components that \\r\\ncomprise any given layer must be initialized before those in the layer above. The process of \\r\\ninitializing the successive layers takes place at system startup when a device is booted. This \\r\\nchapter describes that process.\\r\\nThe Boot Process\\r\\nBooting a device is a complex and multi-phase process. It is likely to involve several programs \\r\\nthat are, themselves, large and complex. To further complicate matters, the entire process takes \\r\\nplace in an environment very close to the hardware: something that most developers never \\r\\nexperience. Chapter 5 discussed the ways in which the boot process affects device security. Even \\r\\nif a project does not require creating or customizing it, having a general understanding of how \\r\\nthe boot process works and how its internal phases relate to one another is useful.\\r\\nFigure 6.1 outlines the phases of the boot process from power on through the initialization of \\r\\nthe Android system. \\r\\n9780134096346_print.indb   9325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs=":{"__data__":"{\"id_\":\"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"CU1nJayuRdCfhskPa4DVUi8nKhh5koW+MjRwG2dYyz4=\",\"text\":\"\\r\\n94Chapter 6  System Startup: Installing and Booting the System\\r\\nPower On\\r\\nBoot ROM\\r\\nBootloader\\r\\nFastbootKernel\\r\\ninit\\r\\ndaemondaemondaemonrecoveryUI\\r\\nKernel\\r\\ninit\\r\\nZygote\\r\\nserviceservice\\r\\nFigure 6.1 The Android Boot Process\\r\\nMore specifically, here are the steps that most Android devices take when booting:\\r\\n1. Hardware Boot\\r\\n a. Power Stable\\r\\n b. Reset CPU\\r\\n c. Load and start Boot ROM (hardwired address)\\r\\n9780134096346_print.indb   9425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg=":{"__data__":"{\"id_\":\"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"mj0c+u2y0tYXArwt1MQbBl2OQfszTaXpHiXGBuqz7O8=\",\"text\":\"\\r\\n95The Boot Process\\r\\n2. Bootloader (Device dependent, usually proprietary)\\r\\n a. Power-on Self-Test (POST)\\r\\n b. Video boot\\r\\n c. External storage probe\\r\\n d. Device-specific hardware initialization\\r\\n e. Fastboot, system update, other features\\r\\n f. Cryptographic verification of kernel\\r\\n g. Load and start kernel\\r\\n3. Kernel\\r\\n a. Phase 1\\r\\n    i. Memory initialization\\r\\n   ii. File system initialization\\r\\n  iii. Network initialization\\r\\n b. Phase 2 (overwrites phase 1 code)\\r\\n    i. User-space initialization\\r\\n   ii. Load and start init\\r\\n4. init\\r\\n a. Start system daemons\\r\\n b. Start Android\\r\\n5. Android\\r\\n a. Start Zygote\\r\\n b. Android System Services\\r\\nTo examine these steps in full detail, in the next few sections we follow the abbreviated log \\r\\nof the boot of a HiKey960. Although, obviously, even minor changes in software and hard-\\r\\nware will cause substantial changes in the boot log, key events are similar across machines. \\r\\nReviewing an actual log is useful in the interests of specificity.\\r\\nBootloader\\r\\nFunctionally, the early phases of system boot are part of the hardware. The code implementing \\r\\nthem is frequently stored in on-chip read-only memory (ROM). They are not something that \\r\\ncan be changed easily, even in the unlikely circumstance that doing so would be desirable. For \\r\\nall practical purposes, both can be considered part of the device.\\r\\nListing 6.1 shows power-on through the initiation of the software bootloader.\\r\\n9780134096346_print.indb   9525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM=":{"__data__":"{\"id_\":\"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"CiW33g6qXdwYk2zVb5pGVWDYBcxUvskNGTwPLTxdN4I=\",\"text\":\"\\r\\n96Chapter 6  System Startup: Installing and Booting the System\\r\\nListing 6.1 xloader Boot Log\\r\\n^@hikey960 boarid:5301 xloader use UART6\\r\\nscsysstat_value[0].\\r\\nclear reset source\\r\\nlast_keypoint0,reboot_type0\\r\\nsecdbg not DCU.\\r\\nSecDbgVer exit\\r\\n xloader chipid is: 0x36600110, start at 470ms.\\r\\nBuild Date: Dec  6 2017, 15:31:59 [clock_init] ++\\r\\nhikey960 [hikey960_clk_init]\\r\\nhi3660 [clk_setup]\\r\\n[clock_init] --\\r\\nstorage type is UFS\\r\\nufs retry: 6 count v_tx:0 v_rx:0\\r\\nufs set v_tx:0 v_rx:0\\r\\nHikey960[5301] no need avs_init.\\r\\nddr ft:0xf20332a3,mode:1 target:4\\r\\nUceLdOk\\r\\n<lines omitted...>\\r\\n1244M\\r\\n1866M\\r\\nC2R,V0x00000015 e:193\\r\\nC2R,V0x00000016 e:66\\r\\nC0R,V0x00000017 e:66\\r\\nC1R,V0x00000017 e:66\\r\\nboot_c0 PROFILE 4\\r\\nslave0 irq0:0x00000004\\r\\nslave1 irq0:0x00000004\\r\\nmain:     ******** Fastboot for Kirin *****************\\r\\nNote\\r\\nAccess to the boot log is essential for debugging the boot process. Clearly, the log will not \\r\\nbe available through adb, a daemon process that is started relatively late in system startup. \\r\\nAlthough on most systems, retrieving most of the log produced by the most recent boot is \\r\\n possible via the dmesg command, the process is cumbersome and requires that the board \\r\\n successfully boot at least far enough to support a shell.\\r\\nThe logs shown in this chapter were captured from a UART mezzanine board attached to the \\r\\nbooting Hikey960. Such a board, or at least something similar, is an essential tool for bringing \\r\\nup a board and debugging the boot process.\\r\\n9780134096346_print.indb   9625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=":{"__data__":"{\"id_\":\"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"18PIIdkWoUBLpcVkPt0Wg1myK4f9miIKQsKECF7aFoI=\",\"text\":\"\\r\\n97The Boot Process\\r\\nWhen the device is powered on, the first thing that happens is that the power supply changes \\r\\nto a powered-up state. When the power supply senses that board power levels have stabilized in \\r\\nthe new state, it sends a RESET signal to the CPU. This signal causes the CPU to load data from \\r\\nboot ROM and to start executing it.\\r\\nThe bootloader program is likely to execute in several stages. Typically, the first stage is a small \\r\\nprogram that performs some very low level and device-specific initialization tasks. Among these \\r\\ntasks on most devices is a power-up self-test (POST) that does basic sanity checks of the various \\r\\nhardware subsystems (memory, bus, and so on) to verify that they are working normally. If \\r\\none of the POST tests fails, the entire boot process is usually aborted with some very minimal \\r\\nperceptible feedback: a pattern of sounds, flashing LEDs or, at most, a very simple error code on \\r\\nthe console display.\\r\\nIf the POST passes, the bootloader loads additional code from a location specified in a canoni-\\r\\ncal location on a canonical memory device. For Android, this is nearly always a special parti-\\r\\ntion on the main flash card. The exact specifications and format of the special file depend on \\r\\nthe device and the version of Android. Historically, Android devices were formatted using the \\r\\nMaster Boot Record (MBR) standard. Newer devices are more likely to use a newer standard, \\r\\nthe GUID Partition Table (GPT).\\r\\nRegardless of the specifics of how the additional bootloader code is discovered, the process \\r\\nof executing it is very nearly still part of the hardware. The second stage of the bootloader, \\r\\nhowever, is the first code that a starting system executes that is not in read-only memory.\\r\\nBecause the later stages of the bootloader are mutable code, one of the tasks of the first stage of \\r\\nthe bootloader is verifying the code for subsequent stages before it is executed. The bootloader \\r\\ncomputes a cryptographic signature for any code obtained from a writable device and compares \\r\\nthe computed signature with one that is stored in the secure area of chipset memory. If the two \\r\\ndo not match, the boot process fails, much as it would fail a POST.\\r\\nStarting with code that is in read-only memory (and which, therefore, cannot be changed), \\r\\neach piece of code cryptographically verifies the next piece of code before executing it. This \\r\\ncreates a chain of trust that guarantees that the running system has not been tampered with \\r\\nor altered. This trust is important to keep the user of a device safe from malware: viruses and \\r\\ntrojans that might be hidden in the boot code. It also may be important to protect the device \\r\\nfrom its user. Applications such as digital rights management (DRM) and secure funds transfer \\r\\nmay depend on code that has been verified and that is free from meddling.\\r\\nThe strategies used by various manufacturers for configuring the hardware and communicating \\r\\nwith the bootloader vary widely. One common way of building a bootloader that is both flex-\\r\\nible and extensible involves storing configuration parameters and code in hidden partitions on \\r\\nthe device storage.\\r\\nExamining the persistent storage for an actual device will usually reveal a handful of parti-\\r\\ntions that are never mounted as part of the Android file system. Recent revisions of Linux will \\r\\nlist these partitions by name, even if they are never mounted, in the subdirectory of /dev, \\r\\n9780134096346_print.indb   9725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=":{"__data__":"{\"id_\":\"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Z2vOIapzomcwJBgmcuYts7bF42R7AYxKWoYa312ZHRo=\",\"text\":\"\\r\\n98Chapter 6  System Startup: Installing and Booting the System\\r\\nappropriately called, “by-name.” For example, Listing 6.2 shows the partitions included on the \\r\\nHiKey960 used in most of these examples.\\r\\nListing 6.2 Files in /dev\\r\\nadb shell 'ls –R /dev' | grep by-name\\r\\n/dev/block/platform/soc/ff3b0000.ufs/by-name\\r\\nadb shell ls -l /dev/block/platform/soc/ff3b0000.ufs/by-name\\r\\ntotal 0\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 boot -> /dev/block/sdd7\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 cache -> /dev/block/sdd5\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 dts -> /dev/block/sdd8\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 fastboot -> /dev/block/sdd2\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 fip -> /dev/block/sdd4\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 frp -> /dev/block/sdc1\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 fw_lpm3 -> /dev/block/sdd6\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 nvme -> /dev/block/sdd3\\r\\nlrwxrwxrwx 1 root root 16 1970-01-01 00:01 reserved -> /dev/block/sdd12\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 system -> /dev/block/sdd10\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 trustfirmware -> /dev/block/sdd9\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 userdata -> /dev/block/sdd13\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 vendor -> /dev/block/sdd11\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 xloader_reserved1 -> /dev/block/sdd1\\r\\nThe boot, recovery, vendor, system, cache, and userdata partitions are all canonical \\r\\nAndroid partitions and will be discussed shortly. The remaining partitions, though, are likely to \\r\\nbe part of the proprietary system boot process.\\r\\nNote\\r\\nThe inquisitive can take an even more accurate and low-level approach to identifying the parti-\\r\\ntions on a device by reading the partition map itself. Where mountable partitions have names \\r\\nthat end in numbers (for example, sdd7, sdd11), the raw device is usually cataloged in /dev \\r\\nwithout any partition number (for example, sdd). The HiKey960 used in these examples, for \\r\\ninstance, has four separate block storage devices: /dev/block/sda, /dev/block/sdb,  \\r\\n/dev/block/sdc, and /dev/block/sdd.\\r\\nEach of these devices is likely to have a partition map. To decode that map directly, simply dump \\r\\nthe first several thousand bytes from the device. Presuming adb is running as root, for instance:\\r\\nadb pull /dev/block/sdd\\r\\nThere is no need to pull the entire file, so press Ctrl+C after a few seconds. Having obtained \\r\\nthe file header using a byte dump tool like od and a description of the appropriate partition \\r\\ntable format (https://en.wikipedia.org/wiki/GUID_Partition_Table), completely identifying all the \\r\\npartitions is simply a matter of time.\\r\\n9780134096346_print.indb   9825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=":{"__data__":"{\"id_\":\"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"lsCdp2hv31JDrGE2MGneftxdJjVJ8CSURutjXXtvwzY=\",\"text\":\"\\r\\n99The Boot Process\\r\\nSome bootloaders support unlocking. Unlocking a bootloader is bypassing the cryptographic \\r\\nverification of the bootloader code before it is executed. Doing this allows the execution of \\r\\nbootloaders other than the one whose signature can be verified by the boot ROM. It also breaks \\r\\nchain of assurance and means that subsequent layers in the OS stack that implicitly trust their \\r\\nenvironment are in danger. \\r\\nBecause they are so nearly part of the hardware, there will be no more detailed investigation \\r\\ninto bootloaders here. Roger Ye’s book, Embedded Programming with Android (Ye, 2016), part of \\r\\nthe Android Deep Dive Series, is an excellent investigation of this part of the boot process. In \\r\\naddition, Jonathan Levin’s much more casual self-published essays on Android Internals (http://\\r\\nnewandroidbook.com) document some deep and useful research.\\r\\nMost Android bootloaders, like their large-scale computer counterparts (Grub, LILO, Open \\r\\nFirmware, or the various BIOSs), as their last task identify and initiate a successor. After all, the \\r\\nbootloader’s only real reason for existence is to prepare the device for the real operating system. \\r\\nBootloaders typically support simple user interfaces that can be used, among other things, to \\r\\nchoose that successor. Android devices usually support three choices: fastboot, recovery, and \\r\\nnormal Android boot.\\r\\nFastboot\\r\\nFastboot is a very lightweight system that is usually part of the bootloader itself. Although part \\r\\nof the bootloader, it bears separate discussion because it has a UI, as described in Chapter 2. Its \\r\\nfunctionality typically is limited to flashing the persistent storage of the device.\\r\\nA system is usually forced into fastboot mode using some kind of hardware flag: flipping a \\r\\nDIP-switch or holding some combination of buttons during system startup. The bootloader \\r\\ninspects the switches as part of initialization and determines whether it should run the fastboot \\r\\nprogram or not.\\r\\nListing 6.3 is the continuation of the log started in Listing 6.1. It shows the initialization of the \\r\\nfastboot program that is part of a normal (non-fastboot) startup.\\r\\nListing 6.3 fastboot Log\\r\\nmain:     ******** Fastboot for Kirin *****************\\r\\nmain:   ******** Build Date: Jun 14 2018, 17:48:58 **\\r\\nmain: ******** Fastboot start at 1836 ms **********\\r\\nmain: print soc_id computed in xloader phase, is below:\\r\\nmain: 00000000  main: 00000000  main: 00000000  main: 00000000  main: \\r\\nmain: 00000000  main: 00000000  main: 00000000  main: 00000000  main: \\r\\nled_alwayson: can't get dtb operators\\r\\nbbox: bbox_register_module_ops success.\\r\\nbfm: : >>>>>enter bfm_init\\r\\nbfm: : [disable_boot_fail_system] boot_fail_system state is 0\\r\\nclock: PLL Stat\\r\\n9780134096346_print.indb   9925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=":{"__data__":"{\"id_\":\"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"7iDf8Zqe8vC68c9hY5pq9GGSY7VayfZZhgqgB7qHgTo=\",\"text\":\"\\r\\n100Chapter 6  System Startup: Installing and Booting the System\\r\\nclock: PLL2 ctrl0=0x04909604,ctrl1=0x02000000\\r\\nclock: PLL2 acpu en_stat:0x00000008, acpu gt_stat:0x00040000\\r\\nclock: PLL2 final en_stat:0x00100000, final gt_stat:0x00020000\\r\\nclock: PLL3 ctrl0=0x04904005,ctrl1=0x07000000\\r\\nclock: PLL3 acpu en_stat:0x00000000, acpu gt_stat:0x00000000\\r\\nclock: PLL3 final en_stat:0x00200000, final gt_stat:0x00040000\\r\\nclock: clock init OK\\r\\nufs: ufs start on platform[36600110]ufs: ufs current mode: 0x00000011\\r\\nufs: ufs current gear: 0x00000003\\r\\nufs: ufs mphy reg 0x4A = 0x00000000\\r\\nufs: bUD0BaseOffset: 0x00000010, bUDConfigPLength: 0x00000010\\r\\nufs: UFS device manufacturerid = 0x000001ad\\r\\nufs: UFS device: H****\\r\\nbfm: : >>>>>enter set_boot_stage\\r\\n<lines omitted ...>\\r\\nusbloader: iddq is 0x0000000000000000\\r\\nusbloader: hpm is 0x0000000000000000\\r\\nusbloader: dieid is 0x0a048009d1170d0a977947122140ee1c06d65993\\r\\nload_kernel: Hikey960: Enable all ip regulator\\r\\npmu_ip: Hikey960:switch from PPLL0 to PPLL3\\r\\npmu_ip: Hikey960:Enable ispfunc\\r\\npmu_ip: Hikey960:Enable clock-gating\\r\\npmu_ip: [regulator_power_all_enable] all IP regulator is power on!\\r\\nload_kernel: set ISP_CORE_CTRL_S to unsec, val = 0x00000007 \\r\\nload_kernel: set ISP_SUB_CTRL_S to unsec, val = 0x0000000f \\r\\nload_kernel:\\r\\nKernel\\r\\nAt this point, the bootloader is ready to load and run the kernel. Listing 6.4 is a continuation \\r\\nof the boot log started in Listing 6.1 and continued in Listing 6.3.\\r\\nThe complete log of the kernel boot contains a wealth of useful information. In reading the log, \\r\\nit is important to remember that with the kernel come multiple processes. The log is no longer \\r\\na single path through ordered tasks. It is now the interleaved output of multiple processes that \\r\\nmay be running simultaneously.\\r\\nThe listing is extremely abbreviated. Excellent documentation is available elsewhere that \\r\\ndescribes the kernel boot process. This log shows only a few highlights.\\r\\nNote that this log was produced by booting the kernel built in Chapter 4.\\r\\nAlso note the initialization of a couple of the key Android components mentioned in  \\r\\nChapter 4, ion (hisi_ion at time 0.000000) and ashmen (at time 1.891833). \\r\\n9780134096346_print.indb   10025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=":{"__data__":"{\"id_\":\"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"UlkxOU8K3fxmBeKwWzup8GE0Ma9IKCeXb+hux5tGvuQ=\",\"text\":\"\\r\\n101The Boot Process\\r\\nFinally, note that the log shows the command line with which the kernel was started. This \\r\\ncommand line is a key means of communicating configuration information to the kernel.\\r\\nThe bootloader finds the kernel in the device storage boot partition (shown in Listing 6.4), \\r\\none of the canonical partitions on an Android system. Unlike the Linux systems common on \\r\\nlarger machines, the storage partition that holds the kernel is not mounted in the Android file \\r\\nsystem. Although the bootloader (and, in fact, any other application with low-level access to \\r\\nthe storage device) can read and probably even write to boot partition, the partition does not \\r\\ncontain a file system, files, or catalogs and is never mounted in the Android file tree.\\r\\nTo maintain the chain of trust, the bootloader verifies the kernel code by computing its crypto-\\r\\ngraphic signature and comparing it to the signature stored on the device (which was, in turn, \\r\\nverified when the hardware verified the bootloader).\\r\\nListing 6.4 Kernel Boot Log\\r\\nload_kernel: \\r\\n----boot time is 3442 ms----\\r\\nload_kernel: boot_from_bl31: boot to trusted firmware. addr=0x00000000 \\r\\n[    0.000000] Booting Linux on physical CPU 0x0\\r\\n[    0.000000] Initializing cgroup subsys cpuset\\r\\n[    0.000000] Initializing cgroup subsys cpu\\r\\n[    0.000000] Initializing cgroup subsys cpuacct\\r\\n[    0.000000] Initializing cgroup subsys schedtune\\r\\n[    0.000000] Linux version 4.4.59-02536-g679a543 (jstultz@buildbox) (gcc version 5.4.0 20160609 (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.4) ) #2507 SMP PREEMPT Wed Aug 9 \\r\\n09:52:10 PDT 2017\\r\\n[    0.000000] Boot CPU: AArch64 Processor [410fd034]\\r\\n[    0.000000] efi: Getting EFI parameters from FDT:\\r\\n[    0.000000] efi: UEFI not found.\\r\\n[     0.000000] Ion: base 0xbe200000, size is 0x1e00000, node name graphic, heap-name carveout_gralloc namesize 17,[99][97][114][118]\\r\\n[    0.000000] Ion: insert heap-name carveout_gralloc \\r\\n[    0.000000] Reserved memory: initialized node graphic, compatible id hisi_ion\\r\\n[    0.000000] Reserved memory: created CMA memory pool at 0x0000000016c00000, size  64 MiB\\r\\n[    0.000000] Reserved memory: initialized node fastboot-cma-mem, compatible id  shared-dma-pool\\r\\n[    0.000000] cma: Reserved 64 MiB at 0x00000000ba000000\\r\\n[    0.000000] On node 0 totalpages: 785600\\r\\n[    0.000000]   DMA zone: 12288 pages used for memmap\\r\\n[    0.000000]   DMA zone: 0 pages reserved\\r\\n[    0.000000]   DMA zone: 785600 pages, LIFO batch:31\\r\\n[    0.000000] psci: probing for conduit method from DT.\\r\\n[    0.000000] psci: PSCIv1.0 detected in firmware.\\r\\n[    0.000000] psci: Using standard PSCI v0.2 function IDs\\r\\n[    0.000000] psci: MIGRATE_INFO_TYPE not supported.\\r\\n9780134096346_print.indb   10125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=":{"__data__":"{\"id_\":\"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eY2WxpTdBECgR3Q1dMfKEP7CS+mvWD1RAUhKa8jiH5c=\",\"text\":\"\\r\\n102Chapter 6  System Startup: Installing and Booting the System\\r\\n[    0.000000] PERCPU: Embedded 19 pages/cpu @ffffffc0be100000 s47256 r0 d30568 u77824\\r\\n[    0.000000] pcpu-alloc: s47256 r0 d30568 u77824 alloc=19*4096\\r\\n[    0.000000] pcpu-alloc: [0] 0 [0] 1 [0] 2 [0] 3 [0] 4 [0] 5 [0] 6 [0] 7 \\r\\n[    0.000000] Detected VIPT I-cache on CPU0\\r\\n[    0.000000] CPU features: enabling workaround for ARM erratum 845719\\r\\n[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 773312\\r\\n[    0.000000] Kernel command line: androidboot.hardware=hikey960  androidboot.selinux=permissive firmware_class.path=/system/etc/firmware loglevel=15  \\r\\nbuildvariant=userdebug androidboot.swtype=normal  fastboot_version=DailyBuild_201708091533_FASTBOOT setup_logctl=1 fastbootdmd=0  \\r\\nenter_recovery=0 androidboot.mode=normal low_volt_flag=1 boardid=0x000014b5  normal_reset_type=coldboot ddr_die=3072M@0M  efuse_status=2  \\r\\nandroidboot.serialno=0123456789ABCDEF himntn=111111111111111010111111101001100010001 boot_slice=0x00019c31 reboot_reason=AP_S_COLDBOOT recovery_update=0 userlock=locked \\r\\nbootlock=unlocked hw_bfm_enable=0 ddr_density=3 swiotlb=2 mdmreglogbase=0x00000000 mdmreglogsize=0x00000000 modem_socp_enable=0 androidboot.hardware=HiKey960  \\r\\nandroidboot.veritymode=enforcing androidboot.verifiedbootstate=ORANGE  ufs_product_name=THGBF7G8K4LBATRC format_data=1 cpu_buck_reg=0x;;  \\r\\nandroidboot.ddrsize=3 kce_status=1  console=ttyAMA6,115200 \\r\\n<lines omitted ...>\\r\\n[    1.891833] ashmem: initialized\\r\\n<lines omitted ...>\\r\\n [    6.895248] usb 1-1.5: new high-speed USB device number 4 using xhci-hcd\\r\\n[    6.902456] Freeing unused kernel memory: 1016K (ffffff800901b000 - ffffff8009119000)\\r\\nThe File System\\r\\nAs part of initialization, the kernel mounts the Android file system. Listing 6.5 shows the root \\r\\nof that file system. Several of these partitions were introduced in Chapter 5.\\r\\nListing 6.5 Android File System\\r\\nrootfs on / type rootfs (ro,seclabel,size=1444252k,nr_inodes=361063)\\r\\ntmpfs on /dev type tmpfs (rw,seclabel,nosuid,relatime,mode=755)\\r\\ndevpts on /dev/pts type devpts (rw,seclabel,relatime,mode=600,ptmxmode=000)\\r\\nproc on /proc type proc (rw,relatime)\\r\\nsysfs on /sys type sysfs (rw,seclabel,relatime)\\r\\nselinuxfs on /sys/fs/selinux type selinuxfs (rw,relatime)\\r\\nnone on /acct type cgroup (rw,relatime,cpuacct)\\r\\nnone on /dev/memcg type cgroup (rw,relatime,memory)\\r\\nnone on /dev/stune type cgroup (rw,relatime,schedtune)\\r\\ntmpfs on /mnt type tmpfs (rw,seclabel,relatime,mode=755,gid=1000)\\r\\n9780134096346_print.indb   10225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=":{"__data__":"{\"id_\":\"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"YlhwJmmd+M5z6hm0KpurzaxeTIBQxB67XV1yaiP5+B8=\",\"text\":\"\\r\\n103The Boot Process\\r\\nnone on /config type configfs (rw,relatime)\\r\\nnone on /dev/cpuctl type cgroup (rw,relatime,cpu)\\r\\nnone on /dev/cpuset type cgroup  (rw,relatime,cpuset,noprefix,release_agent=/sbin/cpuset_release_agent)\\r\\npstore on /sys/fs/pstore type pstore (rw,seclabel,relatime)\\r\\n/sys/kernel/debug on /sys/kernel/debug type debugfs (rw,seclabel,relatime,mode=755)\\r\\n/dev/block/sdd10 on /system type ext4 (ro,seclabel,relatime,data=ordered)\\r\\n/dev/block/sdd5 on /cache type ext4  (rw,seclabel,relatime,discard,noauto_da_alloc,data=ordered)\\r\\n/dev/block/sdd13 on /data type ext4  (rw,seclabel,relatime,discard,noauto_da_alloc,data=ordered)\\r\\ntmpfs on /storage type tmpfs (rw,seclabel,relatime,mode=755,gid=1000)\\r\\ntracefs on /sys/kernel/debug/tracing type tracefs (rw,seclabel,relatime)\\r\\nThe key section of Listing 6.5 is the last five lines, which show the mount points for three of \\r\\nthe six (five, before Android release 26) canonical Android partitions. These important parti-\\r\\ntions were introduced in Chapter 5, and again in Listing 6.2, where they appeared as named \\r\\npartitions found on the main block storage device. They are system, cache, and data. \\r\\n ■system (/system): This is the read-only part of the Android file system discussed in Chapter 5. It is sometimes called the ROM, although its contents are not sufficient to \\r\\ncreate a running Android system, and the ability to write to it is controlled only by \\r\\nsoftware.\\r\\n ■cache (/cache): System cache. Originally, this partition kept such things as optimization data for Android’s just-in-time Java compiler. It now holds a wider variety \\r\\nof ephemeral data. It is a separate partition so that it can be easily erased when, for \\r\\ninstance, a system update renders it useless.\\r\\n ■userdata (/data): System managed writeable data. Also introduced in Chapter 5, this is where Android applications are stored and where the system stored the data that is \\r\\nprivate to a given application.\\r\\nThese partitions are essential and will be found on every Android device. In recent versions of \\r\\nAndroid, they are often mounted by name from the directory shown in Listing 6.2.\\r\\nIn addition, several other partitions appear frequently on Android devices. The boot partition \\r\\nhas already been discussed as the location of the kernel. A few common partitions are\\r\\n ■boot (unmounted): As discussed earlier, this is the partition that contains the Linux kernel.\\r\\n ■vendor (/vendor) Android Oreo introduced Project Treble, Google’s effort to separate the Android system binaries from the proprietary vendor binaries necessary to shim the \\r\\nhardware to the OS. Vendor proprietary code is now stored on the vendor partition, \\r\\nwhere it can be updated independently. This partition was also mentioned in Chapter 5.\\r\\n9780134096346_print.indb   10325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=":{"__data__":"{\"id_\":\"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"dYFKuoxY+XxcB+VW4fECJYhzniY4gzKFmKjFx9hhN7k=\",\"text\":\"\\r\\n104Chapter 6  System Startup: Installing and Booting the System\\r\\n ■recovery (unmounted): Another partition that is never mounted or used by the Android system. It contains the operating and file systems for the recovery system, discussed later \\r\\nin this chapter. It is very similar to the boot partition but used for recovery mode.\\r\\n ■persist (unmounted): Many vendors and carriers have found it useful to store mutable information in a way that is not destroyed when the phone is reset. Those that are \\r\\nwilling to be blatant about this “feature” may choose an obvious name for it. Others may \\r\\nchoose a subtler name. This partition is usually accessed through a special driver and \\r\\navailable only to privileged applications.\\r\\n ■radio (unmounted): This partition contains the operating and file systems for the cellular radio processor. Its contents are likely to be quite proprietary.\\r\\n ■storage (/sdcard): Most Android systems support relatively unprotected bulk storage. Originally, this was likely to be removable (Micro SD cards) and was mounted \\r\\nat /sdcard. When Android moved away from removable media and added support \\r\\nfor multiple users, the mount point was changed. Soft links point /sdcard at the \\r\\nappropriate emulated file system.\\r\\n ■product and odm (/product and /odm) Introduced to the platform in Android versions 9 and 10, respectively, these partitions were described in Chapter 5. They \\r\\nprovide additional flexibility, allowing a single hardware image to support multiple \\r\\nsimilar devices. Software for a specific device can be configured to read only the data and \\r\\ncode that apply to it.\\r\\ninit\\r\\nAs the last step of the process of booting Linux, the kernel starts the init application. init \\r\\nis the first application to run in a completely normal application environment, so called user-\\r\\nspace, with mapped virtual memory, a mounted file system, and no direct access to hardware. It \\r\\nis also the root of the process tree, process id 0, and the ancestor of every other process.\\r\\nListing 6.6 shows the last phase of device boot, again, edited heavily to save space.\\r\\nListing 6.6 init Boot Log\\r\\n[    6.912976] init: init first stage started!\\r\\n[    6.934559] init: Early mount skipped (missing/incompatible fstab in device tree)\\r\\n[    6.942061] init: Loading SELinux policy\\r\\n[    7.031172] random: init: uninitialized urandom read (40 bytes read, 45 bits of entropy available)\\r\\n[    7.032940] init: init second stage started!\\r\\n[    7.036781] init: property_set(\\\"ro.boot.hardware\\\", \\\"HiKey960\\\") failed: property already set\\r\\n[    7.041578] init: Running restorecon...\\r\\n[    7.109305] init: waitpid failed: No child processes\\r\\n[    7.109546] init: Couldn't load properties from /odm/default.prop: No such file or directory\\r\\n[    7.109604] init: Couldn't load properties from /vendor/default.prop: No such file or directory\\r\\n9780134096346_print.indb   10425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=":{"__data__":"{\"id_\":\"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"rEwBTkMxLoQdfje5fcI/BDrrb0LtxGfghymY65rzKZ0=\",\"text\":\"\\r\\n105The Boot Process\\r\\n[    7.110252] init: Created socket '/dev/socket/property_service', mode 666, user 0, group 0\\r\\n[    7.110322] init: Parsing file /init.rc...\\r\\n[    7.110559] init: Added '/init.environ.rc' to import list\\r\\n[    7.110568] init: Added '/init.usb.rc' to import list\\r\\n[    7.110584] init: Added '/init.hikey960.rc' to import list\\r\\n[    7.110591] init: Added '/init.usb.configfs.rc' to import list\\r\\n[    7.110601] init: Added '/init.zygote64_32.rc' to import list\\r\\n[    7.111239] init: Parsing file /init.environ.rc...\\r\\n[    7.111304] init: Parsing file /init.usb.rc...\\r\\n[    7.111547] init: Parsing file /init.hikey960.rc...\\r\\n<lines omitted ...>\\r\\n[    7.115910] init: processing action (wait_for_coldboot_done)\\r\\n[    7.380541] init: Command 'wait_for_coldboot_done' action=wait_for_coldboot_done returned 0 took 264.577ms.\\r\\n[    7.380569] init: processing action (mix_hwrng_into_linux_rng)\\r\\n[    7.380601] init: /dev/hw_random not found\\r\\n[    7.380633] init: processing action (set_mmap_rnd_bits)\\r\\n[    7.381191] init: processing action (set_kptr_restrict)\\r\\n[    7.381366] init: processing action (keychord_init)\\r\\n[    7.381384] init: processing action (console_init)\\r\\n[    7.381424] init: processing action (init)\\r\\n<lines omitted ...>\\r\\n[    8.197664] init: computing context for service 'hidl_memory'\\r\\n[    8.197820] init: starting service 'hidl_memory'...\\r\\n[    8.198948] init: computing context for service 'bluetooth-1-0'\\r\\n[    8.199153] init: starting service 'bluetooth-1-0'...\\r\\n[    8.199873] init: computing context for service 'configstore-hal-1-0'\\r\\n[    8.200025] init: starting service 'configstore-hal-1-0'...\\r\\n[    8.200707] init: computing context for service 'wifi_hal_legacy'\\r\\n[    8.200852] init: starting service 'wifi_hal_legacy'...\\r\\n[    8.201482] init: starting service 'healthd'...\\r\\n[    8.202088] init: computing context for service 'lmkd'\\r\\n[    8.202241] init: starting service 'lmkd'...\\r\\n[    8.202976] init: computing context for service 'servicemanager'\\r\\n[    8.203120] init: starting service 'servicemanager'...\\r\\n[    8.203804] init: computing context for service 'surfaceflinger'\\r\\n[    8.203935] init: starting service 'surfaceflinger'...\\r\\n<lines omitted ...>\\r\\n[   11.087269] init: computing context for service 'bootanim'\\r\\n[   11.087503] init: starting service 'bootanim'...\\r\\n9780134096346_print.indb   10525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=":{"__data__":"{\"id_\":\"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"arBrvvfeVd6oCRtssV/DJK0/gQhyewLgRpGMUMpeWyI=\",\"text\":\"\\r\\n106Chapter 6  System Startup: Installing and Booting the System\\r\\n[   13.044371] init: processing action (sys.sysctl.extra_free_kbytes=*)\\r\\n[   14.099973] init: computing context for service 'wpa_supplicant'\\r\\n[   14.100518] init: starting service 'wpa_supplicant'...\\r\\n[   14.102545] init: Created socket '/dev/socket/wpa_wlan0', mode 660, user 1010, group 1010\\r\\n[   15.089361] init: processing action (sys.boot_completed=1)\\r\\nThe listing highlights several important things. The first is that init runs in multiple phases. \\r\\nThe first phase is initialization and configuration. In it, init examines the file system and sets \\r\\nup communications with the kernel. One of the key means of accomplishing this communica-\\r\\ntion uses the /sys and /proc file systems.\\r\\nAs noted in Chapter 4, the file system, a hierarchical arrangement of files and directories of \\r\\nfiles, is largely an abstraction created by the kernel. Drivers in the kernel organize the raw, flat \\r\\nblocks presented by hardware storage devices into the familiar tree of directories and files.\\r\\nAgain, because the kernel creates the file system, more or less, out of thin air, no need exists \\r\\nfor it to restrict the abstraction to block storage devices. In fact, the /proc storage system is, \\r\\nprecisely, kernel memory cataloged as files. Applications with write permission on certain files \\r\\nin /proc can write directly to kernel memory. Although many programs can read the files in \\r\\n/proc, init is one of the few that can write to them. This is how it communicates with the \\r\\nkernel.\\r\\nIn its second stage, init reads and parses its configuration files, usually named \\r\\n“init.<something>.rc.” The locations and contents of these files are described in some  \\r\\ndetail in a README file in the AOSP init source (https://android.googlesource.com/platform/\\r\\nsystem/core/+/master/init/README.md).\\r\\ninit starts a very limited number of Linux daemons and then the root process of the Android \\r\\nsystem, Zygote.\\r\\nRecovery\\r\\nAs shown in Figure 6.1, many Android devices support an alternate boot path: Recovery Mode. \\r\\nUnlike fastboot, recovery mode boots a complete, if limited, operating system. It has a full \\r\\nnetwork stack, can mount and unmount volumes, runs adb and a shell, and so on. Although \\r\\nit is a complete, if minimal, Linux, recovery mode does not start the Android container. It is \\r\\nsimilar to the “safe-mode” on larger systems.\\r\\nSome devices have pre-installed, proprietary recovery systems. Obtaining the source for them \\r\\nwill require contacting the board manufacturer. AOSP also contains code for a flashable  \\r\\nrecovery image in the bootable/recovery directory. To generate the flashable image file, \\r\\nrecovery.img, use the make target the recoveryimage:\\r\\nmake –j9 recoveryimage\\r\\n9780134096346_print.indb   10625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=":{"__data__":"{\"id_\":\"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ZD4+wQ8v+efoUsLVjUIPiOEs2ooq0C8JCoI1kfhOwBI=\",\"text\":\"\\r\\n107Creating the Acme Device\\r\\nIn addition, there have been other well-known recovery systems; among them ClockworkMod \\r\\nand Team Win Recovery Project (TWRP). Both are open source.\\r\\nThe source for the ClockworkMod recovery system is included in the source for Lineage \\r\\nOS, formerly CyanogenMod, in the android_bootable_recovery-cm repository. As of \\r\\nthis writing, although the code continues to be available in the repositories of the old \\r\\nCyanogenMod organization, it does not appear to be maintained there. The version in the \\r\\nLineage repositories (https://github.com/LineageOS) is maintained and up to date.\\r\\nThe source for TWRP is also on GitHub (https://github.com/TeamWin). It is in active develop-\\r\\nment and has been ported to a wide variety of hardware platforms. \\r\\nBuilding a Daemon\\r\\nOne of the biggest advantages of being a developer creating a custom Android for a new device \\r\\nis the ability to add Linux level daemons. All Android programs run in the Android container,  \\r\\nrather like a web server, and are thus one layer of abstraction removed from the operating \\r\\nsystem and the hardware. An application installed in a typical Android system—regardless of \\r\\nwhether it is written in Java, C, or even assembler—has very little control, even over when it \\r\\nstarts and stops. It is a group of components that are created and destroyed as necessary by the \\r\\ncontainer.\\r\\nWhen building a custom Android, however, adding a new native daemon requires no more \\r\\nthan writing the necessary code, probably C, and starting it from init.\\r\\nThe unique hardware feature in the Acme device is a proximity sensor. \\r\\nNote\\r\\nThe Acme device is actually emulated with the same HiKey960 used in previous chapters \\r\\nand an attached Arduino Uno. The Arduino is configured as a capacitive proximity sensor as \\r\\ndescribed on the Arduino website at https://playground.arduino.cc/Main/CapacitiveSensor.\\r\\nThe Arduino periodically reports proximity levels over its USB serial port using a simple binary \\r\\nprotocol. The Android device, the HiKey960, sees the Arduino as a readable USB serial device. \\r\\nYou can find the code for the project, along with all the rest of the code in this book, in the \\r\\nGitHub repo at https://github.com/InsideAndroidOS/.\\r\\nThe first approximation to porting the new hardware to Android will be a daemon that reads \\r\\nthe proximity sensor and reports the values by logging them to the system log.\\r\\nCreating the Acme Device\\r\\nChapter 2 outlined the process of customizing Android for a new device, the HiKey960. The \\r\\nprocess involved downloading some hardware-specific code, necessary for the HiKey device, \\r\\n9780134096346_print.indb   10725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=":{"__data__":"{\"id_\":\"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eVxuuouyc9sNUJORZjJtnNVT4SeuHKCAYLHHJw6AWiU=\",\"text\":\"\\r\\n108Chapter 6  System Startup: Installing and Booting the System\\r\\nand modifying the AOSP manifest to include it. The next step extends those modifications to \\r\\ncreate an entirely new device, the Acme One.\\r\\nAn Android device is defined by two directories in the source tree, one in .../device and one in \\r\\n.../vendor. The former is where most of the action is.\\r\\nA device is represented in .../device as a two-level hierarchy. The first layer represents an orga-\\r\\nnization, in this case Acme. The second represents the specific device; in our case, the One. \\r\\nNote\\r\\nUnless explicitly stated otherwise, all directory paths from this point on are relative to the root \\r\\nof the build directory, the directory from which the repo tool was run. They are specified without \\r\\na leading “/” or “...”.\\r\\nIn addition to creating a home for device code, you must register a new device in the \\r\\nbuild system. Prior to Android 7, registering the device was accomplished using a special \\r\\nscript, vendorsetup.sh, which would be detected and included by the envsetup.sh \\r\\nscript. The vendorsetup.sh script would call the special function, add_lunch_combo, \\r\\nto add device-specific options to the lunch menu. With the Soong build system, this is \\r\\nnow accomplished via the AndroidProducts.mk makefile by setting the special variable, \\r\\nCOMMON_LUNCH_CHOICES.\\r\\nThe AndroidProducts.mk file for a device is likely to register at least a couple of builds because \\r\\na given device may be built in several different ways. The type of the build is encoded in the \\r\\nvalues set in the COMMON_LUNCH_CHOICES variable.\\r\\nThe variable’s value must contain exactly one hyphen (“-”). The build system parses the vari-\\r\\nable values, separating each at the hyphen, before the hyphen, the name of the device to be \\r\\nbuilt and after the hyphen, the build type. The name of the device can be anything descriptive. \\r\\nThere are, though, exactly three build types:\\r\\n ■eng: eng builds are debugging builds. They include a variety of debugging tools that would be a waste of space except during development. adb runs as root by default on an \\r\\neng build.\\r\\n ■userdebug: userdebug builds are similar to eng builds but have fewer debugging tools. They were originally intended for debugging on hardware with limited storage space. \\r\\nadb does not run as root by default on a userdebug build, but the su command works.\\r\\n ■user: user builds are production releases. All debugging software is stripped, adb is not run at all by default, and it cannot be run as root, if started.\\r\\nOnly one of these three words will work, after the hyphen, as the values of \\r\\nCOMMON_LUNCH_CHOICES.\\r\\n9780134096346_print.indb   10825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY=":{"__data__":"{\"id_\":\"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"mZj6L5JvmipQV67O74H5I16iKaaOcbmlqQMyoAFJJUs=\",\"text\":\"\\r\\n109Creating the Acme Device\\r\\nListing 6.7 demonstrates creating a directory for the Acme One device and registering all three \\r\\npossible build types.\\r\\nListing 6.7 Registering the Acme One Device\\r\\nmkdir –p device/acme/one\\r\\ncat > device/acme/one/ AndroidProducts.mk\\r\\nCOMMON_LUNCH_CHOICES := \\\\\\r\\n acme_one-eng \\\\\\r\\n acme_one-userdebug \\\\\\r\\n acme_one-user\\r\\nPRODUCT_MAKEFILES := \\\\\\r\\n $(LOCAL_DIR)/acme_one.mk\\r\\n^D\\r\\nThe Acme One device is now registered. After you re-run setenv.sh, it is visible in the Lunch \\r\\nmenu.\\r\\nListing 6.8 Acme Lunch\\r\\n. build/envsetup.sh\\r\\nincluding device/acme/one/vendorsetup.sh\\r\\nincluding device/asus/fugu/vendorsetup.sh\\r\\n...\\r\\n> lunch\\r\\nYou're building on Linux\\r\\nLunch menu... pick a combo:\\r\\n     1. acme_one-eng\\r\\n     2. acme_one-user\\r\\n     3. acme_one-userdebug\\r\\n     4. aosp_arm-eng\\r\\n     5. aosp_arm64-eng\\r\\n     6. aosp_blueline-userdebug\\r\\n     7. aosp_bonito-userdebug\\r\\n...\\r\\n     45. uml-userdebug\\r\\nChoosing one of the Acme builds at this point will cause an error. Although the device has \\r\\nbeen registered, it has not yet been set up.\\r\\n9780134096346_print.indb   10925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=":{"__data__":"{\"id_\":\"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"M3WxCpU3J5jjNRQ+8UGu9Kt47+QNMVKLOxZ4w9hEwLg=\",\"text\":\"\\r\\n110Chapter 6  System Startup: Installing and Booting the System\\r\\nRepo Again\\r\\nThe new device is now registered with the build system. It is not yet, however, registered in the \\r\\nrepo manifest. The new directories and their contents cannot yet be downloaded or managed \\r\\nusing the repo tool (as can the rest of the source tree). Let’s fix that.\\r\\nChapter 2 described the organization of a hypothetical git service for the Acme project, located \\r\\nat https:/acme.net/acme/source. It is time to add several new repositories to that service. \\r\\n(Note that this is the hypothetical project source. The code from this book can be found online \\r\\nat https://github.com/InsideAndroidOS/)\\r\\nFigure 2.2 (in Chapter 2) showed the manifest for the first fork of the AOSP code. That fork did \\r\\nnot actually create space for any Acme-specific code at all; it just made room for the non-AOSP \\r\\ncode for the HiKey960 device and for the new kernel created in Chapter 4. Listing 6.9 shows \\r\\nthe fragment of the new manifest with additional repos for Acme-specific code.\\r\\nListing 6.9 The Acme One Manifest\\r\\n<!-- Acme Specific Projects -->\\r\\n  \\r\\n  <project path=\\\"device/acme/one/acme_one\\\"\\r\\n           name=\\\"platform_device_acme_one_acme_one\\\" remote=\\\"acme\\\" >\\r\\n    <linkfile src=\\\"acme_one.mk\\\" dest=\\\"device/acme/one/acme_one.mk\\\" />\\r\\n    <linkfile src=\\\"AndroidProducts.makefile\\\"\\r\\n              dest=\\\"device/acme/one/AndroidProducts.mk\\\" />\\r\\n  </project>\\r\\n  <project path=”device/acme/one/proximity”\\r\\n           name=”platform_device_acme_one_proximity”\\r\\n           remote=”acme” />\\r\\n  <project path=”device/acme/one/app/simple_daemon”\\r\\n           name=”platform_device_acme_one_app_simple_daemon”\\r\\n           remote=”acme” />\\r\\n  <project path=\\\"vendor/acme/one/interfaces\\\" \\r\\n           name=\\\"platform_vendor_acme_one_interfaces\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/linaro/hikey\\\"\\r\\n           name=\\\"platform_device_linaro_hikey\\\"\\r\\n           remote=\\\"acme\\\"\\r\\n           revision=\\\"acme\\\"\\r\\n           groups=\\\"device,hikey,pdk\\\" />\\r\\nThe vendor repo contains the binderized HAL definition. It is used along with the HiKey960 \\r\\nvendor tree, which is populated by a setup script in the HiKey device tree. The Acme device still \\r\\nrequires the non-AOSP device-specific vendor configuration. Perhaps surprisingly, even with the \\r\\naddition of the code for the new device, the manifest still forks the code for the HiKey device, \\r\\non which it is based.\\r\\n9780134096346_print.indb   11025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=":{"__data__":"{\"id_\":\"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HCXKwDWoflwuTL2vpFrm+ZLO6uZht/8TumW3tKZtikk=\",\"text\":\"\\r\\n111Starting the Daemon\\r\\nThis is an unfortunate reality. Ideally, the Acme device would simply reference code in the \\r\\nHiKey device directory, on which it depends. Practically, because of idiosyncrasies in the build \\r\\nsystem, it is nearly inevitable that it will be necessary to modify the code for the device on \\r\\nwhich the Acme One is based—in this case, the HiKey960. Forking the dependency makes it \\r\\npossible to maintain control over updates. The Acme device will depend on the forked HiKey \\r\\ndevice and the stable, forked version of the HiKey code. This makes applying updates from the \\r\\nupstream authoritative source in a managed and predictable way possible.\\r\\nThe first repository in the Acme-specific section of the manifest is the first new one: platform_\\r\\ndevice_acme_one_acme_one. This is the root of the Acme One device tree. A couple irritating \\r\\nconstraints govern it.\\r\\nThe first is that it cannot be checked out as the actual root of the Acme device tree. Because of \\r\\nthe way repo works, it cannot be device/acme/one. Instead, following the pattern set at the \\r\\nroot of the AOSP tree, this repository gets checked out as device/acme/one/acme_one, and \\r\\nthen the files from it that must be cataloged in device/acme/one are linked by the tool into \\r\\nthe parent directory.\\r\\nThe second constraint is imposed by the build system, which looks for files with names that \\r\\nfollow specific naming conventions. The files required at the root of the Acme One device tree \\r\\nmust be at the root—and they may not be anywhere else. The files in the one base repository \\r\\nmust have names that are sufficiently different from those that the build system recognizes so \\r\\nthat they do not confuse it.\\r\\nThe other three new repositories are the implementation of the new daemon. Because the code \\r\\nthat accesses the new hardware (the proximity sensor) will eventually be used not only in this \\r\\ndaemon but also to plumb the new sensor into Android, it is implemented as a separate library. \\r\\nThe library and the include file that describe its API comprise two of the three. The third is the \\r\\nimplementation of the actual daemon.\\r\\nStarting the Daemon\\r\\nAs described earlier in this chapter, starting the daemon code requires that a script be run by \\r\\nthe init process during system startup. The script is straightforward in its content: It defines a \\r\\n“service” that points to the daemon binary and applies certain attributes to it. The Acme One \\r\\nproximity sensor daemon should not run until the system is fully up, all file systems have been \\r\\nmounted, and its startup requires no special action. Because it is so nearly generic, the service \\r\\ncan be part of the main class: init will start it with all other services of this class during the \\r\\nmain phase. The service will execute as the system user and within the system group.  \\r\\nListing 6.10 shows the content of the init script.\\r\\nListing 6.10 Acme One Proximity Sensor init Script\\r\\nservice acmesimpledaemon /vendor/bin/hw/acmesimpledaemon\\r\\n    class main\\r\\n    user system\\r\\n9780134096346_print.indb   11125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM=":{"__data__":"{\"id_\":\"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"4fjhb/sVQK+I9G94MU4/836MBS8k2ulObZfxzi4r9VQ=\",\"text\":\"\\r\\n112Chapter 6  System Startup: Installing and Booting the System\\r\\n    group system\\r\\n    oneshot\\r\\nBecause the daemon is dependent on a specific USB device being plugged into the system, \\r\\nit is marked as a oneshot service. This means if the process exits, the init process will not \\r\\nattempt to restart it. Ideally, the daemon would be written so it would wait for the necessary \\r\\ndevice(s) or dependencies to be present before starting. Were it written that way, the oneshot \\r\\nproperty would be removed so that, if the daemon died or exited, init would automatically \\r\\nrestart it. This simple example does not wait for the device to appear, so oneshot is necessary.\\r\\nThe script is located in the device/acme/one/app/simple_daemon directory, alongside the \\r\\ndaemon source. The Soong blueprint file used to build the daemon also specifies the init \\r\\nscript, as shown in Listing 6.11.\\r\\nListing 6.11 Acme One Proximity Sensor Daemon Android.bp\\r\\ncc_binary {\\r\\n    name: \\\"acmesimpledaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmesimpledaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-simple-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nThe script in Listing 6.10 is processed by init, starting the daemon as part of the normal \\r\\nAcme One system startup. Unless the system SE policy information is updated to include \\r\\ndetails about the daemon, though, it will not run for very long! The daemon accesses the \\r\\n9780134096346_print.indb   11225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=":{"__data__":"{\"id_\":\"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"g2z/6QGBcXUWtcRWp+F1AYOr8PxNmthNwQ/4pXmYk7s=\",\"text\":\"\\r\\n113Starting the Daemon\\r\\nproximity sensor via USB serial device interface, which normal processes cannot access. Recall \\r\\nfrom Chapter 5 that the SE’s default behavior is to deny permissions and access to every-\\r\\nthing. This includes executing a binary, loading special files, and so on. Because the daemon \\r\\naccesses a device, it requires an SE policy that permits file operations and access to USB serial \\r\\ninterface device files. \\r\\nNote\\r\\nThe simple daemon described here demonstrates how a custom daemon for a platform can be \\r\\ncreated and added to the platform, including access to device interface files. Not all custom \\r\\nplatform daemons will require device access, but they will still require a customized SE policy. \\r\\nThe device file in use here is /dev/ttyUSB0, but this could be anything exposed by the kernel. \\r\\nIt is critical that any custom AOSP-based device limits a daemon’s access to hardware inter-\\r\\nfaces for security purposes and also to pass CTS/VTS.\\r\\nEven though the daemon executes as the system user/group, allowing it to have full access to \\r\\neverything in the system_app domain is dangerously insecure. The SE policy file for all Acme \\r\\nproximity daemons (more will be created in the HAL chapters), shown in Listing 6.12, defines a \\r\\nnew application domain as well as an execution domain for the binary and grants for access to \\r\\nthe components it needs to do its work. \\r\\nListing 6.12 Acme One Proximity Sensor Daemon SE Policy\\r\\ninit_daemon_domain(proximityd)\\r\\ntype proximityd, domain;\\r\\ntype proximityd_exec, vendor_file_type, exec_type, file_type;\\r\\nallow proximityd serial_device:chr_file rw_file_perms;\\r\\nA key detail in this SE policy file is the use of the init_daemon_domain macro. This sets up the \\r\\nproximityd domain as an init started daemon. What exactly does that mean? It means that \\r\\nit sets up the SE process domain as the domain to which the process initiated by proximityd_\\r\\nexec automatically transfers. Without this, the daemon would fail to start because the SE rules \\r\\nfor init do not allow it to execute another binary unless the new process changes domains!\\r\\nThe SE file for the proximity daemon is located in device/acme/one/sepolicy/proximityd.te.\\r\\nIn addition to the proximityd domain and execution type, the SE policy file also contains an \\r\\nallow rule that grants the daemon access to serial devices for reading/writing. This is necessary \\r\\nto allow the daemon to access the proximity sensor (which, as mentioned earlier, is connected \\r\\nvia USB serial device).\\r\\nThis is still not quite enough, though, because the default AOSP SE policies do not label the \\r\\nUSB serial device interfaces as serial_device. Now that a SE domain and context have been \\r\\ndefined, they need to be applied to the daemon binary; otherwise, it will not be available \\r\\n9780134096346_print.indb   11325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw=":{"__data__":"{\"id_\":\"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ewVuCXBx2YFcnBDvxOysgbvhb3XXZCS5werm462fqqM=\",\"text\":\"\\r\\n114Chapter 6  System Startup: Installing and Booting the System\\r\\nfor execution by init. The two file context changes require adding two lines to the SE file \\r\\ncontext details for the platform. Recall this is accomplished using a union of the SE file, file_\\r\\ncontexts. This file is located at device/acme/one/sepolicy/file_contexts, shown in \\r\\nListing 6.13.\\r\\nListing 6.13 Acme One SE Context Labels\\r\\n# Acme One Specific Changes\\r\\n/dev/ttyUSB[0-9]*                 u:object_r:serial_device:s0\\r\\n/vendor/bin/hw/acmesimpledaemon   u:object_r:proximityd_exec:s0\\r\\nWith all of these SE policy changes and additions in place, the Acme One build for the \\r\\nHiKey960 starts acmesimpledaemon during system startup. \\r\\nSummary\\r\\nThis chapter outlines the process of booting Linux in an Android system and describes creating \\r\\na new, pure Linux daemon. It outlines the behavior of the root of the process tree, init, and \\r\\ndemonstrates using init to start the daemon process. It also outlines the somewhat arduous \\r\\ntask of configuring SE Linux to accommodate starting a new hardware-based daemon.\\r\\n9780134096346_print.indb   11425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=":{"__data__":"{\"id_\":\"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"I70GWz6pQhO4BG4xsHJWkYrKqFUQoX7DxuWDaJW5Qug=\",\"text\":\"\\r\\n7\\r\\nAndroid Startup:  \\r\\nDalvik and Zygote\\r\\nChapter 6 reviewed the process of booting the Linux system. This chapter investigates the \\r\\nstartup of Android’s subsystems.\\r\\nThe processes are quite analogous. Figure 2.1 depicted an Android system as a layer cake; each \\r\\nnew layer depending on services provided by the underlying layer. The Linux kernel provides \\r\\na “container,” an environment that abstracts hardware into standard resources and facilities in \\r\\nwhich programs run.\\r\\nSimilarly, Android is a container. It provides abstract services to applications that run “inside” it. \\r\\nThinking of the Linux kernel as a container is a useful exercise because Android is a container \\r\\nin exactly the sense usually reserved, for instance, for web servers. Android applications are not \\r\\nassociated with the processes that power them in the way that most applications are.\\r\\nA typical desktop application owns its process: It is application code that gets control when \\r\\nthe application starts up. Although it may include code from third-party libraries, invoke code \\r\\nin memory shared with other applications, use services from other processes either local or \\r\\nthrough network connections, it is application code that is at the bottom of the call stack. The \\r\\napplication code may temporarily delegate control elsewhere but it always gets it back. At the \\r\\nextreme, it is the application that makes the call that terminates its process. \\r\\nThis is not the case for Android applications. An Android application, even one that has been \\r\\ncompletely compiled to native code, is not in control of its process. Instead, exactly as is the \\r\\ncase with many web service containers, it is the container that controls an Android application \\r\\nprocess. In Android, that container is a program called Zygote.\\r\\nTo start a new Android application, the Android system creates a new process (using the clone \\r\\nsystem call) that is a copy of the already-running Zygote. The new instance of Zygote loads \\r\\nthe components for the target application and invokes them as appropriate. In contrast to the \\r\\ntypical desktop application, then, Zygote may temporarily delegate control to the application, \\r\\nbut it is Zygote that always gets control back.\\r\\nPerhaps even more interesting, even Zygote does not get control over when an application \\r\\nstops. As described in Chapter 4, the most common way for an Android application to be \\r\\nM07_Meike_C07_p115-132.indd   11525/06/21   8:43 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=":{"__data__":"{\"id_\":\"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hBmguVG9aLq3ON2ebPBu/cMneglJrVmLi4b1b6UhUXw=\",\"text\":\"\\r\\n116Chapter 7  Android Startup: Dalvik and Zygote \\r\\nterminated is that the operating system terminates it with a kill -9 when it needs memory \\r\\nfor other applications. Exactly as with a web server, the Android system creates a process for an \\r\\napplication only when its services are required and terminates the process when its resources \\r\\nare required for some other application. Zygote will be discussed in detail in the second half of \\r\\nthis chapter.\\r\\nAnother important service that Android provides is the interpreter. A single Android appli-\\r\\ncation can run on a wide variety of hardware platforms: Intel, multiple ARM architectures, \\r\\nand even (dramatically less common) MIPS. This feat is accomplished through the use of an \\r\\n intermediate language (IL).\\r\\nIntermediate languages, popularized by the Java language, are machine languages for virtual \\r\\ncomputers. The idea is that code written in a computer language such as Java, designed to be \\r\\nread and written by human beings, is compiled to the intermediate language. The intermediate \\r\\nlanguage is a machine language for a virtual computer: hardware that probably doesn’t actu-\\r\\nally exist. Running applications written in the intermediate language on a given real computer \\r\\nrequires an application—a compiled binary that uses the native instructions of the target \\r\\ncomputer—that interprets successive instructions in the virtual machine language, translates \\r\\neach into one or more native instructions, and executes those native instructions. This program \\r\\nis called the interpreter or virtual machine (VM).\\r\\nClearly, a virtual machine has a cost in efficiency. If it takes three native instructions to execute \\r\\na single instruction from the intermediate language, and if that intermediate language instruc-\\r\\ntion is not significantly more powerful than a single native instruction, then it will take three \\r\\ntimes as long to run a program that is compiled to the intermediate language (and then run in \\r\\nthe virtual machine) as it would to run exactly the same program compiled to native instruc-\\r\\ntions and run directly.\\r\\nThe benefit of a virtual machine, however, is portability. Instead of having multiple binary \\r\\nversions of an application—one for each target computer architecture—there is a single inter-\\r\\nmediate language “binary.” It is only the virtual machine that interprets the intermediate \\r\\nlanguage that must be built separately for each architecture. An intermediate language binary \\r\\ncan be run on any architecture that has an implementation of the virtual machine.\\r\\nPortability is essential to the Android model and, therefore, most Android code is compiled to \\r\\nan intermediate language, DEX, the IL used by the original Android virtual machine, Dalvik.\\r\\nDalvik\\r\\nDalvik, the DVM (Dalvik Virtual Machine), was the original virtual machine for Android. ART, \\r\\nthe Android Runtime, succeeded it in Lollipop, API 21. Although Dalvik is gone, a brief discus-\\r\\nsion of its design will introduce its successor.\\r\\nThough it may seem obvious, the most important thing to note about Dalvik is that it has \\r\\nalmost nothing at all to do with Java. It is not a JVM. It isn’t designed like a JVM, and it doesn’t \\r\\n9780134096346_print.indb   11625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=":{"__data__":"{\"id_\":\"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"7y781OH20l5LMcdIf7zXo9E8jO+bSJCApn64ZZieeos=\",\"text\":\"\\r\\n117Dalvik\\r\\nact like a JVM. It cannot execute Java bytecode, and the constraints that drove its architecture \\r\\nare very different from those that drove the design of the JVM.\\r\\nEfficiency means a very different thing on a mobile device; especially the small, underpowered \\r\\n(both in CPU and battery) devices that were the targets for the original Android OS. On a rack-\\r\\nmounted machine, efficiency means 100 percent usage: memory full and CPU running at full \\r\\nspeed. If the machine has spare cycles, using those cycles to pre-compute values that might be \\r\\nuseful in the future makes sense. Even if those values have only a 30 percent chance of being used, \\r\\ncomputing them in advance will make the machine appear, on average, to run 30 percent faster.\\r\\nFor a mobile device, the situation is dramatically different. By far the most valuable resource \\r\\non a mobile device is the battery. Parsimony with power was an essential goal in the design of \\r\\nDalvik.\\r\\nNote\\r\\nI, Blake, experimented with Java and Linux on early smartphones. Even after making all the \\r\\nobvious optimizations, the batteries on the fairly typical devices with which I experimented \\r\\nlasted between 20 and 40 minutes under normal usage.\\r\\nAnother of the central goals in the design of Java’s virtual machine was portability. It is a stack-\\r\\nbased machine: Most op-codes operate on operands that have been pushed onto a system stack \\r\\nby previous operations. Although nearly all real hardware is register based, the JVM makes \\r\\nabsolutely no assumptions about the host’s architecture.\\r\\nOne artifact of Java’s focus on portability is the API through which it interacts with the host \\r\\noperating system. All Java developers are familiar with the fairly elegant API (the various \\r\\njava.* packages) that their programs import and use and through which they interact with \\r\\nthe Java runtime environment. A second API, the one through which the Java runtime environ-\\r\\nment interacts with the host operating system, is an abstraction that is much less familiar but \\r\\nat least as elegant. It is a clever and extensible API that makes porting Java to a new OS straight-\\r\\nforward, if not quite trivial.\\r\\nPortability was not even in the running as a goal for Dalvik. Although Dalvik has been ported to \\r\\na few hardware architectures, most of those architectures are versions of ARM. In addition, Dalvik \\r\\nruns on only one operating system, Android/Linux. The abstractions that make it a relatively \\r\\nsimple task to port Java to a new OS would be completely pointless for Dalvik and do not exist.\\r\\nBecause a register-based virtual architecture more closely matches the architectures of their \\r\\ntarget hardware, compilers that target a register-based VM may be able to do a better job of \\r\\npreparing their output so that it can be pre-optimized for the target hardware. This makes power \\r\\nconsuming just-in-time (JIT) optimization—essential for a high-performance JVM—less impor-\\r\\ntant for the DVM. In fact, in the early versions of Android, Dalvik had no JIT optimizer at all.\\r\\nThis is the biggest difference between the Dalvik VM and the Java VM. To squeeze the last drop \\r\\nof performance out of the underpowered CPUs for which it was designed, Dalvik is register \\r\\nbased, not stack based.\\r\\nM07_Meike_C07_p115-132.indd   11725/06/21   8:45 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M=":{"__data__":"{\"id_\":\"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"qa02zsYp4FtMRkckPIXwbL0N/q8N5nt1cNzTGM6y57Y=\",\"text\":\"\\r\\n118Chapter 7  Android Startup: Dalvik and Zygote \\r\\nAlthough still a subject of debate, many academic studies (for example, [Davis, 2003]) seem to \\r\\nagree that a given program can be represented with fewer instructions in a register-based interme-\\r\\ndiate language than in a stack-based VM: The stack-based VM must move each operand onto its \\r\\nstack before it can use it. On the other hand, individual instructions in a register-based intermedi-\\r\\nate language are likely to be bigger (more bits) than their stack-based counterparts. In the register-\\r\\nbased IL, each instruction must allocate bits used to specify the locations of each of its operands. \\r\\nIn a stack-based language, however, the location of the operands is implicit: on the stack.\\r\\nAccording to the research, these two opposing influences on the size of the IL binary do not \\r\\nbalance out. The studies suggest that the representation of a program in a register-based IL, \\r\\nalthough it contains fewer instructions, is likely to be overall larger than the same program \\r\\nrepresented in a stack-based IL. To counteract this bloat, Dalvik has some clever tricks up its \\r\\nsleeve to reduce the size of its binaries.\\r\\nThe dex compiler translates Java .class files into .dex files. Unlike the Java compiler, \\r\\nhowever, which creates a separate .class file for each Java class, the dex compiler produces a \\r\\nsingle .dex file for an entire application. This provides the opportunity for its most important \\r\\nspace-saving trick. The dex compiler tries very hard never to say the same thing twice.\\r\\nDEX format is thoroughly documented on the Android Source website (https://source.android.\\r\\ncom/devices/tech/dalvik/dex-format). Generally, it is structured as shown in Figure 7.1.\\r\\nHeader\\r\\nString Constants\\r\\nType Constant\\r\\nPrototype Constants\\r\\nField Constants\\r\\nMethod Constants\\r\\nClass Definitions\\r\\nCode\\r\\nLink Data\\r\\nFigure 7.1 DEX File Structure\\r\\n9780134096346_print.indb   11825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=":{"__data__":"{\"id_\":\"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"OKIBHK5llL2Fvev98+4pCC4FFIQzHouYDYLrndNJeaU=\",\"text\":\"\\r\\n119Dalvik\\r\\nDex structure has two key differences from the structure of Java’s package for an application’s \\r\\nbytecode, the Java Archive or .jar file. \\r\\nThe most significant difference is that, in a .jar file, the structure shown in Figure 7.1 is \\r\\nrepeated for each class in the source code. Because the jar contains multiple files, there are \\r\\nseveral string constant pools, several code definition blocks, several method signature defi-\\r\\nnition pools, and so on. The .dex file contains the entire program. There is only one of \\r\\neach of the blocks. \\r\\nThe global structure of the .dex file provides the first opportunity for optimization. In this \\r\\nformat, every object is represented in the file exactly once. A reference to an object is simply its \\r\\noffset into the block in which the object is defined.\\r\\nFor instance, if two different classes each contain a method whose signature is View \\r\\nfindViewById(int) (different classes may contain methods with exactly the same name), \\r\\nthose two method definitions will be represented in the respective class definitions by offsets \\r\\ninto the methods constants section for the definitions of the method. Those two definitions, \\r\\nthough they point to different code, will contain references to exactly the same constants in \\r\\nthe strings constants section that define the method name and to exactly the same constants in \\r\\nthe types constants section, where the method signature is defined. This extensive use of refer-\\r\\nences dramatically reduces the size of the .dex file.\\r\\nAs a further example, consider the definitions for two dissimilar methods:\\r\\nvoid setWallpaper(android.graphics.Bitmap arg)\\r\\nand\\r\\nvoid setWallpaper(java.io.InputStream arg)\\r\\nIn a .dex file, these two definitions are nearly identical and take exactly the same amount of \\r\\nspace. The only difference is that the reference to the type of the parameter in one (a reference \\r\\nto the type java.io.InputStream) is different than the reference to the type of the param-\\r\\neter in the other (a reference to the type android.graphics.Bitmap). There are two function \\r\\nprototype definitions, but each uses all but one element from the other: a considerable savings \\r\\nin space.\\r\\nDalvik, for all its good points, leaves significant room for improvement. The most important \\r\\nproblem is that, because it is a virtual machine, it does the work of translating each intermedi-\\r\\nate language instruction every time an application is run. Similarly, a just-in-time optimizer, \\r\\nthe state of the art for virtual machines, is a wasteful choice when power use is a crucial \\r\\nconsideration.\\r\\nThe Dalvik JIT does store optimizer information across runs of a given application. Although \\r\\neffective, storing state information for just-in-time optimization is a bit of a kludge. There is \\r\\nnothing “just in time” about the stored information. If stored optimization is the goal, why not \\r\\njust build a system from the start that is organized around optimizing only once?\\r\\nThe Android engineers agree! That system is ART.\\r\\nM07_Meike_C07_p115-132.indd   11925/06/21   8:51 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=":{"__data__":"{\"id_\":\"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Qt6r5QdPHIvAfWT43T+d1LKjM2J9gALUMcJhiCEDOgk=\",\"text\":\"\\r\\n120Chapter 7  Android Startup: Dalvik and Zygote \\r\\nART\\r\\nART, the Android Runtime, was introduced as an experimental runtime environment in \\r\\nAndroid KitKat, 4.4, API 19. It replaced Dalvik in Android Lollipop, 5.0, API 21.\\r\\nThe ART system uses the same intermediate language that Dalvik used: DEX. Most programs \\r\\nthat were compiled before ART existed and that ran on Dalvik will run in the ART environment \\r\\nwith no change. ART’s strategy for optimizing and executing a program, however, is signifi-\\r\\ncantly different. Google coined the term ahead-of-time (AOT) optimization to distinguish it \\r\\nfrom Dalvik’s JIT strategy.\\r\\n“Ahead of time” means that an application, compiled to the DEX intermediate language, is \\r\\ntranslated to native code, only once, using a tool named dex2oat, at some point after its instal-\\r\\nlation on a device. This strategy preserves the essential goal of an intermediate language: porta-\\r\\nbility. Each Android device has installed as part of the operating system a version of dex2oat \\r\\nthat, analogous to a virtual machine, targets its specific hardware platform. When a new appli-\\r\\ncation is installed, dex2oat translates the application intermediate language to a native binary. \\r\\nWhen the application is run, it is executing code that is native to its platform. No further trans-\\r\\nlation is necessary, and no waste occurs due to repeated translations of the same instructions.\\r\\nActually, ART’s strategy has evolved over time.  \\r\\nNote\\r\\nTo determine whether a system is using Dalvik or ART, find the value of the system property \\r\\npersist.sys.dalvik.vm.lib.1:\\r\\n> getprop persist.sys.dalvik.vm.lib.1\\r\\nOn a system running Dalvik, the property will have the value libdvm.so. If it is using ART, the \\r\\nvalue will be libart.so.\\r\\nART Basics\\r\\nThe ART system does far more than simply compile code and run it in a garbage-collected \\r\\nenvironment. A closer description might be that it compiles, links, and even starts running the \\r\\napplication, and then stores the running image. \\r\\nThe most common invocation of the compiler occurs when a new application is installed on \\r\\nthe system. As part of the application installation process, the Android system runs dex2oat, \\r\\nover the DEX code, newly downloaded and installed in the applications directory /data/\\r\\napp/<application package name>. The verified, optimized native code is stored in the  \\r\\ndirectory /data/dalvik-cache as data@<application package name>-<n>.apk@classes.\\r\\ndex. Despite the .dex suffix, the file is an OAT file.\\r\\nThe format of the OAT file is complex and not well documented. Although at the time of \\r\\nthis writing it appears that the format is still in flux, some things are stable. The file is an ELF \\r\\nfile, a standard format for Unix binaries. It contains both the compiled native code and also \\r\\nM07_Meike_C07_p115-132.indd   12025/06/21   10:46 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM=":{"__data__":"{\"id_\":\"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"wHMFTj48o4EtP2yObAdIXDENPXE/rU1AznA4aZ3/KJM=\",\"text\":\"\\r\\n121ART\\r\\nthe entire pre-compilation DEX format “source.” Figure 7.2 is a rough outline of the OAT file \\r\\nformat. (The format is described in the file $AOSP/art/dex2oat/linker/oat_writer.h).\\r\\nELF Header\\r\\nDex File Header\\r\\nDex File Header\\r\\nDex File\\r\\nDex File\\r\\nOAT Class\\r\\nOAT Class\\r\\nCode\\r\\nFigure 7.2 OAT File Structure\\r\\nThe point of embedding the complete, uncompiled DEX code in the OAT file is that doing \\r\\nso allows incremental compilation. Bits in the file header indicate which methods have been \\r\\ncompiled and which have not.\\r\\nThe ART runtime is not only compiled to native code but, in the normal uses of the term, it is \\r\\nlinked. The dex2oat compiler refers, during the process of compiling a .dex file, to the output \\r\\nof the previously compiled Android system libraries and compiles references to symbols defined \\r\\nin those libraries to their absolute locations. In other words, the compiled OAT file must be \\r\\nloaded into memory at exactly the location for which it was compiled and depends on having \\r\\nan image of the compiled libraries at exactly the locations at which they were found during the \\r\\ncompilation process.\\r\\nThe process of loading independently compiled binaries into memory and resolving the refer-\\r\\nences from one to the other is normally called linking. Linking can be an expensive process. \\r\\nEven the earliest versions of Android pre-linked many portions of the system libraries as an \\r\\noptimization: doing it once to save the cost of doing it each time it was necessary.\\r\\n9780134096346_print.indb   12125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=":{"__data__":"{\"id_\":\"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"6HD6VZatQbRZfsos41G9i5ECUzM84DMqgsvpx0xbRQ8=\",\"text\":\"\\r\\n122Chapter 7  Android Startup: Dalvik and Zygote \\r\\nOf course, the consequence of pre-linking binary libraries is that those libraries cannot, once \\r\\nlinked, be versioned independently. For instance, after a symbolic reference to the code that \\r\\nactivates the haptic feedback device is linked as a reference to a specific location in memory, \\r\\nupdating the haptic feedback library and changing its location would be disastrous.\\r\\nOn current mobile devices, however, this is not a significant issue. System libraries are never \\r\\nupdated individually. Updates to the system software always involve updating the entire system \\r\\nas a unit, and all affected components are updated together.\\r\\nIn the Android system, building the pre-compiled, pre-linked image of the ART runtime is \\r\\npart of building the system image. The directory /system/framework contains the .jar files \\r\\nproduced by compiling the Android libraries. In the Dalvik era, these .jar files were loaded \\r\\ninto an application image and the code within them executed by the DVM.\\r\\nFor ART, those libraries are recompiled with dex2oat into a new subdirectory named for the \\r\\ndevice architecture (for example, arm). The two most significant files in this directory are  \\r\\nboot.art and boot.oat. These two files—the first an image of initialized classes and objects, \\r\\nthe second the ELF file containing the code and linking information—are loaded into memory: \\r\\n.art first, and immediately below it, .oat. Together, they comprise the pre-linked, pre-initial-\\r\\nized system library image. These two files are soft-linked into /data/dalvik-cache along with \\r\\nthe .art and .oat files for installed applications.\\r\\nAnd this brings us at last to the second, less common use of dex2oat. A system update will \\r\\nalmost certainly mean a new boot.art and boot.oat. These new files cannot be used with \\r\\nthe pre-linked .oat files that dex2oat created previously when it compiled new applications as \\r\\nthey were installed. A system update requires the recompilation of every single application on \\r\\nthe device.\\r\\nThis recompilation is the source of the often seemingly interminable “Android Is Optimizing \\r\\nApplications” dialog that followed system updates on KitKat devices. It was not a great experi-\\r\\nence; more recent versions of ART do better.\\r\\nHybrid ART\\r\\nRecent versions of ART are smarter and lazier. Why take the time and energy to compile code \\r\\nthat might never be used? In what might at first seem like a step backwards, the new hybrid \\r\\nART contains a Dalvik-like interpreter complete with a JIT.\\r\\nMost applications are executed at first in the interpreted environment. Although interpreted, \\r\\nthis environment is not Dalvik. The interpreted ART environment, for instance, uses the same \\r\\nhighly tuned garbage collection system that was introduced with ART in KitKat.\\r\\nThe interpreter collects profile information on the code it executes. It stores the data it collects, \\r\\nper application, in files in the directory /data/dalvik-cache/profiles/. A new system \\r\\ndaemon, the BackgroundDexOptService, parses these files occasionally and uses dex2oat.to \\r\\ncompile the “hot” methods—methods that are 90 percent of the calls in the application. It also \\r\\nrecompiles a program if the list of methods that comprise 90 percent of the calls changes by \\r\\nmore than 10 percent.\\r\\n9780134096346_print.indb   12225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=":{"__data__":"{\"id_\":\"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"i1UqA/dsRByL3S0OlYiyppspUnWWDF/pZMztakqfaFk=\",\"text\":\"\\r\\n123Zygote\\r\\nThe most immediate effect of this new, hybrid ART is that a system update no longer requires \\r\\nrecompilations of every application known to the system and the attending several-minute \\r\\nwait. In addition, though, hybrid ART saves the substantial cost of running dex2oat on appli-\\r\\ncations or parts of applications that are never used.\\r\\nZygote\\r\\nBefore any code that has been compiled to the DEX intermediate language (and that includes about \\r\\nhalf of the Android framework) can run, the system must initialize the runtime: Dalvik or ART. \\r\\nThe simplest way to run Java code is to run the java program, the virtual machine, and tell it \\r\\nwhich code to execute:\\r\\njava –cp MyApplication.jar net.callmeike.MyApplication\\r\\nThe java program initializes a VM and uses it to execute the intermediate language instruc-\\r\\ntions for the class net.callmeike.MyApplication in the file MyApplication.jar.\\r\\nSimilarly, the Android system, as part of startup, must create virtual machines and the runtime \\r\\nenvironment for all the system services that are compiled to the DEX IL. It must also provide \\r\\na way to start and initialize new runtime environments for new applications as they start. The \\r\\nAndroid solution for this necessity is a clever program called Zygote.\\r\\nZygote Memory Management\\r\\nZygote is the solution to one of the oldest problems with Java desktop applications: startup \\r\\ntime. Starting a Java desktop application requires each of the following steps:\\r\\n ■The OS resources. The system must find resources for a new, large program. On any machine that has been running for a while, finding those resources might well require \\r\\nswapping some other running program to disk.\\r\\n ■Start the JVM. The JVM, normally a program called java, is a moderately large and complex C++ program. Although it starts fairly quickly, getting it fully initialized does take time.\\r\\n ■Load basic Java libraries. Java loads its libraries lazily from a very large file called rt.jar. Finding and loading the classes required for minimal functionality, though heavily \\r\\noptimized, does take time.\\r\\n ■Initialize the basic libraries. Java classes quite frequently require some initialization (assignments to static variables or static initializer blocks). As each class is loaded, its \\r\\ninitialization code must be executed. At this point, on a typical laptop computer, even \\r\\nfor a completely trivial application, it may now be several tenths of a second since the \\r\\nuser started the application.\\r\\n ■Load the application. This is the first step toward executing the application that the user actually requested. Application classes are, most likely, in another .jar file from which \\r\\nthey are, again, loaded lazily. To start executing the program, however, the VM must \\r\\n9780134096346_print.indb   12325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=":{"__data__":"{\"id_\":\"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"9vPfyOLmNF2kNJDLGnST0wi2Of/hJTJgqk/9BJpZlNg=\",\"text\":\"\\r\\n124Chapter 7  Android Startup: Dalvik and Zygote \\r\\nload the closure of references from the main class: all the things to which it refers; all \\r\\nthe things to which any of the referents refer; all the things to which they refer, and so \\r\\non, until no unresolved references exist. Note, first of all, that this recursive resolution of \\r\\nreferences may very well require loading many Java system libraries as well as application \\r\\ncode. Also note that it does not, by any means, imply the loading of all of them either.\\r\\n ■Initialize the newly loaded classes. Again, some or all of the newly loaded classes may require initialization. Any initialization code in any of the newly loaded classes must be executed.\\r\\n ■At this point, it is entirely possible that the initialization process has used enough memory so that a minor garbage collection (GC) is necessary. Although minor GCs are \\r\\nfast, they do take time.\\r\\n ■After all necessary classes have been loaded and initialized, the VM can begin to execute the application’s main method. For a moderately complex application, it is entirely \\r\\npossible that it has been nearly a minute since the user-initiated startup.\\r\\nAlthough this delay is definitely annoying on a laptop computer, it would be devastating on a \\r\\nbattery powered mobile device. Wading through the preceding list of initialization procedures each \\r\\ntime a new application started would drain a battery in no time. Add to that the idea of waiting \\r\\nfor a full minute for a phone application to start up so that you could answer an incoming call. \\r\\nThe Android OS had to address this problem to be viable. The answer is the Zygote application.\\r\\nAs mentioned earlier, Zygote is to Android what init is to Linux: the parent of all applications. \\r\\ninit starts Zygote as part of bringing up the system. Zygote initializes itself by pre-loading the \\r\\nentire Android framework. Unlike desktop Java, it does not load the libraries lazily. It loads all \\r\\nof them as part of system startup. When completely initialized, it enters a tight loop, waiting \\r\\nfor connections to a socket.\\r\\nPhysical\\r\\nMemory\\r\\nMemory Page\\r\\nMemory Page\\r\\nMemory Page\\r\\nMemory Page\\r\\nPage\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nTable\\r\\ngy\\r\\nPTblEt\\r\\nP\\r\\nP\\r\\nP\\r\\nP\\r\\nP\\r\\nZygote\\r\\nFigure 7.3 Zygote\\r\\n9780134096346_print.indb   12425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg=":{"__data__":"{\"id_\":\"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"oehGxcNqm1wvLFm1uTafxdbKqlCMFoj8FmgVmGC2H3E=\",\"text\":\"\\r\\n125Zygote\\r\\nZygote makes use of an important feature of the Linux OS, copy-on-write paging, to eliminate \\r\\nnearly all the items in the Java initialization list. Figure 7.3 is a simplified illustration of how \\r\\nthe operating system lays out virtual memory for applications; in this case, Zygote. Memory is \\r\\norganized into uniformly sized pages. When the application refers to memory at a particular \\r\\naddress, the device hardware reinterprets the address as an index into a page table and an \\r\\noffset into the associated page to which the index points. It is entirely possible, as shown in \\r\\nFigure 7.3, that an address that points at the top of an application’s virtual memory space refers \\r\\nto a location that is actually near the bottom of physical memory.\\r\\nWhen the system needs to create a new application, it connects to the Zygote socket and \\r\\nsends a small packet describing the application to be started. Zygote clones itself, creating a \\r\\nnew kernel-level process. Figure 7.4 illustrates the memory layout of a new application cloned \\r\\nfrom Zygote. The new application has its own page table. Most of the new page table is simply \\r\\na copy of Zygote’s page table. It points to the exact same pages of physical memory. Only the \\r\\npages the new application uses for its own purposes are not shared.\\r\\nThe new process is interesting in that it shares memory with Zygote, its parent, in a mode \\r\\ncalled copy-on-write. Because the two processes are using exactly the same memory, starting the \\r\\nchild process is nearly instantaneous. The kernel does not need to allocate much memory for \\r\\nthe new process, nor does it need to load the Android framework libraries. Zygote has already \\r\\nloaded everything.\\r\\nPhysical\\r\\nMemory\\r\\nPage\\r\\nTable\\r\\nPage\\r\\nTableZygote\\r\\nNew\\r\\nApp\\r\\nFigure 7.4 Zygote Clone\\r\\n9780134096346_print.indb   12525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk=":{"__data__":"{\"id_\":\"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"0NlMTuoQtqwCSr6c1YWxg0DWDo4G0LyHkjpC+48EoUU=\",\"text\":\"\\r\\n126Chapter 7  Android Startup: Dalvik and Zygote \\r\\nBecause both processes have mapped exactly the same physical memory into their virtual \\r\\naddress spaces, if either changed the contents of the memory by writing to it, the other would \\r\\nbe affected. That would be very bad.\\r\\nTo avoid the problem, the system copies pages on write. The hardware notifies the kernel when \\r\\neither process attempts to write to a shared page. Instead of allowing the write, the kernel allo-\\r\\ncates a new page of memory and copies the contents of the original page—the page to which \\r\\na process is writing—into it. After the two processes have separate copies of the page, each can \\r\\nfreely modify its own copy. Figure 7.5 represents the state of memory after a new application \\r\\nspawned from Zygote attempts to write to a shared page.\\r\\nCopy on write is a tremendous savings. In addition to the fast startup, there is only one \\r\\ncopy for all processes of any pages that are unaltered by any process (all the library code, for \\r\\ninstance). Even if some child process were to write on every single memory page (something \\r\\nthat quite literally never happens), the cost of allocating the new memory is amortized over the \\r\\nlife of the process. It is not incurred at initialization.\\r\\nPhysical\\r\\nMemory\\r\\nPage\\r\\nTable\\r\\nPage\\r\\nTable\\r\\ncopywrite!\\r\\nZygoteNewApp\\r\\nFigure 7.5 Zygote Copy on Write\\r\\n9780134096346_print.indb   12625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk=":{"__data__":"{\"id_\":\"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"LxVk1pcscPRwRCB6UjbR7oJcK4RrMDkZFePmFpEyR0E=\",\"text\":\"\\r\\n127Zygote\\r\\nZygote Startup\\r\\nAs mentioned, Zygote is started by init. Recent Androids typically start multiple copies of \\r\\nZygote. Depending on the chipset architecture or OEM preference, platform developers use \\r\\nthe system variable, ro.zygote, set at platform at build time, to control which of four types \\r\\nof Zygotes are started and which one is “primary.” Most modern Android devices start two \\r\\nzygotes—one for 32-bit applications and one for 64-bit apps—and default to 64-bit version.\\r\\nNote\\r\\nAt the time of this writing, Zygote startup is still accurately described at https://elinux.org/\\r\\nAndroid_Zygote_Startup.\\r\\nThe base init script, init.rc, described in Chapter 6, includes the script that starts Zygote:\\r\\nimport /init.${ro.zygote}.rc\\r\\nThe sources for the startup scripts are found in the directory: \\r\\n$AOSP/system/core/rootdir\\r\\nListing 7.1 shows init.zygote32_64.rc for an older system, on which 32-bit apps were the \\r\\ndefault. It provides an opportunity to revisit the init scripting language. Note that the service \\r\\nlines have been wrapped to fit the page. They cannot be wrapped this way in the actual script.\\r\\nListing 7.1 Zygote init for 32-bit Default Applications\\r\\nservice zygote /system/bin/app_process32 \\\\\\r\\n        -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote\\r\\n    class main\\r\\n    priority -20\\r\\n    user root\\r\\n    group root readproc\\r\\n    socket zygote stream 660 root system\\r\\n    onrestart write /sys/android_power/request_state wake\\r\\n    onrestart write /sys/power/state on\\r\\n    onrestart restart audioserver\\r\\n    onrestart restart cameraserver\\r\\n    onrestart restart media\\r\\n    onrestart restart netd\\r\\n    onrestart restart wificond\\r\\n    writepid /dev/cpuset/foreground/tasks\\r\\nservice zygote_secondary /system/bin/app_process64 \\\\\\r\\n        -Xzygote /system/bin --zygote --socket-name=zygote_secondary\\r\\n    class main\\r\\n    priority -20\\r\\n    user root\\r\\n    group root readproc\\r\\n9780134096346_print.indb   12725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=":{"__data__":"{\"id_\":\"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"OwfXp+n34Gn1ldADsgNUc34ZpK6m4GLXUF/lm7938vU=\",\"text\":\"\\r\\n128Chapter 7  Android Startup: Dalvik and Zygote \\r\\n    socket zygote_secondary stream 660 root system\\r\\n    onrestart restart zygote\\r\\n    writepid /dev/cpuset/foreground/tasks\\r\\nConsider the definition of the zygote_secondary service, the 64-bit zygote. The actual appli-\\r\\ncation that is started as user root at the very highest priority by init is /system/bin/app_\\r\\nprocess64. The script requests that init create a stream socket for the process and catalog it \\r\\nas /dev/socket/zygote_secondary: This is the socket that the system will use to start new \\r\\nAndroid applications. The script also contains an onrestart directive that will restart the \\r\\nprimary Zygote if the secondary zygote fails.\\r\\nThe definition of the primary Zygote service, zygote, is nearly identical. It uses a different \\r\\nsocket and has a much longer list of other servers that will be restarted if it fails. Note, of \\r\\ncourse, that if zygote_secondary fails, all of these servers will be restarted as well.\\r\\nRuntime Initialization\\r\\nZygote’s first order of business when it is started is to initialize the ART runtime environment. \\r\\nWhile reading this, keep in mind that it happens only once; that is, Zygote is started only once, \\r\\nduring system startup. Subsequent application startup simply clones the running Zygote. \\r\\nThe applications that init starts, app_process64 and app_process32, are just small applica-\\r\\ntions (source in $AOSP/frameworks/base/cmds/app_process) that parse their command line \\r\\nand then run either Zygote or the class whose name has been passed as an argument. These \\r\\nare the programs used to start all programs (not applications!) compiled to DEX: anything that \\r\\nrequires either Dalvik or ART. They serve a purpose very similar to that served by the “java” \\r\\ncommand, which starts the Java runtime.\\r\\nThe app_process creates an instance of AppRuntime, a subclass of AndroidRuntime. It does \\r\\na lot of bookkeeping, setting up any runtime parameters (runtime.addOption(...)), the name \\r\\nfor the process (runtime.setArgv0(...)), and the name of the class to run (used only when \\r\\nnot running Zygote: runtime.setClassNameAndArgs(...)), and then calls AndroidRuntime.\\r\\nstart() to invoke the runtime.\\r\\nThe start method (source in $AOSP/frameworks/base/core/jni/AndroidRuntime.cpp) \\r\\neventually invokes startVM. startVM again is mostly setup.\\r\\nStarting the runtime has gotten significantly more complex since the advent of ART. It is espe-\\r\\ncially difficult to read the code because nearly all the variables that contain “dalvik” in their \\r\\nnames actually apply to ART. Nonetheless, a review of the VM configuration options controlled \\r\\nby this code can prove extremely helpful to a developer. Among the more interesting are  \\r\\n–verbose:gc and the compiler option –generate-debug-info. The former logs information \\r\\nabout system garbage collection, and the latter causes dex2oat to add debugging information \\r\\nto the system image it builds after a system update.\\r\\nAfter processing the options, startVM invokes JNI_CreateJavaVM. Again, the name is confus-\\r\\ning: The runtime environment that is about to be initialized has almost nothing to do with \\r\\n9780134096346_print.indb   12825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=":{"__data__":"{\"id_\":\"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"a3vOBRNG1xLmGgvzdYVAP8my2a7Yovyj5ojb9BVxxAs=\",\"text\":\"\\r\\n129Zygote\\r\\nJava. To be compatible with code written for Java, though—and that includes the Java JNI \\r\\nAPI, discussed in the next chapter—this method inherits its name from its JNI counterpart. It \\r\\nis, though, almost certainly not the case that an application that uses the JNI API to start an \\r\\ninstance of the Java VM on, say, a desktop Linux system, could successfully initialize the ART \\r\\nruntime on Android without further modification. \\r\\nThe JNI_CreateJavaVM method is defined in art/runtime/jni/java_vm_ext.cc. It, in turn, \\r\\ncalls Runtime::Create, defined in art/runtime/runtime.cc. Finally, Runtime::Create \\r\\ninitializes the ART runtime, loading the system OAT files and the libraries they contain.\\r\\nThe Android VM is now ready to roll. The argument that app_process passed in its calls to \\r\\nstart was \\\"com.android.internal.os.Zygote.Init\\\". Its source is in $AOSP/frameworks/\\r\\nbase/core/java/com/android/internal/os/ZygoteInit.java.\\r\\nSystem Service Startup\\r\\nMost of the code in ZygoteInit’s main method (the method the runtime calls, once initial-\\r\\nized) is wrapped in a Java try/catch block. The obvious reason is to allow Zygote to attempt \\r\\nto clean up after a failure. There is a second, very clever purpose to which we will return in a \\r\\nmoment.\\r\\nZygote has three major tasks, on startup:\\r\\n ■Register the socket to which the system will connect to start new applications\\r\\n ■Preload Android resources and libraries, if necessary\\r\\n ■Start the Android System Server\\r\\nAfter it has completed these three tasks, it enters a loop, waiting for connections to the socket.\\r\\nThe first of the tasks, opening the socket, is handled in the registerServerSocket method. \\r\\nThe method creates the socket using the name passed in the parameters, probably from the \\r\\ninit script originally.\\r\\nThe second task is accomplished with a call to the preload method. Historically, Zygote was \\r\\ninitialized aggressively. Modern Androids, however, support a minimal system that postpones \\r\\nthe cost of preloading the framework until the first application is spawned.\\r\\nThe preload method loads everything it can think of: classes, libraries, resources, and even a \\r\\nvery special case, the WebView (a web browser view that can be embedded in an Android appli-\\r\\ncation). Note that, when using the ART runtime, many of the preloads are already in memory \\r\\nbecause they are in the system OAT file.\\r\\nAt the completion of the preload method, Zygote is fully initialized and ready to clone new \\r\\napplications very quickly, sharing most of its virtual memory with them.\\r\\nThe last of the tasks, starting the System Server, is accomplished in the startSystemServer \\r\\nmethod. The SystemServer is the first application cloned from Zygote. Following the process \\r\\nis instructive.\\r\\n9780134096346_print.indb   12925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=":{"__data__":"{\"id_\":\"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Js07EKe95RqNQQ6oRorD/KM6A01BO+e7ey43JHbSSvE=\",\"text\":\"\\r\\n130Chapter 7  Android Startup: Dalvik and Zygote \\r\\nThe startSystemServer method fakes a connection to the Zygote socket (for subsequent \\r\\napplication startup, the connection will be real). It creates a new ZygoteConnection object \\r\\nwith the hard-coded content that it would have received over the canonical socket connection \\r\\nwere the system trying to start the server. It passes the contents of the connection object to \\r\\nZygote.forkSystemServer which, in turn, wraps a native method, com_android_internal_\\r\\nos_nativeForkSystemServer (source in $AOSP/frameworks/base/core/jni/com_android_\\r\\ninternal_os_Zygote.cpp). The native method first calls ForkAndSpecializeCommon, which \\r\\ndoes the actual fork system call. There are now two execution paths, one for Zygote, in which \\r\\nthe fork system call returned the process id (pid) of the new child process, and one for the \\r\\nnewly spawned child process, in which fork returned a pid of 0.\\r\\nIn the parent process (pid > 0) control returns, eventually to ZygoteInit and immediately \\r\\nenters the ZygoteServer method runSelectLoop. This is the endless loop that processes \\r\\nincoming connections with almost the same code that just started the System Server. The \\r\\ncall to ZygoteConnection.runOnce eventually calls forkAndSpecialize, the analog of \\r\\n forkSystemServer for the masses.\\r\\nPerhaps of more interest is what happens to the child process (pid == 0), the process that will \\r\\nbecome the System Server. First, the method SpecializeCommon is called with a flag indicat-\\r\\ning that this process will become the System Server. SpecializeCommon in turn calls a series of \\r\\nadditional setup methods that set the correct SE Linux context and process capabilities.\\r\\nAfter the child process has been set up with the correct process options, it calls Zygote. \\r\\ncallPostForkSystemServerHooks and Zygote.callPostForkChildHooks to load the \\r\\nspecialized System Server class libraries and to start its application code. Both of these calls \\r\\ntrigger calls to the ART runtime native code located in art/runtime/native/dalvik_system_\\r\\nZygoteHooks.cc.\\r\\nNext, the child process calls the handleSystemServerProcess method, which, in turn, calls \\r\\nZygoteInit.zygoteInit, RuntimeInit.applicationInit (source $AOSP/ frameworks/\\r\\nbase/core/java/com/android/internal/os.RuntimeInit.java), and, finally, \\r\\n invokeStaticMain, which is where the magic happens. \\r\\nThe invokeStaticMain method finds the class whose name was given in the data transferred \\r\\nto Zygote through the socket (or, in the case of the System Server, faked in hard-coded data), \\r\\nand then obtains a reference to the public static void main method on that class. The \\r\\nvery last thing it does is to create a new exception holding the method reference and throw it.\\r\\nThis clever trick is the second reason for wrapping the top-level ZygoteInit code in a try/\\r\\ncatch block. This throw, from within invokeStaticMain, clears the entire Java stack back to \\r\\nits very top. At this point, the new instance of Zygote has closed all unneeded file descriptors; \\r\\nset its permissions, group, and user IDs correctly; has the entire Android framework loaded \\r\\nand warmed up; and now has an empty stack. The exception’s run method, called in the catch \\r\\nblock, runs the new application’s main method in this fully initialized environment with an \\r\\nempty stack.\\r\\n9780134096346_print.indb   13025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU=":{"__data__":"{\"id_\":\"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"PEfRKfkeZgJSBsrD+cC+Bk9mK5gQeYR0H1dJ+TrqF8E=\",\"text\":\"\\r\\n131Citations\\r\\nWhen Zygote starts the System Server, it is the class com.android.server.SystemServer \\r\\n(source in $AOSP/frameworks/base/services/java/com/android/server/SystemServer.\\r\\njava) whose main method is run. It is here that all the familiar Android services are started:  \\r\\nthe PackageManagerService, the ActivityManagerService, the PowerManagerService, \\r\\nand so on.\\r\\nSummary\\r\\nThis chapter traces the initialization of the main component of the Android system—its \\r\\nruntime, ART, and its root program, Zygote—from its initialization from Linux init through \\r\\nthe start of the System Server and the initialization of the standard Android managers.\\r\\nCitations\\r\\nDavis, B., A. Beatty, K. Casey, D. Gregg, and J. Waldron. “The case for virtual register \\r\\nmachines.” In Interpreters, Virtual Machines and Emulators (IVME ’03), pages 41–49, 2003.\\r\\n9780134096346_print.indb   13125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM=":{"__data__":"{\"id_\":\"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"rpZcLjxxG5vod0h2O2uOHYIh35CJ5xqEkDAFyi3M9AI=\",\"text\":\"\\r\\n8\\r\\nGetting to Android: The HAL\\r\\nThe Android’s Hardware Abstraction Layer (HAL) is just an interface. It is a layer of abstraction \\r\\nthat separates components by disconnecting the definition of the component’s behavior from \\r\\nits implementation.\\r\\nAs is always the case, introducing an abstraction layer comes with a cost. So why use the HAL? \\r\\nThere are several reasons.\\r\\nWhy a HAL?\\r\\nThe HAL is Android’s interface to hardware. On most Linux systems, the interface to the hard-\\r\\nware is a device driver. Device drivers, however, are usually device specific and sometimes \\r\\nproprietary.\\r\\nConsider: The Android system will be installed on diverse hardware with, for instance, a wide \\r\\nvariety of Wi-Fi chips. Although each Wi-Fi chip has its own kernel driver, at some point, they \\r\\nall provide a Wi-Fi service used by Android code. It would be very convenient if above some \\r\\npoint in the stack, the Android code for all the different Wi-Fi hardware/driver combinations \\r\\nwere the same.\\r\\nThe HAL is the lingua franca for a class of devices. A single set of C header files describes the \\r\\nfunctionality that a HAL provides to the Android system. HAL code for a particular device is \\r\\nthe implementation of the API defined by those header files. The HAL code shims the hard-\\r\\nware device driver behavior so that it looks to Android like a generic device of some particular \\r\\ntype: Wi-Fi, Bluetooth, and so on. Adapting Android to use, for instance, an entirely new Wi-Fi \\r\\ndevice consists of writing the native code that implements the Android Wi-Fi HAL (as defined \\r\\nby the .h files) for the new device. The HAL layer means that no code above the HAL—most of \\r\\nit written in Java—needs to be changed to port Android to use the new device.\\r\\nAnother reason for the HAL is that one of the original goals for Android (a goal that it has \\r\\nclearly achieved) was to make putting it on a new device as frictionless as possible from both \\r\\nengineering and legal points of view. From the legal point of view, that meant navigating a thin \\r\\nline between the GPL (GNU Public License) and proprietary code.\\r\\n9780134096346_print.indb   13325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=":{"__data__":"{\"id_\":\"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"PLrHIfTm903jJEqJqzezaP81X//QygtJV+2N7BgTyTU=\",\"text\":\"\\r\\n134Chapter 8  Getting to Android: The HAL\\r\\nThe Android system is based on the Linux kernel, which is licensed under the notoriously viral \\r\\nGPL. The Android platform, on the other hand, is intended to support hardware manufacturers \\r\\nwith devices that are strictly proprietary, right down to their APIs. The HAL provides an elegant \\r\\nway of keeping proprietary code away from the GPL.\\r\\nHardware developers who are concerned about getting their proprietary code anywhere near \\r\\nan open source, or, worse yet, GPLed codebase, can keep all of their proprietary code in the \\r\\nHAL. To do this, they first create a trivial device driver. It can be open source or even GPLed \\r\\nif there is any reason to do so. The driver does essentially nothing: It simply passes data to \\r\\nand from the hardware. The developer next creates a HAL. The HAL code runs in user space \\r\\n(as a library linked into the application) and may be completely proprietary. It does not run \\r\\nas part of the kernel and is not a device driver under the normal definition of that term. It is, \\r\\nhowever, the actual driver for the device. Because it is linked into the application as a library, \\r\\nthere is no requirement of any kind that this code be public. It need never be available except \\r\\nin a binary form.\\r\\nA third application for the HAL has arisen more recently. An additional problem that Google \\r\\nencountered as Android came of age was that it could not get vendors to update devices with \\r\\nthe latest versions of Android.\\r\\nIn early Android, hardware vendors built the system images that they deployed to their devices. \\r\\nThey got the base system source from Google, modified it as necessary, adding their proprietary \\r\\nsoftware and extensions, built an image, and deployed it to their devices. When a new version \\r\\nof Android came along, they did it again—sometimes. From a vendor’s point of view, a new \\r\\nversion of Android is something to be sold: a reason for end users to buy a new device. It is not \\r\\nat all surprising that they tended to drag their feet releasing updates.\\r\\nGoogle, on the other hand, is constantly increasing the number of pies into which it has a \\r\\nfinger. It does not want to have to wait for a recalcitrant vendor or an entirely new genera-\\r\\ntion of hardware to reap the benefits of some new feature. Google needed a way to completely \\r\\nremove the device update mechanism from the clutches of the vendors.\\r\\nTo do this, Google created Project Treble. Treble specifies and requires that HAL modules use \\r\\nBinder, Android’s interprocess communication (IPC) system, to communicate with the Android \\r\\nstack. HAL modules are no longer binary libraries that are linked into the Android runtime. \\r\\nInstead, they are separate binaries that are stored on completely separate hardware volumes \\r\\nfrom the ones that hold the Android core and user applications. The new HALs are not called \\r\\ndirectly from Android but are, instead, invoked using highly optimized IPC calls.\\r\\nSince Project Treble went live, an over-the-air (OTA) update can completely rewrite the file \\r\\nsystem containing the Android OS without disturbing the vendor’s HAL. There is no longer any \\r\\nneed for Google to wait for a vendor to build a new, hardware-specific version of its Android \\r\\nsystem. Google can update the Android OS on any device at pretty much any time, according \\r\\nto its own schedule. As long as they don’t violate the HAL IPC contract, the HAL that worked \\r\\nwith the old version of the OS will work with the new version.\\r\\n9780134096346_print.indb   13425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=":{"__data__":"{\"id_\":\"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"yDW0MtJxiDjSQx1P3psab7LzQ2McHdO7VKVeR17hsGY=\",\"text\":\"\\r\\n135Is a HAL Necessary?\\r\\nIs a HAL Necessary?\\r\\nA HAL is necessary only for products that need the Android label or want automatic updates. \\r\\nDevelopers creating a custom Android for an OEM device may not need a complicated HAL. As \\r\\ndescribed in the preceding section, the HAL has exactly three purposes:\\r\\n ■It is the native code layer that shims Android onto specific hardware. At the very least, this means bridging code written in Java to native code, usually written in C or C++.\\r\\n ■It is an abstraction for the functionality provided by a class of devices, for example, Bluetooth, Wi-Fi, graphics, and so on. It makes it possible for Android to abstract away \\r\\nthe differences between, for example, Broadcom and Qualcomm Wi-Fi chipsets.\\r\\n ■It is an abstraction that permits OTA updates that do not require linking a new version of Android to vendor-specific binaries.\\r\\nAlthough the first of these purposes is obviously necessary, the second two may not be. A devel-\\r\\noper building a custom Android targeting a specific hardware device might just dive right in \\r\\nand modify core Android code, as necessary, to adapt it to the device. One might even make the \\r\\nargument that the Java code is easier to modify than the native code in the HAL. So why not?\\r\\nActually, there are some fairly strong arguments for keeping platform customizations in the \\r\\nHAL. One good reason, of course, is updates. Even if your business plan does not depend on \\r\\nupdates, not having some kind of firmware update plan for an embedded device would be \\r\\nirresponsible.\\r\\nNo matter what version of Android you choose, either security issues are already known or \\r\\nsecurity issues will be known. One need only look back to the massive DDOS attack on Dyn, \\r\\nInc. in 2016. The attack was launched predominantly from IoT devices, many of which were \\r\\nmanufactured by a single company, XiongMai Technologies. It is a cautionary tale that should \\r\\nconvince anyone that releasing a programmable device with software that cannot be updated is \\r\\ncareless and dangerous. No one wants to be the trampoline for the next cyberattack and, even \\r\\nworse, be unable to fix a security breach when it occurs.\\r\\nOne of the easiest ways to patch bugs, of course, is to take updates from the official AOSP code-\\r\\nbase. If a customized fork of AOSP code has been modified to adapt it to a specific device, the \\r\\nfork of AOSP will be much more difficult to merge with the official sources.\\r\\nAllowing your device to be updated automatically by Google might even be worth considering. \\r\\nDoing so might take the entire issue of security and liability off your plate. To do that, though, \\r\\nyour custom Android must at a minimum comply with the Project Treble standards.\\r\\nAnother reason for using the HAL is that an implementation for a new device may already \\r\\nexist. If the hardware that your project uses is something that other Android developers have \\r\\nused—say, a motion or a temperature sensor—it is entirely possible that a complete HAL may \\r\\nalready exist. If it does not, it is possible that a HAL exists that supports a similar device and \\r\\nthat you can adapt that HAL to the new device with minimal effort.\\r\\n9780134096346_print.indb   13525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=":{"__data__":"{\"id_\":\"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JgHB2dBj0k9RMbDnRjuGU48RbCMMRw2dyLimF2y2w50=\",\"text\":\"\\r\\n136Chapter 8  Getting to Android: The HAL\\r\\nDesigning the HAL\\r\\nThe initial discussion of the Acme project introduced a simple hardware proximity sensor. \\r\\nPreceding chapters sketched the process of building a device driver for it. The next step up the \\r\\nAndroid layer cake is creating code that uses the driver to interact with the sensor.\\r\\nBy design, the Acme proximity sensor HAL is not only simple but includes a stub for the device \\r\\ndriver. The focus here is on defining the HAL API and publishing it into Java; not the vagaries \\r\\nof the Linux USB system. Even though part of the actual code is a stub, the functionality that it \\r\\nrepresents is intended to be entirely realistic.\\r\\nRecall that a HAL is an abstraction for a group of devices. A device driver is also an abstraction \\r\\nfor the device. On the hardware side, device drivers are typically very specific: a particular driver \\r\\nprobably works only with very specific hardware. (A USB driver is a bit of an exception; an inter-\\r\\nmediate layer for devices that support the USB interface.) From the application side, a device \\r\\ndriver is very general. They abstract devices into one of only two groups: character and block.\\r\\nHALs are more general on the bottom and more specific on the top. On top, there are quite \\r\\na few HAL abstractions, each of which is the interface for a narrower category of devices: \\r\\ncameras, Wi-Fi, Bluetooth, and so on. On the bottom a HAL provides access to multiple hard-\\r\\nware implementations, all of which have a specific, common purpose. The possibility even \\r\\nexists that a single HAL abstraction could integrate multiple hardware devices (and their \\r\\ndrivers), exposing the combination of several hardware components as a single service.\\r\\nWhen designing a HAL, understanding how the services provided by the hardware will be \\r\\nexposed to an application is absolutely essential. Although this book has generally approached \\r\\nthe Android system as a series of layers, each built on the previous layer, designing a HAL \\r\\nrequires looking far ahead and trying to predict the future. Even when you build a simple, propri-\\r\\netary device that doesn’t need a real HAL, this boundary is a good place to pause for a moment of \\r\\nreflection. Because the HAL is Android’s abstraction layer, it is a great place to hedge your bets.\\r\\nFirst, consider the constraints from below (nearer the hardware). In a project in which the \\r\\ncreation of a hardware device (or its driver) is part of a project, the kernel device driver and  \\r\\nthe API (its .h file) that it publishes are also part of the project. Project developers can modify \\r\\nthe driver API as necessary to sensibly divide functionality across code modules.\\r\\nThat is not the typical case, however. The likelihood is higher that a hardware device manu-\\r\\nfacturer that provides a device will also provide its driver. When a third party—the device \\r\\n manufacturer—provides the device driver, its API is not under project control. That is a \\r\\nconstraint.\\r\\nTo be concrete, if the Acme team created an entirely new type of proximity sensor, wrote a \\r\\ndevice driver for it, and that device was the secret sauce for a new product, then the Acme team \\r\\nwould choose the API for the sensor device driver and adjust it to suit their needs. If, on the \\r\\nother hand (the more typical case), the Acme team’s plan was a clever new use of the ability to \\r\\nsense proximity, and they sourced a sensor during a trip to Shenzhen, then the device driver \\r\\nfor the sensor would most likely be provided by the third-party hardware engineers: possibly as \\r\\nsource, possibly not.\\r\\n9780134096346_print.indb   13625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=":{"__data__":"{\"id_\":\"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"wLfw+OACengnkjnTPr0y9ub8WUyIgf1WgEvrppl/38g=\",\"text\":\"\\r\\n137Building a HAL\\r\\nIn either case, the API of the device driver is the constraint for the bottom of the HAL. In the \\r\\nformer case, that API is more malleable than it is in the latter.\\r\\nNext, consider the requirements from above (nearer application code). The HAL is the first step \\r\\ntoward building a service that will expose the hardware to an application. Now would be a \\r\\ngreat time for an app developer (preferably not the same person as the one who will write the \\r\\nHAL!) to write one of those applications. What feels like a natural interface in the application? \\r\\nAre the edge cases—initialization, configuration, application failure, and access control—all \\r\\nhandled? When a new sensor with new capabilities comes along, will the API accommodate the \\r\\nchanges with backward compatibility?\\r\\nAfter application requirements are more or less clear, converting the application API into a set \\r\\nof operations required of the hardware should be a relatively straightforward task. Remember, \\r\\nof course, that most of the heavy lifting will be done by a Java service that actually exposes the \\r\\nhardware to the application. The HAL layer doesn’t have to provide the service API that the \\r\\napplication uses. It merely has to provide a clean, minimal set of hardware operations on which \\r\\nthe service can be built.\\r\\nThe HAL for the Acme proximity sensor is sleek to avoid obscuring the process of building a \\r\\nHAL. Its design is simple. As is often the case, power is an important concern. A sensor may \\r\\nuse power when it is running and pointlessly load the battery unless it can be turned off. The \\r\\ndesign of the HAL for the Acme proximity sensor assumes that it is exactly such a power hog: \\r\\nthere are calls to turn it on and off.\\r\\nThe call that turns the sensor on takes one argument—an out parameter struct—that the \\r\\ndriver will populate with the min and max values acceptable in the precision argument passed \\r\\nto the HAL when polling it. Similarly, it contains the max and min values that the device will \\r\\nreturn for the proximity data it will return when it is polled.\\r\\nAfter the sensor is turned on, it can be polled for proximity values. The polling call takes a \\r\\nsingle argument: the desired precision for the proximity value it will return. The precision argu-\\r\\nment restricts the resources (perhaps time or battery) that the sensor will expend in obtaining \\r\\nthe returned value. The poll returns a current value from the sensor.\\r\\nWhen all client applications are done using the sensor, it can be turned off to save battery.\\r\\nBuilding a HAL\\r\\nThis chapter and the next show how to create the code that connects native code into the \\r\\nAndroid framework in four steps:\\r\\n1. Define the HAL: create the .h files that specify the API for the proximity service\\r\\n2. Implement the HAL for the Acme proximity service: create layers of code that shim the \\r\\ndevice driver API for the proximity service to its HAL API\\r\\n3. Create a native (C language) daemon that uses the HAL to access the proximity device\\r\\n4. Create the JNI interface that publishes the new HAL into the Java language\\r\\n9780134096346_print.indb   13725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM=":{"__data__":"{\"id_\":\"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"2z4iPkZwOXAVD9IdFWC5bLGYkumaQ2mnDvEldiJov3g=\",\"text\":\"\\r\\n138Chapter 8  Getting to Android: The HAL\\r\\nNote\\r\\nIn pre-SE Linux versions of Android, it was possible to create and run a standalone Java dae-\\r\\nmon, a translation of the C-language daemon created in step 3. Although it may still be pos-\\r\\nsible, we abandoned the effort to create one after many hours of trying. Caveat developer.\\r\\nCode Structure\\r\\nThe code in these next two chapters will implement both the HAL for the proximity device and \\r\\na simple daemon that uses the device through the HAL code. This simple daemon could replace \\r\\nthe one introduced as a startup service in Chapter 6.\\r\\nFigure 8.1 illustrates the components and their relationships.\\r\\nproximity_hal.cpp\\r\\napplication space\\r\\nproximity_daemon.cpp\\r\\njava\\r\\nsystem\\r\\nservice\\r\\nacme_one_proximity_hal\\r\\n_ProximitySensor.h\\r\\nkernel space\\r\\ndaemon\\r\\nhal\\r\\nshim\\r\\ndriver\\r\\nhardware\\r\\nproximity_sensor.h\\r\\nproximity_hal.h\\r\\nproximity_sensor.cpp\\r\\nproximity\\r\\ndevice\\r\\nacme_\\r\\none_\\r\\ndriver\\r\\nacme_one_proximity\\r\\n_sensor.h\\r\\nFigure 8.1 HAL Layer Structure\\r\\n9780134096346_print.indb   13825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c=":{"__data__":"{\"id_\":\"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"KmFNBmGBufY0Ggn5H6CmQurQcApOcKUenIUAwmeza8Y=\",\"text\":\"\\r\\n139Building a HAL\\r\\nNote that all the code discussed in these chapters runs as part of an application (user space) and \\r\\nnot as part of the kernel (kernel space). This is all just normal application code.\\r\\nThe code consists of four functional components, as shown in Figure 8.1:\\r\\n1. HAL code (dotted boxes): This is the abstraction that separates the capabilities of \\r\\nhardware from its specific implementations. The .h file defines the HAL interface. The \\r\\nimplementation (.cpp file) specializes the Android HAL API for the target hardware.\\r\\n2. Shim code (dashed boxes): This is the glue code that connects the HAL to a specific \\r\\ndevice hardware/driver. This code adapts the Android HAL API to the device driver for \\r\\nthe hardware.\\r\\n3. Daemon (blue/solid gray): This is the stand-alone application that interacts with the \\r\\nhardware through the HAL.\\r\\n4. Java System Service (white): This is the System Service that Android applications will \\r\\nuse to access the custom hardware.\\r\\nTo build these components into the Acme One device, you must place their code in the Acme \\r\\nOne device folder, as introduced in previous chapters. The new directories are organized as \\r\\nshown in Figure 8.2.\\r\\none\\r\\napp\\r\\nnative_daemon\\r\\njava_daemon\\r\\nproximity\\r\\ninclude\\r\\ndev\\r\\ndev\\r\\nhal\\r\\njni\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\nFigure 8.2 HAL Directory Structure\\r\\n9780134096346_print.indb   13925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=":{"__data__":"{\"id_\":\"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ndPPyrnvOV8MRA3dsXfymzwl2JAx+JOrnaif+CYgEZ8=\",\"text\":\"\\r\\n140Chapter 8  Getting to Android: The HAL\\r\\nAll the code implementing the HAL for the proximity sensor goes into a new subdirectory,  \\r\\nproximity. If the Acme device had several HALs for several different devices, they might be \\r\\nfurther organized into an intermediate directory, perhaps hal, that contained separate subdirec-\\r\\ntories for each of the different device HALs. The Acme project contains only a single HAL so it \\r\\nis located directly in the project root directory.\\r\\nNote that to be useful as a real HAL, the abstract definition of the interface—specifically the \\r\\ndefinition of the proximity HAL, proximity/include/proximity_hal.h—would have to be \\r\\npromoted from its current location inside the directory specifically for the One device, up into \\r\\nthe Android source tree to a location that would make it visible to other code that needed to \\r\\nuse it. If shared only by generations of Acme devices, it might be put into a subdirectory of \\r\\nthe Acme device directory. If visible across devices from multiple vendors, it might even be \\r\\npromoted into the device directory itself.\\r\\nFigure 8.2 also shows the locations in the source tree of the two daemons to be implemented \\r\\nin the next chapter. Although this organization is appropriate during the build process, it is \\r\\nentirely likely that applications—native daemons and system services—will be developed inde-\\r\\npendently from the libraries on which they depend (the HAL); perhaps even by different devel-\\r\\nopers. Facilitate this by separating the code bases into distinct git repositories and using the \\r\\nmanifest to place them in the build tree in their required locations, as shown in Listing 8.1.\\r\\nListing 8.1 Manifest Additions for the Acme HAL\\r\\n<!-- Acme Specific Projects -->\\r\\n  <project path=\\\"device/acme/one-kernel\\\" name=\\\"one-kernel\\\" remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/proximity\\\"\\r\\n           name=\\\"platform_device_acme_one_proximity\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/app/native_daemon\\\"\\r\\n           name=\\\"platform_device_acme_one_app_native_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/app/java_daemon\\\"\\r\\n           name=\\\"platform_device_acme_one_app_java_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\nImplementing the HAL\\r\\nThe HAL is a line between two endpoints. The first of those two endpoints is the device driver. \\r\\nAs noted previously, it is quite likely that the device driver interface for a specific piece of \\r\\nhardware is a given: that its API is not under project control. The device driver and its API are \\r\\ndefined by a third-party hardware provider and whatever driver they supply with it.\\r\\nGiven the ubiquity of the universal serial bus (USB), it is also very likely that any new device will \\r\\ncommunicate with the processor via USB. Even a newly created device may not have its own \\r\\ndriver. It may simply appear in the USB device tree and be accessed with generic USB commands. \\r\\nIf it does have a distinct driver, that driver is likely to be a specialization of the USB interface.\\r\\n9780134096346_print.indb   14025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=":{"__data__":"{\"id_\":\"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"fiOT+Mibp+fBiM5ZgcLa5g7PqENr3jMTxxD2Atvmhdo=\",\"text\":\"\\r\\n141Building a HAL\\r\\nNote\\r\\nContrary to the implications evoked by its name, USB is not really a bus. Instead, it is a tree \\r\\ncontaining a master device that polls one or more slaves. Masters and slaves behave quite dif-\\r\\nferently and require very different implementations.\\r\\nLinux USB core supports both modes, referring to the drivers for the master end as USB device \\r\\ndrivers and those for the slave end as USB gadget drivers.\\r\\nAlthough not discussed here, it is entirely possible that a small Android device will not be the \\r\\nbus master but, instead, a slave that is occasionally connected to a master. One can imagine, \\r\\nfor instance, a tablet acting as master for the sensors plugged into it for data collection in the \\r\\nfield. At night, though, when plugged into some kind of data aggregator, it would act as a gadget.\\r\\nIn its full generality, a USB device can be a very complex thing. Communicating with a single \\r\\nphysical device, for instance, may require interacting with multiple virtual devices. A USB loud-\\r\\nspeaker, for example, presents as both a keyboard—its controls—and a separate interface for the \\r\\nbulk transfer of sound data.\\r\\nEntire books are available on the construction of USB drivers and the code that interacts with \\r\\nthem. Those topics are well outside the scope of this book. Instead of accessing an actual USB \\r\\ninterface (boxes with slanted lines in Figure 8.1) the shim code in this example (boxes with \\r\\ndashed lines in Figure 8.1) will be a stub. The “bottom” end of this example HAL does not actu-\\r\\nally connect to a device driver. In an actual HAL, the shim code would include the .h files for \\r\\none or more device drivers. It would make read, write, and ioctl calls on the drivers they defined. \\r\\nEven though this example uses a stub, recall that Chapter 6 described the SE additions necessary \\r\\nto allow executables (applications) access to USB serial devices labeled as proximityd_exec. The \\r\\nSE additions in Chapter 6 illustrated creating the device-specific SE policy that is necessary to \\r\\ngrant applications access to kernel-exposed interfaces.\\r\\nSeveral resources can be quite helpful in building the HAL for a USB device. Most obviously, the \\r\\nLinux kernel contains an entire subsystem, USB Core, that does most of the heavy lifting.\\r\\nAnother important resource is libusb (https://libusb.info). Libusb is a portable, user-mode, and \\r\\nUSB-version agnostic library for using USB devices. It supports Android. Even if the library is \\r\\nexcessive and overly general for use in some specific applications, the code provides several \\r\\nexcellent examples of how to use USB devices from application code.\\r\\nHAL Declaration\\r\\nThe second of the two HAL endpoints is the definition of the HAL API. Visiting it next is another \\r\\ndeviation from the strict bottom-to-top order in which we’ve been visiting components of the \\r\\nstack so far. It is, however, entirely realistic and appropriate. After the two endpoints are defined, \\r\\nwriting the HAL is the straightforward (if not simple) task of drawing the line between them.\\r\\nAs noted earlier, the HAL definition should be more than just the simple reiteration of a hard-\\r\\nware interface. A good HAL API will be flexible enough to support multiple related devices and \\r\\nfriendly to the applications that use it. It is entirely prudent to define the interface as part of \\r\\nsystem and even application design, and then to do whatever is necessary to implement it. \\r\\n9780134096346_print.indb   14125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ=":{"__data__":"{\"id_\":\"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nY3MG9DkKQcFZvwLs13xZw3A7/9TutuifR5u1Idrn5Q=\",\"text\":\"\\r\\n142Chapter 8  Getting to Android: The HAL\\r\\nAs described previously, the HAL .h file is, in most senses, the HAL. It is the interface through \\r\\nwhich client code will interact with the device it represents.\\r\\nThe HAL for the proximity device is proximity/include/dev/proximity_hal.h. It is shown \\r\\nin Listing 8.2.\\r\\nListing 8.2 Proximity HAL\\r\\n#ifndef PROXIMITY_HAL_H\\r\\n#define PROXIMITY_HAL_H\\r\\n#include <hardware/hardware.h>\\r\\n#define ACME_PROXIMITY_SENSOR_MODULE \\\"libproximityhal\\\"\\r\\ntypedef struct proximity_sensor_device proximity_sensor_device_t;\\r\\nstruct value_range {\\r\\n    int min;\\r\\n    int range;\\r\\n};\\r\\ntypedef struct proximity_params {\\r\\n    struct value_range precision;\\r\\n    struct value_range proximity;\\r\\n} proximity_params_t;\\r\\nstruct proximity_sensor_device {\\r\\n    hw_device_t common;\\r\\n    int fd;\\r\\n    proximity_params_t params;\\r\\n    int (*poll_sensor)(proximity_sensor_device_t *dev, int precision);\\r\\n};\\r\\n#endif // PROXIMITY_HAL_H\\r\\nListing 8.2 first defines the constant ACME_PROXIMITY_SENSOR_MODULE. This is a unique string \\r\\nand the name that client code will use to find the proximity sensor’s HAL.\\r\\nNext, the code declares a struct that is best understood in the terms of object-oriented (O-O) \\r\\ndesign. Think of the proximity_sensor_device struct as the definition of a new O-O class. \\r\\nThe first member of the struct, common, in O-O terms is its super class: it contains data and \\r\\nbehaviors that are common to all HALs for all types of devices. This use of the term “super \\r\\n9780134096346_print.indb   14225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=":{"__data__":"{\"id_\":\"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"8lUL8ghwXvtVAiYd9S5RlGezkvj5DZVZOUcuFpp3iu0=\",\"text\":\"\\r\\n143Building a HAL\\r\\nclass” and the function of the common struct member will become clearer in the examination of \\r\\nthe HAL implementation.\\r\\nNote\\r\\nThe definitions of the device in hardware.h, hw_module_methods_t, really is a kind of raw \\r\\nversion of inheritance. The HAL structs that represent device instances are hw_module_ \\r\\nmethods_ts. That means that the open method, for instance, is at the same offset relative \\r\\nto the pointer to the HAL struct for every HAL for any device: hw_module_methods_t.open. \\r\\nIndividual HALs, however, “subclass” the hw_module_methods_t struct by defining a new \\r\\nstruct whose first element is an hw_module_methods_t but which allocate extra space at the \\r\\nend of that struct, containing pointers to methods with device-specific functionality. The result-\\r\\ning struct can be cast as the “super class” struct, an hw_module_methods_t, because the \\r\\npointer to the subclass struct is also a pointer to the super class struct. It can also be cast as \\r\\nthe device-specific struct by code that needs the device-specific functionality.\\r\\nNext in Listing 8.2 are more of the struct’s members. To continue the object-orientation \\r\\nanalogy, these are the class’s data members (fields). The first is the file descriptor for the open \\r\\ndevice driver that the HAL will hold. Next are the four values that all proximity sensor devices \\r\\nwill provide: min and max for precision and proximity. Each individual hardware device and its \\r\\ndriver will populate these fields with information about the behavior of that particular device. \\r\\nThe last member of the struct is a pointer to a function, poll, which takes the struct itself as its \\r\\nfirst argument. This is the O-O idiom for a method call.\\r\\nNote\\r\\nObject-oriented languages bundle data (fields) with the operations that may be performed on \\r\\nthat data (methods). The standard way of implementing this is that an operation on a particular \\r\\ndata type takes, as an implicit first argument, a reference to an instance of the data on which it \\r\\nwill operate. Each call to the operation mutates only the specific instance passed in the call.\\r\\nNote that nothing in the declaration of the HAL refers in any way to the actual hardware or \\r\\ndriver to which the HAL provides access. In particular, the HAL definition file does not refer to \\r\\nthe driver or even the shim code’s .h file (see Listing 8.9). The isolation is complete.\\r\\nThis HAL, now completely described, defines what it is to be a proximity device. This is the \\r\\nbottleneck through which all information must pass, moving up or down the stack between \\r\\nany proximity device driver and Android Java code. With the definition of the top and bottom \\r\\nendpoints, the implementation should be simply a matter of programming.\\r\\nHAL Definition\\r\\nAt last, we arrive at the definition of the HAL: its implementation. The implementation of the \\r\\nproximity HAL for the Acme proximity device is in proximity/hal/proximity_hal.cpp.\\r\\n9780134096346_print.indb   14325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=":{"__data__":"{\"id_\":\"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"mEUElg57w6JjjwowwZclpWTeVRT6ZCANCAIllUj/s1c=\",\"text\":\"\\r\\n144Chapter 8  Getting to Android: The HAL\\r\\nThe most important resource for implementing a HAL is the AOSP source file hardware/\\r\\nlibhardware/include/hardware/hardware.h. It defines the types needed to implement \\r\\na HAL and, in its comments, describes how a HAL is implemented. It largely determines the \\r\\nstructure of the code in proximity_hal.cpp.\\r\\nThe documentation in hardware.h outlines a three-step process for creating a HAL. The first \\r\\nstep in the process consists of defining a HAL module. The HAL module contains metadata \\r\\nabout a device and is also the factory for instances of the HAL. Listing 8.3 shows the module \\r\\ndefinition for the Acme One Proximity Sensor.\\r\\nListing 8.3 Proximity HAL Module Definition\\r\\n// ...\\r\\nhw_module_t HAL_MODULE_INFO_SYM = {\\r\\n        .tag = HARDWARE_MODULE_TAG,\\r\\n        .module_api_version = HARDWARE_HAL_API_VERSION,\\r\\n        .hal_api_version = 0,\\r\\n        .id = ACME_PROXIMITY_SENSOR_MODULE,\\r\\n        .name = \\\"Acme Proximity Sensor\\\",\\r\\n        .author = \\\"Acme Team\\\",\\r\\n        .methods = &proximity_sensor_methods\\r\\n};\\r\\nSeveral of these fields, tag, module_api_version and hal_api_version, are required and \\r\\nmust be bound to the values specified for them in hardware.h. After the required fields \\r\\nare several fields that identify a specific HAL. The value of the field .id, for instance, is the \\r\\nconstant defined back in this HAL’s .h file.\\r\\nThe most interesting of the fields is .methods. The .methods field must hold a reference to \\r\\nan hw_module_methods_t. Listing 8.4 quotes—again from hardware.h—the declaration of \\r\\nhw_module_methods_t.\\r\\nListing 8.4 HAL Methods Definition\\r\\ntypedef struct hw_module_methods_t {\\r\\n    /** Open a specific device */\\r\\n    int (*open)(const struct hw_module_t* module,\\r\\n                const char* id,\\r\\n                struct hw_device_t** device);\\r\\n} hw_module_methods_t;\\r\\nIn other words, the hw_module_methods_t is a struct that contains a pointer to a function \\r\\nthat all HAL implementations have but that each will implement differently. In object-oriented \\r\\nterms, it is an abstract method in the HAL class, the super class for all HALs (including the \\r\\nproximity sensor HAL).\\r\\n9780134096346_print.indb   14425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=":{"__data__":"{\"id_\":\"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"4ML8Nsumz5Zjxp9QZSzZdPYfGWoiSJeSD9ERQ2yVRRc=\",\"text\":\"\\r\\n145Building a HAL\\r\\nWhat method will all HAL implementations have but that each HAL will implement differ-\\r\\nently? Well, in O-O terms, it is the class’s constructor, of course! In the realm of the HAL, the \\r\\nconstructor is named .open.\\r\\nThe .open method takes a reference to the HAL module struct itself as its first parameter. As \\r\\nnoted earlier, this is the O-O design idiom for a method call.\\r\\nAs its second argument, it takes the device ID. This allows the code for a single open method to \\r\\nspecialize its behavior for several similar devices: a single implementation might have slightly \\r\\ndifferent behaviors for each of several devices with different IDs. This is the mechanism that \\r\\nallows a single HAL to support multiple implementations.\\r\\nFinally, down to business: It is the job of each HAL’s implementation of the abstract .open \\r\\nmethod to allocate and initialize the hw_device_t object returned in the third parameter of \\r\\nthe call.\\r\\nListing 8.5 shows the hw_module_method_t implementation for the proximity sensor.\\r\\nListing 8.5 Methods Definition for the Proximity HAL\\r\\n// ...\\r\\nstatic hw_module_methods_t proximity_sensor_methods = {\\r\\n        .open = &open_proximity_sensor_module\\r\\n};\\r\\n// ...\\r\\nThe hw_module_t struct for the proximity sensor is now complete. Its .methods.open field \\r\\ncontains a reference to a method that opens the underlying device for use: open_proximity_\\r\\nsensor_module. That method will be defined in a moment. \\r\\nAlthough there is now a way (incompletely implemented) to create an instance of the proxim-\\r\\nity sensor HAL, as yet, there is no way use it. There is no way to poll it or to close it when it \\r\\nis no longer needed. This is the purpose of the struct created, initialized, and returned by the \\r\\n.open method, the hw_device_t. In O-O terms, it is roughly the equivalent of an instance of \\r\\nthe HAL. The Acme proximity sensor device needs an extension of hw_device_t that declares \\r\\nthe two needed methods, poll and close.\\r\\nNote\\r\\nBe careful not to confuse hw_module_t and hw_device_t. The hw_module_t is the HAL’s \\r\\ndescription and factory. It has an open method that returns instances of extensions of  \\r\\nhw_device_t that define the behavior of a class of devices.\\r\\nFinally, Listing 8.6 is the complete definition of the HAL (located at device/acme/one/proximity/ \\r\\nhal/proximity_hal.cpp). As one would expect in an O-O architecture, the subclass instance \\r\\ncontains references to subclass methods.\\r\\n9780134096346_print.indb   14525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k=":{"__data__":"{\"id_\":\"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"RbYofYtfm09uekoCsOtxGgTLumwx5OtnX1pfUuVQWc8=\",\"text\":\"\\r\\n146Chapter 8  Getting to Android: The HAL\\r\\nListing 8.6 Proximity HAL Implementation\\r\\n#include <errno.h>\\r\\n#include <string.h>\\r\\n#include <malloc.h>\\r\\n#include <log/log_system.h>\\r\\n#include \\\"proximity_hal.h\\\"\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n#define LOG_TAG \\\"PROX\\\"\\r\\nstatic int poll_proximity_sensor(proximity_sensor_device_t *dev, int precision) {\\r\\n    SLOGV(\\\"Polling proximity sensor\\\");\\r\\n    if (!dev)\\r\\n        return -1;\\r\\n    return poll_sensor(dev->fd, precision);\\r\\n}\\r\\nstatic int close_proximity_sensor(proximity_sensor_device_t *dev) {\\r\\n    SLOGV(\\\"Closing proximity sensor\\\");\\r\\n    if (!dev)\\r\\n        return 0;\\r\\n    close_sensor(dev->fd);\\r\\n    free(dev);\\r\\n    return 0;\\r\\n}\\r\\nstatic int open_proximity_sensor_module(\\r\\n        const struct hw_module_t *module,\\r\\n        char const *name,\\r\\n        struct hw_device_t **device) {\\r\\n    SLOGV(\\\"Opening proximity sensor\\\");\\r\\n    auto *dev = static_cast<proximity_sensor_device_t*>\\r\\n      (malloc(sizeof(proximity_sensor_device_t)));\\r\\n    if (!dev)\\r\\n        return -ENOMEM;\\r\\n    memset(dev, 0, sizeof(*dev));\\r\\n    int fd = open_sensor(dev->params);\\r\\n    if (fd < 0) {\\r\\n9780134096346_print.indb   14625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE=":{"__data__":"{\"id_\":\"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"F7aku6nFumCWQmeWvYP/dVB+LQSuog/iF6//Cjlq2wQ=\",\"text\":\"\\r\\n147Building a HAL\\r\\n        SLOGE(\\\"Failed to open proximity sensor: %s\\\", strerror(errno));\\r\\n        free(dev);\\r\\n        return -1;\\r\\n    }\\r\\n    dev->fd = fd;\\r\\n    dev->common.tag = HARDWARE_DEVICE_TAG;\\r\\n    dev->common.version = 0;\\r\\n    dev->common.module = (struct hw_module_t *) module;\\r\\n    dev->common.close = (int (*)(struct hw_device_t *)) close_proximity_sensor;\\r\\n    dev->poll_sensor = poll_proximity_sensor;\\r\\n    *device = reinterpret_cast<hw_device_t *>(dev);\\r\\n    return 0;\\r\\n}\\r\\nstatic hw_module_methods_t proximity_sensor_methods = {\\r\\n        .open = open_proximity_sensor_module\\r\\n};\\r\\nhw_module_t HAL_MODULE_INFO_SYM = {\\r\\n        .tag = HARDWARE_MODULE_TAG,\\r\\n        .module_api_version = HARDWARE_HAL_API_VERSION,\\r\\n        .hal_api_version = 0,\\r\\n        .id = ACME_PROXIMITY_SENSOR_MODULE,\\r\\n        .name = \\\"Acme Proximity Sensor\\\",\\r\\n        .author = \\\"Acme Team\\\",\\r\\n        .methods = &proximity_sensor_methods\\r\\n};\\r\\nNote that, so far, this HAL implementation is completely device agnostic. This same code could \\r\\nbe used for nearly any proximity sensor device, depending on the definitions of three methods: \\r\\nopen_sensor, close_sensor, and poll_sensor.\\r\\nThere are a few ways of specializing this generic implementation for a specific device. A HAL \\r\\nimplementation might be specialized at compile/bind time by statically assigning the reference \\r\\nto a method implementation appropriate for the specific device to each of those three symbols. \\r\\nIn fact, that is how this example will work: That is what we do here. There will be a single shim \\r\\nthat will define those three functions.\\r\\nThe choice could also be runtime, though. Multiple definitions of hw_module_t might all use \\r\\na HAL implementation very similar to this one. An extension of the implementation might use \\r\\nthe value of  hw_module_t.id to choose among several device-specific function implementa-\\r\\ntions to be assigned to the proximity_sensor_device_t’s .common.close and poll_sensor \\r\\nmethods.\\r\\n9780134096346_print.indb   14725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so=":{"__data__":"{\"id_\":\"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"+rbngJ4bQsEf6OH8OfQmiRNrZokMnzCKWuGbSegVAls=\",\"text\":\"\\r\\n148Chapter 8  Getting to Android: The HAL\\r\\nThe HAL must be added to the build system. The build file is shown in Listing 8.7 and is \\r\\nlocated at device/acme/one/proximity/Android.bp. The HAL is a shared library named \\r\\n“libacmehal” and is built from the source “proximity_hal.cpp.” That source file, of course, \\r\\nincludes the file “proximity_hal.h,” which defines the HAL and which was shown in \\r\\nListing 8.2.\\r\\nListing 8.7 Acme HAL Build Blueprint File\\r\\ncc_defaults {\\r\\n    name: \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    cflags: [\\r\\n        \\\"-g\\\",\\r\\n        \\\"-O0\\\",\\r\\n        \\\"-Wall\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n}\\r\\ncc_library_shared {\\r\\n    name: \\\"proximityhal.default\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"hal/proximity_hal.cpp\\\"\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"liblog_headers\\\",\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    local_include_dirs: [\\r\\n        \\\"include\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libhardware\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ]\\r\\n}\\r\\n9780134096346_print.indb   14825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=":{"__data__":"{\"id_\":\"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eAVvCpwlO574tjfV3x/8uoPoJ38ibvbufRq6mtee1s8=\",\"text\":\"\\r\\n149Building a HAL\\r\\nUnderstanding the Shim\\r\\nThe final step in connecting the proximity driver to its HAL is the shim that actually imple-\\r\\nments the three device methods, open_sensor, close_sensor, and poll_sensor, for the \\r\\nAcme Proximity Sensor device. The definition of the shim interface is in the file proximity/\\r\\ninclude/dev/proximity_sensor.h. This is the “bottom” of the HAL. It is the API for the \\r\\nproxy to which the HAL code will delegate calls for one, specific type of proximity sensor \\r\\ndevice to which the proximity HAL provides access.\\r\\nBecause this example is quite simple and the HAL is responsible for only one actual hardware \\r\\ndevice, these multiple layers of abstraction may seem excessive. Indeed, in this specific context, \\r\\nthey may be. Consider, though, that in this specific pedagogical exercise, the whole notion of a \\r\\nHAL may be excessive.\\r\\nThe shim API is not part of the HAL. It is not included by proximity_hal.h, the definition \\r\\nof a proximity sensor’s HAL. The implementations of the device HAL (there may be more than \\r\\none) is probably the only code in the entire system that uses it. It completely encapsulates the \\r\\ndetails of a specific device and should certainly never be needed by code that uses the HAL. \\r\\nListing 8.8 shows the shim API.\\r\\nListing 8.8 Proximity Sensor Shim API\\r\\n#ifndef ACME_PROXIMITY_SENSOR_H\\r\\n#define ACME_PROXIMITY_SENSOR_H\\r\\n#include \\\"proximity_hal.h\\\"\\r\\nint open_sensor(proximity_params_t &params);\\r\\nint poll_sensor(int fd, int precision);\\r\\nint close_sensor(int fd);\\r\\n#endif //ACME_PROXIMITY_SENSOR_H\\r\\nNo surprises here. These are exactly the services described earlier and used by the HAL: The \\r\\nsensor can be turned on and off to optimize battery use; while it is on, it can be polled. A poll \\r\\ntakes as arguments the device file descriptor, a requested precision (a number between  \\r\\nprecision.min and precision.max), and returns a proximity value that is between  \\r\\nproximity.min and proximity.max. These bounds are populated in the params struct passed \\r\\nto the shim when turning the sensor on.\\r\\nIt is worth restating that although the device driver for a given device may run at least partially \\r\\nas part of the kernel, none of the HAL code does. All the code in this chapter runs in user \\r\\nspace. Although its use may be restricted to privileged applications, HAL code runs exclusively \\r\\nas part of some application.\\r\\n9780134096346_print.indb   14925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc=":{"__data__":"{\"id_\":\"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"99U6OZXneivjApbvthQtXR+J6nT+JBfrXKfVPb2jYzk=\",\"text\":\"\\r\\n150Chapter 8  Getting to Android: The HAL\\r\\nImplementing the Shim \\r\\nFinally, Listing 8.9 shows the actual implementation of the shim that connects the HAL to the \\r\\ndevice driver. It is in the file proximity/dev/proximity_sensor.cpp. In this example, it is \\r\\njust a stub. It just mocks the code that would actually talk to a device driver. Instead of the \\r\\nhardwired values returned here, a real proxy would interface with the hardware device, prob-\\r\\nably through its USB driver, to perform the actions required by the HAL.\\r\\nListing 8.9 Proximity Sensor Glue Code Stub\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n// This is stub, mocking actual glue code.\\r\\n// If this were a real thing, it would talk to a device driver,\\r\\n// presumably for a USB device\\r\\nint open_sensor(proximity_params_t &params) {\\r\\n    params.precision_min = 0;\\r\\n    params.precision_range = 100;\\r\\n    params.proximity_min = 0;\\r\\n    params.proximity_range = 100;\\r\\n    return 0; // a completely fake fd\\r\\n}\\r\\nint poll_sensor(int fd, int precision) {\\r\\n    if (precision < 0) {\\r\\n        return -1;\\r\\n    } else if (precision < 70) {\\r\\n        return 60;\\r\\n    } else if (precision < 100) {\\r\\n        return 63;\\r\\n    } else {\\r\\n        return -1;\\r\\n    }\\r\\n}\\r\\nint close_sensor(int fd) {\\r\\n    return 0;\\r\\n}\\r\\nNow that the shim is defined, it must also be added to the build. Because it is used by the HAL \\r\\nas well as the simple daemon and the binderized HAL covered in Chapter 12, it is built as a \\r\\nlibrary. The extension of the Android.bp shown in Listing 8.10 shows the additions necessary \\r\\nto build the library as well as expose its headers to other components of the system.\\r\\n9780134096346_print.indb   15025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE=":{"__data__":"{\"id_\":\"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"u3mIpNmucWXVYSCJnLeMebRDI6gt9eSlzOnJbdfdwig=\",\"text\":\"\\r\\n151Summary\\r\\nListing 8.10 Proximity Sensor Shim Additions to Android.bp\\r\\ncc_library {\\r\\n    name: \\\"libacmeproximityshim\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"dev/proximity_sensor.cpp\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    local_include_dirs: [\\r\\n        \\\"include\\\",\\r\\n    ],\\r\\n}\\r\\ncc_library_headers {\\r\\n    name: \\\"libacmeproximityshim_headers\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    export_header_lib_headers: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    export_include_dirs: [\\\"include\\\"],\\r\\n}\\r\\nSummary\\r\\nThis chapter introduced the Android HAL. A HAL is the interface between Android and a class \\r\\nof similar hardware devices: cameras, audio, sensors, and so on. The primary purpose of a HAL \\r\\nis to provide a single API for all devices that provide a similar service. A HAL abstracts device \\r\\nspecifics so that Android code that uses the device need not change to accommodate a specific \\r\\ndevice.\\r\\nBecause they are both abstractions and APIs, designing HALs requires careful thought and \\r\\na pretty good crystal ball. Especially when a team does not have a lot of experience with \\r\\neither Android or a new device, designing a HAL may bog down development and not prove \\r\\n9780134096346_print.indb   15125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8=":{"__data__":"{\"id_\":\"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"XWUKpQZPIJkVK6yqJlkOFIthoLEsRX9luNPow4pfwHs=\",\"text\":\"\\r\\n152Chapter 8  Getting to Android: The HAL\\r\\nfuture-proof anyway. Good reasons exist for creating a HAL. Good reasons also exist for plan-\\r\\nning to throw one away.\\r\\nIt is even possible to make an argument for C glue code that is extremely simple and hoist-\\r\\ning any complexity up into Android Java. If the project scope already includes modification of \\r\\nthe Android code, a Java device shim may be the most effective plan. On the other hand, for \\r\\ndevices that will get OS updates—especially if those updates will come from an external source \\r\\nor that will need to adapt to multiple hardware implementations—a HAL is just the thing.\\r\\nThe implementation of the Acme Proximity sensor HAL in this chapter is a representative basic \\r\\nHAL: It is realistic, complete, and it compiled and ran at the time of this writing. It is, however, \\r\\na stub. It does not actually use a USB driver to communicate with a physical device as it almost \\r\\ncertainly would were it more than pedagogical.\\r\\nThe next chapter demonstrates using this HAL in a daemon written in C. Chapter 11 demon-\\r\\nstrates converting this legacy HAL to a Binderized (Treble) HAL.\\r\\n9780134096346_print.indb   15225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g=":{"__data__":"{\"id_\":\"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"PWN9lB1Y1rSMFr/OAh/6FFGPmS+eYCGqaubLWhYMjJE=\",\"text\":\"\\r\\n9\\r\\nGetting to Java: The JNI\\r\\nThe previous chapter detailed the process of creating a HAL, an abstract interface between the \\r\\nAndroid framework and a novel bit of hardware.\\r\\nThat is only halfway there. Although a HAL is the canonical way of plumbing hardware into \\r\\nAndroid, it is not sufficient to make the device useful from Android Java programs. To do that, \\r\\nwe need the Java’s Native Interface, the JNI.\\r\\nThe goal for this chapter is to cross the boundary into Android’s implementation language, \\r\\nJava. We’ll cross that boundary by coding a Java language application that connects to the \\r\\nproximity sensor using its HAL and that logs its status once every minute or so. We’ll achieve \\r\\nthat goal in three steps:\\r\\n1. We’ll create a simple native application that talks directly to the proximity sensor. This \\r\\napplication is a simple extension of the one discussed at the end of Chapter 6.\\r\\n2. We’ll refactor that application to use the HAL we built in the last chapter. A native \\r\\napplication that uses the HAL is a useful artifact: The only significant distinction \\r\\nbetween a native application and the corresponding Java application is, exactly, \\r\\nthe implementation language. The choice of environments depends entirely on the \\r\\npreferences of the team that will build and support it.\\r\\n3. We’ll implement an application in Java using Java’s Native Interface (the JNI) that uses \\r\\nthe native HAL from code running inside the Android’s bytecode interpreter.\\r\\nNote\\r\\nIt was our intention to run the last example, the Java application, also as a daemon. \\r\\nUnfortunately, we were unable to construct SE rules that allowed it to run in ART under init. \\r\\nInstead, the Java application shown here must be run as a system service started by Zygote \\r\\n(as described in Chapter 7).\\r\\n9780134096346_print.indb   15325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU=":{"__data__":"{\"id_\":\"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"t/Mb8HbG02yXDiHvkbJ3HzzQMTqgj/6RzwgQ+iGQruA=\",\"text\":\"\\r\\n154Chapter 9  Getting to Java: The JNI\\r\\nCode Structure\\r\\nThe applications described in this chapter are complete and freestanding. Therefore, each goes \\r\\ninto its own subdirectory of “app” directory in the Acme One source structure. Figure 9.1 shows \\r\\nthe structure (with the code from the previous chapters elided).\\r\\none\\r\\napp\\r\\nnative_daemon\\r\\nsimple_daemon\\r\\njava_daemon\\r\\ncpp\\r\\njava\\r\\nproximity\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\n...\\r\\nFigure 9.1 Application Code Layout\\r\\nAlthough the code for each of the applications is nested inside the “app” folder in the Acme \\r\\nOne device file structure, there is no need for all the code to be a fixed part of the Acme One \\r\\nsource code repository. As usual, creating a new git repo for each separate application and using \\r\\nrepo to add them at checkout time to the workspace makes sense.\\r\\nIt is possible to do even better, though. Notice that, as described, each of the applications has \\r\\nexactly the same function: periodically logging proximity data to the console. There is no \\r\\nreason ever to build all three for a single given device. All three implementations might exist—\\r\\nperhaps as legacy implementations or specialized versions required for some specific device—\\r\\nbut having all three in the workspace at once would be useless, at best.\\r\\nThe repo tool not only supports this scenario—three different versions of the same applica-\\r\\ntion—but a nifty feature called groups (first described in Chapter 2) makes it very convenient. \\r\\nListing 9.1 shows the additions to the manifest.\\r\\n9780134096346_print.indb   15425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0=":{"__data__":"{\"id_\":\"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Oj03wNwG4FHIfyNTtChp5R1g4OgN2iBvN/UFhTvvcMQ=\",\"text\":\"\\r\\n155Using the Device\\r\\nListing 9.1 Manifest Additions for the Proximity Applications\\r\\n<!-- Acme Applications -->\\r\\n  <project path=\\\"app/simple_daemon\\\"\\r\\n           name=\\\"simple_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\n  <project path=app/native_daemon\\r\\n           name=\\\"native_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\n  <project path=app/java_daemon\\r\\n           name=\\\"java_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\nListing 9.1 demonstrates the use of this new workspace customization feature, the groups attri-\\r\\nbute. Annotating a project in the manifest with the group “nodefault” indicates to the repo \\r\\ntool that the annotated repository should not be downloaded as it normally would be when \\r\\nthe workspace is synched. To pull the code for one (or more) of the applications into the work-\\r\\nspace, use the repo tool -g flag to specify a group that includes the desired implementation.\\r\\nOne simple way to select a particular project is by its name. Every project belongs to a group \\r\\nwhose name is “name:” followed by the value of the project’s name attribute. For example, \\r\\nwhen used with the manifest shown in part in Listing 9.1, the following command will create a \\r\\nworkspace that contains the simple-daemon application:\\r\\nrepo init –g name:simple_daemon ...\\r\\nUsing the Device\\r\\nThe code for the first version of the application is almost trivial. It simply opens the device \\r\\ndirectly (no HAL), polls at a fixed interval, and logs the result. This is the trivial extension of \\r\\nthe daemon from Chapter 6. Listing 9.2 shows the code for it.\\r\\nListing 9.2 Simple Native Proximity Application\\r\\n#include <unistd.h>\\r\\n#include <stdio.h>\\r\\n#include <android/log.h>\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n#define DELAY_SECS 60\\r\\n#define ALOG(msg) __android_log_write(ANDROID_LOG_DEBUG, \\\"PROXIMITY\\\", msg)\\r\\nint main(int argc, char *argv[]) {\\r\\n    struct proximity_params_t config;\\r\\n    char message[128];\\r\\n    int fd = open_sensor(config);\\r\\n9780134096346_print.indb   15525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU=":{"__data__":"{\"id_\":\"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"9vVBy175YCkSfouthm1dNef5owtGpc7cfBWahIyayeg=\",\"text\":\"\\r\\n156Chapter 9  Getting to Java: The JNI\\r\\n    if (fd < 0)\\r\\n        return -1;\\r\\n    int n = 0;\\r\\n    int precision;\\r\\n    while (true) {\\r\\n        sleep(DELAY_SECS);\\r\\n        n++;\\r\\n        if (n < 10) {\\r\\n            precision = 40;\\r\\n        } else {\\r\\n            n = 0;\\r\\n            precision = 80;\\r\\n        }\\r\\n        int proximity = poll_sensor(fd, precision);\\r\\n        if ((proximity < config.proximity_min)) {\\r\\n            close_sensor(fd);\\r\\n            return 0;\\r\\n        }\\r\\n        snprintf (message,\\r\\n                 sizeof(message),\\r\\n                 \\\"proximity @%2d: %4.2f\\\",\\r\\n                  precision,\\r\\n                 (100.0 * (proximity - config.proximity_min))\\r\\n                          / config.proximity_range);\\r\\n        ALOG(message);\\r\\n    }\\r\\n}\\r\\nThis code polls the sensor once every minute with a precision of 40 and once every 10 minutes \\r\\nwith a precision of 80. It logs the result to the console.\\r\\nListing 9.3 shows the blueprint file used to build the application. It appeared previously in \\r\\nChapter 6 as Listing 6.11.\\r\\nListing 9.3 Building the Simple Native Application\\r\\ncc_binary {\\r\\n    name: \\\"acmesimpledaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmesimpledaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n9780134096346_print.indb   15625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg=":{"__data__":"{\"id_\":\"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"UGpr1wQFcW/MhvvNVIjLTF4aphP5Pl6WsudXAOBKLC4=\",\"text\":\"\\r\\n157Using the HAL\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-simple-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nUsing the HAL\\r\\nThe second version of the application is only slightly different from the first. The functional \\r\\npart of the code, the loop that logs proximity readings, is identical. The only differences \\r\\nbetween this code and that of the preceding application are that, instead of opening the device \\r\\ndirectly, it requests the device HAL by name from the OS and then uses the returned reference \\r\\nto invoke sensor methods through the HAL.\\r\\nListing 9.4 shows the code for the second version of the application (located at device/acme/\\r\\none/app/native_daemon/acme-native-daemon.cpp). \\r\\nListing 9.4 HAL Native Proximity Application\\r\\n#include <unistd.h>\\r\\n#include <stdio.h>\\r\\n#include <android/log.h>\\r\\n#include <hardware/hardware.h>\\r\\n#include \\\"dev/proximity_hal.h\\\"\\r\\n#define DELAY_SECS 60\\r\\n#define ALOG(msg) __android_log_write(ANDROID_LOG_DEBUG, \\\"PROXIMITYD\\\", msg)\\r\\nint main(int argc, char *argv[]) {\\r\\n    const hw_module_t* module\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module) {\\r\\n        ALOG(\\\"Failed to load Acme proximity HAL module\\\");\\r\\n        return -1;\\r\\n    }\\r\\n        \\r\\n9780134096346_print.indb   15725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno=":{"__data__":"{\"id_\":\"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"NPcB/R4ht8apsSM52ezAiXpCFCplhZNjvI/xxXWoitA=\",\"text\":\"\\r\\n158Chapter 9  Getting to Java: The JNI\\r\\n    proximity_sensor_device_t* device;\\r\\n    if (module->methods->open(\\r\\n        module,\\r\\n        nullptr,\\r\\n        reinterpret_cast<struct hw_device_t**>(& device))) {\\r\\n        ALOG(\\\"Failed to open Acme proximity HAL\\\");\\r\\n     return -1;\\r\\n    }\\r\\n    proximity_params_t config = device->params;\\r\\n    char message[128];\\r\\n    int n = 0;\\r\\n    int precision;\\r\\n    while (true) {\\r\\n        sleep(DELAY_SECS);\\r\\n        n++;\\r\\n        if (n < 10) {\\r\\n            precision = 40;\\r\\n        } else {\\r\\n            n = 0;\\r\\n            precision = 80;\\r\\n        }\\r\\n        int proximity = device->poll_sensor(device, precision);\\r\\n        if ((proximity < config.proximity.min)) {\\r\\n            device->common.close(reinterpret_cast<hw_device_t *>(device));\\r\\n            return 0;\\r\\n        }\\r\\n        snprintf(message, sizeof(message), \\\"proximity @%2d: %4.2f\\\", precision,\\r\\n            (100.0 * (proximity - config.proximity.min)) / config.proximity.range);\\r\\n        ALOG(message);\\r\\n    } \\r\\n}\\r\\nThe only thing worthy of particular notice, here, is that the second argument to the open \\r\\nmethod is null. It could have been used by the HAL to do runtime specialization. The simple \\r\\nAcme Proximity HAL described in the last chapter, however, ignores the parameter completely.\\r\\nThe build script for this second application is also nearly identical to that for the first native \\r\\napplication. The acmenativedaemon must have the same SE label as that used for the simple \\r\\nversion. That label allows it access to USB serial devices and to be started by init. The label is \\r\\napplied in file_contexts within the SE policy folder. Because these things are so similar, they \\r\\n9780134096346_print.indb   15825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8=":{"__data__":"{\"id_\":\"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"89RViNTE1up2zNTPbcmdzsAAtt3s1qT+S8w1de5I3ZE=\",\"text\":\"\\r\\n159Using the Java Native Interface\\r\\nare not included here. The only differences are the application name and the libraries it uses, as \\r\\nshown in Listing 9.5. \\r\\nListing 9.5 HAL Native Proximity Application Build File\\r\\ncc_binary {\\r\\n    name: \\\"acmenativedaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmenativedaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-native-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n        \\\"libhardware\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nUsing the Java Native Interface\\r\\nMost Android applications are written in interpreted languages. The source code for these \\r\\napplications—probably Kotlin or Java—is compiled to bytecodes. Bytecodes are not instruc-\\r\\ntions that can be executed by any actual hardware. Instead, as discussed in Chapter 7, they are \\r\\nnative instructions for a virtual machine. The virtual machine is an application that runs on the \\r\\ntarget device, interprets each of the bytecodes in the compiled app, and executes a set of native \\r\\ninstructions necessary to perform the action described by the bytecode.\\r\\nMost Android code, then, is executed as interpreted bytecodes. Clearly, the execution of those \\r\\nbytecodes can do only things that the virtual machine that interprets those bytecodes was built \\r\\nto do. In particular, because no virtual machine has compiled into it the ability to talk to the \\r\\nAcme proximity sensor, there is no way that interpreted code can use the sensor.\\r\\nFortunately, interpreted virtual machine instructions are not a running program’s only inter-\\r\\nface to native instructions and the operating system. Since its creation, the Java language has \\r\\ndefined a mechanism that allows an application to execute arbitrary native code uninterpreted \\r\\nand outside the virtual machine. The mechanism is as old as Java itself and is called the Java \\r\\nNative Interface (JNI). The Android virtual machines implement this mechanism. \\r\\n9780134096346_print.indb   15925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=":{"__data__":"{\"id_\":\"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"BMC7hYbnvBAKMhDOfWNBPtKLGAcEtuMTmPBx1DgFOfU=\",\"text\":\"\\r\\n160Chapter 9  Getting to Java: The JNI\\r\\nNote\\r\\nAlthough the JNI allows the execution of machine instructions that are not part of the virtual \\r\\nmachine, JNI code is executed as part of the same process that is running the virtual machine. JNI \\r\\ncode executes “outside the virtual machine” only in the sense that it is not executing instructions \\r\\nthat virtual machine designers provided. It is still virtual machine methods that are below the JNI \\r\\ncode in the call stack and to which control will return when the execution of the JNI code completes.\\r\\nExecuting Native Code\\r\\nFigure 9.2 illustrates the ways in which native code can be used in an Android application.\\r\\nApplication code, as discussed earlier, is typically written in an interpreted language. It is repre-\\r\\nsented in Figure 9.2 by the largest box at the top of the figure.\\r\\nAndroid application code depends on a library of standard functions and classes in the java.* \\r\\nand android.* packages. The java packages have an API that is very similar to the Java 8 \\r\\nJRE. The android library defines the Android runtime environment. Both of these libraries are \\r\\nimplemented largely in Java and, therefore, most of the code in each compiles into bytecodes \\r\\nthat are executed by the virtual machine.\\r\\nBeneath the interpreted code and shown in the center of Figure 9.2 is the virtual machine. It is, \\r\\nof course, written in a language (probably C and C++) that is compiled into machine instruc-\\r\\ntions that are native to the target device.\\r\\nTo the left and right of the virtual machine in Figure 9.2 are two more pieces of code that are \\r\\ncompiled directly (again, usually from C or C++) into instructions native to the target device. \\r\\nAlthough run as part of the application, these pieces of code are not compiled to bytecodes and \\r\\nare not interpreted by the virtual machine.\\r\\nNearly all Android programs make use of the native code represented by the block on the \\r\\nbottom right of the figure when they use the runtime libraries. Although, as mentioned earlier, \\r\\nmuch of the runtime environment code is implemented in Java, the implementations of \\r\\ncertain functions that do specialized things—like interfacing with the kernel, file and network \\r\\nI/O or performing highly optimized functions like encryption and decryption—are all native \\r\\n(non-interpreted) code called from the Java.\\r\\nApplication Code\\r\\nJava Library Code\\r\\nVirtual MachineNativeApplicationCodeNative LibraryCode\\r\\nInterpreted Code\\r\\nNative Code\\r\\nFigure 9.2 Inter          preted and Native Code\\r\\n9780134096346_print.indb   16025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI=":{"__data__":"{\"id_\":\"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"+WEiUTwSKb1xHE56EBykGl1crrNsae/LyslOfAglRv4=\",\"text\":\"\\r\\n161Using the Java Native Interface\\r\\nThe Java Native Interface (JNI) is the mechanism by which the interpreted runtime library code \\r\\ncalls the device native code. It is also a well-defined, public API; is implemented by the Android \\r\\nvirtual machine; and can be used directly by application code, just as it is used by the Java and \\r\\nAndroid runtime libraries. Any application can use the JNI to execute native code: While it is \\r\\nrunning, it can load an arbitrary native library and execute the code in it.\\r\\nNote\\r\\nA previous Java-based smartphone standard, J2ME, enforced security and controlled applica-\\r\\ntion access to hardware by preventing the use of native code. Applications could only execute \\r\\ninstructions that were compiled into the virtual machine; access to instructions deemed “dan-\\r\\ngerous” was carefully controlled.\\r\\nAndroid has a much different security model and no such restriction. Applications can and do \\r\\nexecute their own native code. \\r\\nJNI: The Java Side\\r\\nOne more time, let’s interrupt our strict up-the-stack journey through the Android landscape \\r\\nand look at the JNI starting from above, in code written in Java.\\r\\nThe Java side of the JNI is straightforward and quite simple. It consists of the keyword “native” \\r\\nand the system method, System.loadLibrary. \\r\\nA method with the keyword native in its declaration—a native function—is similar to \\r\\nthe declaration of a function in a Java interface: It declares the function prototype but not its \\r\\nimplementation. Methods declared in an interface must be defined in the classes that imple-\\r\\nment the interface. Methods declared “native,” to the contrary, are not defined in Java at all. \\r\\nInstead, the virtual machine expects to find their definitions as canonically named symbols in \\r\\na library loaded with the load (or loadLibrary) method.\\r\\nNote\\r\\nKotlin uses the keyword “external” to accomplish the same thing: declaring a function whose \\r\\ndefinition is elsewhere. \\r\\nListing 9.6 shows the declaration of the three methods that Java code will need to interact with \\r\\nthe proximity device.\\r\\nListing 9.6 Native Method Declarations\\r\\npackage com.acme.device.proximity;\\r\\n// ...\\r\\npublic class AcmeProximitySensor {\\r\\n   // ...\\r\\n9780134096346_print.indb   16125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=":{"__data__":"{\"id_\":\"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"MDu/gfyJvhZVZS70Xk6DHxd0gY2ZX6Uky2klWfIZoys=\",\"text\":\"\\r\\n162Chapter 9  Getting to Java: The JNI\\r\\n    private static native long open();\\r\\n    private static native int poll(long hdl, int precision);\\r\\n    private static native void close(long hdl);\\r\\n}\\r\\nJNI: The Native Side\\r\\nThese three methods must now be defined in a linkable library. In this example, the library will \\r\\nbe written in C.\\r\\nThe Android virtual machine will translate calls to these native methods into calls to canoni-\\r\\ncally named functions in a native library. The definitions for the corresponding functions must \\r\\nhave exactly the names that the runtime expects them to have. Fortunately, there is tool that is \\r\\npart of the Java Development Kit that will generate the C prototypes for the native definitions \\r\\nautomatically: javah.\\r\\nNote\\r\\njavah has been deprecated as of Java 9. Even in Java 8, its functionality can be duplicated \\r\\nwith the –h flag for the java compiler, javac.\\r\\nJavah need not be part of the build process. Running it is necessary only when new native \\r\\nmethods are introduced or when one of the signatures of an existing native methods changes: \\r\\nwhen the headers it generates will be different from the headers it generated last time it was \\r\\nrun. Some shops decide to create the headers once and then check them in to source control \\r\\nlike any other source file.\\r\\nBecause the process of generating the native prototypes can be automated, some shops do \\r\\nprefer to make it part of the build. When there are a lot of native methods and they are chang-\\r\\ning frequently, this is a very reasonable approach. Note, though, that javah only generates the \\r\\nheader files and the function prototypes! If the corresponding function definitions (presumably \\r\\nin a .c file) do not match, the build will fail with native compiler errors.\\r\\nRunning javah by hand is quite simple. It takes as arguments:\\r\\n ■The classpath identifying the directory (or jar) that is the top of the package tree containing the compiled Java .class files. The classpath is specified using the –cp \\r\\ncommand line option.\\r\\n ■Either a –d or –o argument indicating the directory or file (respectively) into which the tool should put the generated output.\\r\\n ■The fully qualified name of the class containing native declarations for which headers are to be generated.\\r\\nFor instance, run from the root of the Java application package (device/acme/one/app/java_\\r\\ndaemon), the following command will create a .h file from the binary generated by compiling \\r\\nthe code in Listing 9.6:\\r\\n9780134096346_print.indb   16225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0=":{"__data__":"{\"id_\":\"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"8Kifch7VjbzT/z+geMnbdDoU7r4wjr20Nlvd6JovZPk=\",\"text\":\"\\r\\n163Using the Java Native Interface\\r\\njavah –cp java \\\\\\r\\n –o cpp/com_acme_device_proximity_AcmeProximitySensor.h \\\\\\r\\n  com.acme.device.proximity.AcmeProximitySensor\\r\\nJavah will search the directory “java” for the class file containing the class com.acme. \\r\\ndevice.proximity.AcmeProximitySensor, (probably java/com/acme/device/ \\r\\nproximity/AndroidProximitySensor.class) and create C prototypes for any native \\r\\nmethods it finds there. The prototypes will be written to the file cpp/com_acme_device_ \\r\\nproximity_AcmeProximitySensor.h. Listing 9.7 shows the generated file.\\r\\nListing 9.7 Proximity HAL JNI Function Prototypes\\r\\n/* DO NOT EDIT THIS FILE - it is machine generated */\\r\\n#include <jni.h>\\r\\n/* Header for class com_acme_device_proximity_AcmeProximitySensor */\\r\\n#ifndef _Included_com_acme_device_proximity_AcmeProximitySensor\\r\\n#define _Included_com_acme_device_proximity_AcmeProximitySensor\\r\\n#ifdef __cplusplus\\r\\nextern \\\"C\\\" {\\r\\n#endif\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    open\\r\\n * Signature: ()J\\r\\n */\\r\\nJNIEXPORT jlong\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n  (JNIEnv *, jclass);\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    poll\\r\\n * Signature: (JI)I\\r\\n */\\r\\nJNIEXPORT jint\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_poll\\r\\n  (JNIEnv *, jclass, jlong, jint);\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    close\\r\\n * Signature: (J)V\\r\\n */\\r\\nJNIEXPORT void\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_close\\r\\n  (JNIEnv *, jclass, jlong);\\r\\n9780134096346_print.indb   16325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4=":{"__data__":"{\"id_\":\"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"mlHlBTzMMoaI6/da6umPMRYPxkMlqqtwJouuGLDRKDk=\",\"text\":\"\\r\\n164Chapter 9  Getting to Java: The JNI\\r\\n#ifdef __cplusplus\\r\\n}\\r\\n#endif\\r\\n#endif\\r\\nNote, especially, the extern \\\"C\\\" { ... } directive. It is essential! It prevents a C++ compiler \\r\\nfrom mangling the names of the functions and making their definitions unrecognizable as the \\r\\ndefinitions for the corresponding Java native declaration.\\r\\nNote\\r\\nCanonically named methods are not the only way to link the native implementation of a method \\r\\nto its Java declaration. The RegisterNatives JNI function takes, as an argument, an array of \\r\\nJNINativeMethod, each of which identifies a Java method (by fully qualified signature) and \\r\\nincludes a pointer to the native implementation. Used in the JNI_OnLoad method (called by \\r\\nthe VM when it loads a native library), JNINativeMethod provides an alternative way of con-\\r\\nnecting Java and native methods.\\r\\nNote also that these native definitions depend on the header file jni.h. The jni.h header file \\r\\ncontains the definitions for the native type abstractions for Java’s base types—int, long, [] \\r\\n(array), and so on—some macros (JNIEXPORT, JNICALL, and so on), but most importantly the \\r\\ndefinition of the JNI environment, a structure of opaque pointers to standard JNI functions. \\r\\nThese functions allow native code to work with Java objects.\\r\\nThis chapter will conclude with a slightly deeper discussion of the JNI native environment. \\r\\nFor the moment, though, let’s just assume (as it is usually safe to do), that a jint is an int, a \\r\\njlong is a long, and so on. \\r\\nThe next step is implementing the functions in native code. Stealing code from Listing 9.4 \\r\\nmakes this a trivial task. Listing 9.8 shows the result.\\r\\nListing 9.8 Proximity HAL JNI Implementation\\r\\n#include <jni.h>\\r\\n#include <string>\\r\\n#include <hardware/hardware.h>\\r\\n#include \\\"dev/proximity_hal.h\\\"\\r\\nJNIEXPORT jlong JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n  (JNIEnv * env, jclass clazz) {\\r\\n    const hw_module_t *module;\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module))\\r\\n        return -1;\\r\\n9780134096346_print.indb   16425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg=":{"__data__":"{\"id_\":\"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"iOrsZXVxgTFCfrPuMz/VR7TmUfsr2KKeFA8oHxkxYbs=\",\"text\":\"\\r\\n165Using the Java Native Interface\\r\\n    long device;\\r\\n    if (module->methods->open(\\r\\n            module,\\r\\n            nullptr,\\r\\n            reinterpret_cast<struct hw_device_t **>(&device)))\\r\\n        return -1;\\r\\n    return (jlong) device;\\r\\n}\\r\\nJNIEXPORT jint JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_poll\\r\\n  (JNIEnv *env, jclass clazz, jlong handle, jint precision);\\r\\n    auto *device = reinterpret_cast<proximity_sensor_device_t *>(handle);\\r\\n    return device->poll_sensor(device, precision);\\r\\n}\\r\\nJNIEXPORT jint JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_close\\r\\n  (JNIEnv * env, jclass clazz, jlong handle);\\r\\n    auto device = reinterpret_cast<proximity_sensor_device_t *>(handle);\\r\\n    return device->common.close(reinterpret_cast<hw_device_t *>(device));\\r\\n}\\r\\nThis is a calculated and extremely simple example. Once again, though, the reader is cautioned! \\r\\nThe JNI is extensive, complex, and easy to break. Entire books exist about this topic alone.\\r\\nThe alert reader will notice that the reference to the sensor, returned by the HAL, is cast as a \\r\\njlong in both the open and the close methods. This is the introduction to a common and \\r\\npowerful JNI technique. Its purpose will become obvious when the corresponding methods are \\r\\nimplemented in Java.\\r\\nA Java Proximity Application\\r\\nHaving plumbed a path from Java code through the HAL and into the Acme Proximity Sensor, \\r\\nwe can now implement an analog for the applications shown in Listings 9.2 and 9.4 that is \\r\\nwritten in Java.\\r\\nThe Native Shim\\r\\nThe first step will be to complete the AcmeProximitySensor class, shown in part in Listing 9.6. \\r\\nIt is the shim that connects the Java environment to the native environment.\\r\\nIt is very much best practice that the shim code abstract away even the faintest whiff of native-\\r\\nness. The API for the shim should follow all the best practices standard for any Java API. In \\r\\nparticular, declaring the API in a mockable Java interface is a great way to make it possible to \\r\\ntest client code without requiring access to any specific hardware.\\r\\nListing 9.9 shows a complete implementation of the AcmeProximitySensor class.\\r\\n9780134096346_print.indb   16525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0=":{"__data__":"{\"id_\":\"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"voZSMuRt7JWh2jHAoCJjC7PO+52H+0UDU6+lB/Lhb+Y=\",\"text\":\"\\r\\n166Chapter 9  Getting to Java: The JNI\\r\\nListing 9.9 Proximity HAL Java Implementation\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    static { System.loadLibrary(“acmeproximityjni”); }\\r\\n    private long peer;\\r\\n    public void init() throws IOException {\\r\\n        synchronized (this) {\\r\\n            if (peer != 0L) { return; }\\r\\n            peer = open();\\r\\n            if (peer == 0L) {\\r\\n                throw new IOException(“Failed to open proximity sensor”);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    public int poll(int precision) throws IOException {\\r\\n        synchronized (this) {\\r\\n            if (peer == 0L) { throw new IOException(“Device not open”); }\\r\\n            return poll(peer, precision);\\r\\n        }\\r\\n    }\\r\\n    @Override\\r\\n    public void close() throws IOException {\\r\\n        final long hdl;\\r\\n        synchronized (this) {\\r\\n            hdl = peer;\\r\\n            peer = 0L;\\r\\n        }\\r\\n        if (hdl == 0L) { return; }\\r\\n        if (close(hdl) < 0) {\\r\\n            throw new IOException(“Failed closing proximity sensor”);\\r\\n        }\\r\\n    }\\r\\n    @Override\\r\\n    protected void finalize() throws Throwable {\\r\\n        try { close(); }\\r\\n        finally { super.finalize(); }\\r\\n    }\\r\\n    private static native long open();\\r\\n9780134096346_print.indb   16625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=":{"__data__":"{\"id_\":\"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"3LNEPqjiIp9XkIgOF2qg1/V1C+XTm4j+wGWOkUEfAYE=\",\"text\":\"\\r\\n167Using the Java Native Interface\\r\\n    private static native int poll(long handle, int precision);\\r\\n    private static native int close(long handle);\\r\\n}\\r\\nThere are several things to note in this code.\\r\\nThe first is the use of the previously discussed System.loadLibrary method. It is called, as is \\r\\nfrequently the case, from a static initializer that will be invoked when the class is loaded. This \\r\\nis a common strategy because the library must be loaded before any of the methods in the class \\r\\ncan be used.\\r\\nThere are other strategies, though. A system that requires several native libraries may load them \\r\\nall at once, perhaps using some kind of registration system, as part of startup. Another possibil-\\r\\nity, especially in systems that require additional initialization, is loading necessary native librar-\\r\\nies in an initialization method that client code must call explicitly before making any other use \\r\\nof the library.\\r\\nNote, also, that System.loadLibrary loads the library named in its actual parameter in \\r\\na system-dependent way. It modifies the name to conform to the platform library naming \\r\\nconventions and then attempts to load it from the library path. When run on a Linux OS, \\r\\nfor example, the code in Listing 9.9 will load the libacmeproximityjni.so library. On a \\r\\nWindows system, though, it would load the acmeproximityjni.dll library.\\r\\nThe library path can be specified at JVM startup using the system parameter java.library.\\r\\npath or, on Android Linux, by setting the environment variable LD_LIBRARY_PATH. A second \\r\\nmethod, System.load, mentioned previously, will load a library from a specific file named in \\r\\nthe fully qualified path passed as its argument.\\r\\nNext, observe the use of the variable peer. In this code, the Java long variable peer contains \\r\\nthe native reference to the HAL object as described in the discussion of Listing 9.8. Unlike C, \\r\\nin which a reference can be made opaque by declaring it void*, making a reference opaque in \\r\\nJava is fairly difficult. Nonetheless, it is crucial that the contents of a variable used in this way \\r\\nbe treated as opaque. Any mutation of any kind by the Java code is almost certainly an error \\r\\nand probably a disastrous one. As usual, in situations like this, minimizing visibility and muta-\\r\\nbility is a useful strategy.\\r\\nTogether, Listings 9.8 and 9.9 illustrate the simplest form of a very common pattern. The \\r\\nresponsibility for managing the Java use of specialized hardware is handled through the coordi-\\r\\nnation of two objects, one Java and one native. The two objects are the two ends of a bridge—\\r\\none end in the native code and the other in the Java code—through which all interactions take \\r\\nplace. Client code instantiates the Java object and the Java object manages the native object, \\r\\nfrequently called a native peer, or a companion object. The Java code holds a reference to the \\r\\nnative object. The native code’s awareness of the Java code is kept minimal.\\r\\n9780134096346_print.indb   16725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE=":{"__data__":"{\"id_\":\"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"S9kGpu04dC+GPr8vPQqYcQisSxWfEsVPQeQNg4PdEVY=\",\"text\":\"\\r\\n168Chapter 9  Getting to Java: The JNI\\r\\nThe Native Shim: Opaque Peer\\r\\nAnother example of this pattern attempts to enforce the opacity of the native reference in the \\r\\nJava variable by using reflection in the native code to set the value of the reference held in the \\r\\nJava variable. Listings 9.10 and 9.11 illustrate this technique.\\r\\nListing 9.10 Opaque Peer: Native\\r\\nJNIEXPORT int\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n    (JNIEnv *env, jclass klass, jobject instance) {\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module))\\r\\n        return -1;\\r\\n    hw_device_t *device;\\r\\n    if (module->methods->open(module, nullptr, &device)))\\r\\n        return -2;\\r\\n    jfieldID peer = env->GetFieldID(klass, \\\"peer\\\", \\\"J\\\");\\r\\n    if (!peer)\\r\\n        return -3;\\r\\n    env->SetLongField(instance, peer, reinterpret_cast<jlong>(mem));\\r\\n    \\r\\n    return 0;\\r\\n}\\r\\nListing 9.11 Opaque Peer: Java\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    /...\\r\\n    \\r\\n    private long peer;\\r\\n    /...\\r\\n    public void init() throws IOException {\\r\\n        synchronized (this) {\\r\\n            int status = open(this);\\r\\n            if (status != 0) {\\r\\n                throw new IOException(\\r\\n                    \\\"Failed to open proximity sensor: \\\" + status);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n9780134096346_print.indb   16825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=":{"__data__":"{\"id_\":\"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nrDPqxMsXBp4QFKA+BnHG0S0Rj0MUc87LJe/iVHH818=\",\"text\":\"\\r\\n169Using the Java Native Interface\\r\\n    /...\\r\\n    private static native int open(AcmeProximitySensor instance);\\r\\n    \\r\\n    /...\\r\\n}\\r\\nTwo new JNI methods are used here without introduction: GetFieldID and SetLongField. \\r\\nTheir names, though, are fairly self-explanatory (they return a reference to a Java field and \\r\\nassign the field value, respectively) so that the concept the listing introduces should be clear.\\r\\nThe open method in Listing 9.11 could, as easily, be an instance method instead of a static \\r\\nmethod. In JNI, the difference between the implementations of a static and an instance method \\r\\nis the second argument to the method. The second argument to a static native function is \\r\\na reference to the class to which the function belongs. The second argument to an instance \\r\\nnative function is a reference to the instance to which the function belongs. Holding a refer-\\r\\nence to the instance means that the native code can access the instance’s fields, exactly as the \\r\\nexample code does.\\r\\nIn this case, however, we also need a reference to the object’s class (for the call to GetFieldID). \\r\\nBecause both are needed, using a static method (which provides the reference to the class \\r\\nobject) will work just as well. We pass the instance reference (this in the call to open, in  \\r\\nListing 9.11) explicitly. The native implementation then has both of the references that it needs.\\r\\nAlthough somewhat more complex, the strategy illustrated in Listings 9.10 and 9.11 has \\r\\nadvantages. In this implementation, any Java use of the variable peer is now clearly an error. \\r\\nDistinguishing between appropriate and inappropriate use of the stored pointer is not necessary: \\r\\nAny use is an error. Another advantage is that the open method’s return value is now, unambig-\\r\\nuously, a status code. No need exists to partition returns into legal values and illegal values.\\r\\nThe Native Shim: Finalization\\r\\nReturning to Listing 9.9, one more issue is worthy of note: the management of the lifecycle of \\r\\nthe companion object.\\r\\nAlthough the garbage collector manages Java’s memory, native memory usually must be allo-\\r\\ncated and deallocated explicitly. An AcmeProximitySensor object allocates its companion in \\r\\nits “open” method. So how does it free it? There are several possible answers to that question.\\r\\nThe first and best is “explicitly.” For reasons that will be discussed momentarily, the most effec-\\r\\ntive way to handle explicitly managed memory is explicitly. Ideally, an object with a native \\r\\npeer that must be freed explicitly would be marked somehow so that clients would know that \\r\\nthey should explicitly free it.\\r\\nThat is exactly the purpose of Java’s Closeable interface. An object that implements \\r\\nCloseable is hinting to its user that it needs to be closed explicitly when the user is through \\r\\nwith it. The AcmeProximitySensor implements Closeable’s sub-interface AutoCloseable \\r\\nand uses it to free its companion.\\r\\n9780134096346_print.indb   16925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=":{"__data__":"{\"id_\":\"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"cQhn8G7RHU/jXXbvOSUL5svGdEPeJSdsIUyIxbDhHTM=\",\"text\":\"\\r\\n170Chapter 9  Getting to Java: The JNI\\r\\nNote\\r\\nThe AutoCloseable interface, introduced in Java 7, extends Closeable: Prefer it, where \\r\\npossible. Most significantly, instances of a class that implements AutoCloseable can be \\r\\nused with the try-with-resources statement. They can also throw exceptions, other than an \\r\\nIOException, as appropriate to their specific failure modes.\\r\\nThe contract for the AutoCloseable’s  close method is also different: idempotency is not a \\r\\nrequirement. Rather, developers are strongly encouraged to mark closed instances and to pre-\\r\\nvent their use after closing.\\r\\nA second strategy is a finalizer. A Java finalizer is a method with the specific signature, \\r\\nprotected void finalize() throws Throwable. If an object has a method with that signa-\\r\\nture, it is called by the Java runtime just before the garbage collector frees the object’s memory. \\r\\nThis seems perfect: with one small method, when the AcmeProximitySensor goes away, so \\r\\ndoes its companion.\\r\\nUnfortunately, however, there’s no such thing as a free lunch. Finalizers are quite difficult to \\r\\nget right and, even when correct, have problems. Correctness first.\\r\\nThere is no guarantee about the order in which objects are finalized after they become eligible \\r\\nfor garbage collection. The example code in Listing 9.12 has several problems, not the least of \\r\\nwhich is that it may get a NullPointerException in its finalizer. There is no guarantee that \\r\\nthe list referenced by objects has itself not already been finalized when the finalizer for an \\r\\ninstance of BrokenFinalizer is run. Its contents might well have been finalized first!\\r\\nListing 9.12 Broken Finalizer: Don’t Do This!\\r\\npublic class BrokenFinalizer implements Closeable {\\r\\n    @NonNull\\r\\n    private final List<NativeObject> objects\\r\\n    // ...\\r\\n    \\r\\n    @Override\\r\\n    protected void finalize() throws Throwable {\\r\\n        for (NativeObject obj: objects) { obj.close(); }\\r\\n    }\\r\\n}\\r\\nIn addition to being brittle and very difficult to code, finalizers have two other problems. The \\r\\nfirst is that they impose a considerable inefficiency on the garbage collector. Because a final-\\r\\nizer can do all kinds of weird stuff (including “resurrect” the object being garbage collected by \\r\\nstoring a reference to it somewhere!), the garbage collector has to do checks that are not neces-\\r\\nsary for an object that does not have a finalizer. These checks slow the collector down, cause it \\r\\nto place a heavier burden on the application, and mean that the lag between last use and deal-\\r\\nlocation gets longer.\\r\\n9780134096346_print.indb   17025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=":{"__data__":"{\"id_\":\"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"W27hI69JlQkbkfKgR9wC8d27XhrN125IYVbiLr63EmM=\",\"text\":\"\\r\\n171Using the Java Native Interface\\r\\nThe second problem, though, hinted at in the last sentence, is even worse. Although Java \\r\\npromises that it will run the garbage collector before it runs out of memory, there is no way \\r\\nto predict how long an object that is eligible for collection will sit around in memory before \\r\\nJava needs space and schedules it for collection. Furthermore, Java cannot guarantee that all \\r\\nfinalizers will be run before an application runs out of memory. Finalizers are run in a platform-\\r\\ndependent way: almost universally on a single Java thread. If an application allocates and then \\r\\nfrees a hundred large objects every second, each of those objects is scheduled for finalization, \\r\\nand each finalization takes a half a second to complete, the application is doomed. An applica-\\r\\ntion with native companion objects can build up a considerable backlog of dead objects before \\r\\na garbage collection takes place. Instead of being freed incrementally, all of those objects are \\r\\nput on the finalization queue suddenly and all at once.\\r\\nDespite these problems, finalizers can be a reasonable part of a “belt and suspenders” policy, \\r\\nas shown in Listing 9.9. An AcmeProximitySensor is Closeable: Client code is expected to \\r\\nexplicitly close each instance when it is done with it. If the client code fails to do so, however, \\r\\nthe finalizer will prevent a native memory leak.\\r\\nThe Native Shim: Reference Queues\\r\\nThe last and most complex way of managing native object lifecycles are reference queues. \\r\\nIn return for somewhat more complicated code, reference queues remove many of the prob-\\r\\nlems that finalizers have. They do not interfere with garbage collection, and they allow ordered \\r\\nfreeing of objects.\\r\\nAs of Java 9, finalizers have officially been deprecated in favor of Cleaners. As part of Java 9, \\r\\nCleaners are not available in Android. There is good news, though: PhantomReferences and \\r\\nReferenceQueues, the technologies underlying Java 9’s Cleaner, are available in Android. The \\r\\nmessage to Android developers should be clear, even if Cleaners themselves are not available \\r\\nin the Android runtime environment.\\r\\nThe combination of a reference queue and a phantom reference works like this:  The construc-\\r\\ntor for an instance of the PhantomReference class (or one of its subclasses) takes two argu-\\r\\nments: an object and a reference queue. When the object whose reference is the first parameter \\r\\nto the constructor becomes eligible for garbage collection, the phantom reference (itself) is \\r\\nenqueued on the reference queue that was the second parameter to the constructor.\\r\\nCalls to PhantomReference.get always return null: The referenced object itself is unreachable \\r\\nvia the phantom reference and the existence of the reference cannot affect its reachability. \\r\\nWhat the reference can do, though, is provide a way to remember that there is unfinished busi-\\r\\nness, when the object to which it is a reference no longer exists.\\r\\nThe implementation of a reference queue solution is somewhat difficult. Let’s take \\r\\nit in four parts. First, Listing 9.13 is the machinery that manages the lifecycle of an \\r\\nAcmeProximitySensor object and its peer.\\r\\n9780134096346_print.indb   17125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU=":{"__data__":"{\"id_\":\"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"69I900LdE/4dU9aXE/vwGGYAkfid5yzxq44Ecsra/fg=\",\"text\":\"\\r\\n172Chapter 9  Getting to Java: The JNI\\r\\nListing 9.13 Reference Queue: Native Companion and Its Lifecycle\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    // ...\\r\\n    static final Map<AtomicLong, Reference<?>> CLEANERS = new HashMap<>();\\r\\n    static { System.loadLibrary(\\\"acmeproximityjni\\\"); }\\r\\n    // ...\\r\\n    @NonNull\\r\\n    public static AcmeProximitySensor getSensor() {\\r\\n        synchronized (CLEANERS) {\\r\\n            final AtomicLong peerRef = new AtomicLong(open());\\r\\n            final AcmeProximitySensor sensor = new AcmeProximitySensor(peerRef);\\r\\n            CLEANERS.put(peerRef, new SensorCleaner(peerRef, sensor));\\r\\n            return sensor;\\r\\n        }\\r\\n    }\\r\\n    static void cleanup(AtomicLong peerRef) {\\r\\n        final long peer = peerRef.getAndSet(0);\\r\\n        if (peer == 0) { return; }\\r\\n        synchronized (CLEANERS) {\\r\\n            CLEANERS.remove(peerRef);\\r\\n            close(peer);\\r\\n        }\\r\\n    }\\r\\n    // ...\\r\\n    @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native void close(long handle);\\r\\n    @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native long open();\\r\\n    @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native int poll(long handle, int precision);\\r\\n}\\r\\nThe static method getSensor is the factory method for instances of the class \\r\\nAcmeProximitySensor. Client code will call this method instead of the class constructor to \\r\\ncreate new instances. The class constructor is private, ensuring that this is the only way to \\r\\ncreate new instances: All new instances come from this method.\\r\\n9780134096346_print.indb   17225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=":{"__data__":"{\"id_\":\"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"rYGVsNoUaraB/XL+nMNRiqnj4pyAyd5lYKrKYHyUupo=\",\"text\":\"\\r\\n173Using the Java Native Interface\\r\\nThe method does four things:\\r\\n1. It creates the native companion object and stashes the reference to it in an AtomicLong.\\r\\n2. It creates the Java instance, passing the peer reference. The Java object now has access to \\r\\nits native peer.\\r\\n3. It creates a SensorCleaner. This is the object that will be responsible for cleaning up the \\r\\nnative peer if the user fails to do so.\\r\\n4. It stores the SensorCleaner in a map.\\r\\nThe last step is important and yet easy to forget. Like any other Java object, the \\r\\nSensorCleaner is eligible for garbage collection as soon as there are no more references to \\r\\nit. Unless something, somewhere, remembers it, it will be garbage collected and will not be \\r\\naround to clean up after the AcmeProximitySensor instance with which it is associated. \\r\\nThe static method cleanup(AtomicLong) is the bottleneck at the end of the lifecycle of every \\r\\nAcmeProximitySensor instance. It simply undoes what the getSensor method did: It frees \\r\\nthe native companion object and removes the SensorCleaner from the map so that it can be \\r\\ngarbage collected. \\r\\nIt also ensures that the native close method will not be called more than once. The \\r\\n getAndSet in its first line ensures that the rest of the method will be executed no more than \\r\\nonce for a given native peer, no matter how often it is called. The method is idempotent.\\r\\nThese two methods are the bookends for the AcmeProximitySensor lifecycle. The \\r\\ngetSensor method is the only way to get one. All we have to do is make sure that the \\r\\ncleanup(AtomicLong) method is called at least once for every native companion.\\r\\nAs mentioned earlier, the best way to do this is explicitly. Listing 9.14 shows the imple-\\r\\nmentation of the AcmeProximitySensor and, in particular, its implementation of the \\r\\nAutoCloseable interface.\\r\\nListing 9.14 Reference Queue: Explicit Close\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    // ...\\r\\n    private final AtomicLong peerRef;\\r\\n    private AcmeProximitySensor(AtomicLong peerRef) { this.peerRef = peerRef; }\\r\\n    public int poll(int precision) throws IOException {\\r\\n        synchronized (CLEANERS) {\\r\\n            final long peer = peerRef.get();\\r\\n            if (peer == 0) { throw new IOException(\\\"Device not open\\\"); }\\r\\n            return poll(peer, precision);\\r\\n        }\\r\\n    }\\r\\n9780134096346_print.indb   17325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4=":{"__data__":"{\"id_\":\"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"yHM604Yd6SsJ4HCvrZuEauIGFUzPN/mCS/PCcwURNCM=\",\"text\":\"\\r\\n174Chapter 9  Getting to Java: The JNI\\r\\n    @Override\\r\\n    public void close() { cleanup(peerRef); }\\r\\n    // ...\\r\\n}\\r\\nThis code is similar to the equivalent code in Listing 9.9. The only significant difference, \\r\\nreally, is that it delegates the call to close, required by the AutoCloseable interface, to \\r\\ncleanup(AtomicLong). Well-behaved client code will fulfill the outstanding condition: at least \\r\\none call to cleanup(AtomicLong) via AcmeProximitySensor.close.\\r\\nWhat happens, though, when client code is not well behaved? Listing 9.15 shows the backstop.\\r\\nListing 9.15 Reference Queue: Service Task\\r\\npublic class AcmeProximitySensor implements Closeable {\\r\\n    private static final class SensorCleaner\\r\\n        extends PhantomReference<AcmeProximitySensor> {\\r\\n        private final AtomicLong peerRef;\\r\\n        SensorCleaner(AtomicLong peerRef, AcmeProximitySensor sensor) {\\r\\n            super(sensor, REF_QUEUE);\\r\\n            this.peerRef = peerRef;\\r\\n        }\\r\\n        void cleanup() { AcmeProximitySensor.cleanup(peerRef); }\\r\\n    }\\r\\n    static final ReferenceQueue<AcmeProximitySensor> REF_QUEUE\\r\\n        = new ReferenceQueue<>();\\r\\n    @NonNull\\r\\n    public static ScheduledTask getScheduledTask() {\\r\\n        return new ScheduledTask(AcmeProximitySensor::cleanup, 100);\\r\\n    }\\r\\n    private static void cleanup() {\\r\\n        Reference<? extends AcmeProximitySensor> ref;\\r\\n        while ((ref = REF_QUEUE.poll()) instanceof SensorCleaner) {\\r\\n              ((SensorCleaner) ref).cleanup();\\r\\n        }\\r\\n    }\\r\\n    // ...\\r\\n}\\r\\n9780134096346_print.indb   17425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=":{"__data__":"{\"id_\":\"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"3THZYfdzF4olOduWUCpKdauTg/kevZrIvrbpfTMdZZQ=\",\"text\":\"\\r\\n175Using the Java Native Interface\\r\\nThe two functions in Listing 9.15, getScheduledTask and cleanup(), manage the native \\r\\ncompanions objects left behind by ill-behaved clients. They also illustrate the biggest downside \\r\\nof using reference queues: scheduling cleanup.\\r\\nTypically, finalizers are run on a special thread, maintained by the runtime, whose sole purpose \\r\\nis running finalizers. The finalizer thread receives notification for objects that need finalization \\r\\nand schedules their finalizer methods.\\r\\nWhen using reference queues, however, scheduling object cleanup is not handled by the \\r\\nruntime. The application must poll the reference queue occasionally and schedule any work \\r\\nthat it finds there.\\r\\nThere are good and bad aspects of this requirement. The bad parts are probably obvious: An \\r\\napplication that uses reference queues must be able to schedule a job to service the reference \\r\\nqueue, and it must be able to schedule any work that the job finds on a robust execution \\r\\nservice. If the execution service fails for any reason, managed objects will no longer be freed \\r\\ncorrectly. That is likely to be disastrous.\\r\\nNote, by the way, that reference queues do not change the indeterminate scheduling of object \\r\\ncleanup. Objects are only enqueued for cleanup when the garbage collector needs space and \\r\\nonly processed when the application program gets around to scheduling a cleanup task. \\r\\nThe good aspects may be a little less apparent. Consider: Finalizers are problematic because it is \\r\\npossible to overwhelm the finalizer thread. As noted previously, freeing hundreds of finalizable \\r\\nobjects quickly might very well add those objects to the finalizer’s queue faster than it can take \\r\\nthem off for processing. Because the finalizer’s queue is difficult to access programmatically, \\r\\nlittle opportunity exists for an application to gauge whether or not its doom is impending.\\r\\nUsing a reference queue, however, the application controls the cleanup mechanism; it can scale \\r\\nthe object recovery process to the need. A multi-threaded, high-priority execution service might \\r\\nbe able to stay ahead of object allocation.\\r\\nBetter yet, though, suppose that the same thread processes both the application-specific tasks \\r\\nthat cause memory allocation and the reference queue that cleans them up. If the thread is \\r\\nbusy managing the reference queue, it cannot allocate new objects. Allocation is naturally \\r\\nlimited to creating no more than it can free. Governing the object allocation rate in this way \\r\\nmakes for extremely robust apps.\\r\\nListing 9.15 posits a scheduling mechanism elsewhere in the system that registers new periodic \\r\\ntasks by calling a class’s getScheduledTask method. The method returns the task to be run \\r\\nand the interval (in milliseconds) between runs. Surely, many other ways exist for accomplish-\\r\\ning something similar: This particular implementation simply illustrates that the method \\r\\ncleanup() must be called periodically.\\r\\nThe cleanup() method polls the reference queue and calls the cleanup(AtomicLong) for each \\r\\ninstance of the SensorCleaner object (whose associated AcmeProximitySensor has now been \\r\\ngarbage collected) that it finds there. Recall from Listing 9.13 that each AcmeProximitySensor \\r\\nhad a SensorCleaner associated with it in the factory method getSensor. This is the \\r\\n9780134096346_print.indb   17525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=":{"__data__":"{\"id_\":\"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"wP7jAMhyED3zI+7CxPhl7j2sT4gzRePGpHFQ9RJTgkw=\",\"text\":\"\\r\\n176Chapter 9  Getting to Java: The JNI\\r\\nguarantee that, even if client code fails to close the sensor object, the cleanup(AtomicLong) \\r\\nwill be called to free the native companion object.\\r\\nThere are a couple subtleties to be aware of. First, note that it is important that there are \\r\\nseveral references to the AtomicLong that contain the handle to the native peer. If the \\r\\nAcmeProximitySensor held the only reference, then when it became unreachable, the \\r\\nAtomicLong might be freed even before the sensor object itself. The SensorCleaner cannot \\r\\ndepend on being able to find the native object unless it itself keeps a reference.\\r\\nSecond, notice that when a well-behaved client explicitly closes a sensor object, its \\r\\nSensorCleaner is removed from the map! That means the cleaner object is now unreachable \\r\\nand that the AcmeProximitySensor object holds the only reachable reference to the peer \\r\\nhandle. It is entirely possible that the cleaner will be garbage collected first; thus, it will never \\r\\nbe queued or scheduled. That’s perfectly okay because there’s nothing left for it to do.\\r\\nBecause the AtomicLong that is the reference to the native peer is in the map, a \\r\\nSensorCleaner is guaranteed that it will have access to it when the cleaner runs and that \\r\\neither it is the first attempt to free the native companion or that it will not try to do so.\\r\\nJNI: Some Hints\\r\\nAs discussed earlier, entire books exist on the subject of writing JNI code. A comprehensive \\r\\ndiscussion is well outside the scope of this one. However, in our experience, some practices can \\r\\nmake your code more robust and easier to maintain. Here are a few of them.\\r\\nDon’t Break the Rules\\r\\nIt is entirely possible to break Java’s rules using native code. For instance, using native code, it \\r\\nis relatively easy to change the content of String or, indeed, any immutable object. Although \\r\\nJNI methods make some attempt to enforce visibility (public versus private) and mutability \\r\\n(final) constraints, sidestepping nearly any of them is quite possible. Java developers are used \\r\\nto being able to make assumptions about the environment in which their code runs. Changing \\r\\nthe rules is asking for trouble.\\r\\nClearly and Without Exception, Document Native References to Java Code\\r\\nAlways and without exception, document any native use of Java code. If a native method refers \\r\\nto a class member by name, document that reference in a comment on the field. If native code \\r\\ncalls a Java method, be certain that the Java method has a comment that indicates the fact. The \\r\\nsame goes for native code that creates new instances of some Java class or other. As a related \\r\\nsuggestion, be sure that any code that looks up Java identifiers—fields, classes, or methods—\\r\\nfails immediately and clearly if it cannot find its target. Failure to do these things will lead to \\r\\nbizarre crashes when some well-meaning developer does some small refactor.\\r\\n9780134096346_print.indb   17625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=":{"__data__":"{\"id_\":\"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Wf4WxFbwC+Z1jpwjVQp1abFfM1U3wtzoxVthO/DL52U=\",\"text\":\"\\r\\n177Using the Java Native Interface\\r\\nPass Simple Types to Native Code\\r\\nThe rest of the hints in this chapter have a single theme: When possible, don’t put the burden \\r\\nof dealing with Java constructs on native code. Whenever possible, Java code should deal with \\r\\nJava data structures and should communicate with native code using only primitive types, \\r\\nStrings and arrays of those types. This may mean violating other general rules. For instance, \\r\\npassing the information in a complex data structure to its native companion as primitive types \\r\\nmay mean that the native method has an uncomfortably large number of arguments. That is \\r\\nthe lesser evil. Somewhere, code will have to extract the information. Keep that code on the \\r\\nJava side.\\r\\nMake Native Methods Static, When Convenient\\r\\nThis tip is more a corollary to the previous hint than a new suggestion. Native instance \\r\\nmethods are passed references to the calling Java instance. Cases surely exist in which that may \\r\\nbe useful. In general, though, avoiding it is best. Pass the data that the native method requires \\r\\nand pass it to a static method instead of passing the whole object to an instance method.\\r\\nBeware the Garbage Collector\\r\\nThis is probably the most important and most easily forgotten of the hints. Remember that \\r\\nas your native code runs, the garbage collector daemon is also running. It may move data to \\r\\nwhich you have a native pointer. Worse yet, it might deallocate it.\\r\\nTo keep the garbage collector from freeing an object, the object must appear to the collec-\\r\\ntor as “reachable”:  There must be some way that running Java code can obtain a reference \\r\\nto it. Consider, however, a Java object that is created by native code. There are no references \\r\\nanywhere in the Java environment to this new object. Because there are no references, it is \\r\\neligible for immediate garbage collection! The JNI provides two solutions to this problem: the \\r\\nLocalRef and the GlobalRef.\\r\\nA LocalRef behaves as if a reference to an object had been put into the call stack of the nearest \\r\\n(in the stack) calling Java method. It creates a reference to the object that is visible to the \\r\\ngarbage collector, making it reachable and thus ineligible for deallocation. \\r\\nMany JNI methods that return references to Java objects also create a LocalRef to the returned \\r\\nobject (be sure to verify this for specific calls). In general, if there is the potential for an object \\r\\nto disappear while native code is using it, a JNI call that returns a reference will create a \\r\\nLocalRef for it. Parameters to JNI method calls have LocalRefs as well. There is no danger \\r\\nthat an object passed to a native method through the JNI will suddenly vanish.\\r\\nLocalRefs are managed. They are automatically deleted (popped off the stack) when a native \\r\\nmethod returns to its Java language caller. Unfortunately, however, implementations of the \\r\\nJNI support only a limited number of LocalRefs: typically a few hundred but perhaps only a \\r\\nhandful. As a rule of thumb, immediately deleting a LocalRef when it is no longer needed is \\r\\nbest practice.\\r\\nIn fact, several circumstances exist under which deleting them explicitly is absolutely essential. \\r\\nConsider the example in Listing 9.16: native code that creates new objects of some kind and \\r\\nthen adds them to a Java array.\\r\\n9780134096346_print.indb   17725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=":{"__data__":"{\"id_\":\"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"AuPAxvGEB3wvVNc/3ZWpzKYz82TBgwe3bUqK/GVLkzo=\",\"text\":\"\\r\\n178Chapter 9  Getting to Java: The JNI\\r\\nListing 9.16 Filling an Array\\r\\njobjectArray ds = env->NewObjectArray(arraySize, klass_MyObject, nullptr);\\r\\nfor (int i = 0; i < arraySize; i++) {\\r\\n    jobject d = createNewObject(env, array[i]);\\r\\n    env->SetObjectArrayElement(ds, i, d);\\r\\n    env->DeleteLocalRef(d);\\r\\n }\\r\\nThe JNI creates a LocalRef for the array created in the first line of the code. It also creates \\r\\na LocalRef for each new object to be inserted into the array. After a new object is inserted \\r\\ninto the array, it is reachable via the array. The individual LocalRefs for the new objects can \\r\\n(and should) be deleted. If the array is large, it is entirely possible that failing to delete the \\r\\nLocalRefs will exhaust the local ref pool.\\r\\nAnother, somewhat trickier condition is one in which the calling code never returns to a Java \\r\\nmethod. This can happen when a native thread, for instance, calls into Java code. Imagine, for \\r\\nexample, a native thread—perhaps a thread servicing network connections—that uses a Java \\r\\nlogger. The native code might create a Java String, log it, and then go back about its business. \\r\\nThe LocalRef to the String will never be released because the calling code never returns to a \\r\\nJava caller.\\r\\nThe second kind of reference in the JNI toolbox is a GlobalRef. GlobalRefs are the way that \\r\\nnative code holds a reference to a Java object across call boundaries. A GlobalRef behaves as if \\r\\na reference to the object to which it refers had been added to a permanent static array. The ref \\r\\nprevents the garbage collector from recovering the referenced object’s memory until the refer-\\r\\nence is deleted explicitly. Native developers, who are used to explicit memory management, \\r\\nwill find this completely normal.\\r\\nA common example of the need of a GlobalRef is native creation of a Java object, as shown in \\r\\nListing 9.17.\\r\\nListing 9.17 Native Object Creation\\r\\njclass klass_MyObject = env->FindClass(“my/project/MyObject”);\\r\\nif (!localClass)\\r\\n    return nullptr;\\r\\nmethod_MyObject_ctor = env->GetMethodID(\\r\\n    klass_MyObject,\\r\\n    “<init>”,\\r\\n    “(I)V”);\\r\\nif (!method_MyObject_ctor)\\r\\n    return nullptr;\\r\\nreturn env->NewObject(klass_MyObject, method_MyObject_ctor, (jint) param1);\\r\\n9780134096346_print.indb   17825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=":{"__data__":"{\"id_\":\"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"ewIxpuQyFc0G+I5Tmc7I/ius/UFk70whLserWx7oSBw=\",\"text\":\"\\r\\n179Using the Java Native Interface\\r\\nIf this call is used frequently, optimizing it might be possible. Both klass_MyObject and \\r\\nmethod_MyObject_ctor are references to Java objects: the class named “MyObject” and a \\r\\nconstructor in that class with a single integer parameter, respectively. Using JNI methods to \\r\\nlook up those references for every call to this code will take a substantial proportion of its \\r\\nexecution time. To optimize it, an initialization method might be to look up the two references \\r\\nonce and then hold them. Such an optimization requires a GlobalRef for each.\\r\\nUse GlobalRefs with care. Although the limit on the number available (typically 65535) is \\r\\nusually much larger than the limit on the number of LocalRefs, they are memory leaks. Treat \\r\\nthem as you would any other unmanaged memory. \\r\\nNote that neither a LocalRef nor GlobalRef affects the garbage collector’s ability to move an \\r\\nobject in memory. Although such movement is completely invisible from Java code, a native \\r\\nreference can become a pointer to garbage, quite literally, in the middle of a line of code. \\r\\nThis is not a tolerable situation and JNI calls have two strategies for handling it: copying and \\r\\npinning. When using JNI methods that allow access the contents of a Java object—as with \\r\\nmethods that created implicit LocalRefs—be sure to verify which of these two strategies a \\r\\nspecific call uses.\\r\\nCopying is just what it sounds like: An atomic JNI call copies the contents of a Java object into \\r\\nnative-managed memory. The native code is free to do anything it likes with the copy, includ-\\r\\ning, at some point, atomically copying it back into the Java object.\\r\\nWhen an object is pinned, on the other hand, the garbage collector is not allowed to move \\r\\nit. Native code can access the contents of the pinned object directly, perhaps without the \\r\\noverhead of the copy. Pinning an object, however, means that memory in the Java heap is no \\r\\nlonger under the control of the garbage collector. This can easily lead to fragmentation and \\r\\npremature out-of-memory errors. Best practice is to pin objects only if necessary, and then for \\r\\nas short a time as possible.\\r\\nUse Weak Refs When Native Code Must Hold a Reference to a Java Object\\r\\nA significant portion of this chapter is devoted to the discussion of how a Java object can hold \\r\\na reference to a native companion object. What happens, though, when a native object needs \\r\\nto be able to find a particular Java object?\\r\\nConsider, for instance, a native network management library. Suppose that client code creates a \\r\\nnew Java Connection object for each of several network connections. The Connection object \\r\\nin turn creates a native companion object that actually handles socket connections. Finally, \\r\\nsuppose that the native object calls back into Java code for each of the various events in the \\r\\nconnection lifecycle.\\r\\nClearly, the callbacks from the native companion object must be calls to the specific Java \\r\\nConnection instance that created it and not to any other instance. The native code must, \\r\\ntherefore, hold a reference to its Java companion.\\r\\n9780134096346_print.indb   17925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=":{"__data__":"{\"id_\":\"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1atcUvo6UpuCbEIeL5xnGB515ltXycr7r7HBTxU5OGY=\",\"text\":\"\\r\\n180Chapter 9  Getting to Java: The JNI\\r\\nThis is, certainly, possible. As we’ve just seen, the native companion object might hold a \\r\\nGlobalRef to its Java companion: the Java code now has a reference to the native object and \\r\\nthe native object has a reference to the Java object.\\r\\nThe problem with this, of course, is that a GlobalRef to the Java object will make it ineligible \\r\\nfor garbage collection. Unless there is some explicit means of freeing it (and that explicit mech-\\r\\nanism is carefully used for every instance), its referent will never be freed, will never be finalized \\r\\n(or added to a reference queue), and will never free its native companion. The belt still works \\r\\nbut the suspenders are gone. Unless a clear architectural reason exists for doing the aforemen-\\r\\ntioned, a good practice is to leave the management of native objects to their Java companions, \\r\\nnot vice versa.\\r\\nThere are two ways around this issue. The first is a special global reference, a WeakGlobalRef. \\r\\nA WeakGlobalRef is similar to a GlobalRef, except that (like a Java WeakReference) it does \\r\\nnot prevent the garbage collection of the Java object to which it refers. It is different from a raw \\r\\nnative reference in that it will never point at garbage: It will always either point at the intended \\r\\nobject or be null.\\r\\nIt is important to note that the referent in a WeakGlobalRef can disappear at any time, even \\r\\nbetween two native instructions, causing intermittent failures. Listing 9.18 illustrates such a \\r\\nscenario: a snippet in which a native instance stores a reference to its Java companion.\\r\\nListing 9.18 Incorrect Use of a WeakRef: Don’t Do This!\\r\\nmCompanion = reinterpret_cast<jobject>(env->NewWeakGlobalRef(javaObj));\\r\\nif (env->isSameObject(mCompanion, NULL) \\r\\n    return;\\r\\njclass klass = env->getObjectClass(mCompanion) // mCompanion may be NULL!\\r\\n// ...\\r\\nFortunately, a WeakGlobalRef can be used as the argument to LocalRef (or a GlobalRef). \\r\\nLocal and global refs protect their referents from garbage collection. Listing 9.19 illustrates a \\r\\ncorrected version of Listing 9.18.\\r\\nListing 9.19 Obtain a LocalRef from a WeakGlobalRef\\r\\nmCompanion = reinterpret_cast<jobject>(env->NewWeakGlobalRef(javaObj));\\r\\ncompanion = reinterpret_cast<jobject>(env->NewLocalRef(mCompanion));\\r\\nif (env->isSameObject(companion, NULL) \\r\\n    return;\\r\\njclass klass = env->getObjectClass(companion) // safe!\\r\\n// ...\\r\\nThere is one other way of managing native handles in Java objects. In this architecture, refer-\\r\\nences to Java objects are never passed to native code at all. Instead, they are kept as weak refer-\\r\\nences in a map at the Java/native boundary. Think of it as a “hat check”: Java hands native \\r\\n9780134096346_print.indb   18025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss=":{"__data__":"{\"id_\":\"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"dYxJvja5mzM/J1Xi/W0l3/N0G60n88DWAZdhYb/elr0=\",\"text\":\"\\r\\n181Using the Java Native Interface\\r\\ncode a token, which can be redeemed for a Java object. The token, however, is completely \\r\\nopaque to the native code. Listing 9.20 shows a sample implementation.\\r\\nListing 9.20 Native Reference “Hat Check”\\r\\npublic class NativeRef<T> {\\r\\n    @NonNull\\r\\n    @GuardedBy(\\\"this\\\")\\r\\n    private final Random rnd = new Random();\\r\\n    @NonNull\\r\\n    @GuardedBy(\\\"this\\\")\\r\\n    private final Map<Integer, WeakReference<T>> refs = new HashMap<>();\\r\\n    public synchronized int bind(@NonNull T obj) {\\r\\n        int ref;\\r\\n        do { ref = rnd.nextInt(Integer.MAX_VALUE); }\\r\\n        while (refs.containsKey(ref));\\r\\n        refs.put(ref, new WeakReference<>(obj));\\r\\n        return ref;\\r\\n    }\\r\\n    public synchronized void unbind(int key) { refs.remove(key); }\\r\\n    @Nullable\\r\\n    public synchronized T getObjFromContext(long lref) {\\r\\n        if ((lref < 0) || (lref > Integer.MAX_VALUE)) {\\r\\n            throw new IllegalArgumentException(\\\"Ref out of bounds: \\\" + lref);\\r\\n        }\\r\\n        final Integer key = (int) lref;\\r\\n        final WeakReference<T> ref = refs.get(key);\\r\\n        if (ref == null) { return null; }\\r\\n        final T obj = ref.get();\\r\\n        if (obj == null) { refs.remove(key); }\\r\\n        return obj;\\r\\n    }\\r\\n}\\r\\nThis architecture has many of the same features that made WeakGlobalReferences attrac-\\r\\ntive. Because the reference map holds weak references, native objects cannot force their Java \\r\\ncompanions to stay in memory. Perhaps an advantage, this architecture does not use the size-\\r\\nlimited LocalRef pool.\\r\\n9780134096346_print.indb   18125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc=":{"__data__":"{\"id_\":\"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"4sGqwp98kn58/t6sWwEqx0XmMEDO71GpSUhzuaUKB2c=\",\"text\":\"\\r\\n182Chapter 9  Getting to Java: The JNI\\r\\nNote that the implementation uses only positive integers for tokens. For most applications, this \\r\\nprovides plenty of space and avoids problems that arise from sign extension.\\r\\nSummary\\r\\nThis chapter, at last, brings us to Android’s implementation language, Java. In it, we meet and \\r\\nuse Java’s JNI, the API through which Java language code invokes native code.\\r\\nThe chapter uses the Proximity Sensor project introduced in previous chapters to show three \\r\\ndifferent implementations of a long-running daemon that logs proximity:\\r\\n1. A naïve native implementation\\r\\n2. A native implementation using the HAL (introduced in Chapter 7)\\r\\n3. A Java app, also using the HAL\\r\\nThe third implementation, the Java application, provides the basis for a discussion of one of \\r\\nthe key issues for code at the Java/native interface: lifecycle management and how to handle \\r\\nunmanaged native memory in Java’s garbage-collected environment.\\r\\nWe recommend a “belt and suspenders” approach: Java objects with native companions should \\r\\nimplement Java’s Autoclosable interface. This makes it clear that client code should explicitly \\r\\ninform the object that it is ready for disposal.\\r\\nIn addition, we recommend the use of a finalizer or reference queue to guarantee the proper \\r\\nhandling of objects that evade explicit release.\\r\\n9780134096346_print.indb   18225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8=":{"__data__":"{\"id_\":\"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"MHYgzzESCEl6dGt0WwtF04qGE0x39WRApUwzmiKYkAw=\",\"text\":\"\\r\\n10\\r\\nProject Treble:  \\r\\nBinderized HAL\\r\\nThe Android system and its use of the HAL received a major overhaul starting with Android 8.0. \\r\\nInternally, this was called Project Treble and its goal was not only to provide a standard abstrac-\\r\\ntion to the underlying hardware, but to do it in a way that allowed vendors to upgrade the core \\r\\nOS without requiring a rebuild of HAL libraries and the system image. This means Google can \\r\\nroll out OS updates without requiring modifications to the vendor proprietary components. \\r\\nBinderized HALs must be used for Android 8.0 and newer. This new, extremely flexible, and \\r\\nforward-looking approach to the HAL requires some knowledge of Android’s Binder subsystem.\\r\\nThe platform vendor–supplied HAL is no longer a set of shared libraries following a specific \\r\\nnaming convention and binary API. Instead, the vendor exposes a set of binder interfaces to \\r\\nthe system and one or more backing services that host the HAL implementation. The HAL \\r\\ninterfaces are defined using HIDL (pronounced “hide-l”), a language similar to the AIDL, used \\r\\nto define binder service interfaces.\\r\\nThis chapter explores the architecture of the binderized HAL and examines how Android uses \\r\\nit. We’ll dig into an existing binderized HAL definition from the platform and explain how the \\r\\npieces fit together.\\r\\nNote\\r\\nUnless otherwise noted, the remainder of this chapter uses HIDL when referring to the \\r\\n binderized HAL architecture, not just the interface definition language.\\r\\nHIDL Architecture\\r\\nThe HIDL-based system is built upon the same concepts as Android’s system services model. \\r\\nEach HAL implementation is backed by a service, running in user-space, that exposes a HIDL-\\r\\ndefined interface. The HIDL services, usually native processes, are started at system startup and \\r\\nregister with the system. Each HIDL interface is versioned so the system understands what is \\r\\navailable at runtime. This allows the platform to support one or more interface versions for a \\r\\n9780134096346_print.indb   18325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I=":{"__data__":"{\"id_\":\"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"z7yfm/K8nesjepl6/Xa+YxCfXT/QhuIT6tupHPYyGvQ=\",\"text\":\"\\r\\n184Chapter 10  Project Treble: Binderized HAL \\r\\nspecific hardware component, which is important for devices being upgraded to new versions \\r\\nof the OS. \\r\\nThe key feature of this architecture is that the vendor-provided HIDL components are sepa-\\r\\nrated from the core Android system, allowing the core OS to be updated without requiring the \\r\\nvendor to provide new custom libraries. The end result is a robust system that allows vendors \\r\\nto adopt new releases of Android for existing hardware with minimal friction.\\r\\nJust like the Android system service architecture, the HIDL framework includes a hardware \\r\\nservice manager, appropriately named hwservicemanager. This system daemon acts as the \\r\\nregistrar of all HIDL-based HALs in the system. It can be thought of as the name server for \\r\\nHIDL-defined interfaces in the system. Each HIDL component initializes and registers its \\r\\nBinder-based interface(s) with hwservicemanager, making them available to other compo-\\r\\nnents in the system. Other processes in the system find the HIDL binders by making requests to \\r\\nhwservicemanager for a specific HIDL. Figure 10.1 shows the overall architecture.\\r\\nhwservicemanagerandroid.hardware.bluetooth@1.0-serviceandroid.hardware.bluetooth@\\r\\n1.0.so\\r\\nUser space\\r\\nKernel space\\r\\nJNI\\r\\nJava/Kotlin Code\\r\\nBluetooth DriverBinder Driver\\r\\n3\\r\\n4\\r\\n1\\r\\n2\\r\\n5\\r\\nFigure 10.1 HIDL High-Level Architecture\\r\\nIn Figure 10.1, the numbered components are defined as follows:\\r\\n(1) hwservicemanager, the central registrar of HIDL services in the system\\r\\n(2) The Linux kernel with the Android Binder IPC driver and other hardware drivers within it\\r\\n(3) The HIDL services in the system, providing the HAL implementation(s) for their \\r\\nrespective hardware components\\r\\n9780134096346_print.indb   18425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=":{"__data__":"{\"id_\":\"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"dIQc2iIWpNXj9PWnTcssheHjlUuPAoD4wNZFUa62qpg=\",\"text\":\"\\r\\n185HIDL Architecture\\r\\n(4) The client application process that utilizes the Binder-exposed HIDL services\\r\\n(5) The binder that connects the client and backing HIDL service processes\\r\\nAlthough Android 8.0 and newer requires the use of HIDL, a small handful of exceptions exist: \\r\\nsome HALs are provided in what is called “passthrough” mode or are specialized same-process \\r\\nHALs (SP-HALs). The passthrough HALs are effectively HIDL wrappers around legacy or conven-\\r\\ntional HAL libraries that allow those libraries to be used in the same process. Other SP-HALs \\r\\nmay not even expose HIDL-defined interfaces.\\r\\nNote\\r\\nGoogle strictly controls which HALs are SP-HALs, and there are no exceptions for new devices \\r\\nrolling out Android 8.0 or newer. This includes vendor extension HALs. Devices that are upgrades \\r\\nto Android 8.0 are given some leniency with vendor extensions. Otherwise, all other Android-\\r\\ndefined binderized HALs must be binderized for Android 8 or newer running on the platform.\\r\\nYou can find more details about the HIDL architecture at https://source.android.com/devices/\\r\\narchitecture/hidl.\\r\\nhwservicemanager\\r\\nAs previously stated, hwservicemanager is a central component of the HIDL architecture. \\r\\nSimilar to the system services Binder subsystem’s registrar, servicemanager, this compo-\\r\\nnent keeps a registry of active HIDL components in the system by HIDL interface, version, \\r\\nan optional name, and the backing binder interface/object exposed by the component. This \\r\\nbinder object can then be found and requested by clients for making IPC calls into the HIDL \\r\\ncomponent.\\r\\nhwservicemanager leverages SE policies and the SE Linux kernel to ensure only components in \\r\\nthe system that are assigned the proper SE context can register as a HIDL-defined HAL or ask to \\r\\nuse one.\\r\\nHIDL Services\\r\\nHIDL services expose a binder to the system, which implements a HIDL-defined interface. This \\r\\nacts as the glue between the HIDL-defined contract and the hardware it is intended to control.\\r\\nNote\\r\\n“Hardware” in this context may or may not be actual underlying hardware. The interface being \\r\\nexposed may have its implementation entirely in software. For example, it may be possible to \\r\\nhave a coarse-level location device using nothing more than geolocation information retrieved \\r\\nfrom a public Internet server.\\r\\n9780134096346_print.indb   18525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=":{"__data__":"{\"id_\":\"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"/oZYW50CoAuRohiVjpmIFzDQXUPmg608XmZcxYcz2Lk=\",\"text\":\"\\r\\n186Chapter 10  Project Treble: Binderized HAL \\r\\nHIDL Client Applications\\r\\nAs has already been discussed with the traditional Android HAL, the processes using the HIDL-\\r\\nbased HAL are not typical Android applications. These are typically core system framework \\r\\ncomponents, native processes/daemons, or vendor-specific add-ons that support the specific \\r\\nhardware.\\r\\nHardware Interface Definition Language (HIDL)\\r\\nEach of the binderized HAL interfaces is defined using definition files written in HIDL, just \\r\\nas AIDL is used to define Binder-based service interfaces. HIDL syntax is somewhat differ-\\r\\nent, though, adapting the features available from the underlying Binder subsystem to make it \\r\\nextremely efficient. This is important for low-latency communication with hardware. \\r\\nHIDL is a mix of C/C++ and Java syntaxes, including support for Javadoc style comments and \\r\\nJava-like annotations. Like other Binder-based interfaces, HIDL interfaces are defined and imple-\\r\\nmented in a way that allows two separately compiled codebases to communicate with each other.\\r\\nHIDL definitions are stored in .hal files and are located in specific directories within the plat-\\r\\nform source tree. Each HIDL defines an interface as part of a module within a package and is \\r\\nversioned. This combination of namespace and strict versioning is required because the HIDL \\r\\npackage needs to remain compatible with both current and future software that may use the \\r\\ninterface. For example, at the time of this writing, the latest HIDL interface for utilizing a \\r\\nfingerprint reader is android.hardware.biometrics.fingerprint@2.1.\\r\\nGenerally speaking, HIDL package namespaces fall into one of two categories:\\r\\n ■android.hardware: The core HIDL packages defined by Android\\r\\n ■vendor.VENDOR.hardware: OEM/ODM-defined HIDL packages\\r\\nAndroid does define some additional package namespaces for other internal interfaces, but \\r\\nthese are the two primary namespaces when dealing with hardware-related features. In the \\r\\nfingerprint HIDL shown in the preceding paragraph, the HIDL package is part of the android.\\r\\nhardware package, the biometrics module, and the fingerprint submodule. It is version 2.1 \\r\\nof the interface. The hierarchical nature of the package naming is also relevant when building \\r\\nthe HIDL, as we will see in Chapter 11 when building a custom HIDL for Acme.\\r\\nLike other source file types, HIDL files can import other interfaces as well as their types. \\r\\nInterfaces define one or more methods exposed by the HAL. Recall that HIDL is Binder-based, \\r\\nmeaning that the client and backing HIDL service will almost always be in two separate \\r\\nprocesses. Thus, each HIDL method call is an interprocess communication (IPC) call, which \\r\\ninvolves transferring data and control between the processes. By default, methods are synchro-\\r\\nnous: The caller will block until the IPC call returns. For efficiency and clarity, data is always \\r\\npassed to the called method and is not copied back. This is the equivalent of the in keyword \\r\\nfor arguments in AIDL-defined interfaces. In other words, any input arguments to a HIDL API \\r\\ncall are passed by value.\\r\\n9780134096346_print.indb   18625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=":{"__data__":"{\"id_\":\"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"x5F/3FFfnDONiqp4s9pC0j8dKLqBvGIwESdEzyjo8vo=\",\"text\":\"\\r\\n187Hardware Interface Definition Language (HIDL)\\r\\nYou can find the HIDL grammar definition on the AOSP source site: https://source.android.com/ \\r\\ndevices/architecture/hidl#grammar.\\r\\nRather than drill down into every aspect of the HIDL language definition, walking through an \\r\\nexample will illustrate the basics. For this example, let’s look at the sensors HIDL definition, \\r\\nandroid.hardware.sensors@2.0. You can find the HAL in the source tree at hardware/\\r\\ninterfaces/sensors/2.0. There are several files in this directory, as shown in Listing 10.1.\\r\\nListing 10.1 Sensors 2.0 HIDL Files\\r\\n$ ls -l hardware/interfaces/sensors/2.0\\r\\ntotal 56\\r\\n-rw-r--r--  1 aosp  staff    404 Oct 13 09:31 Android.bp\\r\\n-rw-r--r--  1 aosp  staff  12946 Oct 13 09:31 ISensors.hal\\r\\n-rw-r--r--  1 aosp  staff   1778 Oct 13 09:31 ISensorsCallback.hal\\r\\ndrwxr-xr-x  2 aosp  staff    374 Oct 13 09:31 default\\r\\n-rw-r--r--  1 aosp  staff   1596 Oct 13 09:31 types.hal\\r\\ndrwxr-xr-x  3 aosp  staff    102 Oct 13 09:31 vts\\r\\n$\\r\\n ■Android.bp: This is the Android build blueprint file.\\r\\n ■ISensors.hal: This is the primary HIDL interface definition for the sensors binderized HAL.\\r\\n ■ISensorsCallback.hal: This is an additional HIDL-defined interface, provided by clients to the sensors binderized HAL and will be called when data is available.\\r\\n ■default: This subdirectory contains a default implementation of the binderized HIDL service.\\r\\n ■types.hal: This file is used to define any data structures that may be needed by the HIDL-defined interface. Unlike AIDL, there is no mechanism to declare a structure/object \\r\\n“parcelable” so it may be used across the binder interface. Instead, HIDL requires the \\r\\ntypes to be declared in a .hal file for use by the HIDL interface.\\r\\nThe complete sensors 2.0 interface illustrates the HIDL syntax and capabilities well. Let’s walk \\r\\nthrough the ISensors.hal in pieces, starting with Listing 10.2.\\r\\nListing 10.2 Sensors 2.0 Interface Definition, Part 1\\r\\npackage android.hardware.sensors@2.0;\\r\\nimport @1.0::Event;\\r\\nimport @1.0::OperationMode;\\r\\nimport @1.0::RateLevel;\\r\\nimport @1.0::Result;\\r\\nimport @1.0::SensorInfo;\\r\\nimport @1.0::SharedMemInfo;\\r\\nimport @2.0::ISensorsCallback;\\r\\n9780134096346_print.indb   18725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=":{"__data__":"{\"id_\":\"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"BslqBbHdyvAVsPwGTH2qJm74mQN4Rb04rjo7gdUydZM=\",\"text\":\"\\r\\n188Chapter 10  Project Treble: Binderized HAL \\r\\nThe start of ISensors.hal, as shown in Listing 10.2, will look somewhat familiar to Java devel-\\r\\nopers. Each HIDL-defined interface is defined as a package and is versioned using the @major.\\r\\nminor syntax. HIDL interfaces are defined to be part of packages that follow a hierarchical \\r\\nnamespace like in Java or C++. Android defines several internal packages for HAL and frame-\\r\\nwork interfaces, as shown in Table 10.1.\\r\\nTable 10.1 Android-Defined HIDL Packages\\r\\nPackage PrefixLocationInterface Type\\r\\nandroid.hardware.*   hardware/interfacesHAL\\r\\nandroid.frameworks.* frameworks/hardware/interfaces/*Android Framework Related\\r\\nandroid.system.*     system/hardware/interfaces/*Android System Related\\r\\nandroid.hidl.*       system/libhidl/transport/*Core HIDL\\r\\nvendor.VENDOR. \\r\\ninterfaces.*\\r\\nvendor/VENDOR/interfaces/*Vendor (OEM/ODM) Defined\\r\\nAs illustrated, vendors (ODMs/OEMs) may define their own HIDL interfaces. These may be \\r\\ncompletely custom HIDL interfaces or extensions to existing interface definitions. All interfaces \\r\\nare always versioned using a major and minor number. \\r\\nAfter a HIDL interface is “published” (for example, in use on a platform) at a specific version, \\r\\nthe interface is locked down and may not change for that specific version. This is enforced at \\r\\nbuild time using a hash of the HIDL interface definition at a specific version. Once the interface \\r\\nhas been “published,” any attempt to change the definition without changing the version will \\r\\nresult in a build error.\\r\\nAfter the package declaration, note the series of import statements. Just like Java or Kotlin, \\r\\nthese statements are used to pull in other HIDL-defined interfaces or types. However, like AIDL \\r\\ndefinitions, types or other interfaces must be imported, even if they are defined in the same \\r\\npackage, as shown with @2.0::ISensosCallback here.\\r\\nThe type of import depends on the file in which the import statement is located. In this \\r\\nexample, the import statements are in the ISensors.hal file, making them interface-level \\r\\nimports. If, instead, these import statements were in the types.hal file for sensors, they would \\r\\nbe package-level imports. The difference between the two is subtle, but important to under-\\r\\nstand. An interface-level import is an import statement located within a specific interface .hal \\r\\nfile, making the import available to only that HIDL interface. On the other hand, a package-\\r\\nlevel import is an import statement located in a types.hal file for a given package/module/\\r\\nsubmodule hierarchy. The net effect of this type of import is that the imported type(s) are avail-\\r\\nable to all interfaces within the package/module/submodule.\\r\\nNote how each of the import statements in Listing 10.2 starts with the version declaration. \\r\\nThis means the imports are types or interfaces that are defined within the current package, \\r\\nandroid.hardware.sensors. The sensors HIDL clearly shows how one interface version can \\r\\n9780134096346_print.indb   18825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA=":{"__data__":"{\"id_\":\"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"IPRzlLepi8+TvlOIM+2vsV+4ynyUMGh5qwL8f54macw=\",\"text\":\"\\r\\n189Hardware Interface Definition Language (HIDL)\\r\\nbuild upon a previous version. In this case, the sensors HIDL version 2.0 builds upon the 1.0 \\r\\ndefinition by leveraging types/interfaces defined in both. Three other forms of import state-\\r\\nments can also be used, all of which start with the fully qualified package name (FQPN) of the \\r\\nimport, before the version specifier, as shown in Listing 10.3.\\r\\nListing 10.3 Additional HIDL Import Syntax\\r\\nimport FQPN@MAJOR.MINOR\\r\\nimport FQPN@MAJOR.MINOR::INTERFACE\\r\\nimport FQPN@MAJOR.MINOR::types\\r\\nThe first form would include all interfaces and types from the specified package version. The \\r\\nsecond form imports a specific interface and all types from a package. The third form is used to \\r\\nimport just the types from another package, but none of the interfaces.\\r\\nContinuing further into the sensors HAL example, the interface declaration comes next, a \\r\\nportion of which is shown in Listing 10.4.\\r\\nListing 10.4 Sensors 2.0 Interface Definition, Part 2\\r\\ninterface ISensors {\\r\\n    /**\\r\\n     * Enumerate all available (static) sensors.\\r\\n     *\\r\\n     * The SensorInfo for each sensor returned by getSensorsList must be stable\\r\\n     * from the initial call to getSensorsList after a device boot until the\\r\\n     * entire system restarts. The SensorInfo for each sensor must not change\\r\\n     * between subsequent calls to getSensorsList, even across restarts of the\\r\\n     * HAL and its dependencies (for example, the sensor handle for a given\\r\\n     * sensor must not change across HAL restarts).\\r\\n     */\\r\\n    getSensorsList() generates (vec<SensorInfo> list);\\r\\n    /**\\r\\n     * Place the module in a specific mode. The following modes are defined\\r\\n     *\\r\\n     *  SENSOR_HAL_NORMAL_MODE - Normal operation. Default state of the module.\\r\\n     *\\r\\n     *  SENSOR_HAL_DATA_INJECTION_MODE - Loopback mode.\\r\\n     *    Data is injected for the supported sensors by the sensor service in\\r\\n     *    this mode.\\r\\n     *\\r\\n     * @return OK on success\\r\\n     *     BAD_VALUE if requested mode is not supported\\r\\n     *     PERMISSION_DENIED if operation is not allowed\\r\\n     */\\r\\n9780134096346_print.indb   18925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=":{"__data__":"{\"id_\":\"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"TQSulElvWaekzYp1rLt/9B6r6WYiwcjUbNKksj2QyZ0=\",\"text\":\"\\r\\n190Chapter 10  Project Treble: Binderized HAL \\r\\n    setOperationMode(OperationMode mode) generates (Result result);\\r\\n    ...\\r\\n    @entry\\r\\n    @callflow(next = {\\\"getSensorsList\\\"})\\r\\n    initialize(fmq_sync<Event> eventQueueDescriptor,\\r\\n               fmq_sync<uint32_t> wakeLockDescriptor,\\r\\n               ISensorsCallback sensorsCallback)\\r\\n        generates\\r\\n              (Result result);\\r\\n    ...\\r\\n    registerDirectChannel(SharedMemInfo mem)\\r\\n               generates (Result,\\r\\n                          int32_t channelHandle);\\r\\nThe code in Listing 10.4 defines the interface android.hardware.sensors@2.0::ISensors \\r\\nand the methods it exposes.\\r\\nEach HIDL file contains a single interface definition and may also contain types the interface \\r\\nrequires. Interfaces may also inherit from other interfaces using the extends keyword, similar \\r\\nto the way Java interfaces are inherited. However, just like Java, HIDL does not support multiple \\r\\ninheritance. Interfaces that do not explicitly extend another interface implicitly extend from \\r\\nandroid.hdl.base@1.0::IBase.\\r\\nThe methods shown in Listing 10.4 illustrate standard types, custom types, and return  \\r\\nvalues. Methods may return nothing, a primitive, a custom type, or multiple values. All the \\r\\ninterface methods shown in Listing 10.4 show return values that include custom types. The \\r\\nregisterDirectChannel method returns multiple values.\\r\\nThe syntax for returned data looks different than in Java or C/C++. Return data is specified \\r\\nwith the generates keyword. When a primitive value is returned, the returned data is simply \\r\\nreturned from the method. If the returned value is not primitive, however, the HIDL framework \\r\\ngenerates a synchronous callback function that the server side calls to return data.\\r\\nThe prototypes for the HIDL methods are exactly the same for client and server side, so the \\r\\nclient must handle the return data via callback when the return type is non-primitive. In this \\r\\ncase, the HIDL method call on the client blocks until the server side returns, but the return data \\r\\nis sent back to the client via the server invoking the provided callback, which runs in the client \\r\\nbefore the original method call returns. This makes for an interesting mix of error-handling \\r\\ncode. Even methods that have no return value still return a Return object defined by HIDL. \\r\\nUsing this, the client can check to see whether a low-level error of some kind occurred while \\r\\nmaking the method call.\\r\\nFrom the client perspective, the interface methods are blocking methods by default. This is \\r\\ntrue, even if the method does not return any data. Just like AIDL-defined interfaces, HIDL \\r\\n9780134096346_print.indb   19025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI=":{"__data__":"{\"id_\":\"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"xnzAUcBRocv8u/Z0taZkwJ/55WYgYnDmvwrXrch282k=\",\"text\":\"\\r\\n191Hardware Interface Definition Language (HIDL)\\r\\ninterface methods may be declared as asynchronous using the oneway keyword. Unlike AIDL \\r\\ninterfaces, though, all data is owned by the caller. This is akin to an AIDL interface where input \\r\\narguments for a method are declared using the in keyword.\\r\\nNote\\r\\nAlthough HIDL does not enforce a strict per-transaction (for example, method call) data limit, \\r\\nkeeping the size of the data less than 4KB per transaction is considered a best practice. \\r\\nRemember, there may be multiple transactions from multiple processes in flight to a given HIDL \\r\\nsimultaneously. If an interface’s method(s) use more than this in a single transaction, the inter-\\r\\nface should be re-architected. \\r\\nJust like AIDL-defined interfaces, HIDL is built on top of Android’s Binder framework, which \\r\\nhas a 1MB limit for all concurrent transactions. Exceeding this limit will result in hard-to-\\r\\ndebug failed transactions that are not directly related to the specific method throwing a \\r\\nTransactionException.\\r\\nHIDL Types\\r\\nData types in HIDL look similar to Java and C++, with some subtle differences. In fact, the \\r\\nsyntax used is a mix of both Java and C++:\\r\\n ■struct and union declarations follow C++ syntax and must be named.\\r\\n ■typedef is allowed and follows C++ syntax.\\r\\n ■C++-style comments may be used and are copied to generated header files.\\r\\n ■Package namespaces follow Java style syntax. Generated C++ headers convert the namespace to C++ style. For example, android.hardware.sensors in HIDL becomes \\r\\nandroid::hardware::sensors in C++.\\r\\n ■Comments may include documentation via Javadoc format.\\r\\n ■Java-style annotations may be added to type declarations.\\r\\n ■Forward declarations are not allowed. Structures may not refer to themselves.\\r\\n ■The concept of a pointer does not exist in HIDL.\\r\\n ■Arrays follow Java-style array usage, as shown in Listing 10.5.\\r\\nListing 10.5 HIDL Array Syntax\\r\\nstruct Point {\\r\\n    int32_t x;\\r\\n    int32_t y;\\r\\n};\\r\\nPoint[3] triangle;\\r\\n9780134096346_print.indb   19125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU=":{"__data__":"{\"id_\":\"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"hPAUP2Kp2MTrZtKvvzrTGNXr2M2Eduq8bYNNBln7Or0=\",\"text\":\"\\r\\n192Chapter 10  Project Treble: Binderized HAL \\r\\nHIDL includes a number of pre-defined types, some of which are only available in C++ code. \\r\\nThis is in large part because HALs generally deal with underlying hardware and need to be \\r\\nextremely fast and efficient. Although HIDL servers can be implemented in Java (for most \\r\\nthings), implementing hardware driver HIDL servers in Java is not recommended. Table 10.2 \\r\\nprovides a high-level view of HIDL types and their equivalent in C++ and Java.\\r\\nTable 10.2 HIDL-defined Types\\r\\nHIDL TypeC++ TypeJava Type\\r\\nenumenum classfinal Class (with static constant \\r\\nfields)\\r\\nuint8_t..uint64_t   uint8_t..uint64_t     int..long†\\r\\nint8_t..int64_t     int8_t..int64_t       int..long\\r\\nfloatfloatfloat\\r\\ndoubledoubledouble\\r\\nvec<T>hidl_vec<T>ArrayList<T>††\\r\\nT[S1][S2]..[Sn]     T[S1][S2]..[Sn]       T[S1][S2]..[Sn]\\r\\nstringhidl_stringString†††\\r\\nhandlehidl_handleN/A\\r\\nsafe_union(custom)struct        N/A††††\\r\\nstructstructJava Class\\r\\nunionunionN/A††††\\r\\nfmq_syncMQDescriptorSync      N/A\\r\\nfmq_unsyncMQDescriptorUnsync    N/A\\r\\nmemoryhidl_memoryN/A\\r\\nbitfield<T>Bitwise OR of \\r\\n underlying type\\r\\nN/A\\r\\n† Java does not have unsigned integer types. The unsigned data is placed into signed integer types, \\r\\nwithout conversion. Any Java code using this must treat the signed data as if it were unsigned.\\r\\n†† Java primitives are converted to the wrapped type (for example, vec<int> becomes \\r\\nArrayList<Integer>).\\r\\n††† Java String is converted to UTF-8 as the common HIDL type during transport and may never \\r\\nbe null when passed into HIDL. Note that character set translation from Java’s default UTF-16 to \\r\\nUTF-8 can result in different encodings.\\r\\n†††† Available starting with Android 11.\\r\\n9780134096346_print.indb   19225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM=":{"__data__":"{\"id_\":\"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"vyYBx2eVBydmlmuyYZnX2/lnU6WRxr7pUMbCcs90tBA=\",\"text\":\"\\r\\n193Hardware Interface Definition Language (HIDL)\\r\\nYou can find more details on HIDL data types as well as how they are used in C++ and Java on \\r\\nthese pages:\\r\\nhttps://source.android.com/devices/architecture/hidl/types\\r\\nhttps://source.android.com/devices/architecture/hidl-cpp/types\\r\\nhttps://source.android.com/devices/architecture/hidl-java/types\\r\\nEach HIDL package may define types that are relevant to it. This is accomplished via the file \\r\\ntypes.hal in the package module directory. Looking at the android.hardware.sensors@2.0 \\r\\npackage again, the types.hal file is small because the 2.0 interface builds upon the 1.0 inter-\\r\\nface (see Listing 10.6).\\r\\nListing 10.6 Sensors 2.0 types.hal\\r\\npackage android.hardware.sensors@2.0;\\r\\nenum SensorTimeout : int32_t {\\r\\n    /**\\r\\n     * The maximum number of seconds to wait for a message on the Wake Lock FMQ\\r\\n     * before automatically releasing any wake_lock held for a WAKE_UP event.\\r\\n     */\\r\\n    WAKE_LOCK_SECONDS = 1,\\r\\n};\\r\\nenum EventQueueFlagBits : uint32_t {\\r\\n    /**\\r\\n     * Used to notify the Event FMQ that events should be read and processed.\\r\\n     */\\r\\n    READ_AND_PROCESS = 1 << 0,\\r\\n    /**\\r\\n     * Used by the framework to signal to the HAL when events have been\\r\\n     * successfully read from the Event FMQ.\\r\\n     *\\r\\n     * If the MessageQueue::writeBlocking function is being used to write sensor\\r\\n     * events to the Event FMQ, then the readNotification parameter must be set\\r\\n     * to EVENTS_READ.\\r\\n     */\\r\\n     EVENTS_READ = 1 << 1,\\r\\n};\\r\\nenum WakeLockQueueFlagBits : uint32_t {\\r\\n    /**\\r\\n     * Used to notify the HAL that the framework has written data to the Wake\\r\\n     * Lock FMQ.\\r\\n     */\\r\\n     DATA_WRITTEN = 1 << 0,\\r\\n};\\r\\n9780134096346_print.indb   19325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=":{"__data__":"{\"id_\":\"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"k4TBOD0mYkXfZFGVClpZvQ3odJ5hOVZ6Ii/aCnUE0qw=\",\"text\":\"\\r\\n194Chapter 10  Project Treble: Binderized HAL \\r\\nNote how the types.hal file uses the same package declaration as the interface files(s) for the \\r\\npackage. Custom structures (classes) may be defined in the types.hal file as well as custom \\r\\nenums, typedefs, and so on.\\r\\nHIDL Services\\r\\nHIDL Services provide the implementation of a specific HAL definition. Although HIDL Services \\r\\nmay be implemented in C++ or Java, the framework is geared more toward C++-based imple-\\r\\nmentations. A handful of Java-based HIDL service implementations are in the Android frame-\\r\\nwork, but they are more the exception than the rule. Because of this, the remainder of this \\r\\nsection will only cover C++ implementations.\\r\\nHIDL services, like their Android Binder service counterparts, run in standalone processes. \\r\\nThese processes are started by the init daemon at startup, like other native processes. The \\r\\nHIDL service implements the HIDL-defined interface, communicating with whatever hardware \\r\\nor other component necessary to implement the defined interface. \\r\\nTo make itself available to HIDL client processes, each service is responsible for registering itself \\r\\nwith the Android HIDL system and processing requests as they arrive.\\r\\nListing 10.7 contains the main entry point for the default sensor service implementation. This \\r\\nis found at hardware/interfaces/sensors/2.0/default/service.cpp. Note how this main \\r\\nis short and simple: It configures the thread pool, creates an instance of the Sensors class, and \\r\\njoins the thread pool. Each of these steps is important and ties the whole thing together.\\r\\nListing 10.7 Default Sensors 2.0 Service Entry Point\\r\\nusing android::hardware::configureRpcThreadpool;\\r\\nusing android::hardware::joinRpcThreadpool;\\r\\nusing android::hardware::sensors::V2_0::ISensors;\\r\\nusing android::hardware::sensors::V2_0::implementation::Sensors;\\r\\nint main(int /* argc */, char** /* argv */) {\\r\\n    configureRpcThreadpool(1, true);\\r\\n    android::sp<ISensors> sensors = new Sensors();\\r\\n    if (sensors->registerAsService() != ::android::OK) {\\r\\n        ALOGE(\\\"Failed to register Sensors HAL instance\\\");\\r\\n        return -1;\\r\\n    }\\r\\n    joinRpcThreadpool();\\r\\n    return 1;  // joinRpcThreadpool shouldn't exit}\\r\\nThe HIDL support library allows HIDL services to configure the number of threads used to \\r\\nhandle requests via the configureRpcThreadpool method. In this case, the default sensor \\r\\nservice implementation limits requests to being handled by a single thread. This is setting up \\r\\n9780134096346_print.indb   19425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=":{"__data__":"{\"id_\":\"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Gs/+8Pr16v8DvIUBzNrCfVeD8q34RKvpMNF2A8k9WHY=\",\"text\":\"\\r\\n195HIDL Services\\r\\nthe internal thread pool to be managed and used by the underlying Binder framework, similar \\r\\nto what is done for Android services.\\r\\nThe implementation of the sensors 2.0 HIDL is provided by the Sensors class, located in the \\r\\nsame directory as the service code from Listing 10.7. The HIDL build tools automatically create \\r\\nthe registerAsService method, called in the code in Listing 10.7. This method registers the \\r\\nbacking binder object, exposed through the kernel, for the ISensors interface with the  \\r\\nhwservicemanager process.\\r\\nFinally, the joinRpcThreadpool method is called, making the main thread of this process \\r\\none of the threads in the thread pool from which services requests. This results in the process \\r\\nservicing incoming requests forever. This method should never exit, as shown from the \\r\\ncomment in the code.\\r\\nWhen a client calls a specific API method defined in ISensors.hal, the Binder and HIDL \\r\\nframework calls the matching method in the instance of the Sensors class. The method will \\r\\nperform its required action, returning a primitive result or executing a callback. \\r\\nListing 10.8 shows a portion of the C++ prototypes for the ISensors interface that were shown \\r\\nin Listing 10.4. As previously mentioned, this file is autogenerated by the build system, which \\r\\ncan make it a little difficult to track down! In the AOSP build tree for Android 10, the soong \\r\\nbuild system places the generated files into an intermediates directory tree based on the type \\r\\nof generated file. Because this is an AOSP-defined hardware interface, the base of the generated \\r\\nfiles is ./out/soong/.intermediates/hardware/interfaces; we’ll call it HW_IFS for brevity. \\r\\nThe resultant directory hierarchy is still quite lengthy, even with this substitution: \\r\\nHW_IFS/sensors/2.0/android.hardware/sensors@2.0_genc++headers/gen/android/  \\r\\n➥ hardware/sensors/2.0/ISensors.h.\\r\\nNote\\r\\nSometimes a line of code will be too long to fit on one line in this book. The code continuation \\r\\nsymbol (➥) indicates that the line continues from the previous line.\\r\\nListing 10.8 ISensors C++ Definition\\r\\nstruct ISensors : public ::android::hidl::base::V1_0::IBase {\\r\\n    ...\\r\\n    using getSensorsList_cb = std::function<void(const ::android::hardware::hidl_vec ➥ <::android::hardware::sensors::V1_0::SensorInfo>& list)>;\\r\\n    ...\\r\\n    virtual ::android::hardware::Return<void> getSensorsList(getSensorsList_cb  ➥ hidl_cb) = 0;\\r\\n    ...\\r\\n    virtual ::android::hardware::Return<::android::hardware::sensors::V1_0::Result>  ➥ setOperationMode(::android::hardware::sensors::V1_0::OperationMode mode) = 0;\\r\\n    ...\\r\\n9780134096346_print.indb   19525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM=":{"__data__":"{\"id_\":\"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Sb22uIRayguojXjzVbIaZubvg2+S4MvsynwELOw9AZg=\",\"text\":\"\\r\\n196Chapter 10  Project Treble: Binderized HAL \\r\\n    virtual ::android::hardware::Return<::android::hardware::sensors::V1_0::Result>  ➥ initialize(const ::android::hardware::MQDescriptorSync \\r\\n➥ <::android::hardware::sensors::V1_0::Event>& eventQueueDescriptor,  ➥ const ::android::hardware::MQDescriptorSync<uint32_t>& wakeLockDescriptor,  \\r\\n➥ const ::android::sp<::android::hardware::sensors::V2_0 ➥::ISensorsCallback>& sensorsCallback) = 0;\\r\\n    ...\\r\\n    virtual ::android::hardware::Return<void> registerDirectChannel(const  ➥::android::hardware::sensors::V1_0::SharedMemInfo& mem,  \\r\\n➥ registerDirectChannel_cb_hidl_cb) = 0;\\r\\n    ...\\r\\n}\\r\\nWow, that is tough to read! However, stripping down the namespaces a bit makes them easier \\r\\nto understand. For example, the extremely long method definition for initialize is shown in \\r\\nListing 10.9 when using the namespaces in the C++ code. This is what the default implementa-\\r\\ntion of the 2.0 sensors HAL does.\\r\\nListing 10.9 ISensors C++ Service Implementation\\r\\nusing ::android::hardware::sensors::V1_0::Event;\\r\\nusing ::android::hardware::sensors::V1_0::OperationMode;\\r\\nusing ::android::hardware::sensors::V1_0::RateLevel;\\r\\nusing ::android::hardware::sensors::V1_0::Result;\\r\\nusing ::android::hardware::sensors::V1_0::SharedMemInfo;\\r\\nusing ::android::hardware::sensors::V2_0::SensorTimeout;\\r\\nusing ::android::hardware::sensors::V2_0::WakeLockQueueFlagBits;\\r\\n...\\r\\nReturn<void> Sensors::getSensorsList(getSensorsList_cb _hidl_cb) {\\r\\n    std::vector<SensorInfo> sensors;\\r\\n    for (const auto& sensor : mSensors) {\\r\\n        sensors.push_back(sensor.second->getSensorInfo());\\r\\n    }\\r\\n    // Call the HIDL callback with the SensorInfo\\r\\n    _hidl_cb(sensors);\\r\\n    return Void();\\r\\n}\\r\\n...\\r\\n9780134096346_print.indb   19625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=":{"__data__":"{\"id_\":\"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HCVpgfhxw5PBB/XinNhKTcohdE/V7QLIdmduqYzLXuU=\",\"text\":\"\\r\\n197HIDL Clients\\r\\nReturn<Result> Sensors::setOperationMode(OperationMode mode) {\\r\\n    ...\\r\\n    return Result::OK;\\r\\n}\\r\\nReturn<Result> Sensors::initialize(\\r\\n    const ::android::hardware::MQDescriptorSync<Event>& eventQueueDescriptor,\\r\\n    const ::android::hardware::MQDescriptorSync<uint32_t>& wakeLockDescriptor,\\r\\n    const sp<ISensorsCallback>& sensorsCallback) {\\r\\n    ...\\r\\n}\\r\\nThat is much better! Previously, in the HIDL definition of each method, the generates \\r\\nkeyword declared the data to be returned. Note how depending on the return data, it may actu-\\r\\nally be returned directly or via an embedded callback. The getSensorsList method returns \\r\\ndata (a list of SensorInfo) by executing the provided callback with the data. Both  \\r\\nsetOperationMode and initialize return Result, which is defined to be an int32_t  \\r\\nso it can be returned directly.\\r\\nHIDL Clients\\r\\nHIDL clients utilize the interface exposed by the underlying service implementation. Unlike the \\r\\nAndroid Binder-based clients used at the system/framework level, the HIDL client code does \\r\\nnot have to look up the binder for the backing service directly. The necessary functionality is \\r\\nbuilt into the code generated when the HIDL interface is compiled. Each interface implementa-\\r\\ntion has a getService method that returns an instance of the interface or a proxy to it. For \\r\\nexample, Listing 10.10 shows the prototype for version 2.0 of the ISensors implementation.\\r\\nListing 10.10 ISensors Prototype for getService()\\r\\nstatic ::android::sp<ISensors> getService( \\r\\n  const std::string &serviceName=\\\"default\\\",    bool getStub=false \\r\\n);\\r\\nThe getService method communicates with hwservicemanager to retrieve the backing \\r\\nbinder from the HIDL service implementation. The interface type (for example, ISensors) \\r\\nand service name are used to look up the HIDL service that was registered with the system. \\r\\nThe client leveraging this method uses the smart pointer to the interface (for example, \\r\\n::android::sp<ISensors>), as defined by the prototype in Listing 10.10. However, behind \\r\\nthe scenes, this may be direct access to the backing service implementation (for example, pass-\\r\\nthrough), or it may be a binder proxy instance. The calling semantics are exactly the same: The \\r\\nmethods of the interface are called via the smart pointer. \\r\\n9780134096346_print.indb   19725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=":{"__data__":"{\"id_\":\"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"DxhxO/Q8dkmt/If1P4Neou8T3bg/LWRo0TUh4UX5zfk=\",\"text\":\"\\r\\n198Chapter 10  Project Treble: Binderized HAL \\r\\nAn example of this is shown in Listing 10.11, taken from SensorsWrapperBase used \\r\\nwithin the AOSP framework (see frameworks/native/services/sensorservice/\\r\\nSensorWrapper.h).\\r\\nListing 10.11 Calling the ISensors Interface\\r\\nReturn<void> getSensorsList(ISensors::getSensorsList_cb _hidl_cb) override \\r\\n    return mSensors->getSensorsList(_hidl_cb);\\r\\n}\\r\\nIt is worth reiterating that HIDL interfaces that return non-primitive data accomplish it \\r\\nvia callback to the client. In the implementation shown in Listing 10.11, the caller of this \\r\\nwrapper method must provide the callback function defined by the HIDL, an instance of \\r\\nISensors::getSensorList_cb. In Listing 10.4 where this HIDL method was defined, the \\r\\nmethod does not return data, but generates it. Closing the loop, the code in Listing 10.8 defines \\r\\nISensors::getSensorsList_cb to be a function that receives a vector of SensorInfo \\r\\nobjects—the type that the HIDL interface generates.\\r\\nSummary\\r\\nThis chapter examined the revised hardware abstraction layer architecture introduced in \\r\\nAndroid 8: binderized HAL using HIDL. Internally called Project Treble, the binderized HAL is a \\r\\ncomplete overhaul of the HAL concept. Prior to Android 8, vendor/OEM HALs were provided as \\r\\na set of shared libraries customized for the specific target that were built into the system image. \\r\\nWith HIDL, the HAL is now based on Android’s IPC mechanism, Binder. The primary goals of \\r\\nsuch a radical change were isolation of vendor-specific components so the AOSP framework \\r\\n(system) can be updated without requiring a rebuild of the vendor components; better interop-\\r\\nerability between components; better data movement efficiency; and more intuitive calling \\r\\nsemantics with respect to memory usage/ownership. \\r\\nSimilar to the traditional Android HAL, the platform defines the abstractions to be imple-\\r\\nmented by the platform components or the vendor/OEM. Unlike the traditional HAL, though, \\r\\nthe abstractions are now defined via HIDL .hal files, which are cousins to the AIDL file used \\r\\nin Binder-based services. Although HIDL and AIDL files have some things in common, they \\r\\nare different in their syntax with HIDL placing stricter syntax rules and form into place. This \\r\\nallows for much of the server and client “boilerplate” code to be autogenerated or provided via \\r\\nhelper library—leaving the vendor/OEM to focus on the functionality of the HIDL implementa-\\r\\ntion rather than the nuts and bolts of the underlying HIDL/Binder interactions.\\r\\n9780134096346_print.indb   19825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0=":{"__data__":"{\"id_\":\"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"NxPhNS4HBmiPxoxSF7Q4O3XfiM5DhNBbzqpmo8fF0YA=\",\"text\":\"\\r\\n11\\r\\nCreating a Custom \\r\\nBinderized HAL\\r\\nIn Chapter 10, we introduced Project Treble, or the new binderized HAL architecture rolled \\r\\nout with Android 8.0. The new binderized HAL, or HIDL, is required for all devices running \\r\\nAndroid 8.0 and newer. Now it is time to apply the HIDL concepts on a custom platform, \\r\\nmaking it clear how a new HIDL-based HAL can be created and utilized. \\r\\nThis chapter demonstrates replacing the legacy HAL for Acme’s custom proximity device, \\r\\nmaking it HIDL based. We’ll see how the system can be customized to pick up new, custom \\r\\nhardware for unique devices like those used in the IoT space.\\r\\nAcme Custom HIDL\\r\\nAs mentioned in Chapter 10, vendors are free to define their own HIDLs as well as vendor-\\r\\nspecific customizations of AOSP/Google-defined HIDLs. Unlike traditional HAL shared libraries, \\r\\nthese components will live within the vendor area of the platform: the /vendor or /odm filesys-\\r\\ntems. This clean separation allows the core Android system to be updated without requiring the \\r\\nOEM’s involvement; this is one of the primary goals of the HIDL architecture. \\r\\nTo illustrate this, let’s define a new HIDL for the Acme One, building upon our previous \\r\\nwork in Chapter 8 with a custom proximity HAL. Because this proximity support is custom \\r\\nand is not part of the standard AOSP sensors API, our custom HIDL is needed and is called \\r\\n aproximity. To keep things simple, the HIDL implementation will not require modifications \\r\\nto the kernel—it will leverage the same shim library used in Chapter 8 to access the underlying \\r\\ndevice. The HIDL will illustrate both simple as well as more complex return data.\\r\\nNote\\r\\nThis chapter utilizes a tool from the AOSP build results, hidl-gen. This tool is built at the same \\r\\ntime as a given target. If you have not previously built a platform, this tool will not be found in your \\r\\nbuild tree. Please see Chapter 2 for building the platform. Alternatively, if the build system is set \\r\\nup and lunch has been run, the tool may also be built by executing the command m hidl-gen.\\r\\n9780134096346_print.indb   19925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI=":{"__data__":"{\"id_\":\"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"y469xtZ2r41657HOTU7TbYHkR9DErHBkGbR8h3PxBcc=\",\"text\":\"\\r\\n200Chapter 11  Creating a Custom Binderized HAL\\r\\nHIDL Definition\\r\\nThe aproximity HIDL definition is similar to the traditional HAL API covered in Chapter 8. In \\r\\naddition to the poll API, you can use a couple of new APIs to retrieve the proximity details for \\r\\nthe underlying sensor as well as some details about the HIDL’s usage. Listing 11.1 and Listing 11.2 \\r\\ndefine the IAproximity HIDL (IAproximity.hal) and its corresponding types (types.hal), \\r\\nrespectively.\\r\\nListing 11.1 IAproximity HIDL Definition\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\n/**\\r\\n * The Acme specialized proximity support, providing simple APIs to\\r\\n * illustrate vendor custom HIDL.\\r\\n */\\r\\ninterface IAproximity {\\r\\n    /**\\r\\n     * Retrieve the latest proximity value for the specified precision\\r\\n     * value.\\r\\n     *\\r\\n     * @param precision contains the precision requested by the caller.\\r\\n     *    Valid values may be retrieved using the get_details method.\\r\\n     * @return the proximity value returned by the sensor\\r\\n     */\\r\\n    poll(int32_t precision) generates (int32_t proximity);\\r\\n    /**\\r\\n     * Get the details about the underlying sensor.\\r\\n     *\\r\\n     * @return the details for the underlying sensor, containing the\\r\\n     *    supported precision values and the range of proximity values.\\r\\n     */\\r\\n    get_details() generates (ProximityDetails details);\\r\\n    /**\\r\\n     * Retrieve usage summary information about the backing HIDL service.\\r\\n     *\\r\\n     * @return a summary of usage information for the HIDL service.\\r\\n     */\\r\\n    summarize() generates (ProximitySummary summary);\\r\\n};\\r\\n9780134096346_print.indb   20025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y=":{"__data__":"{\"id_\":\"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"G1Gi7PiFjfGBKGr/EX9291QxUrrY0Uj0wPhTCMecauM=\",\"text\":\"\\r\\n201Acme Custom HIDL\\r\\nListing 11.2 aproximity HIDL types.hal Definition\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\nstruct ValueRange {\\r\\n    int32_t  min;\\r\\n    int32_t  max;\\r\\n};\\r\\nstruct ProximityDetails {\\r\\n    ValueRange  precision;\\r\\n    ValueRange  proximity;\\r\\n};\\r\\nstruct ProximitySummary {\\r\\n    uint64_t  pollCallCount;\\r\\n    int64_t   lastPollCalledMs;\\r\\n};\\r\\nCreate these files in the location vendor/acme/one/interfaces/aproximity/1.0 within the \\r\\nAOSP source tree. The AOSP build contains a tool to help generate build files and boilerplate \\r\\ncode to get started with a service implementation. After the preceding files have been created \\r\\nin the tree, execute the following command in the AOSP build shell to generate an Android.bp \\r\\nfile for building the HIDL (see Listing 11.3).\\r\\nListing 11.3 Create the HIDL Android.bp File\\r\\nhidl-gen -L androidbp \\\\\\r\\n    -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n    vendor.acme.one.aproximity@1.0\\r\\nThe new Android.bp file will be located alongside the .hal files. This file instructs the build \\r\\nsystem to generate interface headers and boilerplate code needed for the implementation and \\r\\nclient(s). Listing 11.4 shows the generated content.\\r\\nListing 11.4 Android.bp for the aproximity HIDL\\r\\n// This file is autogenerated by hidl-gen -Landroidbp.\\r\\nhidl_interface {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0\\\",\\r\\n    root: \\\"vendor.acme.one\\\",\\r\\n    product_specific: true,\\r\\n    srcs: [\\r\\n        \\\"types.hal\\\",\\r\\n        \\\"IAproximity.hal\\\",\\r\\n9780134096346_print.indb   20125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=":{"__data__":"{\"id_\":\"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"jRUHlLREgNAsvJwLSaVEUuDCAkUm4uOEiIxgxlN9tC4=\",\"text\":\"\\r\\n202Chapter 11  Creating a Custom Binderized HAL\\r\\n    ],\\r\\n    interfaces: [\\r\\n        \\\"android.hidl.base@1.0\\\",\\r\\n    ],\\r\\n    gen_java: true,\\r\\n}\\r\\nBefore the AOSP build system will recognize the new HIDL, the top-level interfaces directory \\r\\nwithin the vendor tree for the device needs an Android.bp file. This informs the build system \\r\\nthat the directory is the root location for HIDL packages. Create a new file, vendor/acme/one/\\r\\ninterfaces/Android.bp, with the content of Listing 11.5.\\r\\nListing 11.5 Android.bp for the Acme One HIDL Interfaces\\r\\nhidl_package_root {\\r\\n    name: \\\"vendor.acme.one\\\",\\r\\n}\\r\\nHIDL Service Implementation\\r\\nNow that the aproximity HIDL is defined, the platform needs the actual implementation. \\r\\nAs previously mentioned, this is typically handled by a separate service process, particularly \\r\\nfor HIDLs that are “drivers” for hardware. Because aproximity is an example of such a HIDL \\r\\nimplementation, a native (for example, C++) implementation is needed. Fortunately, hidl-gen  \\r\\ncomes to the rescue here and can generate boilerplate code as a starting point. Listing 11.6 \\r\\nshows the commands to execute at the top level of the build tree to generate the boilerplate \\r\\ncode for a C++ implementation of the HIDL.\\r\\nListing 11.6 Create aproximity Service Boilerplate\\r\\nmkdir –p device/acme/one/hidl/aproximity\\r\\nhidl-gen –L c++-impl –o device/acme/one/hidl/aproximity \\r\\n  –r vendor.acme.one:vendor/acme/one/interfaces vendor.acme.one.aproximity@1.0\\r\\nYou can find the resultant files, Aproximity.cpp and Aproximity.h, in device/acme/one/\\r\\nhidl/aproximity. Similar to the way the javah or javac -h tools are used to help create JNI \\r\\nboilerplate code, hidl-gen is invaluable for creating a starting point for the service implemen-\\r\\ntation. These two files will be built into a library that is then used by the service process to host \\r\\nthe HIDL. First things first: The files need to be modified to remove unnecessary boilerplate \\r\\ncode and provide the implementation for Acme One. The details of the methods and the special \\r\\nReturn type will be covered shortly while working through the implementation. Listing 11.7  \\r\\nshows the updated header file.\\r\\n9780134096346_print.indb   20225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw=":{"__data__":"{\"id_\":\"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"khGWb6o2DkKAsw0QU48+aFLeWGUZ0x084EZslolKvhM=\",\"text\":\"\\r\\n203Acme Custom HIDL\\r\\nListing 11.7 Aproximity.h Implementation\\r\\n#pragma once\\r\\n#include <vendor/acme/one/aproximity/1.0/IAproximity.h>\\r\\n#include <hidl/MQDescriptor.h>\\r\\n#include <hidl/Status.h>\\r\\nnamespace vendor {\\r\\nnamespace acme {\\r\\nnamespace one {\\r\\nnamespace aproximity {\\r\\nnamespace V1_0 {\\r\\nnamespace implementation {\\r\\nusing ::android::hardware::hidl_array;\\r\\nusing ::android::hardware::hidl_handle;\\r\\nusing ::android::hardware::hidl_memory;\\r\\nusing ::android::hardware::hidl_string;\\r\\nusing ::android::hardware::hidl_vec;\\r\\nusing ::android::hardware::Return;\\r\\nusing ::android::hardware::Void;\\r\\nusing ::android::sp;\\r\\nstruct Aproximity : public IAproximity {\\r\\n    Aproximity();\\r\\n    ~Aproximity();\\r\\n    // Methods from ::vendor::acme::one::aproximity::V1_0::IAproximity follow.\\r\\n    Return<int32_t> poll(int32_t precision) override;\\r\\n    Return<void> get_details(get_details_cb _hidl_cb) override;\\r\\n    Return<void> summarize(summarize_cb _hidl_cb) override;\\r\\n    // Methods from ::android::hidl::base::V1_0::IBase follow.\\r\\n    Return<void> debug(const hidl_handle &handle,\\r\\n                       const hidl_vec<hidl_string> &options) override;\\r\\nprivate:\\r\\n    uint64_t            pollCallCount;\\r\\n    int64_t             lastPollCalledMs;\\r\\n    int                 fd;\\r\\n    proximity_params_t  params;\\r\\n};\\r\\n}  // namespace implementation\\r\\n}  // namespace V1_0\\r\\n}  // namespace aproximity\\r\\n9780134096346_print.indb   20325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE=":{"__data__":"{\"id_\":\"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nw6AJExGfBEx9VnXp0inPOzJUWkpXBp4dDwymqXf/i8=\",\"text\":\"\\r\\n204Chapter 11  Creating a Custom Binderized HAL\\r\\n}  // namespace one\\r\\n}  // namespace acme\\r\\n}  // namespace vendor\\r\\nNow for the actual implementation of the IAproximity methods for the HIDL. Remember that \\r\\nfor a hardware-based HIDL (for example, driver HIDL), this is where access to the kernel via a  \\r\\n/sys or /dev interface would be performed (or connected via a secondary library that performs \\r\\nthe actual kernel I/O). For our trivial HIDL implementation, we will leverage the shim library \\r\\nthat was created as part of the traditional HAL in Chapter 8, as shown in Listing 11.8.\\r\\nListing 11.8 Aproximity.cpp Implementation\\r\\n#include <chrono>\\r\\n#include \\\"Aproximity.h\\\"\\r\\nusing namespace std::chrono;\\r\\nnamespace vendor {\\r\\nnamespace acme {\\r\\nnamespace one {\\r\\nnamespace aproximity {\\r\\nnamespace V1_0 {\\r\\nnamespace implementation {\\r\\nstatic int64_t now() {\\r\\n    time_point now = system_clock().now();\\r\\n    milliseconds nowMs =\\r\\n        duration_cast<milliseconds>(now.time_since_epoch());\\r\\n    return static_cast<int64_t>(nowMs.count());\\r\\n}\\r\\nAproximity::Aproximity() {\\r\\n    this->fd = open_sensor(this->params);\\r\\n    if (this->fd < 0) {\\r\\n        this->params.precision.min = -1;\\r\\n        this->params.precision.range = -1;\\r\\n        this->params.proximity.min = -1;\\r\\n        this->params.proximity.range = -1;\\r\\n    }\\r\\n}\\r\\nAproximity::~Aproximity() {\\r\\n    if (this->fd >= 0) {\\r\\n        close_sensor(this->fd);\\r\\n        this->fd = -1;\\r\\n    }\\r\\n9780134096346_print.indb   20425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY=":{"__data__":"{\"id_\":\"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"v0oROQ6B01vpmhdbj6MsuV4CwkeE7NPiMhvUBDfDrzg=\",\"text\":\"\\r\\n205Acme Custom HIDL\\r\\n    this->pollCallCount = 0;\\r\\n    this->lastPollCalledMs = 0;\\r\\n}\\r\\n// Methods from ::vendor::acme::one::aproximity::V1_0::IAproximity follow.\\r\\nReturn<int32_t> Aproximity::poll(int32_t precision) {\\r\\n    this->pollCallCount++;\\r\\n    this->lastPollCalledMs = now(); \\r\\n    if (this->fd < 0) {\\r\\n        return -1;\\r\\n    }\\r\\n    int shimPrecision = static_cast<int>(precision);\\r\\n    int32_t result =\\r\\n        static_cast<int32_t>(poll_sensor(this->fd, shimPrecision));\\r\\n    return result;\\r\\n}\\r\\nReturn<void> Aproximity::get_details(get_details_cb _hidl_cb) {\\r\\n    ProximityDetails  result;\\r\\n    result.precision.min = static_cast<int32_t>(this->params.precision.min);\\r\\n    result.precision.max = static_cast<int32_t>(this->params.precision.range);\\r\\n    result.proximity.min = static_cast<int32_t>(this->params.proximity.min);\\r\\n    result.proximity.max = static_cast<int32_t>(this->params.proximity.range);\\r\\n    _hidl_cb(result);\\r\\n    return Void();\\r\\n}\\r\\nReturn<void> Aproximity::summarize(summarize_cb _hidl_cb) {\\r\\n    ProximitySummary  result;\\r\\n    result.pollCallCount = this->pollCallCount;\\r\\n    result.lastPollCalledMs = this->lastPollCalledMs;\\r\\n    _hidl_cb(result);\\r\\n    return Void();\\r\\n}\\r\\nReturn<void> Aproximity::debug(const hidl_handle &handle,\\r\\n                               const hidl_vec<hidl_string> & /*options*/) {\\r\\n    if (handle == nullptr || handle->numFds < 1 || handle->data[0] < 0) {\\r\\n        return Void();\\r\\n    }\\r\\n9780134096346_print.indb   20525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=":{"__data__":"{\"id_\":\"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"68pHoQnmbAmVY4WMNYdTUvT1Odj3UYe60TEal6CHGbc=\",\"text\":\"\\r\\n206Chapter 11  Creating a Custom Binderized HAL\\r\\n    int fd = handle->data[0];\\r\\n    dprintf(fd, \\\"HIDL:\\\\n\\\");\\r\\n    dprintf(fd, \\\"  Poll call count: %lu\\\\n\\\", this->pollCallCount);\\r\\n    dprintf(fd, \\\"  Last poll call:  %ld\\\\n\\\", this->lastPollCalledMs);\\r\\n    fsync(fd);\\r\\n    return Void();\\r\\n}\\r\\n}  // namespace implementation\\r\\n}  // namespace V1_0\\r\\n}  // namespace aproximity\\r\\n}  // namespace one\\r\\n}  // namespace acme\\r\\n}  // namespace vendor\\r\\nNotice how the methods get_details and summarize each use a HIDL callback function \\r\\nprovided by the caller to return data. This must be done before the method returns: it is how \\r\\nthe service “generates” the non-primitive data returned to the client, which is waiting synchro-\\r\\nnously. What makes this particularly confusing is both methods do return something: an \\r\\ninstance of a special class, Void! If you look carefully at the generated C++ code, each of the \\r\\nHIDL methods returns a special Return class instance. The HIDL framework uses the Return \\r\\nclass along with the help of the backing Binder framework to determine that the HIDL call \\r\\nsucceeded or not. The aproximity clients, discussed in Chapter 12, will demonstrate how this \\r\\ncan be used. \\r\\nThe remaining method defined for the IAproximity interface is the poll method, which \\r\\ngenerates an int32_t with the latest proximity value. However, unlike the other methods that \\r\\nreturn more complex data types, this return value is provided as part of the Return object \\r\\nrather than utilizing a synchronous callback method.\\r\\nMost HIDL service implementations will build the backing HIDL calls into a static library that \\r\\nis then linked with the service executable. The aproximity service is constructed in the same \\r\\nmanner, requiring a separate file containing the main service (daemon) entry point. The file \\r\\ndevice/acme/one/hidl/aproximity/service.cpp provides the entry point for the service. \\r\\nThis is where the Aproximity class instance is created and registered as the HIDL service. It \\r\\nthen joins the RPC thread pool used by the HIDL subsystem. The RPC thread pool is utilized \\r\\nby the HIDL framework (really, the backing Binder subsystem) to process incoming requests. \\r\\nBy joining the thread pool, the main thread of this service is added to the pool and will not \\r\\nreturn—it will process incoming requests forever. The code for this is straightforward as shown \\r\\nin Listing 11.9.\\r\\nListing 11.9 Aproximity Service Entry Point\\r\\n#include <hidl/HidlSupport.h>\\r\\n#include <hidl/HidlTransportSupport.h>\\r\\n#include <utils/Errors.h>\\r\\n9780134096346_print.indb   20625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A=":{"__data__":"{\"id_\":\"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"b9vrKQ1JPwLY0XvBddF7Nlh5JDOkNTNUDd7z6xJlgFo=\",\"text\":\"\\r\\n207Acme Custom HIDL\\r\\n#include <utils/StrongPointer.h>\\r\\n#include \\\"Aproximity.h\\\"\\r\\nusing android::hardware::configureRpcThreadpool;\\r\\nusing android::hardware::joinRpcThreadpool;\\r\\nusing vendor::acme::one::aproximity::V1_0::implementation::Aproximity;\\r\\nusing namespace android;\\r\\nint main() {\\r\\n    configureRpcThreadpool(1, true);\\r\\n    sp<Aproximity>  aproximity = new Aproximity();\\r\\n    status_t status = aproximity->registerAsService(\\\"default\\\");\\r\\n    if (status != OK) {\\r\\n        return status;\\r\\n    }\\r\\n    joinRpcThreadpool();\\r\\n}\\r\\nAfter the HIDL service is built and present on the platform, it needs to be started by the system \\r\\nso the service is available for clients. This is done using an init run command (or rc) file for \\r\\nthe service. Unlike other daemons in the system that require changes to a core platform script \\r\\n(such as init.hikey960.rc), the rc file for a HIDL service is kept alongside the service code \\r\\nand is pulled into the image based on build rules. Create the file device/acme/one/hidl/\\r\\naproximity/vendor.acme.one.aproximity@1.0-service.rc with the content shown in \\r\\nListing 11.10.\\r\\nListing 11.10 The Aproximity Service rc File\\r\\nservice vendor.aproximity-1-0 /vendor/bin/hw/vendor.acme.one.aproximity@1.0-service\\r\\n    class hal\\r\\n    user system\\r\\n    group system\\r\\nThe rc file tells the (vendor) init process to start a service named vendor.aproximity-1-0 \\r\\nusing the executable found at /vendor/bin/hw as part of the class of daemons labeled hal, \\r\\nand it is to be executed as the user system and in the group system.\\r\\nThe service code is ready! Time to pull it into the platform build. Create the file device/acme/\\r\\none/hidl/aproximity/Android.bp with the content in Listing 11.11.\\r\\n9780134096346_print.indb   20725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg=":{"__data__":"{\"id_\":\"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"KuNL58I4ABWFHfsJjaAH1OfWYnUQH3cSgz5cNUAsRQw=\",\"text\":\"\\r\\n208Chapter 11  Creating a Custom Binderized HAL\\r\\nListing 11.11 Aproximity Service Android.bp\\r\\ncc_defaults {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-defaults\\\",\\r\\n    defaults: [\\\"hidl_defaults\\\"],\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    shared_libs: [\\r\\n        \\\"libhidlbase\\\",\\r\\n        \\\"libhidltransport\\\",\\r\\n        \\\"libhwbinder\\\",\\r\\n        \\\"libutils\\\",\\r\\n        \\\"vendor.acme.one.aproximity@1.0\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\ncc_library {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-impl\\\",\\r\\n    defaults: [\\\"vendor.acme.one.aproximity@1.0-defaults\\\"],\\r\\n    srcs: [\\r\\n        \\\"Aproximity.cpp\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n    ],\\r\\n    export_include_dirs: [\\\".\\\"],\\r\\n}\\r\\ncc_binary {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-service\\\",\\r\\n    defaults: [\\\"vendor.acme.one.aproximity@1.0-defaults\\\"],\\r\\n    init_rc: [\\\"vendor.acme.one.aproximity@1.0-service.rc\\\"],\\r\\n    srcs: [\\\"service.cpp\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n        \\\"vendor.acme.one.aproximity@1.0-impl\\\",\\r\\n    ],\\r\\n    proprietary: true,\\r\\n    vendor: true,\\r\\n}\\r\\n9780134096346_print.indb   20825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=":{"__data__":"{\"id_\":\"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"zoveRzQi/Q5QawiEqAxgCpyO7sH/ZjlyEuNx8zpYTOU=\",\"text\":\"\\r\\n209Acme Custom HIDL\\r\\nThis blueprint file for soong lays out three different pieces: a set of default build options for \\r\\nC++ code, a C++ library containing the Aproximity.cpp implementation, and a C++ binary \\r\\ncontaining the service entry point and linked with the service library implementation. \\r\\nThe cc_defaults section builds on top of an existing hidl_defaults definition elsewhere \\r\\nin the platform and is named vendor.acme.one.aproximity@1.0-defaults. This type of \\r\\nsection in a blueprint file sets up common things that can be applied to other blocks, such as \\r\\nbuilding a library or executable binary. The defaults section in this file specifies the relative \\r\\ninstall path for any rule using these defaults as well as a set of shared libraries to be used. The \\r\\nHIDL library and service binary sections both apply these defaults. The net result is the service \\r\\nbinary will be located at /vendor/bin/hw on the target. \\r\\nThe service helper library is static, so it is not installed on the running target. It is linked \\r\\ndirectly into the service binary along with the contents of the libacmeproximityshim library \\r\\nthat provides access to the underlying device. \\r\\nThe final section pulls together the static libraries and the service entry point code to create \\r\\nan executable, vendor.acme.one.aproximity@1.0-service. This is what is executed by \\r\\ninit via the rc file in Listing 11.10. Remember: It is a native Linux binary, not a runtime (for \\r\\nexample, Java/Kotlin) Android application.\\r\\nSE Linux for Android Changes\\r\\nBefore the new HIDL can be used, you must put some security-related settings into place. As \\r\\ndiscussed in Chapter 5, Android’s use of SE Linux requires that binaries have the necessary \\r\\naccess controls enabled. In this case, the aproximity service executable will need to have SE \\r\\npolicies defined and applied to it before it will function.\\r\\nEven though Acme One is built upon the HiKey960 device support, the SE policy changes are \\r\\nmade in the overlay found in device/acme/one/acme_one/sepolicy. The changes are broken \\r\\ndown into three different files: the policy file for the HIDL and two context definition files that \\r\\nutilize the context labels defined in the policy. The longest and most complex is the policy type \\r\\nenforcement file, because it defines several attributes and context labels needed for the HIDL \\r\\nservice. As discussed in Chapter 5, crafting an SE policy file is non-trivial and also sparsely \\r\\ndocumented within AOSP. Often, the best documentation is examining existing SE policy files \\r\\nbeneath system/sepolicy in the AOSP source tree. For example, the files system/sepolicy/\\r\\npublic/hal_sensors.te and system/policy/vendor/hal_sensors_default.te were used \\r\\nas guideposts when creating the policy file for aproximity. Listing 11.12 shows the policy file, \\r\\ndevice/acme/one/acme_one/sepolicy/hal_aproximity.te.\\r\\nListing 11.12 hal_aproximity.te Type Enforcement File\\r\\nhal_attribute(aproximity)\\r\\ntype hal_aproximity_hwservice, hwservice_manager_type;\\r\\n9780134096346_print.indb   20925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=":{"__data__":"{\"id_\":\"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"UKSFnfmP9+qzrCh0heQQyb64jZTXsSYQ6SqiH2vVCEE=\",\"text\":\"\\r\\n210Chapter 11  Creating a Custom Binderized HAL\\r\\n###\\r\\n# The HIDL aproximity attribute defines the _server and _client\\r\\n#\\r\\nbinder_call(hal_aproximity_client, hal_aproximity_server)\\r\\nbinder_call(hal_aproximity_server, hal_aproximity_client)\\r\\nhal_attribute_hwservice(hal_aproximity, hal_aproximity_hwservice)\\r\\n####\\r\\n# Create an execution domain for the service hosting the server side\\r\\n#\\r\\ntype hal_aproximity_default, domain;\\r\\nhal_server_domain(hal_aproximity_default, hal_aproximity)\\r\\ntype hal_aproximity_default_exec, exec_type, vendor_file_type, file_type;\\r\\ninit_daemon_domain(hal_aproximity_default)\\r\\nallow hal_aproximity_default hal_aproximity_hwservice:hwservice_manager find;\\r\\n# Allow the HIDL access to /dev/tty*, which would cover USB\\r\\n# serial devices at /dev/ttyUSB*\\r\\nallow hal_aproximity_default serial_device:chr_file rw_file_perms;\\r\\nThe file leverages a number of macros defined by the AOSP policy files, which makes the policy \\r\\nfile shorter and consistent with other HIDL definitions. But those macros also obfuscate some \\r\\nvery important details! Let’s walk through the file in chunks to make it easier to digest.\\r\\nThe first chunk to look at is up through the hal_attribute_hw_service line. The hal_\\r\\nattribute macro at the start of the file does a number of things. First, it sets up new SE \\r\\nattributes hal_aproximity, hal_aproximity_client, and hal_aproximity_service. \\r\\nFrom there, it also declares some neverallow policies restricting processes that have these \\r\\nattributes from forking other processes. This lays the groundwork for definitions later in the \\r\\nfile. Similarly, the hal_aproximity_hwservice type is defined to be an hwservice_manager_\\r\\ntype. This ultimately allows the hwservicemanager to manage service interfaces labeled \\r\\nwith this type. The new hal_aproximity attribute and hal_aproximity_hwservice are tied \\r\\ntogether via the macro hal_attribute_hwservice. This macro sets up allow rules for hal_\\r\\naproximity_client to find interfaces labeled with hal_aproximity_hwservice via  \\r\\nhwservicemanager. The client label will be used later in Chapter 12 when we create HIDL \\r\\nclient apps. The hal_attribute_hwservice macro also sets up components running as \\r\\nhal_aproximity_server so they can add themselves and perform find operations with the \\r\\nhwservicemanager and use the base HIDL functionality. Finally, the binder_call macros are \\r\\nused to link the hal_aproximity_client and hal_aproximity_service processes via Binder, \\r\\nallowing the client to call the server as well as transfer references and files between the two. \\r\\nThat is a ton of setup for just five lines!\\r\\nThe next chunk defines an execution domain for the HIDL service. Recall from Chapter 5 that \\r\\nAndroid SE policies require daemons to run in a well-defined execution domain. Further, the \\r\\n9780134096346_print.indb   21025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=":{"__data__":"{\"id_\":\"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"QG6VsXeWUDHBNMhO6FIOfrXnItiJIZJKpClGURs+CCA=\",\"text\":\"\\r\\n211Acme Custom HIDL\\r\\ninit process handling of vendor services will not even try to start up the service defined in the \\r\\nrc file shown earlier in this chapter, if the SE domain is not set up correctly! The new domain, \\r\\nhal_aproximity_default, is first defined then passed to the macro hal_server_domain \\r\\nwith the previously defined attribute hal_aproximity as a type attribute of the domain. \\r\\nAdditionally, the macro associates type attributes halserverdomain and hal_aproximity_ \\r\\nserver to the new domain. This effectively marks anything in the new domain as being an \\r\\naproximity server and also within the scope of the existing halserverdomain. From here, a \\r\\nnew type, hal_aproximity_default_exec, is used for describing files needed for the HIDL \\r\\nservice execution. This new execution domain will be used to label the HIDL service binary \\r\\nshortly, in another SE file.\\r\\nNow that the server side has an execution domain defined, the init process must be allowed \\r\\nto transition to it. This is a subtle, but critical nuance. After init has forked to create the new \\r\\nprocess for the service, it needs to be allowed to transition domains to the one defined for the \\r\\nHIDL service. This is accomplished via the init_daemon_domain macro. This macro sets up \\r\\nseveral allow policies for init to automatically transition to hal_aproximity_default when \\r\\nit forks and starts a process labeled as hal_aproximity_default_exec. Rounding out this \\r\\nchunk is an allow policy for processes within the hal_aproximity_default domain to find \\r\\nthe hal_aproximity_hwservice.\\r\\nThe final allow rule specifies that any binary running in the hal_aproximity_default \\r\\ndomain is able to access serial devices exposed by the kernel. Because this HIDL leverages the \\r\\nsame shim library as the traditional HAL to access the underlying device interface(s), it needs \\r\\nthe same SE access to the backing USB serial interface that connects the custom proximity \\r\\ndevice to the system on a chip (SoC). This is the same type of allow rule that is applied to the \\r\\ndomain executing the daemon(s) leveraging the legacy HAL, discussed in Chapter 9.\\r\\nAll the various types defined and allow rules established in hal_aproximity.te are great, but \\r\\nby themselves they do not accomplish anything. Remember, with SE Linux, each process, file, \\r\\nsocket, and so on is given a context for the kernel to understand what access it has to features \\r\\nwithin the system. In the case of our custom HIDL, the two “top” level points of concern are \\r\\nthe HIDL service and the HIDL interface. The service is an executable binary that is stored on \\r\\nthe file system. To apply the SE policies to the specific file, add the lines in Listing 11.13 to the \\r\\nend of device/acme/one/acme_one/sepolicy/file_contexts.\\r\\nListing 11.13 Aproximity Additions to file_contexts\\r\\n# Acme One Specific Changes\\r\\n/vendor/bin/hw/vendor\\\\.acme\\\\.one\\\\.aproximity@1\\\\.0-service   \\r\\n➥ u:object_r:hal_aproximity_default_exec:s0\\r\\nThe vendor.acme.one.aproximity@1.0-service executable is declared to be the hal_\\r\\naproximity_default_exec type. This also marks it as a vendor-executable file and also estab-\\r\\nlishes that it is a HIDL service for hal_aproximity_hwservice labeled interfaces.\\r\\nThis leaves the HIDL interface (the binder interface) to be defined. Create the file device/acme/\\r\\none/acme_one/sepolicy/hwservice_contexts with the content shown in Listing 11.14.\\r\\n9780134096346_print.indb   21125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=":{"__data__":"{\"id_\":\"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nM/d+MBXef0QEUM7abRZ5zD9TQrZcc8h7Sp/dTNIjSY=\",\"text\":\"\\r\\n212Chapter 11  Creating a Custom Binderized HAL\\r\\nListing 11.14 Aproximity-Specific hwservice_contexts \\r\\nvendor.acme.one.aproximity::IAproximity     u:object_r:hal_aproximity_hwservice:s0\\r\\nThis final piece brings all the SE policy definitions added for the HIDL together. The one inter-\\r\\nface the custom HIDL exposed, vendor.acme.one.aproximity::IAproximity, is declared to \\r\\nbe of type hal_aproximity_hwservice.\\r\\nDevice Manifest\\r\\nNow that the HIDL is defined and SE policy has been associated with it, the system needs to \\r\\nknow that this HIDL exists and some of the details about it. The HIDL infrastructure requires \\r\\ndevices to declare via a manifest which HIDL components are present and the details about \\r\\nthem. Without the details in this file, hwservicemanager does not know how the HIDL can be \\r\\nregistered and used (for example, the transport). Using this information, hwservicemanager  \\r\\ncan verify/impose correct SE policy and support for the transport. The possible values for \\r\\ntransports are hwbinder and passthrough. Any other value, including a missing transport, is \\r\\nconsidered an error. Remember that any new devices running Android 8 or newer are allowed \\r\\na very limited set of passthrough type HIDLs. Create the file devices/acme/one/acme_one/\\r\\nmanifest.xml with  the content shown in Listing 11.15.\\r\\nListing 11.15 Aproximity Additions to Device manifest.xml\\r\\n<manifest version=”1.0” type=”device”>\\r\\n    <hal format=\\\"hidl\\\">\\r\\n        <name>vendor.acme.one.aproximity</name>\\r\\n        <transport>hwbinder</transport>\\r\\n        <version>1.0</version>\\r\\n        <interface>\\r\\n            <name>IAproximity</name>\\r\\n            <instance>default</instance>\\r\\n        </interface>\\r\\n    </hal>\\r\\n</manifest>\\r\\nBecause Acme One is derived from the hikey960 device, the device manifest changes need \\r\\nto be picked up by the HiKey960 board configuration makefile. Edit the file device/linaro/\\r\\nhikey/hikey960/BoardConfig.mk, adding the content shown in Listing 11.16 immediately \\r\\nafter the BoardConfigCommon.mk file is included.\\r\\nListing 11.16 Aproximity Additions to HiKey960 BoardConfig.mk\\r\\n# Extend the device manifest file (for Acme One HIDL)\\r\\nifeq (acme_one, $(TARGET_PRODUCT))\\r\\n$(warning Including Acme One HIDL manifest)\\r\\n9780134096346_print.indb   21225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=":{"__data__":"{\"id_\":\"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"PTlXsRGnkDt7pDbgzAK/XEbi6E4UwZrxkdLKUZcJR84=\",\"text\":\"\\r\\n213Acme Custom HIDL\\r\\nDEVICE_MANIFEST_FILE += device/acme/one/manifest.xml\\r\\nendif\\r\\nBuild the HIDL into Acme\\r\\nJust like adding a custom app or other component, you must add the HIDL service to the Acme \\r\\nbuild. Edit the file device/acme/one/acme_one/acme_one.mk and add the line shown in \\r\\nListing 11.17.\\r\\nListing 11.17 Acme One HIDL Updates to acme_one.mk \\r\\nPRODUCT_PACKAGES += vendor.acme.one.aproximity@1.0-service\\r\\nRe-running the build for the target will result in updates to system.img and vendor.img. After \\r\\nthese are flashed on to the HiKey960 board, the aproximity service will start at system startup, \\r\\nshown in bold in Listing 11.18.\\r\\nListing 11.18 Running aproximity Service \\r\\n$ adb logcat –v time | grep –C 3 –i aproximity\\r\\n01-01 00:07:12.519 I/ServiceManagement( 2453): Removing namespace from process name android.hardware.configstore@1.1-service to configstore@1.1-service.\\r\\n01-01 00:07:12.523 I/ServiceManagement( 2449): Registered  android.hardware.health@2.0::IHealth/backup (start delay of 70ms)\\r\\n01-01 00:07:12.523 I/health@2.0/( 2449): health@2.0/backup: Hal init done\\r\\n01-01 00:07:12.525 I/ServiceManagement( 2460): Registered  vendor.acme.one.aproximity@1.0::IAproximity/default (start delay of 56ms)\\r\\n01-01 00:07:12.525 I/ServiceManagement( 2460): Removing namespace from process name vendor.acme.one.aproximity@1.0-service to aproximity@1.0-service.\\r\\n00:07:12.532 I/netdClient( 2443): Skipping libnetd_client init since *we* are netd\\r\\n01-01 00:07:12.533 I/ServiceManagement( 2458): Registered  android.hardware.memtrack@1.0::IMemtrack/default (start delay of 65ms)\\r\\n01-01 00:07:12.534 I/ServiceManagement( 2458): Removing namespace from process name android.hardware.memtrack@1.0-service to memtrack@1.0-service.\\r\\n<CTRL-C>\\r\\n$ adb shell\\r\\nhikey960:/$ ps –A | grep –i aproximity\\r\\nsystem   2460   1   37068   4652 0      0 S vendor.acme.one.aproximity@1.0-service\\r\\n9780134096346_print.indb   21325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=":{"__data__":"{\"id_\":\"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"nsXECSpVwAFZFmvMKFwrdTf1ESE5E2wq+u1Qj8fGJJE=\",\"text\":\"\\r\\n214Chapter 11  Creating a Custom Binderized HAL\\r\\nLocking Down the API\\r\\nJust like a publicly released SDK or library, defining a new, custom HIDL is a non-trivial effort. It \\r\\nrequires careful consideration of the API details. Creating an API just to turn around and change \\r\\nor remove it would be obnoxious as well as a nightmare to support. These public interfaces \\r\\nare not the same as internal codebase APIs, which may be constantly refactored. After they are \\r\\n“published,” HIDL-defined interfaces have to be considered frozen: “stable” and always avail-\\r\\nable. This ensures that clients using the HIDL will work on any target that provides the inter-\\r\\nface, and that future devices that expose the HIDL are also compatible. The AOSP framework \\r\\ndoes not enforce this requirement at runtime—it really can’t because it has no way of knowing \\r\\nwhat prior revisions of an API looked like. All is not lost, though. The AOSP build system has \\r\\na mechanism that ensures that an interface at a specific API does not change. Recall that each \\r\\nHIDL defined by the AOSP framework, as well as the custom HIDL in this section, has a version \\r\\nnumber associated with it. This combination makes the HIDL interface unique. After an inter-\\r\\nface has been defined and is ready to be “locked down,” a special hash is created for it. This \\r\\nhash is used both at build time and also when executing the Vendor Test Suite (VTS) to verify \\r\\nthe vendor’s device build is compliant. You can find more details about interface hashing at: \\r\\nhttps://source.android.com/devices/architecture/hidl/hashing\\r\\nAll HIDL interfaces, including the system-defined interfaces, must be locked down to pass VTS. \\r\\nFor example, Listing 11.19 shows the first several lines of the AOSP HIDL interfaces for  \\r\\nAndroid 10. It has been abbreviated for space considerations. You can find the actual file at \\r\\nhardware/interfaces/current.txt.\\r\\nListing 11.19 AOSP HIDL Hashes \\r\\n# Do not change this file except to add new interfaces. Changing\\r\\n# pre-existing interfaces will fail VTS and break framework-only OTAs\\r\\n# HALs released in Android O\\r\\nf219c3b5b8c...9ad090417a2 android.hardware.audio@2.0::IDevice\\r\\n4d579cae1cd...9de5c1c7362 android.hardware.audio@2.0::IDevicesFactory\\r\\n203e23f1801...624c2b0848a android.hardware.audio@2.0::IPrimaryDevice\\r\\naaf93123dee...ebe1ee86748 android.hardware.audio@2.0::IStream\\r\\n0468c5723b0...27b04b766df android.hardware.audio@2.0::IStreamIn\\r\\n7296f7064fd...178d063680a android.hardware.audio@2.0::IStreamOut\\r\\n19d241d71c3...25e9a98b6c2 android.hardware.audio@2.0::IStreamOutCallback\\r\\nc84da9f5860...774f8ea2648 android.hardware.audio@2.0::types\\r\\n1305786c06e...54752b8566b android.hardware.audio.common@2.0::types\\r\\n...\\r\\nThe Acme One aproximity HIDL is now “locked down” and ready for use. Because this is a \\r\\nvendor-specific HIDL, the hash details for it go into the vendor-specific interfaces directory. \\r\\nThankfully, there is no need to know the exact algorithm used to generate the hash, the exact \\r\\nhash type (SHA-256), or to manually calculate it. The hidl-gen tool provides support for \\r\\n9780134096346_print.indb   21425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8=":{"__data__":"{\"id_\":\"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"iIOhIK4Hu6KgkX3tLKNw4Qv7bphywFEUUZTKZdTYHTU=\",\"text\":\"\\r\\n215Acme Custom HIDL\\r\\ngenerating interface hashes. Listing 11.20 shows how to generate the file vendor/acme/one/ \\r\\ninterfaces/current.txt, which will contain the locked-down hashes for the aproximity \\r\\nHIDL.\\r\\nListing 11.20 Create Custom HIDL Hashes\\r\\nhidl-gen -L hash -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n  -r android.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0 \\\\\\r\\n  >> vendor/acme/one/interfaces/current.txt\\r\\nThe content of the file will look similar to the AOSP framework’s current.txt, shown in \\r\\nListing 11.19. However, only the custom HIDL interface and types are present in the file, an \\r\\nabbreviated version of which is shown in Listing 11.21.\\r\\nListing 11.21 Acme One HIDL Hashes\\r\\n3b78d426c04...8b4b19ef250 vendor.acme.one.aproximity@1.0::types\\r\\ndff6991e375...976a938449f vendor.acme.one.aproximity@1.0::IAproximity\\r\\nTo demonstrate how changes to the HIDL are caught at build time, let’s change a small aspect \\r\\nof the HIDL definition. Edit the file IAproximity.hal and add a new API, reset, which can \\r\\nbe used to reset the underlying hardware (see Listing 11.22).\\r\\nListing 11.22 Add the reset Method to IAProximity\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\ninterface IAproximity {\\r\\n...\\r\\n    /**\\r\\n     * Reset the underlying hardware\\r\\n     */\\r\\n    reset();\\r\\n};\\r\\nThere is no need to provide an implementation of the new interface. Simply start a build and \\r\\nnotice how it fails. The hash for the interface does not match the hash for the same version of \\r\\nthe interface. An abbreviated output is shown in Listing 11.23, with the error set in bold.\\r\\nListing 11.23 Failed Build After HIDL API Change\\r\\n$ m -j 1\\r\\n...\\r\\n9780134096346_print.indb   21525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=":{"__data__":"{\"id_\":\"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Wuw/7kE210eDLGXjKyx1HvBU6l3L1vxTpQifcs4LoeU=\",\"text\":\"\\r\\n216Chapter 11  Creating a Custom Binderized HAL\\r\\n[ 19% 7/36] HIDL c++-sources: vendor/acme/one/interfaces/aproximity/1.0/types.hal  vendor/acme/one/interfaces/aproximity/1\\r\\nFAILED:  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. \\r\\none.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/AproximityAll.cpp  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. \\r\\none.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/types.cpp\\r\\nrm -rf  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. \\r\\none.aproximity@1.0_genc++/gen && out/soong/host/linux-x86/bin/hidl-gen -R -p . -d  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. \\r\\none.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/AproximityAll.cpp.d -o  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. \\r\\none.aproximity@1.0_genc++/gen -L c++-sources - rvendor.acme.one:vendor/acme/one/interfaces - \\r\\nrandroid.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0\\r\\nERROR: vendor.acme.one.aproximity@1.0::IAproximity has hash c270b98c7a304a5026ffd1c6e6cfb03bf01756efdcd45950758a87e604b108d7 which does not match \\r\\nhash on record. This interface has been frozen. Do not change it!\\r\\nERROR: Could not parse vendor.acme.one.aproximity@1.0::types. Aborting.\\r\\n09:55:15 ninja failed with: exit status 1\\r\\n#### failed to build some targets (46 seconds) ####\\r\\nBecause we had locked down the HIDL interface (hashes were created), the build system will \\r\\nnot allow a new image to be created. There are three choices in this situation: do not modify \\r\\nthe API, bump the version number and provide the new API implementation, or provide the \\r\\nnew API implementation and re-generate the hash (safe because the HIDL API was not fully \\r\\nreleased). Bumping the version number would require a new HIDL implementation that derives \\r\\nfrom this 1.0 version and is beyond the scope of this book. See the AOSP sensors HIDL API \\r\\nfor an example of a multi-versioned HIDL API. To keep things simple, we will just add a no-op \\r\\nimplementation for the new API, regenerate the API hashes for our HIDL, and verify we can \\r\\nbuild, as shown in Listing 11.24.\\r\\nListing 11.24 Regenerate Custom HIDL Hashes\\r\\n$ hidl-gen -L hash -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n  -r android.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0 \\\\\\r\\n  > vendor/acme/one/interfaces/current.txt\\r\\n$ m –j 12\\r\\n...\\r\\n[100% 15/15] Target vendor fs image: out/target/product/hikey960/vendor.img\\r\\n#### build completed successfully (10 seconds) ####\\r\\n9780134096346_print.indb   21625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM=":{"__data__":"{\"id_\":\"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"HHpmAXmdfdkjzC7Lht31OHpohEQpiNQtlF1u0rfemHA=\",\"text\":\"\\r\\n217Summary\\r\\nSummary\\r\\nThis chapter defined a new HIDL-based HAL for the Acme platform: aproximity. This HAL \\r\\nreplaces the traditional HAL implementation defined in Chapter 8. The implementation lever-\\r\\nages the shim library that was built as part of the traditional HAL, but exposes the functionality \\r\\nvia Binder-based APIs. The binders are registered with the system by a simple service executable \\r\\nand processed by a service-side implementation of the IAproximity interface. Chapter 12 will \\r\\nround out the HIDL example by showing how to create client applications that can access the \\r\\naproximity HAL.\\r\\n9780134096346_print.indb   21725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g=":{"__data__":"{\"id_\":\"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JAVbebnXVX31IlImARNWKH3ukfndHFS9mu1oiBxAnPM=\",\"text\":\"\\r\\n12\\r\\nClients for a Custom \\r\\nBinderized HAL\\r\\nAndroid’s newer binderized HAL, HIDL, is a fundamental shift in the way that OEMs and \\r\\nvendors provide platform-specific support for a device. Not only does this impact the OEM/\\r\\nvendor implementation of a custom HAL, the code that utilizes the backing HIDL is also differ-\\r\\nent than a traditional HAL. Client apps may be written in native C/C++ or Java code but no \\r\\nlonger require special vendor-provided libraries to be bundled with the system. Similarly, the \\r\\nplatform automatically builds Java-side support, removing the need for a custom JNI layer to \\r\\ntake advantage of the HAL implementation.\\r\\nHIDL client executables are similar in function to pre-Android 8 daemons or Android services \\r\\nthat leveraged traditional HAL libraries. Typically, daemons or services using a traditional \\r\\nHAL load the requisite HAL shared library and often expose functionality to other parts of the \\r\\nsystem that require the backing HAL library. This is central to the way Android manages access \\r\\nto scarce resources, such as hardware features. Exposing the HAL features is typically done via \\r\\na binder interface, or other IPC mechanism such as a POSIX socket. Depending on the exact \\r\\nfunction of the HIDL, the same techniques may be used to expose the HIDL functionality to \\r\\nthe rest of the system.\\r\\nThis chapter demonstrates HIDL client implementation using both C++ and Java/Kotlin code, \\r\\ntapping into the Acme proximity HIDL created in Chapter 11. Exposing the HIDL functional-\\r\\nity to the rest of the system via daemon or service is device and feature specific, so it is beyond \\r\\nthe scope of this chapter. The main takeaway from this chapter will be how to tap into the \\r\\nnew custom HIDL via a client application that is built into the system. Remember, these are \\r\\nnot third-party applications that are released to the Google Play or any other app store. Only \\r\\nsystem- or vendor-provided executables/apps will have the necessary security access to directly \\r\\nleverage HIDL interfaces.\\r\\nNative C++ Aproximity Client\\r\\nConceptually, the HIDL client implementation is quite simple with regards to interfacing with \\r\\nthe backing HIDL service: get the backing service then call the appropriate method as needed. \\r\\n9780134096346_print.indb   21925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=":{"__data__":"{\"id_\":\"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"X1IvUndNX2Bq/Dndi68BktPRmldIO5rfu0QBV+7Gm+o=\",\"text\":\"\\r\\n220Chapter 12  Clients for a Custom Binderized HAL\\r\\nIn fact, most of the C++ example code deals with input arguments and providing output to  \\r\\nthe caller!\\r\\nAs discussed in Chapter 10, when a HIDL’s .hal file(s) are built with the platform, a shared \\r\\nlibrary is created for the HIDL along with the necessary headers for both service and client. \\r\\nThis shared library provides all the functionality for the client to find the backing HIDL service, \\r\\nconnect with it, and call through to its methods. The Binder-specific bits are handled by the \\r\\ngenerated code, allowing the HIDL client developer to focus on the functionality being used.\\r\\nListing 12.1 contains a simple C++ client for the custom HIDL. This is a command line applica-\\r\\ntion that can be run to exercise the different HIDL features of aproximity. This file is located \\r\\nat device/acme/one/app/aproximitycl in the platform tree. The key section of the code is \\r\\nthe portion near the end of main, which acquires a pointer to the backing service and calls the \\r\\nspecific HIDL method (shown in bold.)\\r\\nListing 12.1 Aproximity C++ HIDL Client\\r\\n#include <hidl/HidlSupport.h>\\r\\n#include <vendor/acme/one/aproximity/1.0/IAproximity.h>\\r\\n#include <vendor/acme/one/aproximity/1.0/types.h>\\r\\n#include <utils/StrongPointer.h>\\r\\n#include <getopt.h>\\r\\nusing vendor::acme::one::aproximity::V1_0::IAproximity;\\r\\nusing vendor::acme::one::aproximity::V1_0::ProximityDetails;\\r\\nusing vendor::acme::one::aproximity::V1_0::ProximitySummary;\\r\\nusing android::sp;\\r\\nusing namespace android::hardware;\\r\\nstatic void detailsCb(const ProximityDetails& details) {\\r\\n    printf(\\\"[details] precision min/max: %d/%d\\\\n\\\",\\r\\n           details.precision.min,\\r\\n           details.precision.max);\\r\\n    printf(\\\"[details] proximity min/max: %d/%d\\\\n\\\",\\r\\n           details.proximity.min,\\r\\n           details.proximity.max);\\r\\n}\\r\\nstatic void summaryCb(const ProximitySummary& summary) {\\r\\n    printf(\\\"[summary] poll call count: %lu, last poll call (ms): %ld\\\\n\\\",\\r\\n           summary.pollCallCount,\\r\\n           summary.lastPollCalledMs);\\r\\n}\\r\\nvoid printUsage(char *name) {\\r\\n    printf(\\\"Usage: %s [-ds] [-g input_precision]\\\\n\\\", name);\\r\\n9780134096346_print.indb   22025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU=":{"__data__":"{\"id_\":\"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"se0hDBUnr27nQk1eaaPuTluYaYRSLa//z5OKPqA7pOI=\",\"text\":\"\\r\\n221Native C++ Aproximity Client\\r\\n    printf(\\\"\\\\td:  Display the details of the sensor\\\\n\\\");\\r\\n    printf(\\\"\\\\tg:  Get the latest proximity reading at the precision\\\\n\\\");\\r\\n    printf(\\\"\\\\ts:  Print the summary details of the service\\\\n\\\");\\r\\n}\\r\\nint main(int argc, char* argv[]) {\\r\\n    if (argc < 2) {\\r\\n        printUsage(argv[0]);\\r\\n        return -1;\\r\\n    }\\r\\n    bool doDetails= false;\\r\\n    bool doProximity = false;\\r\\n    int precision = -1;\\r\\n    bool doSummary = false;\\r\\n    bool doDebug = false;\\r\\n    int  currentOpt;\\r\\n    //  Parse the command line options, determine what to do\\r\\n    while ((currentOpt = getopt(argc, argv, \\\"dg:s\\\")) != -1) {\\r\\n        switch (currentOpt) {\\r\\n            case 'd':\\r\\n                doDetails = true;\\r\\n                break;\\r\\n            case 'g':\\r\\n                doProximity = true;\\r\\n                precision = atoi(optarg);\\r\\n                break;\\r\\n            case 's':\\r\\n                doSummary = true;\\r\\n                break;\\r\\n            case '?':\\r\\n                if (isprint(optopt)) {\\r\\n                    fprintf(stderr,\\r\\n                            \\\"Unknown option: '%c'\\\\n\\\",\\r\\n                            optopt);\\r\\n                } else {\\r\\n                    fprintf(stderr,\\r\\n                            \\\"Unknown option character: '\\\\\\\\x%X'\\\\n\\\",\\r\\n                            optopt);\\r\\n                }\\r\\n                printUsage(argv[0]);\\r\\n                return -1;\\r\\n            default:\\r\\n                abort();\\r\\n9780134096346_print.indb   22125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk=":{"__data__":"{\"id_\":\"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"FFHdPVKNqHdc3EdYdZPFhXOtKmApkKSHaDzUeLEljA0=\",\"text\":\"\\r\\n222Chapter 12  Clients for a Custom Binderized HAL\\r\\n        }\\r\\n    }\\r\\n    if (!doDetails && !doProximity && !doSummary) {\\r\\n        doDebug = true;\\r\\n    }\\r\\n    //  Get the HIDL to use (IAproximity)\\r\\n    sp<IAproximity>  client = IAproximity::getService();\\r\\n    if (client == nullptr) {\\r\\n        fprintf(stderr, \\\"Unable to get aproximity service interface\\\\n\\\");\\r\\n        return -2;\\r\\n    }\\r\\n    if (doDetails) {\\r\\n        Return<void> result = client->get_details(detailsCb);\\r\\n        if (!result.isOk()) {\\r\\n            fprintf(stderr,\\r\\n                    \\\"Unable to get proximity service details. Err: %s\\\\n\\\",\\r\\n                    result.description().c_str());\\r\\n            return -1;\\r\\n        }\\r\\n    }\\r\\n    if (doProximity) {\\r\\n        Return<int32_t> retProximity = client->poll(precision);\\r\\n        if (!retProximity.isOk()) {\\r\\n            fprintf(stderr,\\r\\n                    \\\"Unable to get proximity for precision (%d). Err: %s\\\\n\\\",\\r\\n                    precision,\\r\\n                    retProximity.description().c_str());\\r\\n            return -1;\\r\\n        }\\r\\n        printf(\\\"[proximity] %d\\\\n\\\", static_cast<int32_t>(retProximity));\\r\\n    }\\r\\n    if (doSummary) {\\r\\n        client->summarize(summaryCb);\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n9780134096346_print.indb   22225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=":{"__data__":"{\"id_\":\"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"AybwmWvQn2CE2N7yMPflLKVtj1mCPG0EP449Dyax66U=\",\"text\":\"\\r\\n223Native C++ Aproximity Client\\r\\nAfter acquiring a smart pointer to the IAproximity service, sp<IAproximity>, the client can \\r\\nsimply call the desired method. If the smart pointer is nullptr, it means the client could not \\r\\nconnect with the backing service. This typically happens if the HIDL service is not present or \\r\\nthere was a SE policy violation.\\r\\nNote\\r\\nJust like communicating with other binder-based services, if the HIDL framework is unable to \\r\\nstart/find the service that provides the HIDL implementation, the client may block indefinitely. \\r\\nUnder normal circumstances this will not happen, but during development can be a major \\r\\nsource of confusion. If this happens to your client app, check the kernel logs (via dmesg) and \\r\\nlogcat output for errors relating to starting the backing HIDL service.\\r\\nOne of the more confusing parts of HIDL interface APIs is the handling of returned values. \\r\\nDepending on the specific service method, the return results may be received in different ways. \\r\\nPrimitive data (for example, int32_t, int64_t, boolean, and so on) are returned (almost) \\r\\ndirectly. However, as shown in the service-side code in Chapter 11, complex or multiple return \\r\\ntypes require the client side to provide a callback method to receive the return data. This can be \\r\\nseen in Listing 12.1 with the three different IAproximity methods.\\r\\nAll the exposed service methods return a Return object, which contains information about \\r\\nthe service call and possibly some return data. The Return object contains status details for \\r\\nthe method call. The result of the Return.isOk() method  indicates whether the service call \\r\\nsucceeded or not. If it did not, the Return.description() method can be used to get a log-\\r\\nfriendly message. \\r\\nPrimitive return type handling is demonstrated with the return handling for the poll method. \\r\\nWhen Return indicates the call is successful for a primitive return value, the Return object is \\r\\nsimply cast to the primitive type.\\r\\nIn the case of the complex return values ProximityDetails and ProximitySummary, there \\r\\nis no direct return data. Instead, the client must provide callback methods, detailsCb and \\r\\nsummaryCb, to the HIDL get_details and summarize methods, as shown in Listing 12.1. \\r\\nThese callback functions handle the different complex return values. Note that even though \\r\\ncallback methods are used, the actual HIDL service call blocks, so the results will be received via \\r\\nthe callback before the service call returns.\\r\\nBuilding the aproximitycl client executable requires a small blueprint file. Create the file \\r\\nAndroid.bp in device/acme/one/app/aproximitycl with the content shown in Listing 12.2.\\r\\nListing 12.2 aproximitycl Blueprint File\\r\\ncc_binary {\\r\\n    name: \\\"aproximitycl\\\",\\r\\n    srcs: [\\\"aproximitycl.cpp\\\"],\\r\\n    vendor: true,\\r\\n    shared_libs: [\\r\\n9780134096346_print.indb   22325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=":{"__data__":"{\"id_\":\"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1BY9xbnp2S7V5bQ41JMmHXPDCFkflqE+QdbRk3wD5oo=\",\"text\":\"\\r\\n224Chapter 12  Clients for a Custom Binderized HAL\\r\\n        \\\"libhidlbase\\\",\\r\\n        \\\"libutils\\\",\\r\\n        vendor.acme.one.aproximitycl@1.0\\r\\n    ]\\r\\n}\\r\\nThe blueprint file instructs the build system to create a C++ binary based on the input file \\r\\naproximitycl.cpp using the necessary HIDL libraries. Because the vendor field is set to true, \\r\\nthe resultant executable will be in the vendor file system on the running device. Specifically, it \\r\\nwill be located at /vendor/bin/aproximitycl. Before the new executable can be used, some \\r\\nnew SE policy details must be added to the system.\\r\\nSE Linux for Android Changes for aproximitycl\\r\\nJust like when the HIDL service was added in Chapter 11, some new SE Linux policy changes \\r\\nare needed for aproximitycl to function. Because the Aproximity HIDL support has already \\r\\nbeen created, adding the client-side support is rather simple. Edit the file device/acme/one/\\r\\nacme_one/sepolicy/hal_aproximity.te, adding the content from Listing 12.3 to the end.\\r\\nListing 12.3 Additions to the hal_aproximity.te Type Enforcement File\\r\\n###\\r\\n# Create an execution domain for aproximitycl which is able to access the service\\r\\n#\\r\\ntype aproximitycl, domain;\\r\\nhal_client_domain(aproximitycl, hal_aproximity)\\r\\ntype aproximitycl_exec, exec_type, vendor_file_type, file_type;\\r\\ndomain_auto_trans(shell, aproximitycl_exec, aproximitycl)\\r\\nallow shell aproximitycl_exec:file { getattr open read execute map };\\r\\n# Allow `adb shell /vendor/bin/aproximitycl` and also\\r\\n# `adb shell` then `/vendor/bin/aproximitycl`\\r\\nallow aproximitycl shell:fd use;\\r\\nallow aproximitycl adbd:fd use;\\r\\nallow aproximitycl adbd:process sigchld;\\r\\nallow aproximitycl adbd:unix_stream_socket { getattr ioctl read write };\\r\\nallow aproximitycl devpts:chr_file rw_file_perms;\\r\\nThis new content for the type enforcement file sets up a new domain and execution attri-\\r\\nbute for the HIDL client (aproximitycl). Because it builds upon the server setup described \\r\\nin Chapter 11, there is no reason to dig into each line. However, the end of this section is \\r\\nworth mentioning. Instead of init, the aproximitycl executable may only be run manually \\r\\nvia the shell. To allow this, the domain_auto_trans macro is used, which sets up a policy to \\r\\n9780134096346_print.indb   22425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=":{"__data__":"{\"id_\":\"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"/GZ7KOJyiQTcFVQtsgP+dBlbtKcaj6OADDP/m9epGKM=\",\"text\":\"\\r\\n225Native C++ Aproximity Client\\r\\nautomatically transition anything in the shell domain to the new aproximitycl domain \\r\\nwhen the shell forks and executes a binary labeled with the aproximitycl_exec type. If that \\r\\nsounds familiar, it is because it is exactly what the service-side init_daemon_domain macro \\r\\nuses behind the scenes to allow auto-transition of init! The remaining lines of this policy file \\r\\nestablish several “allow” policies needed to permit actual use of aproximitycl. These policies \\r\\nallow the shell to execute binaries labeled as aproximitycl_exec and also allow the  \\r\\naproximitycl domain executables to use file descriptors, UNIX domain sockets, virtual termi-\\r\\nnals, and to send child signals. All of that is required so aproximitycl can use standard input/\\r\\noutput when run via the shell manually or via the adb shell command.\\r\\nThe remaining SE change needed for the aproximitycl client is to set the label of the execut-\\r\\nable binary. Add the line in Listing 12.4 to the end of device/acme/one/acme_one/ \\r\\nsepolicy/file_contexts to place aproximitycl into the aproximitycl_exec domain.\\r\\nListing 12.4 Addition to file_contexts for aproximitycl\\r\\n# Acme One Specific Changes\\r\\n...\\r\\n/vendor/bin/aproximitycl   u:object_r:aproximitycl_exec:s0\\r\\nBuild aproximitycl into Acme\\r\\nJust like when adding a vendor app or other component to the Android OS build, you must \\r\\nadd the HIDL client to the Acme build file. Edit the file device/acme/one/acme_one/ \\r\\nacme_one.mk  and add the line shown in Listing 12.5.\\r\\nListing 12.5 Add aproxmitycl to acme_one.mk \\r\\nPRODUCT_PACKAGES += aproximitycl\\r\\nRe-running the build for the target will result in updates to system.img and vendor.img. After \\r\\nthese are flashed on to the HiKey960 board, the service will start at system startup and can be \\r\\nleveraged via the aproximitycl executable (see Listing 12.6).\\r\\nListing 12.6 Running aproximitycl\\r\\n$ adb shell\\r\\nhikey960:/ $ aproximitycl\\r\\nUsage: aproximitycl [-ds] [-g input_precision]\\r\\n        d:  Display the details of the sensor\\r\\n        g:  Get the latest proximity reading at the precision\\r\\n        s:  Print the summary details of the service\\r\\n255|hikey960:/ $ aproximitycl -d \\r\\n[details] precision min/max: 0/100\\r\\n9780134096346_print.indb   22525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=":{"__data__":"{\"id_\":\"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"75z7VwW3KNRSeVxgLLyTWo9YkLmgZqbzqp9ePaCy3Nc=\",\"text\":\"\\r\\n226Chapter 12  Clients for a Custom Binderized HAL\\r\\n[details] proximity min/max: 0/100\\r\\nhikey960:/ $ aproximitycl -g -1 \\r\\n[proximity] -1\\r\\nhikey960:/ $ aproximitycl -g 50 \\r\\n[proximity] 60\\r\\nhikey960:/ $ aproximitycl -g 99 \\r\\n[proximity] 63\\r\\nhikey960:/ $ aproximitycl -s \\r\\n[summary] poll call count: 3, last poll call (ms): 1609601581478\\r\\nJava/Kotlin Aproximity Client\\r\\nUtilizing a HIDL directly in a Java (or Kotlin!) package is substantially easier than legacy HAL \\r\\naccess. This is in part because HIDL leverages the power of Android’s Binder framework, but \\r\\nalso because the HIDL build support auto-generates Java libraries for use by Java-based compo-\\r\\nnents. In other words: No custom JNI code is required! That being said, it is important to \\r\\nremember that performance-critical features are generally better kept to native code rather than \\r\\nruntime-based code.\\r\\nTo keep things simple, there is a complete Java/Kotlin-based client for IAproximity in the plat-\\r\\nform tree at device/acme/one/app/AproximityClient. This section will not walk through \\r\\nsetting up each file in that directory. The layout is a typical Android Studio project. Note, \\r\\nthough, that the AOSP build tree does not support Gradle-based builds.\\r\\nThis example brings up a simple UI showing the details of the aproximity HIDL and allows \\r\\nthe user to request the latest proximity data via the user-provided precision value. The result is \\r\\nshown along with summary information. The code for MainActivity, written in Kotlin, can be \\r\\nseen in Listing 12.7 and has been trimmed here for brevity.\\r\\nListing 12.7 AproximityClient MainActivity \\r\\npackage com.acme.one.aproximityclient\\r\\nimport ...\\r\\nimport vendor.acme.one.aproximity.V1_0.IAproximity\\r\\nimport vendor.acme.one.aproximity.V1_0.ProximitySummary\\r\\nimport java.lang.NumberFormatException\\r\\nclass MainActivity : Activity() {\\r\\n    companion object {\\r\\n        const val TAG = \\\"MainActivity\\\"\\r\\n    }\\r\\n    private lateinit var proxDetails: TextView\\r\\n    private lateinit var proxSummary: TextView\\r\\n    private lateinit var proxPrecision: EditText\\r\\n    private lateinit var proxValue: TextView\\r\\n9780134096346_print.indb   22625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ=":{"__data__":"{\"id_\":\"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"jTIqfg6KPRQBmCAXEvpbdUYTHm0VLOib9qwS1aoAufo=\",\"text\":\"\\r\\n227Java/Kotlin Aproximity Client\\r\\n    private lateinit var pollButton: Button\\r\\n    private lateinit var proxHidl: IAproximity\\r\\n    override fun onCreate(savedInstanceState: Bundle?) {\\r\\n        super.onCreate(savedInstanceState)\\r\\n        setContentView(R.layout.activity_main)\\r\\n        setupHalAccess()\\r\\n        setupViews()\\r\\n    }\\r\\n    override fun onResume() {\\r\\n        super.onResume()\\r\\n        updateDetails()\\r\\n    }\\r\\n    @SuppressLint(\\\"SetTextI18n\\\")\\r\\n    private fun setupViews() {\\r\\n        ...\\r\\n        pollButton = findViewById(R.id.get_proximity)\\r\\n        pollButton.setOnClickListener {\\r\\n            val precision = try {\\r\\n                proxPrecision.text.toString().toInt()\\r\\n            } catch (e: NumberFormatException) {\\r\\n                null\\r\\n            }\\r\\n            precision?.also {\\r\\n                val proximity: Int = proxHidl.poll(precision)\\r\\n                Log.d(TAG, \\\"Latest proximity: $proximity\\\")\\r\\n                proxValue.text = proximity.toString()\\r\\n                //  Also update summarize details\\r\\n                val summary = proxHidl.summarize()\\r\\n                val count = summary.pollCallCount\\r\\n                val timeStamp = summary.lastPollCalledMs\\r\\n                proxSummary.text =\\r\\n                    \\\"Poll called $count times, last at $timeStamp\\\"\\r\\n            } ?: run {\\r\\n                Toast.makeText(\\r\\n                    this,\\r\\n                    R.string.bad_precision,\\r\\n                    Toast.LENGTH_LONG\\r\\n                ).show()\\r\\n            }\\r\\n9780134096346_print.indb   22725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=":{"__data__":"{\"id_\":\"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"VX9/xtX0nBzRSqF++RLqSa5uVOx7afJ4Nu+UQmKlx2Q=\",\"text\":\"\\r\\n228Chapter 12  Clients for a Custom Binderized HAL\\r\\n        }\\r\\n    }\\r\\n    private fun setupHalAccess() {\\r\\n        proxHidl = IAproximity.getService(true)\\r\\n    }\\r\\n    private fun updateDetails() {\\r\\n        val details = proxHidl.get_details()\\r\\n        val precMin = details.precision.min\\r\\n        val precMax = details.precision.max\\r\\n        val proxMin = details.proximity.min\\r\\n        val proxMax = details.proximity.max\\r\\n        val detailText =\\r\\n            \\\"Precision ($precMin / $precMax),\\\" +\\r\\n                    \\\"Proximity ($proxMin / $proxMax)\\\"\\r\\n        proxDetails.text = detailText\\r\\n    }\\r\\n}\\r\\nGaining access to the HIDL service is accomplished in a helper method, setupHalAccess(), \\r\\nwhich is called from onCreate(). This method calls the static method, IAproximity.\\r\\ngetService(), which internally communicates with hwservicemanager to retrieve the \\r\\nbacking binder to the HIDL service and returns an IAproximity proxy instance. The proxy \\r\\ninstance is saved in the member field, proxHidl.\\r\\nThe onResume() method calls another helper method, updateDetails(). This is the first time \\r\\nthe proxy class is used to call to the HIDL service. The get_details() HIDL method is called \\r\\nto retrieve a ProximityDetails object. The data from this object, the min and max for preci-\\r\\nsion and proximity values, are formatted and added to a text field onscreen.\\r\\nFinally, a simple OnClickListener closure is hooked into the button object, pollButton. \\r\\nWhen the user clicks the button, the precision value the user has selected is retrieved, and the \\r\\nproxy is once again called. This time both the poll()and summarize() methods are called. \\r\\nThe results of both calls are then formatted and displayed onscreen.\\r\\nAcquiring access to the HIDL service and utilizing it is noticeably simpler here in the Java/\\r\\nKotlin side. There are no thread pools to configure and join, nor are there any callback \\r\\nmethods that need to be provided when calling through to the service. However, a couple of \\r\\npotential pitfalls exist that need to be mentioned because the example code is so simple. \\r\\nFirst, this code gets access to the HIDL and makes all calls to it directly in the main thread of \\r\\nthe app. For this simple example, that’s fine. However, each of these operations is an IPC call, \\r\\nwhich means the main thread is blocked waiting on another process to handle the request and \\r\\nreturn data. Second, the code has no error handling with respect to the HIDL service calls. Just \\r\\nlike binder-based services, anytime an IPC call is made, there is the possibility of encounter-\\r\\ning a RemoteException or SecurityException. These should be dealt with as appropriate \\r\\n9780134096346_print.indb   22825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=":{"__data__":"{\"id_\":\"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"O3Zf5iMcsryD09tQbDvaFKBqgVs7oERZ0TgXL5wfUv0=\",\"text\":\"\\r\\n229\\r\\nfor the app when in production release code. Finally, it may not be obvious because this code \\r\\nlooks like run-of-the-mill Android app code, but this app must be a vendor- or platform-provided \\r\\npackage in order to access the HIDL interfaces. Typically, an app package like this or special \\r\\nsystem service would expose the HIDL functionality via a binder interface. A great example of this \\r\\nis the Secure Element application, located at packages/apps/SecureElement in the AOSP tree.\\r\\nSE Linux for Android Changes for AproximityClient\\r\\nFortunately, the necessary changes to allow AproximityClient to use the aproximity HIDL \\r\\nare very straightforward. This is, in part, because of the type of enforcement macros available in \\r\\nthe AOSP SE definitions, but also because this app needs to be a system app and will be built as \\r\\nsuch. Listing 12.8 shows the additions needed to the hal_aproximity.te file.\\r\\nListing 12.8 Adding AproximityClient to the hal_aproximity.te Type Enforcement File\\r\\n###\\r\\n# Allow platform apps (AproximityClient) to find and use hal_aproximity\\r\\n#\\r\\nhal_client_domain(platform_app, hal_aproximity)\\r\\nBuild AproximityClient into Acme\\r\\nGetting the AproximityClient package built and installed on the Acme One platform is \\r\\nsimilar to other executables we have created. As previously mentioned, the full AOSP build \\r\\nsystem does not support Gradle-based builds. Dropping a typical Android Studio–based project \\r\\ninto the tree will not work. In fact, if we look at the bundled system packages in the AOSP \\r\\ntree (under packages/*), the projects that build APKs do not even follow the typical Android \\r\\nStudio source tree layout! This makes sense; these packages are not third-party packages to be \\r\\nbuilt against the public SDK and released for any Android device. These packages are intended \\r\\nto be built for a specific Android target.\\r\\nInstead, a soong blueprint file is needed to get AproximityClient built and included in the \\r\\nplatform. The blueprint rule for creating an Android app package includes support for specify-\\r\\ning the source, resources, and manifest location(s) as well as some other options. This allows a \\r\\nnew project to still utilize the Android Studio project layout. \\r\\nNote\\r\\nEven though the soong blueprint file syntax supports a project layout like those used by \\r\\nAndroid Studio, it does not have feature parity with Gradle-based builds. There is no support \\r\\nfor Maven dependencies, Android Gradle Plugin features, build variants/flavors, and so on. Any \\r\\npackage created as part of the platform build would either need the dependencies built as \\r\\npart of the AOSP tree or dropped into the specific project as a JAR file. Building the same app \\r\\nvia Gradle or Android Studio can be achieved, but the dependency setup when using platform-\\r\\nspecific libraries can be involved.\\r\\nJava/Kotlin Aproximity Client\\r\\n9780134096346_print.indb   22925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o=":{"__data__":"{\"id_\":\"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JnFd7d5//LxHF8OLAmQAW5JJi9GA7akqAbAGHcdjURs=\",\"text\":\"\\r\\n230Chapter 12  Clients for a Custom Binderized HAL\\r\\nListing 12.9 shows the blueprint file for AproximityClient.\\r\\nListing 12.9 Android.bp Blueprint File for AproxmityClient\\r\\nandroid_app {\\r\\n    name: \\\"AproximityClient\\\",\\r\\n    vendor: true,\\r\\n    privileged: true,\\r\\n    certificate: \\\"platform\\\",\\r\\n    srcs: [\\r\\n        \\\"app/src/**/*.java\\\",\\r\\n        \\\"app/src/**/*.kt\\\",\\r\\n    ],\\r\\n    resource_dirs: [\\r\\n        \\\"app/src/main/res\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"vendor.acme.one.aproximity-V1.0-java\\\",\\r\\n    ],\\r\\n    manifest: \\\"app/src/main/AndroidManifest.xml\\\"\\r\\n}\\r\\nAs we have seen before, you can specify the location of the sources via the srcs field, allow-\\r\\ning the use of an Android Studio project layout. Similarly, the resource_dirs and manifest \\r\\nfields provide the mechanism to specify the locations of the package resources and manifest, \\r\\nrespectively.\\r\\nThe static_libs field is used to pull in Java libraries, which are available in the build tree. \\r\\nThis is where the HIDL client library for aproximity is specified as a dependency of this \\r\\npackage. This library is auto-generated by the platform based on the .hal file(s) for a given \\r\\nHIDL. Oddly enough, it does not actually perform this auto-generation until something speci-\\r\\nfies the library as a dependency! When you build the platform after adding the HIDL service \\r\\nimplementation and C++ native client, this library is nowhere to be found in the build output \\r\\nor intermediates. The build system will not create the library until the AproximityClient \\r\\napplication package is built.\\r\\nTwo other fields in this blueprint file worth mentioning are the privileged and certificate \\r\\nfields. The privileged field is used to build the package into the platform as a special plat-\\r\\nform app. This ultimately places it into a different SE context, platform_app. This domain was \\r\\nconfigured in the previous section to be allowed to use the aproximity HIDL. The certificate  \\r\\nfield specifies which of the certificates known to the platform should be used to sign the APK. \\r\\nThis goes hand-in-hand with the privileged field as the platform certificate is needed for the \\r\\napp to be placed into the platform_app SE context.\\r\\n9780134096346_print.indb   23025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw=":{"__data__":"{\"id_\":\"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"2tTmwOJDoEA2m2ChTjB0ch2gHl0hJl+QSq/TWMnbKIM=\",\"text\":\"\\r\\n231Summary\\r\\nSummary\\r\\nCreation of a customized HIDL API for an Android platform necessitates the use of a custom \\r\\nHIDL client application. This is analogous to the service- or daemon-side access to a traditional \\r\\nAndroid HAL, exposing the HAL functionality to the rest of the system. This chapter explored \\r\\nthe creation of both native (C++) and runtime (Java/Kotlin)–based clients for the Acme One \\r\\naproximity HIDL. Both types of clients are able to leverage the HIDL libraries that are gener-\\r\\nated by the platform. The libraries obfuscate most of the binder-based mechanics used by the \\r\\nHIDL architecture behind the scenes. However, both client implementations still require some \\r\\nknowledge of the backing architecture—specifically with the use of threads and context of \\r\\nexecution. Regardless, the end result is a straightforward way to use API for accessing the under-\\r\\nlying HIDL service created for the platform.\\r\\n9780134096346_print.indb   23125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM=":{"__data__":"{\"id_\":\"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"uc1Il5wHopuI3jMlw4MOvV7bXkhFTDi/ryvfYuS5kM0=\",\"text\":\"\\r\\nIndex\\r\\nSymbols\\r\\n/ (forward slash), file systems, 79\\r\\nA\\r\\nacceptance, Android adoption, 2\\r\\nAOSP, 3, 5–6\\r\\ndevelopment environment, 3\\r\\nGoogle and AOSP, 5–6\\r\\nLinux, 2–3\\r\\nmicro-controllers, 6–7\\r\\nopen source environment, 3–5\\r\\nRTOS, 6\\r\\nUI, 2\\r\\nAcme custom HIDL (binderized HAL),  \\r\\n199, 219\\r\\nbuilding into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nSE Linux for Android changes, 209–212\\r\\nservices, 202–209\\r\\n9780134096346_print.indb   23325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU=":{"__data__":"{\"id_\":\"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"Wc9iONz+7e3jYphTeo+zpn+T1w9Va6jUYyyOioyYhWs=\",\"text\":\"\\r\\n234Acme project, device development example\\r\\nAcme project, device development example\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nHiKey960, 9\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nrepo tool, 11–15\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\nadb, image installations, 29–30\\r\\nadopting Android, reasons for, 17\\r\\nbroad acceptance, 2\\r\\nfull stack, 2\\r\\nalarms, 61–62\\r\\nAndroid\\r\\nframework, 39–40\\r\\nkernel, 53–55\\r\\nalarms, 61–62\\r\\nAshmem, 59\\r\\nBinder, 56–57\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nOOM-Killer, 58–59\\r\\nparanoid networking, 62\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nwakelocks, 55–56\\r\\nlayer cake analogy, 35–36\\r\\nlogs, 60–61\\r\\npermissions, 76\\r\\nautomatic enforcement, 77\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\nservice model, 40–43\\r\\nsoftware layers, 70\\r\\nstarting, 115\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\nIL, 116\\r\\nstartup times, 123–126\\r\\nVM, 116\\r\\nZygote, 115–116, 123–131\\r\\nversion selection, device development, \\r\\n16–17\\r\\nAndroid API Libraries, 39–40\\r\\nAndroid Applications, 40\\r\\nAndroid.bp directory, 45\\r\\nAndroid Services, 40\\r\\nAndroid Things, 7–8\\r\\nAOSP (Android Open Source Project), 3, \\r\\n4–5, 43–44\\r\\nGoogle, 5–6\\r\\nlocal mirrors, 17\\r\\nlunch tool, 24\\r\\nAPI\\r\\nAcme custom HIDL (binderized HAL), \\r\\n214–216\\r\\nJNI, 159–160\\r\\n9780134096346_print.indb   23425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0=":{"__data__":"{\"id_\":\"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"oPTSvUWVbKbjjG6r7nzkzomUe2tsCSKx1jx1p1OByn8=\",\"text\":\"\\r\\n235boot\\r\\nJava and, 161–162\\r\\nnative code, 160–161, 162–165\\r\\nproximity application build,  \\r\\n165–176\\r\\nshims, 149\\r\\napplication logs, 61\\r\\napplications, 36, 38–39\\r\\nAndroid Applications, 40\\r\\nclient applications, HIDL (binderized \\r\\nHAL), 186\\r\\ncode structure, 154–155\\r\\ninit, 104–106\\r\\nnative code, 160–161\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer,  \\r\\n168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nstarting, Zygote, 115–116, 127–128\\r\\nusing, 155–157\\r\\nusing with HAL, 157–159\\r\\narchitectures, HIDL, 183–185\\r\\nArduino, 107\\r\\nART (Android Runtime), 39–40, 120\\r\\nbasics, 120–122\\r\\ndex2oat, 122\\r\\nhybrid ART, 122–123\\r\\nlinking, 121–122\\r\\nOAT files, 120–121\\r\\nsystem libraries, 122\\r\\nsystem updates, 122\\r\\nart directory, 45\\r\\nAshmem, 59\\r\\nautomatic enforcement of Android \\r\\npermissions, 77\\r\\nB\\r\\nbaseband processor logs, 61\\r\\nbinary logs, 61\\r\\nBinder, 39, 56–57\\r\\nbinderized HAL (HIDL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, 188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\nhwservicemanager, 185\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\nBionic, 38\\r\\nbionic directory, 45\\r\\nblock-structured memory, kernels,  \\r\\n51–52\\r\\nboot\\r\\nbootloader, 95–99\\r\\nDirect Boot, 82–83\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nprocess, 93–95\\r\\n9780134096346_print.indb   23525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ=":{"__data__":"{\"id_\":\"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"VAFGJaS29Ho/lXO9zbsZf1TmGPYUkiWgyLryuQd/740=\",\"text\":\"\\r\\n236boot\\r\\nHAL, 137–140\\r\\nkernels, 62–63\\r\\nbuild systems, 63\\r\\ndownloading sources, 63–66\\r\\nproximity application, JNI, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nC\\r\\nC library, 37–38\\r\\nC++ aproximity client (native)\\r\\ncustom HIDL (binderized HAL),  \\r\\n219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\n/cache mount point, 81–82, 103\\r\\ncatalog trees, kernels, memory \\r\\nmanagement, 53\\r\\nCE storage areas, 82\\r\\nchipsets, 67\\r\\nClient App custom permission, 88–91\\r\\nclient applications, HIDL (binderized HAL), \\r\\n186\\r\\nclients, HIDL (binderized HAL), 197–198\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes,  \\r\\n229\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nClockworkMod recovery system, 107\\r\\nclones, Zygote, 125–126\\r\\nrecovery, 106–107\\r\\nverified boot, 68–69\\r\\nboot (unmounted) partition, 103\\r\\nbootable directory, 45\\r\\nbootloader, 95–99\\r\\nbootstrap.bash directory, 45\\r\\nbuild directory, 45\\r\\nbuild machines\\r\\nsetting up, 10–11\\r\\nvirtual machines, 10\\r\\nbuild process, Acme project\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\nbuilding\\r\\ndaemons, 107\\r\\nArduino, 107\\r\\ncreating Acme device, 107–109\\r\\nrepo tool, 110–111\\r\\n9780134096346_print.indb   23625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE=":{"__data__":"{\"id_\":\"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"mGfCKH3j6QTkR7XGHZdTJrTDTv8uPDXd3S8Do0F9rsc=\",\"text\":\"\\r\\n237device development, Acme project\\r\\ncode\\r\\nAOSP, 43–44\\r\\napplication code structure, 154–155\\r\\ndownloading, device development, 11\\r\\nHAL code structure, 138–140\\r\\njavah, 161–164\\r\\nnative code\\r\\nAndroid applications, 160–161\\r\\ndocumenting references, 176\\r\\nexecuting, 160–161\\r\\ngarbage collector, 177–179\\r\\njavah, 161–164\\r\\nJNI hints, 176–182\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nownership, 3–5\\r\\nsources of, 43–44\\r\\ncommit planning, repositories, 19\\r\\ncopy on write, Zygote, 126\\r\\ncts directory, 45\\r\\ncustom HIDL (binderized HAL), 199, 219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nSE Linux for Android changes,  \\r\\n209–212\\r\\nservices, 202–209\\r\\ncustomizing\\r\\nAndroid permissions, 83\\r\\nClient App, 88–91\\r\\nProtected App, 83–87\\r\\nsecurity, 67\\r\\nD\\r\\ndaemons\\r\\nbuilding, 107\\r\\nArduino, 107\\r\\ncreating Acme device, 107–109\\r\\nrepo tool, 110–111\\r\\ngarbage collector, 177–179\\r\\nlmkd, 59\\r\\nstarting, 111–114\\r\\nDalvik (DVM), 39–40, 116–119\\r\\ndalvik directory, 46\\r\\n/data mount point, 80, 103\\r\\nDDoS (Distributed Denial of Service), 7\\r\\nDE storage areas, 82\\r\\ndeclarations, HAL, 141–143\\r\\ndesigning HAL, 136–137\\r\\n/dev mount point, 81\\r\\ndevelopers directory, 46\\r\\ndevelopment directory, 46\\r\\ndevelopment environment, Android \\r\\nadoption, 3\\r\\ndevice development, Acme project\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\n9780134096346_print.indb   23725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug=":{"__data__":"{\"id_\":\"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"xjfEB3EtL8fNoAZHnuMFQdplBpCWKBEbYz/Wvfc2QYU=\",\"text\":\"\\r\\n238\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nHiKey960, 9\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nrepo tool, 11–15\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\ndevice directory, 46\\r\\ndevice manifests, Acme custom HIDL \\r\\n(binderized HAL), 212–213\\r\\ndex files, 118–119\\r\\ndex2oat, 122\\r\\nDirect Boot, 82–83\\r\\ndirectories\\r\\nAndroid.bp, 45\\r\\nart, 45\\r\\nbionic, 45\\r\\nbootable, 45\\r\\nbootstrap.bash, 45\\r\\nbuild, 45\\r\\ncts directory, 45\\r\\ndalvik, 46\\r\\ndevelopers, 46\\r\\ndevelopment, 46\\r\\ndevice, 46\\r\\nexternal, 46\\r\\nframeworks, 46\\r\\nHAL directories, structure of, 139\\r\\nhardware, 46–47\\r\\ninitializing, with repo tool, 11\\r\\nlibcore, 47\\r\\ndevice development, Acme project\\r\\nlibnativehelper, 47\\r\\nMakefile, 45\\r\\nout, 48\\r\\npackages, 47\\r\\npdk, 47\\r\\nplatform-testing, 47\\r\\nprebuilts, 47\\r\\nsdk, 47\\r\\nstructure of, 44\\r\\nsystem, 48\\r\\ntoolchain, 48\\r\\ntools, 48\\r\\ndomains, SE Linux, 74\\r\\ndownloading, code, device development, 11\\r\\nE\\r\\nencryption\\r\\nCE storage areas, 82\\r\\nDE storage areas, 82\\r\\nFBE, 82–83\\r\\nFDE, 82\\r\\nenforcing Android permissions\\r\\nautomatic enforcement, 77\\r\\nmanual enforcement, 78–79\\r\\nexternal directory, 46\\r\\nF\\r\\nfastboot, 28–29, 99–100\\r\\nFBE (File-Based Encryption), 82–83\\r\\nFDE (Full Disk Encryption), 82\\r\\nfile systems, 79\\r\\n/ (forward slash), 79\\r\\nboot, 102–106\\r\\nboot (unmounted) partition, 103\\r\\n/cache mount point, 81–82, 103\\r\\n/data mount point, 80, 103\\r\\n9780134096346_print.indb   23825/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=":{"__data__":"{\"id_\":\"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"JK8KswQU8AQ02vylhim4m1CqxAHOuzGCsK43goFrtWY=\",\"text\":\"\\r\\n239HAL (Hardware Abstraction Layer)\\r\\n/dev mount point, 81\\r\\ninit application, 104–106\\r\\n/odm (unmounted) partition, 104\\r\\n/odm mount point, 81\\r\\npersist (unmounted) partition, 104\\r\\n/proc mount point, 81\\r\\n/product (unmounted) partition, 104\\r\\n/product mount point, 81\\r\\nradio (unmounted) partition, 104\\r\\nrecovery (unmounted) partition, 104\\r\\n/sdcard mount point, 80–81\\r\\nstorage (/sdcard) partition, 104\\r\\n/sys mount point, 81\\r\\n/system mount point, 79, 103\\r\\nsystem startup, 102–106\\r\\n/vendor mount point, 81\\r\\nvendor (unmounted) partition, 103\\r\\nfinalizers, native shims, 169–171\\r\\nflashing devices, 30–33\\r\\nforked repositories, local mirrors of, 19–24\\r\\nforking sources, 15–16\\r\\nframeworks\\r\\nAndroid, 39–40\\r\\ndirectory, 46\\r\\nfull stack support, 2\\r\\nG\\r\\ngarbage collector, 177–179\\r\\nGerrit, 15\\r\\nGID, process sandbox, 70–72\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nforked repositories, local mirrors of, \\r\\n19–24\\r\\nhosted repositories, 18–19\\r\\nrepo tool, 13\\r\\nglibc (GNU C library), 38\\r\\nGoogle\\r\\nAOSP, 5–6\\r\\nProject Treble, 134\\r\\nGradle, Android adoption, 3\\r\\nH\\r\\nHAL (Hardware Abstraction Layer), 39\\r\\napplications, using, 157–159\\r\\nbuilding, 137–140\\r\\ncode structure, 138–140\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\ndeclarations, 141–143\\r\\ndefined, 133, 143–148\\r\\ndesigning, 136–137\\r\\ndirectories, structure of, 139\\r\\nHIDL (binderized HAL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, \\r\\n188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL).  \\r\\nSee separate entry\\r\\nhwservicemanager, 185\\r\\n9780134096346_print.indb   23925/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg=":{"__data__":"{\"id_\":\"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"dJsE3Xsptcvf40/t5JBDMhhvZuGIgjLfuMOfhwNMdM4=\",\"text\":\"\\r\\n240HAL (Hardware Abstraction Layer)\\r\\nHiKey960, 9\\r\\nhosted git repositories, 18–19\\r\\nhwservicemanager, 185\\r\\nhybrid ART, 122–123\\r\\nI\\r\\nIL (Intermediate Languages), 116\\r\\nimages\\r\\nbuilding, lunch tool, 24–27\\r\\ninstalling, 27\\r\\nadb, 29–30\\r\\nfastboot, 28–29\\r\\nimplementing HAL, 140–141\\r\\ndeclarations, 141–143\\r\\ndefinitions, 143–148\\r\\nshims, 149–151\\r\\ninit application, 104–106\\r\\ninitializing directories, with repo tool, 11\\r\\ninstalling images, 27\\r\\nadb, 29–30\\r\\nfastboot, 28–29\\r\\nintegrating vendors, device development, \\r\\n16–17\\r\\ninterpreters, IL, 116\\r\\nIon, 60\\r\\nJ\\r\\nJava\\r\\nAndroid adoption, 3\\r\\nJNI, 161–162\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\nimplementing, 140–141\\r\\ndeclarations, 141–143\\r\\ndefinitions, 143–148\\r\\nshims, 149–151\\r\\nlayer structure, 138\\r\\nnecessity of, 135\\r\\nProject Treble, 134\\r\\npurpose of, 133–134\\r\\nshims, 149\\r\\nAPI, 149\\r\\nimplementing, 150–151\\r\\nSP-HAL, 185\\r\\nhardware, 36\\r\\nhardware directory, 46–47\\r\\nHIDL (binderized HAL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, 188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\nhwservicemanager, 185\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\n9780134096346_print.indb   24025/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=":{"__data__":"{\"id_\":\"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1BU4GzKwXnnMm9m+Rz2CVn7mcqcBxfSxDdXLsAWdkh0=\",\"text\":\"\\r\\n241Linux\\r\\njavah, 161–164\\r\\nJava/Kotlin aproximity client, custom HIDL \\r\\n(binderized HAL), 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nJNI (Java Native Interface), 159–160\\r\\nbreaking rules, 176\\r\\ngarbage collector, 177–179\\r\\nJava and, 161–162\\r\\nnative code\\r\\ndocumenting references, 176\\r\\nexecuting, 160–161\\r\\njavah, 161–164\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nK\\r\\nkernel modules, zram, 52–53\\r\\nkernels\\r\\nAndroid, 53–55\\r\\nalarms, 61–62\\r\\nAshmem, 59\\r\\nBinder, 56–57\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nOOM-Killer, 58–59\\r\\nparanoid networking, 62\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nwakelocks, 55–56\\r\\nBinder, 39\\r\\nboot, 100–102\\r\\nbuilding, 62–63\\r\\nbuild systems, 63\\r\\ndownloading sources, 63–66\\r\\ncatalog trees, memory management, 53\\r\\nLinux, 36–37, 49–50\\r\\nmemory management, 51–53\\r\\nprocess management, 50–51\\r\\nsystem startup, 100–102\\r\\nKotlin. See Java/Kotlin aproximity client\\r\\nL\\r\\nlabels, SE Linux, 74\\r\\nlayer cake analogy, Android, 35–36\\r\\nlayer structure, HAL, 138\\r\\nlibcore directory, 47\\r\\nlibnativehelper directory, 47\\r\\nlibraries, system, 36, 37, 38\\r\\nAndroid API Libraries, 39–40\\r\\nART, 39–40, 122\\r\\nBionic, 38\\r\\nC library, 37–38\\r\\nDalvik, 39–40\\r\\nglibc, 38\\r\\nNative Libraries, 39–40\\r\\nlinking, ART, 121–122\\r\\nLinux\\r\\nAndroid adoption, 2–3\\r\\nbuild machine setup, 10\\r\\nkernel, 36–37, 49–50\\r\\nSE Linux, 72–73\\r\\ndomains, 74\\r\\nlabels, 74\\r\\n9780134096346_print.indb   24125/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE=":{"__data__":"{\"id_\":\"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"eoKzheaZgpOxE9EFvdyZqMKAB4n+ZDsrhpyT90Fgwd4=\",\"text\":\"\\r\\n242Linux\\r\\nmanifests\\r\\nAcme custom HIDL (binderized HAL), \\r\\n212–213\\r\\nrepo tool, 11–12, 13–14\\r\\nmanual enforcement of Android \\r\\npermissions, 78–79\\r\\nmemory\\r\\nAshmem, 59\\r\\nblock-structured memory, kernels, \\r\\n51–52\\r\\ncatalog trees, 53\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nmanaging\\r\\nkernels, 51–53\\r\\nZygote, 123–126\\r\\nOOM-Killer, 58–59\\r\\npage tables, 125\\r\\npmem, 59–60\\r\\nRAM, kernels, memory management, \\r\\n51–53\\r\\nROM, 7\\r\\nshared memory\\r\\nAshmem, 59\\r\\nIon, 60\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nsolid-state memory, kernels, 52\\r\\nzram, 52–53\\r\\nmicro-controllers, 6–7\\r\\nmirrors, local\\r\\nAOSP, 17\\r\\ndevice development, Acme project, \\r\\n17–18, 19–24\\r\\nforked repositories, 19–24\\r\\nmount points\\r\\n/ (forward slash), 79\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\nsystem startup\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ncreating Acme device, 107–109\\r\\ndaemons, 107–111\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nlmkd, 59\\r\\nlocal mirrors\\r\\nAOSP, 17\\r\\ndevice development, Acme project, \\r\\n17–18, 19–24\\r\\nforked repositories, 19–24\\r\\nlogger, 60–61\\r\\nlogs\\r\\napplication logs, 61\\r\\nbaseband processor logs, 61\\r\\nbinary logs, 61\\r\\nsystem logs, 61\\r\\nlow memory killer, 57–59\\r\\nlunch tool, images, building, 24–27\\r\\nM\\r\\nMAC, process sandbox, 72\\r\\nMakefile directory, 45\\r\\nmanaging\\r\\nkernels\\r\\nmemory, 51–53\\r\\nprocesses, 50–51\\r\\nmemory, Zygote, 123–126\\r\\n9780134096346_print.indb   24225/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk=":{"__data__":"{\"id_\":\"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"cklRoMNF6hDE0dbk1+BCpnm1nYloF4tA5+UAZexIpMI=\",\"text\":\"\\r\\n243permissions\\r\\n/cache, 81–82, 103\\r\\n/data, 80, 103\\r\\n/dev, 81\\r\\nmiscellaneous mount points, 81–82\\r\\n/odm, 81\\r\\n/proc, 81\\r\\n/product, 81\\r\\n/sdcard, 80–81\\r\\n/sys, 81\\r\\n/system, 79, 103\\r\\n/vendor, 81\\r\\nN\\r\\nnative C++ aproximity client, custom HIDL \\r\\n(binderized HAL), 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, 224–225\\r\\nnative code\\r\\nAndroid applications, 160–161\\r\\nexecuting, 160–161\\r\\nJNI\\r\\ndocumenting references, 176\\r\\ngarbage collector, 177–179\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nNative Libraries, 39–40\\r\\nnative shims\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nproximity application build, 165–176\\r\\nreference queues, 171–176\\r\\nO\\r\\nOAT files, 120–121\\r\\n/odm mount point, 81\\r\\n/odm (unmounted) partition, 104\\r\\nOOM-Killer, 58–59\\r\\nOpaque Peer, 168–169\\r\\nopen source environment, Android adoption, \\r\\n3–5\\r\\noperational security, 67, 69–70\\r\\nAndroid permissions, 76\\r\\nautomatic enforcement, 77\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–76\\r\\nOSX, build machine setup, 10–11\\r\\nOTA updates, 6\\r\\nout directory, 48\\r\\nownership, code, 3–5\\r\\nP\\r\\npackages directory, 47\\r\\npage tables, memory, 125\\r\\nparanoid networking, 62\\r\\npartitions\\r\\nboot (unmounted), 103\\r\\n/odm (unmounted), 104\\r\\npersist (unmounted), 104\\r\\n/product (unmounted), 104\\r\\nradio (unmounted), 104\\r\\nrecovery (unmounted), 104\\r\\nstorage (/sdcard), 104\\r\\n/system, 103\\r\\nvendor (unmounted), 103\\r\\npdk directory, 47\\r\\npermissions, 43\\r\\nAndroid, 76\\r\\nautomatic enforcement, 77\\r\\n9780134096346_print.indb   24325/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=":{"__data__":"{\"id_\":\"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"XGukiNO55296pmMtN/4CcPQsZddXjOMQ4JvhGNin0z8=\",\"text\":\"\\r\\n244permissions\\r\\nQ\\r\\nQNX, 7\\r\\nR\\r\\nradio (unmounted) partition, 104\\r\\nRAM (Random Access Memory), kernels, \\r\\nmemory management, 51–53\\r\\nrecovery\\r\\nboot, 106–107\\r\\nClockworkMod recovery system, 107\\r\\nTWRP, 107\\r\\nrecovery (unmounted) partition, 104\\r\\nreference queues, native shims, 171–176\\r\\nrepo tool, 11\\r\\nbuild process, Acme project, 11–15\\r\\ndaemons, building, 110–111\\r\\ndirectories, initializing, 11\\r\\nGerrit, 15\\r\\ngit repositories, 13\\r\\nmanifests, 11–12, 13–14\\r\\nsync command, 12–13\\r\\nuploads, 15\\r\\nworkflows, 15\\r\\nworkspaces, 11–12\\r\\nrepositories, git\\r\\ncommit planning, 19\\r\\nforked repositories, local mirrors, 19–24\\r\\nhosted git repositories, 18–19\\r\\nrepo tool, 13\\r\\nroles, SE Linux, 74\\r\\nROM (Read-Only Memory), 7\\r\\nRTOS (Real-Time Operating Systems), 6, 8\\r\\nAndroid Things, 7–8\\r\\nQNX, 7\\r\\nVxWorks, 7\\r\\nruntime initialization, Zygote, 128–129\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\ncustomizing\\r\\nClient App, 88–91\\r\\nProtected App, 83–87\\r\\npersist (unmounted) partition, 104\\r\\nplatform security, 67\\r\\nchipsets, 67\\r\\ncustomization security, 67\\r\\noperational security, 67, 69–70\\r\\nAndroid permissions, 76–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–76\\r\\ntypes of, 67\\r\\nuser security, 67, 82–83\\r\\nverified boot, 68–69\\r\\nplatform-testing directory, 47\\r\\nplug-ins, Binder, 39\\r\\npmem, 59–60\\r\\npolicy definitions, 73–76\\r\\nPOSIX alarm driver, 61–62\\r\\nprebuilts directory, 47\\r\\npre-requirements, device development, 9\\r\\n/proc mount point, 81\\r\\nprocesses\\r\\nmanaging, kernels, 50–51\\r\\nsandboxing, 70–72\\r\\n/product mount point, 81\\r\\n/product (unmounted) partition, 104\\r\\nProject Treble, 134, 183. See also HIDL\\r\\nProtected App custom permission, 83–87\\r\\nproximity application build, native shims, \\r\\n165–167\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nreference queues, 171–176\\r\\n9780134096346_print.indb   24425/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k=":{"__data__":"{\"id_\":\"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1VR202pXNoIVZmOPuImvILQQiu21r+dk6c/FfeF7FTg=\",\"text\":\"\\r\\n245shims\\r\\n/sys mount point, 81\\r\\n/system mount point, 79, 103\\r\\n/vendor mount point, 81\\r\\noperational security, 67, 69–70, 72–76\\r\\nAndroid permissions, 76–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–73\\r\\ndomains, 74\\r\\nlabels, 74\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\ntypes of, 67\\r\\nuser security, 67, 82–83\\r\\nverified boot, 68–69\\r\\nservices\\r\\nAcme custom HIDL (binderized HAL), \\r\\n202–209\\r\\nAndroid Services, 40\\r\\ncustom HIDL (binderized HAL),  \\r\\n202–209\\r\\nHIDL (binderized HAL), 185, 194–197, \\r\\n202–209\\r\\nsetting up, build machines, 10–11\\r\\nshared folders, virtual machines, 10\\r\\nshared memory\\r\\nAshmem, 59\\r\\nIon, 60\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nshims, 149\\r\\nAPI, 149\\r\\nnative shims\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nS\\r\\nsandboxing, processes, 70–72\\r\\nSBC (Single-Board Computers), 6\\r\\n/sdcard mount point, 80–81\\r\\nsdk directory, 47\\r\\nSE Linux, 72–73\\r\\nAcme custom HIDL (binderized HAL), \\r\\n209–212\\r\\nJava/Kotlin aproximity client, 229\\r\\nnative C++ aproximity client, \\r\\n224–225\\r\\ncustom HIDL (binderized HAL),  \\r\\n209–212\\r\\ndomains, 74\\r\\nHIDL (binderized HAL), 209–212\\r\\nlabels, 74\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\nsecurity, 67\\r\\nCE storage areas, 82\\r\\nchipsets, 67\\r\\ncustomization security, 67\\r\\nDE storage areas, 82\\r\\nDirect Boot, 82–83\\r\\nFBE, 82–83\\r\\nFDE, 82\\r\\nfile systems, 79\\r\\n/ (forward slash), 79\\r\\n/cache mount point, 81–82, 103\\r\\n/data mount point, 80, 103\\r\\n/dev mount point, 81\\r\\n/odm mount point, 81\\r\\n/proc mount point, 81\\r\\n/product mount point, 81\\r\\n/sdcard mount point, 80–81\\r\\n9780134096346_print.indb   24525/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=":{"__data__":"{\"id_\":\"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"XaNNEdz97rC8WyAxpkqIpxzcq6QdW84/IZHs9xqvk/M=\",\"text\":\"\\r\\n246shims\\r\\nsync command, repo tool, 12–13\\r\\n/sys mount point, 81\\r\\nsystem directory, 48\\r\\nsystem libraries, 36, 37, 38, 39–40\\r\\nAndroid API Libraries, 39–40\\r\\nART, 39–40, 122\\r\\nBionic, 38\\r\\nC library, 37–38\\r\\nDalvik, 39–40\\r\\nglibc, 38\\r\\nNative Libraries, 39–40\\r\\nsystem logs, 61\\r\\n/system mount point, 79, 103\\r\\nsystem services, 36, 129–131\\r\\nsystem startup\\r\\nAcme device, creating, 107–109\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ndaemons\\r\\nbuilding, 107\\r\\nstarting, 111–114\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nsystem updates, ART, 122\\r\\nT\\r\\nThings, Android, 7–8\\r\\ntoolchain directory, 48\\r\\ntools directory, 48\\r\\nTreble, Project, 134, 183. See also HIDL\\r\\ntree snapshots, 19\\r\\nTWRP (Team Win Recovery Project), 107\\r\\ntypes, SE Linux, 74\\r\\nproximity application build,  \\r\\n165–176\\r\\nreference queues, 171–176\\r\\nSkia, 60\\r\\nsnapshots, tree, 19\\r\\nSoC vendors, Android version selection, \\r\\n16–17\\r\\nsoftware layers, Android, 70\\r\\nsolid-state memory, kernels, 52\\r\\nsource trees, Acme project device \\r\\ndevelopment example, 23\\r\\nSP-HAL (Same Process-HAL), 185\\r\\nstarting\\r\\nAndroid, 115\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\nIL, 116\\r\\nstartup times, 123–126\\r\\nVM, 116\\r\\nZygote, 115–116, 123–131\\r\\napplications, Zygote, 115–116, 127–128\\r\\ndaemons, 111–114\\r\\nLinux systems\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ncreating Acme device, 107–109\\r\\ndaemons, 107–111\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nZygote, 127–128\\r\\nstorage\\r\\nCE storage areas, 82\\r\\nDE storage areas, 82\\r\\nstorage (/sdcard) partition, 104\\r\\n9780134096346_print.indb   24625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc=":{"__data__":"{\"id_\":\"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1GWqhi960zSGHBS7faHtAJJn+pPjqAqjr69PU3Y7nxI=\",\"text\":\"\\r\\n247Zygote\\r\\nshared folders, 10\\r\\nZygote, 123–131\\r\\nvmpressure events, 59\\r\\nVxWorks, 7\\r\\nW\\r\\nwakelocks, 55–56\\r\\nWeakRefs, 179–182\\r\\nworkflows, Repo, 15\\r\\nworkspaces\\r\\nbuilding, 24\\r\\nrepo tool, 11–12\\r\\nX - Y - Z\\r\\nzram, 52–53\\r\\nZygote, 40, 115–116, 123\\r\\nclones, 125–126\\r\\nmemory management, 123–126\\r\\nruntime initialization, 128–129\\r\\nstarting, 127–128\\r\\nstartup times, 123–126\\r\\nsystem service startups, 129–131\\r\\nU\\r\\nUI (User Interface), Android adoption, 2\\r\\nUID (Use ID), process sandbox, 70–72\\r\\nunlocking bootloaders, 99\\r\\nupdates\\r\\nOTA, 6\\r\\nsystem updates, ART, 122\\r\\nuploads, repo tool, 15\\r\\nuserdata, /data mount point, 80, 103\\r\\nusers\\r\\nSE Linux, 73\\r\\nsecurity, 67, 82–83\\r\\nV\\r\\n/vendor mount point, 81\\r\\nvendors\\r\\nintegration, device development, 16–17\\r\\nunmounted, 103\\r\\nverified boot, 68–69\\r\\nversion selection, Android, 16–17\\r\\nVM (Virtual Machines), 116\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\n9780134096346_print.indb   24725/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM=":{"__data__":"{\"id_\":\"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{},\"hash\":\"1uDfv0Wbvvlj+0+89eBSdTaYKhUPZfVQJhXFzTY1Ebg=\",\"text\":\"\\r\\nAddison-Wesley • Adobe Press • Cisco Press • Microsoft Press • Pearson IT Certification • Que • Sams • Peachpit Press\\r\\nRegister Your Product at informit.com/register \\r\\nAccess additional benefits and save 35% on your next purchase\\r\\n•      Automatically receive a coupon for 35% off your next purchase, valid\\r\\nfor 30 days. Look for your code in your InformIT cart or the Manage\\r\\nCodes section of your account page.\\r\\n•Download available product updates.\\r\\n•Access bonus material if available.* \\r\\n•      Check the box to hear from us and receive exclusive offers on new\\r\\neditions and related products.\\r\\n*Registration benefits vary by product. Benefits will be listed on your account page under\\r\\nRegistered Products.\\r\\nInformIT.com—The Trusted Technology Learning Source\\r\\nInformIT is the online home of information technology brands at Pearson, the world’s \\r\\nforemost education company. At InformIT.com, you can: \\r\\n•Shop our books, eBooks, software, and video training\\r\\n•Take advantage of our special offers and promotions (informit.com/promotions)\\r\\n•Sign up for special offers and content newsletter (informit.com/newsletters)\\r\\n•Access thousands of free chapters and video lessons\\r\\nConnect with InformIT—Visit informit.com/community\\r\\nPhoto by izusek/gettyimages\\r\\n9780134096346_print.indb   25625/06/21   6:27 PM\\r\\n\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"DOCUMENT\"}","__type__":"DOCUMENT"},"4e736425-14c1-498c-b62a-c1908e9e0bce":{"__data__":"{\"id_\":\"4e736425-14c1-498c-b62a-c1908e9e0bce\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"o02IrKW+80Vpb+k9fqyYebOmN2ShOhJAI16H4tO8+EA=\"}},\"hash\":\"0zFw6vz1v07gdGRj8FjD+kL9abaU8W4goDoX8iWw4fo=\",\"text\":\"Inside the  \\r\\nAndroid\\r\\nTM\\r\\n OS\\r\\n9780134096346_print.indb   125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f446536f-8b98-44b8-a11c-308f9724f6b2":{"__data__":"{\"id_\":\"f446536f-8b98-44b8-a11c-308f9724f6b2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lQAvzSXiVTmOs+RmhHmGHjig57l98wFKDuEqebigL6g=\"}},\"hash\":\"TSLkgb7A/Gt2P/ow6jEZnPhPBnCuS4LQhOK8hFGH/Nw=\",\"text\":\"The Android™ Deep Dive Seriesis for intermediate and expert \\r\\ndevelopers who use Android Studio and Java, but do not have \\r\\ncomprehensive knowledge of Android APIs and want to bolster their \\r\\nknowledge of fundamentally important topics. Each book in the series stands alone and provides idioms, frameworks, \\r\\nand engineering approaches. They provide in-depth information, correct \\r\\npatterns and idioms, and ways of avoiding bugs and other problems. Visit informit.com/androidfor a complete list of available publications. Android™ Deep Dive Series\\r\\nMake sure to connect with us!informit.com/socialconnect\\r\\nAndroid_DeepDive_7x9.indd   15/21/2021   3:45:50 PM9780134096346_print.indb   225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"783c90a2-de10-45da-a477-19de016440bd":{"__data__":"{\"id_\":\"783c90a2-de10-45da-a477-19de016440bd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1he7PZ0pIMljsd5LmFJ0ZX0dgg/kLkVkcPv+ghPi5EM=\"}},\"hash\":\"PMJPhfyNInleYUR+88O2E9lchkLYjVmlGUO+8TmOekg=\",\"text\":\"Inside the  \\r\\nAndroid\\r\\nTM\\r\\n OS\\r\\nBuilding, Customizing, \\r\\nManaging and Operating \\r\\nAndroid System Services\\r\\nG. Blake Meike\\r\\nLarry Schiefer\\r\\nThe Android™ Deep Dive Seriesis for intermediate and expert \\r\\ndevelopers who use Android Studio and Java, but do not have \\r\\ncomprehensive knowledge of Android APIs and want to bolster their \\r\\nknowledge of fundamentally important topics. Each book in the series stands alone and provides idioms, frameworks, \\r\\nand engineering approaches. They provide in-depth information, correct \\r\\npatterns and idioms, and ways of avoiding bugs and other problems. Visit informit.com/androidfor a complete list of available publications. Android™ Deep Dive Series\\r\\nMake sure to connect with us!informit.com/socialconnect\\r\\nAndroid_DeepDive_7x9.indd   15/21/2021   3:45:50 PM\\r\\nBoston • Columbus • New York • San Francisco • Amsterdam • Cape Town \\r\\nDubai • London • Madrid • Milan • Munich • Paris • Montreal • Toronto • Delhi • Mexico City \\r\\nSão Paulo • Sydney • Hong Kong • Seoul • Singapore • Taipei • Tokyo\\r\\n9780134096346_print.indb   325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"99d1b22f-27ae-4800-a012-650ae78662f4":{"__data__":"{\"id_\":\"99d1b22f-27ae-4800-a012-650ae78662f4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8kiCkUX6g9gvMUP/Qm56aRLxcQ07eJjVF815ccFeVpE=\"},\"NEXT\":{\"nodeId\":\"5ca37e76-eec4-4178-868d-af933ce10bfb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"++pogz4L5pKw8MAVmeOqPDH+1UU5s0kMHOJfMTciAMo=\"}},\"hash\":\"gpUUTibAaiI6XkjVPaf/xZQ3YuqPEWQ9tPrFVxJQlSk=\",\"text\":\"Editor-in-Chief\\r\\nMark Taub\\r\\nAcquisitions Editor\\r\\nMalobika Chakraborty\\r\\nDevelopment Editor\\r\\nSheri Replin\\r\\nManaging Editor\\r\\nSandra Schroeder\\r\\nSenior Project Editor\\r\\nLori Lyons\\r\\nCopy Editor\\r\\nPaula Lowell\\r\\nProduction Manager\\r\\nAswini Kumar/codeMantra\\r\\nIndexer\\r\\nKen Johnson\\r\\nProofreader\\r\\nDonna E. Mulder\\r\\nCompositor \\r\\ncodeMantra\\r\\nMany of the designations used by manufacturers and sellers to distinguish their products \\r\\nare claimed as trademarks. Where those designations appear in this book, and the  \\r\\npublisher was aware of a trademark claim, the designations have been printed with initial \\r\\ncapital letters or in all capitals. Android is a trademark of Google, Inc. The authors and publisher have taken care in the preparation of this book, but make no \\r\\nexpressed or implied warranty of any kind and assume no responsibility for errors or  \\r\\nomissions. No liability is assumed for incidental or consequential damages in connection \\r\\nwith or arising out of the use of the information or programs contained herein. For information about buying this title in bulk quantities, or for special sales opportunities \\r\\n(which may include electronic versions; custom cover designs; and content particular to  \\r\\nyour business, training goals, marketing focus, or branding interests), please contact our  \\r\\ncorporate sales department at corpsales@pearsoned.com or (800) 382-3419. For government sales inquiries, please contact governmentsales@pearsoned.com. For questions about sales outside the U.S., please contact intlcs@pearson.com. Visit us on the Web: informit.com/aw\\r\\nLibrary of Congress Control Number: 2021940286 \\r\\nCopyright © 2022 Pearson Education, Inc. All rights reserved. This publication is protected by copyright, and permission must be \\r\\nobtained from the publisher prior to any prohibited reproduction, storage in a retrieval  \\r\\nsystem, or transmission in any form or by any means, electronic, mechanical, photocopying,  \\r\\nrecording, or likewise. For information regarding permissions, request forms and the  \\r\\nappropriate contacts within the Pearson Education Global Rights & Permissions Department, \\r\\nplease visit www.pearsoned.com/permissions/.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5ca37e76-eec4-4178-868d-af933ce10bfb":{"__data__":"{\"id_\":\"5ca37e76-eec4-4178-868d-af933ce10bfb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8kiCkUX6g9gvMUP/Qm56aRLxcQ07eJjVF815ccFeVpE=\"},\"PREVIOUS\":{\"nodeId\":\"99d1b22f-27ae-4800-a012-650ae78662f4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"gpUUTibAaiI6XkjVPaf/xZQ3YuqPEWQ9tPrFVxJQlSk=\"}},\"hash\":\"++pogz4L5pKw8MAVmeOqPDH+1UU5s0kMHOJfMTciAMo=\",\"text\":\"ISBN-13: 978-0-13-409634-6 \\r\\nISBN-10: 0-13-409634-7\\r\\nScoutAutomatedPrintCode\\r\\n9780134096346_print.indb   425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f62ebbcb-2b75-4cd2-9f62-33e407b7c560":{"__data__":"{\"id_\":\"f62ebbcb-2b75-4cd2-9f62-33e407b7c560\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"fV4YIo8jSXdpe8GZn+AepjHW3AGJ1Rp7FigbGuneQAk=\"}},\"hash\":\"88+CxY2WkD0ikpQ2e2Rgk/n70WnSfgTsPmkRSO/1RsA=\",\"text\":\"v\\r\\nBlake: For my siblings: Rusty, Annemarie. Mercy, and Roger. One! Larry: For Aidan and Ian. Don’t ever stop  \\r\\nexploring and learning. v\\r\\n9780134096346_print.indb   525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e2d51c89-5780-4499-8902-cb05407ee33c":{"__data__":"{\"id_\":\"e2d51c89-5780-4499-8902-cb05407ee33c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"l5+SMPuAXFMUKDa5bKeKB1eC/OlU4vf7tQZIiG2BCYE=\"}},\"hash\":\"jf3Sg2j0K7K1g3flr1rfOs+y07T/uGEy4Mgf9Ye34T4=\",\"text\":\"9780134096346_print.indb   625/06/21   6:27 PM\\r\\nThis page intentionally left blank\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c54d583b-73f1-4433-9cf4-5a7c913a1f51":{"__data__":"{\"id_\":\"c54d583b-73f1-4433-9cf4-5a7c913a1f51\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"2IiAhk/vwpG2Fm+71fXxMPK22ZZ01EnjUrgrjWIcRQA=\"}},\"hash\":\"fKykhHKVMXeHHAYEW40TEmNLjtILQ4+Hkxc4ghK3RlY=\",\"text\":\"Contents at a Glance\\r\\nPreface xiii\\r\\n  1  Why Android? 1\\r\\n  2  Booting Acme 9\\r\\n   3  Getting Started 35\\r\\n  4  The Kernel 49\\r\\n  5  Platform Security 67\\r\\n  6  System Startup: Installing and Booting the System 93\\r\\n  7  Android Startup: Dalvik and Zygote 115\\r\\n  8  Getting to Android: The HAL 133\\r\\n  9  Getting to Java: The JNI 153\\r\\n10  Project Treble: Binderized HAL 183\\r\\n11  Creating a Custom Binderized HAL 199\\r\\n12  Clients for a Custom Binderized HAL 219\\r\\n  Index 233\\r\\n9780134096346_print.indb   725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"38cbf2ef-9d44-4479-b414-4f083cd81485":{"__data__":"{\"id_\":\"38cbf2ef-9d44-4479-b414-4f083cd81485\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4yL7XqrpNfQqU70eFZfqBrubAvpE4Iu43F4DMuCLYqI=\"}},\"hash\":\"N85fbi8X1m05DjB7PPd6Y4+AJKMc8vSY+IVBOiFt6o8=\",\"text\":\"Contents\\r\\nPreface xiii\\r\\n 1 Why Android? 1\\r\\nAdopting Android 1\\r\\nFull Stack 2\\r\\nBroad Acceptance 2\\r\\nBeautiful UI 2\\r\\nLinux Based 2\\r\\nPowerful Development Environment 3\\r\\nOpen Source 3\\r\\nAOSP and Google 5\\r\\nOther Choices 6\\r\\nMicro-Controllers 6\\r\\nOther RTOSs 7\\r\\nSummary 8\\r\\n 2 Booting Acme 9\\r\\nSetting Up a Build Machine 10\\r\\nDownloading the Code 11\\r\\nRepo 11\\r\\nForking the Source 15\\r\\nAndroid Version Selection 16\\r\\nLocal Mirror 17\\r\\nHosted Git Repositories 18\\r\\nTree Snapshot 19\\r\\nRepository Commit Pinning 19\\r\\nExample: Local Mirror of Forked Repositories 19\\r\\nBuilding an Image 24\\r\\nDevice Tools  27\\r\\nfastboot 28\\r\\nadb 29\\r\\nFlashing the Device 30\\r\\nSummary 33\\r\\n9780134096346_print.indb   925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e80dc5e7-2ead-43e8-b01c-041c1b74055e":{"__data__":"{\"id_\":\"e80dc5e7-2ead-43e8-b01c-041c1b74055e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HrjvaDTXVD4qEcj4NXnLXKbVo7SI6Mn6BlvV0Y59zhY=\"}},\"hash\":\"9FpScaV8wICAWRo54BaZLdyWfKe6qqfFNmfEbIHJ1fE=\",\"text\":\"xContents\\r\\n 3 Getting Started 35\\r\\nPutting Android in Its Place 35\\r\\nHardware 36\\r\\nThe Linux Kernel 36\\r\\nSystem Libraries 37\\r\\nApplications 38\\r\\nThe Android Framework 39\\r\\nThe Android Service Model 40\\r\\nExploring the Source 43\\r\\nOther Sources 44\\r\\nWhat’s in the Box? 44\\r\\nSummary 48\\r\\n 4 The K                ernel 49\\r\\nThe Linux Kernel 49\\r\\nKernel Process Management 50\\r\\nKernel Memory Management 51\\r\\nThe Android Kernel 53\\r\\nAndroid Kernel Features 54\\r\\nBuilding a Kernel 62\\r\\nThe Build System 63\\r\\nDownloading the Source 63\\r\\nSummary 66\\r\\n 5 Platf              orm Security 67\\r\\nTypes of Security 67\\r\\nVerified Boot 68\\r\\nOperational Security 69\\r\\nAndroid Software Layers 70\\r\\nThe Process Sandbox 70\\r\\nSE Linux for Android 72\\r\\nSE Policy Definition 73\\r\\nAndroid Permissions 76\\r\\nFile Systems 79\\r\\nUser Protections 82\\r\\nCustomizing Permissions 83\\r\\nSample Custom Permission–Protected App 83\\r\\nSample Custom Permission Client App 88\\r\\nSummary 92\\r\\n9780134096346_print.indb   1025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"301ef252-0e38-4b7c-9ae2-86f9c7459aa5":{"__data__":"{\"id_\":\"301ef252-0e38-4b7c-9ae2-86f9c7459aa5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"R6lcXelPHFCwF0o/QDOmSxRktRVND4vAA/a8hcPwyGc=\"}},\"hash\":\"cJvojJce9XZoLEfwwyPvyhi42SRfaR+j+s02+pIqai0=\",\"text\":\"xiContents\\r\\n 6 System Startup: Installing and Booting the System 93\\r\\nThe Boot Process 93\\r\\nBootloader 95\\r\\nFastboot 99\\r\\nKernel 100\\r\\nThe File System 102\\r\\ninit 104\\r\\nRecovery 106\\r\\nBuilding a Daemon 107\\r\\nCreating the Acme Device 107\\r\\nRepo Again 110\\r\\nStarting the Daemon 111\\r\\nSummary 114\\r\\n 7 Android Startup: Dalvik and Zygote 115\\r\\nDalvik 116\\r\\nART 120\\r\\nART Basics 120\\r\\nHybrid ART 122\\r\\nZygote 123\\r\\nZygote Memory Management 123\\r\\nZygote Startup 127\\r\\nRuntime Initialization 128\\r\\nSystem Service Startup 129\\r\\nSummary 131\\r\\nCitations 131\\r\\n 8 Getting to Android: The HAL 133\\r\\nWhy a HAL? 133\\r\\nIs a HAL Necessary? 135\\r\\nDesigning the HAL 136\\r\\nBuilding a HAL 137\\r\\nCode Structure 138\\r\\nImplementing the HAL 140\\r\\nSummary 151\\r\\n9780134096346_print.indb   1125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"14d1f4b2-81d5-4da8-bd2d-bab9daa62c8b":{"__data__":"{\"id_\":\"14d1f4b2-81d5-4da8-bd2d-bab9daa62c8b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iCclMyASs83dxPauHbJyzL9bHxcsazfCaPON72CAtQ8=\"}},\"hash\":\"MOah9Gdmpw6Yk40lIIyDj+3mcW5iW5C3geQ5I8D+lJQ=\",\"text\":\"xiiContents\\r\\n 9 Getting to Java: The JNI 153\\r\\nCode Structure 154\\r\\nUsing the Device 155\\r\\nUsing the HAL 157\\r\\nUsing the Java Native Interface 159\\r\\nExecuting Native Code 160\\r\\nJNI: The Java Side 161\\r\\nJNI: The Native Side 162\\r\\nA Java Proximity Application 165\\r\\nJNI: Some Hints 176\\r\\nSummary 182\\r\\n10 Project Treble: Binderized HAL 183\\r\\nHIDL Architecture 183\\r\\nhwservicemanager 185\\r\\nHIDL Services 185\\r\\nHIDL Client Applications 186\\r\\nHardware Interface Definition Language (HIDL) 186\\r\\nHIDL Types 191\\r\\nHIDL Services 194\\r\\nHIDL Clients 197\\r\\nSummary 198\\r\\n11 Creating a Custom Binderized HAL 199\\r\\nAcme Custom HIDL 199\\r\\nSummary 217\\r\\n12 Clients for a Custom Binderized HAL 219\\r\\nNative C++ Aproximity Client 219\\r\\nSE Linux for Android Changes for aproximitycl 224\\r\\nBuild aproximitycl into Acme 225\\r\\nJava/Kotlin Aproximity Client 226\\r\\nSE Linux for Android Changes for AproximityClient 229\\r\\nBuild AproximityClient into Acme 229\\r\\nSummary 231\\r\\nIndex 233\\r\\n9780134096346_print.indb   1225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"66164a12-1c19-4de4-a298-69eebacc2e9b":{"__data__":"{\"id_\":\"66164a12-1c19-4de4-a298-69eebacc2e9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"st8EO88RB5VxyM64vhyMLiYmqsKsFxOQnAQ2KfklLp4=\"},\"NEXT\":{\"nodeId\":\"b4064524-6e52-4fe5-8432-66f2de080066\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aFYqPH9x+eRJD51jGfamZ0Hq52LkyviaqxDAE9K/HiI=\"}},\"hash\":\"TjXLMqEDUrgSBP5JiOqvA7CuXwAYX5UuCLfswqallr4=\",\"text\":\"Preface\\r\\nI started this book nearly 10 years ago. At the time, it seemed obvious to me that Android \\r\\nwould be important in the burgeoning Internet of Things (IoT) world. Both Larry and I taught \\r\\nthe Android Internals course for the great Marakana (later, New Circle). That class was so \\r\\npopular that both of us got to see a lot of the world while teaching it. I was certain that a book \\r\\nthat described the general process of customizing Android for a new device without getting \\r\\nbogged down in details could be a hit. On the other hand, I recall sitting in the restaurant in Grand Central Station with the editor of \\r\\none of the books I co-authored (a man I very much respected) as he laid out comparable titles \\r\\nand explained in inexorable detail the chances that such a book would succeed. They were not \\r\\ngood. Sometime later, my co-author on O’Reilly’s Programming Android, Zigurd Mednieks, proposed \\r\\nthe Android Deep Dive series to Addison-Wesley. The idea was a series of small, replaceable titles, \\r\\nnone of which had the overhead of a large book. If a volume became obsolete, it could be \\r\\nreplaced or updated without impact to the rest of the series. In this lower-risk environment, my \\r\\nbook made sense. It was green-lighted, and I started work on it. Somewhere around the time I got the first few chapters written, Laura Lewin (the series \\r\\neditor at that time) and Zigurd pitched another book to me. That pitch turned into Android \\r\\nConcurrency. I am very proud of that book, but it took several years to write and completely \\r\\nstalled work on this one. When I finally returned to this book, I was no longer teaching Internals. Cyanogen had shut \\r\\ndown, and both Android and I had moved on. When I picked up the book again, I discovered \\r\\nthat Android had changed so much in the interim (ART, Treble, and SE Linux) that each time I \\r\\ncaught up, it had already moved on. The book was nearly canceled. I had the great luck to have Larry Schiefer on board as a technical reviewer.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b4064524-6e52-4fe5-8432-66f2de080066":{"__data__":"{\"id_\":\"b4064524-6e52-4fe5-8432-66f2de080066\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"st8EO88RB5VxyM64vhyMLiYmqsKsFxOQnAQ2KfklLp4=\"},\"PREVIOUS\":{\"nodeId\":\"66164a12-1c19-4de4-a298-69eebacc2e9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"TjXLMqEDUrgSBP5JiOqvA7CuXwAYX5UuCLfswqallr4=\"}},\"hash\":\"aFYqPH9x+eRJD51jGfamZ0Hq52LkyviaqxDAE9K/HiI=\",\"text\":\"I had the great luck to have Larry Schiefer on board as a technical reviewer. When I finally \\r\\nconceded that the project was swamped and on the verge of drowning, our superstar editor \\r\\nMalobika Chakraborty suggested I take on a co-author. Talk about luck: Larry volunteered! He \\r\\npulled the book out of its hole, laid down some fantastic knowledge, and made this project \\r\\nrelevant again. I’m gonna buy him a t-shirt with a big yellow “S” on it. Before you dig into the first chapter, let me offer a gentle reminder: This is not a cookbook. The book contains code examples, and they are all available online. They have all compiled \\r\\nsuccessfully and run at least once. That, however, is no guarantee that they will compile and \\r\\nrun for you (though we hope they do!). Tool chains change. Android changes. Devices change. Things that work today may well not work at all tomorrow. Our intention is that the content \\r\\nhere is a guidebook, not a map. Good luck! Blake Meike, May 2021\\r\\n9780134096346_print.indb   1325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"00cd24a8-7cc7-4ff5-a5e6-dbf20675feb6":{"__data__":"{\"id_\":\"00cd24a8-7cc7-4ff5-a5e6-dbf20675feb6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KTUdm5enzN9qCqBRLto/TCJYuPtN37WlILaoJp1k1oo=\"}},\"hash\":\"4C1Nq7kTSHvvDzROJ325Cju346PI03PSEyb+D9ExAjg=\",\"text\":\"xivPreface\\r\\nExample Code\\r\\nMost of the code shown in examples in this book can be found on GitHub at  \\r\\nhttps://github.com/InsideAndroidOS. Note \\r\\nSometimes a line of code will be too long to fit on one line in this book. The code continuation \\r\\nsymbol (➥) indicates that the line continues from the previous line. Register Your Book\\r\\nRegister your copy of Inside the Android OS at informit.com for convenient access to downloads, \\r\\nupdates, and/or corrections as they become available. To start the registration process, go to \\r\\ninformit.com/register and log in or create an account. Enter the product ISBN 9780134096346 \\r\\nand click Submit. Look on the Registered Products tab for an Access Bonus Content link next \\r\\nto this product and follow that link to access any available bonus materials. If you would like \\r\\nto be notified of exclusive offers on new editions and updates, please check the box to receive \\r\\nemail from us. A01_Meike_FM_pi-xvi.indd   1425/06/21   9:10 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6242e2d4-28de-4883-89a3-b76bcf64e098":{"__data__":"{\"id_\":\"6242e2d4-28de-4883-89a3-b76bcf64e098\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"sC9J4VqYItbjyJpVe/8n9Okw4qUmAWi+v2QWSR71zTU=\"},\"NEXT\":{\"nodeId\":\"6f836dcf-8ff4-4453-88f4-7e3060a2b6a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"R0isHOuaxhbMLEy7Rgc+ADKb7sHsWzZgqNo19Kn4PQE=\"}},\"hash\":\"gKb1hlA1QPvnUuoBjJbWHmjp0hyfSA/JL0cLjc8efgg=\",\"text\":\"Acknowledgments\\r\\nBlake: Many people contributed to this book over the years. Author and colleague, Zigurd \\r\\nMednieks, made it possible as part of a series of small, replaceable titles. My agent, Carol Jelen, \\r\\nhelped me pitch it, and the original editor, Laura Lewin, guided it during the first years. Adnan \\r\\nBegovic and Gil Zahaiek kept us honest technically, and Sheri Replin is our maven of prose. The incredibly patient Malobika Chakraborty supported the project through some very dark \\r\\ndays. Lori Lyons and Aswini Kumar carried it over the finish line. Most of all, though, thanks to \\r\\nmy co-author, Larry Schiefer, whom I was thrilled to score as a tech reviewer and who rescued \\r\\nthis book from oblivion, breathed new life into it, and made it worth reading. You absolutely \\r\\nrocked it, Larry. Larry: I would like to start by thanking my amazing wife, Shannon. Your never-ending \\r\\npatience and encouragement were essential to making this project happen. I could not have \\r\\ndone it without you. I also want to thank my sons, Aidan and Ian, for your understanding \\r\\nwhen Dad was distracted or spending long hours writing. I love the three of you more than \\r\\nyou’ll ever know. I’d like to thank my co-author G. Blake Meike for the opportunity to work with you on this \\r\\nproject. Writing a book was something I’ve always wanted to do, but I never knew how to get \\r\\nstarted or had the courage to take the first step. This has been a great experience, and I’ll be \\r\\nforever grateful. A technical book like this is very challenging to write, especially for a moving target like \\r\\nAndroid! I would like to thank our technical reviewers for your hard work and feedback. Adnan Begovic and Gil Zahaiek, your insight as Android experts was invaluable. To our editors, \\r\\nMalobika Chakraborty and Sheri Replin, thank you for your understanding, patience, and a \\r\\ngood prodding when needed. Through all the challenges, you both have stood steadfast in \\r\\nmaking sure this book happened, and I’m grateful for both of your insights and efforts.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6f836dcf-8ff4-4453-88f4-7e3060a2b6a2":{"__data__":"{\"id_\":\"6f836dcf-8ff4-4453-88f4-7e3060a2b6a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"sC9J4VqYItbjyJpVe/8n9Okw4qUmAWi+v2QWSR71zTU=\"},\"PREVIOUS\":{\"nodeId\":\"6242e2d4-28de-4883-89a3-b76bcf64e098\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"gKb1hlA1QPvnUuoBjJbWHmjp0hyfSA/JL0cLjc8efgg=\"}},\"hash\":\"R0isHOuaxhbMLEy7Rgc+ADKb7sHsWzZgqNo19Kn4PQE=\",\"text\":\"9780134096346_print.indb   1525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f7a951e8-3dff-47a8-b35e-3815e0a6179d":{"__data__":"{\"id_\":\"f7a951e8-3dff-47a8-b35e-3815e0a6179d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Oj66s659idRSMvE9+5Mq1Hf5wczKuBebLMMSqAOB2HE=\"}},\"hash\":\"JBEifZ3Kpde1bw1w1uc0GoqooqJdT9Rf7K7f0E0K+JA=\",\"text\":\"About the Authors\\r\\nBlake Meike is a passionate engineer, code poet, and veteran of more than 10 years of \\r\\nAndroid development at organizations including D2, Realm, Twitter, and Cyanogen. As a \\r\\nteacher, he has trained hundreds of new Android developers. He is author of several books \\r\\non Android development, including O’Reilly’s bestselling Programming Android and Addison-\\r\\nWesley’s Android Concurrency. He holds a degree in Mathematics and Computer Science from \\r\\nDartmouth College and lives in the Pacific Northwest. Larry Schiefer is the CTO and co-founder of HIQES, LLC, a mobile platform and app \\r\\nengineering services company. He has made a career out of creating software solutions \\r\\nfor mobile, embedded, and desktop systems. He started his career at Motorola working on \\r\\nlarge area telecommunications systems then moved to startups in the telecommunications, \\r\\nnetworking, and embedded spaces. Digging into Android’s internals was a natural progression \\r\\nwith his background in telecommunications, embedded systems, and Linux kernel work. He \\r\\nhas traveled around the world training engineers at Intel, Qualcomm, Bose, and others about \\r\\nthe internal workings of Android. In addition to being an entrepreneur and technical leader, he \\r\\ncontinues to stay involved with the development of new software and platform solutions. 9780134096346_print.indb   1625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"62e0437f-54c7-45a2-8466-a6e31b3c9520":{"__data__":"{\"id_\":\"62e0437f-54c7-45a2-8466-a6e31b3c9520\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HAehIKFVcX+M5Xea3I0cxc22IwwJ41/kRH04lwKxy/k=\"}},\"hash\":\"azIf48cDp9dGj4j+cG9Yv+xmSfEbUu263z5HbePpnRM=\",\"text\":\"1\\r\\nWhy Android? Android was built for small. It has scarcity designed deep into its DNA. It was created in the early 2000s, a time when mobile devices were divided into categories like \\r\\n“smart phone” and “feature phone”; when flash drive program/erase cycles were counted in \\r\\ntens of thousands; and when 64 megabytes was a lot of RAM. The idea at Android’s very core—\\r\\nthat because there is no backing store to which to swap running programs, when memory gets \\r\\ntight the operating system has no choice but to terminate them—is the inescapable legacy of its \\r\\n fixation on frugality. Modern smart phones have all the capabilities that laptops had at that time. Were it designed \\r\\ntoday, Android would likely be a very different thing. Although battery life is still a subject of \\r\\nmuch concern, a modern mobile OS could swap to flash memory as effectively as a modern \\r\\nlaptop swaps to its SSD. Modern Android developers are supplementing—even replacing—the \\r\\nsimple, frugal libraries built into Android with new and powerful but much more resource- \\r\\nintensive libraries such as GSON and RxAndroid. At the same time that mobile phones, the original target of the Android OS, are outgrowing its \\r\\narchitecture, a new and possibly larger opportunity is appearing: the Internet of Things and the \\r\\nsmart devices that comprise it. In much the way that even small companies found, around the \\r\\nturn of the century, that they needed a web presence to compete, so many of the same compa-\\r\\nnies are now discovering that their products need a web presence to compete. From medical \\r\\ndevices and on-board systems in cars, to homes, appliances, and even clothes, all sorts of prod-\\r\\nucts are being supplemented with built-in intelligence. Many of these devices have substantial \\r\\nconstraints on the processor they can support. Price, design, and flexibility make Android an \\r\\nexcellent choice for powering these types of devices. Adopting Android\\r\\nThere are a lot of reason that Android might be a good choice for a new smart device. 9780134096346_print.indb   125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"338d6d11-5d1d-4eb3-9f65-c8d14b9ae218":{"__data__":"{\"id_\":\"338d6d11-5d1d-4eb3-9f65-c8d14b9ae218\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eeLF7qELTEThGKTZgLL4GCZgbpMp50n9z/IIimftf04=\"},\"NEXT\":{\"nodeId\":\"5f8a7d96-9f5f-4c7f-adc9-999705d227b5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"SINpwFv+sgNGyxakP+BEko1DyVg02EFX+8jtrZEppSU=\"}},\"hash\":\"wTJ+nOgSBsil6RWDYsjZcyg4GT4V2Vz1RTVfgbsKffM=\",\"text\":\"2Chapter 1  Why Android? Full Stack\\r\\nThe Android OS addresses the full stack of product requirements. From hardware and the \\r\\nkernel to stereo audio and displays on multiple screens, Android offers flexibility and provides a \\r\\nwealth of options. One can think of Android as similar to a distribution of GNU/Linux such as \\r\\nMint or CentOS. It transforms a device from a warm piece of silicon to a useful computer with \\r\\nbasic functionality. Broad Acceptance\\r\\nPerhaps the most obvious reason for choosing Android for a hardware project is that it is ubiq-\\r\\nuitous. Some versions of Android run out of the box on nearly any common chipset. In fact, \\r\\nmost SoC (system on a chip) vendors provide reference hardware kits with a version of Android \\r\\nand a backing Linux kernel. At least as important is that many developers are familiar with the \\r\\nAndroid system. Building a team, from front-end application and UI experts to those with the \\r\\ndeep understanding of Android necessary to modify its core, should not be an impediment. Beautiful UI\\r\\nThe Android system is capable of producing stunning user interfaces, which is perhaps its \\r\\nmost important feature. Support for most popular audio and video media is baked right in \\r\\nand is relatively easy to use. Offering full lighting and shadowing, the tools for animation and \\r\\n3D display are top-notch. One has only to look at some of the simply gorgeous applications \\r\\nsuch as Feedly or Weather View to grasp the nearly unlimited potential of the Android design \\r\\npalette. When the existing Android UI framework is not enough, the system supports both \\r\\nOpen GL ES and Vulkan for low overhead, high-performance 3D graphics. Linux Based\\r\\nThe Android operating system is based on the Linux operating system. Linux is one of the \\r\\nmost popular and widely used of all operating systems. It is everywhere. Whether a chip is \\r\\nARM-based, Intel-based, or something radical, nearly every chipset manufacturer provides a \\r\\nversion of Linux that runs on their device. Bear in mind, however, that Android is officially \\r\\nonly available for ARM- and Intel-based processors (both 32 and 64 bit. ) This means the \\r\\nAndroid Open Source Project (AOSP) tree’s build system, pre-built tools, test suites, and the \\r\\npublicly available native development kit (NDK) only support these architectures.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5f8a7d96-9f5f-4c7f-adc9-999705d227b5":{"__data__":"{\"id_\":\"5f8a7d96-9f5f-4c7f-adc9-999705d227b5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eeLF7qELTEThGKTZgLL4GCZgbpMp50n9z/IIimftf04=\"},\"PREVIOUS\":{\"nodeId\":\"338d6d11-5d1d-4eb3-9f65-c8d14b9ae218\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wTJ+nOgSBsil6RWDYsjZcyg4GT4V2Vz1RTVfgbsKffM=\"}},\"hash\":\"SINpwFv+sgNGyxakP+BEko1DyVg02EFX+8jtrZEppSU=\",\"text\":\"That is not to \\r\\nsay Android cannot run on some other architecture, just that the toolchains and build systems \\r\\nfor those architectures are not supported. While simply getting Linux ported and running on a new board is an important first step, quite \\r\\na bit of work may well be necessary to get all the hardware accessible to software. Frequently, \\r\\nbecause the Linux kernel is licensed with the GNU Public License (GPL), the custom code \\r\\nnecessary to support a particular sensor, display, or port will already be available for free online. Even if this is not the case, a large community of developers exists that is very familiar with the \\r\\n9780134096346_print.indb   225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5c186e49-bf18-430b-970c-4e017e5d82e0":{"__data__":"{\"id_\":\"5c186e49-bf18-430b-970c-4e017e5d82e0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/3KC8/aWqIXTGlOqiTdXRT6AL1/fJh8ruXJD/CBAlyE=\"},\"NEXT\":{\"nodeId\":\"3cbf5927-93a6-48af-adaf-ed289c4a2b96\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KC/OJsNCwrzLM0L1aJnxkb65+oAx8V4w6fUQd97CRTE=\"}},\"hash\":\"8crIcSQXG9bMSjzgXLVbUVAvBTtZ0o5FfsUyfuotQrs=\",\"text\":\"3Adopting Android\\r\\nprocess of building new drivers for Linux. Accommodating a new board or a new device is, if \\r\\nnot always simple, at least fairly straightforward. Powerful Development Environment\\r\\nThe Android toolchains are quite powerful and are undergoing constant improvement. Both \\r\\ntoolchains—that for building Android’s infrastructure and that for building Java applications \\r\\nthat run on top of Android—are based, largely, on common off-the-shelf tools. The Android source code, the Android Open Source Project (AOSP), is well supported. Creating \\r\\na build of the version of Android used in this book, API 29, is relatively straightforward on \\r\\nrecent OSX and Linux platforms. The build system with its directory-based mechanism for \\r\\nper-hardware customizations was originally based on GNU make. With the Nougat release, the \\r\\nsoong build system replaced make. Soong uses two additional tools, kati and ninja, to make \\r\\nthe build much faster than it was using make. Existing makefiles continue to work as-is along-\\r\\nside the new soong build files. Most of the development for an Android system—even most of the system-level \\r\\n programming—is done in Java. Android Java developers will use tools like Android Studio  \\r\\n(a fork of IntelliJ’s IDEA IDE) and Gradle, the standard build tool for Android applications. Gradle is very definitely sufficient for building, testing, and packaging even system applica-\\r\\ntions with native components. As mentioned previously, as of about 2014, several new, interesting, and powerful development \\r\\nframeworks are available for use in Java Android application. Although some are large and all \\r\\nare a trade-off in battery life, tools such as Realm DB, RxAndroid, and Retrofit can drastically \\r\\nimprove the effectiveness of a development team. One of the most important advancements in Android development was the announcement \\r\\nof Kotlin as a first-class supported language in May of 2017. Kotlin is clear, succinct, power-\\r\\nful language that seamlessly integrates with existing Java and even native code. Although it is \\r\\nnot widely used within AOSP’s core (yet), it can be used by applications written for a custom \\r\\nAndroid platform. Open Source\\r\\nBuilding an embedded device necessarily involves negotiating a minefield of legal issues. This \\r\\nbook is technical, not legal. We are not lawyers and nothing in this or any of the subsequent \\r\\nchapters should be interpreted as legal advice.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3cbf5927-93a6-48af-adaf-ed289c4a2b96":{"__data__":"{\"id_\":\"3cbf5927-93a6-48af-adaf-ed289c4a2b96\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/3KC8/aWqIXTGlOqiTdXRT6AL1/fJh8ruXJD/CBAlyE=\"},\"PREVIOUS\":{\"nodeId\":\"5c186e49-bf18-430b-970c-4e017e5d82e0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8crIcSQXG9bMSjzgXLVbUVAvBTtZ0o5FfsUyfuotQrs=\"}},\"hash\":\"KC/OJsNCwrzLM0L1aJnxkb65+oAx8V4w6fUQd97CRTE=\",\"text\":\"If you intend to attempt marketing your own \\r\\ndevice, you will need the help of a qualified lawyer. That said, some broad generalizations \\r\\nmight help a budding device developer to understand the moving parts. Figure 1.1 is a very \\r\\nhigh-level model of code ownership in the Android system. 9780134096346_print.indb   325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b370bfdc-e568-4cca-9af7-e83b36e7e8dc":{"__data__":"{\"id_\":\"b370bfdc-e568-4cca-9af7-e83b36e7e8dc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"l93DY82kkoBLXgvcMH6NVaaFtSMJvQN9p51i9SgxNKA=\"},\"NEXT\":{\"nodeId\":\"72c8f4cd-5d14-4b45-a3a5-80783ffef76d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"99wOZvpDC61d+n9dqVSwPKyTbO4x7A/GrdwD1ig/ktQ=\"}},\"hash\":\"zmUWlRJ6HgVORrDHIrKNVU/veBVa/0lO32thcF0GtpE=\",\"text\":\"4Chapter 1  Why Android? Proprietary Application Code\\r\\nProprietary Hardware Code\\r\\nAOSP\\r\\nProprietary Google Code\\r\\nFigure 1.1 Android Code Ownership\\r\\nAt the bottom of the stack is proprietary hardware code. It is usually obtained from the hard-\\r\\nware vendor, who may license it at no cost or, perhaps, impose some kind of fee. This code \\r\\nis frequently not open source. It is essential, but it may be delivered as pre-built binaries and \\r\\npossibly with strict legal injunctions about reverse engineering. Quite possibly you will never \\r\\nsee the source and even the documentation for it might not be very good. Android’s primary \\r\\ninterface to this code is the Hardware Abstraction Layer (HAL), discussed in Chapters 8 and 10. At the top of the stack are applications. These are things like the controller for a proprietary \\r\\nhome-entertainment system or the Facebook and Twitter apps. Apps are also likely to be propri-\\r\\netary and, again, unless they are apps you develop yourself, you may never see their source \\r\\ncode. If your platform needs specific applications, you will either have to make agreements \\r\\nwith their owners or provide some kind of service (a store or marketplace) from which an end \\r\\nuser can acquire them. In between these two proprietary layers is the code base for Android itself, the Android Open \\r\\nSource Project (AOSP). It is completely open source. You can read it, copy it, customize it, and \\r\\nuse it pretty much as you like. Nearly all of it is protected with licenses that even allow you \\r\\nto redistribute only pre-built binaries, should you choose to do so. You can take as little or as \\r\\nmuch as you need. People are frequently confused about the openness of the AOSP code base, because Google \\r\\nstrictly controls contributions. It is true that you are unlikely to be able to contribute a change \\r\\nto the canonical AOSP codebase as you could with most other open-source projects. What \\r\\nyou can do, though, is create a fork of the relevant code repository, change it in any way you \\r\\nchoose and use it wherever you want. Although the AOSP code is truly open source, it is not necessarily free of legal encumbrances. Many of the technologies built into Linux and the Android services based on top of it have \\r\\nbeen the subjects of large and small legal battles.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"72c8f4cd-5d14-4b45-a3a5-80783ffef76d":{"__data__":"{\"id_\":\"72c8f4cd-5d14-4b45-a3a5-80783ffef76d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"l93DY82kkoBLXgvcMH6NVaaFtSMJvQN9p51i9SgxNKA=\"},\"PREVIOUS\":{\"nodeId\":\"b370bfdc-e568-4cca-9af7-e83b36e7e8dc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zmUWlRJ6HgVORrDHIrKNVU/veBVa/0lO32thcF0GtpE=\"}},\"hash\":\"99wOZvpDC61d+n9dqVSwPKyTbO4x7A/GrdwD1ig/ktQ=\",\"text\":\"Among the technologies that you might need \\r\\n9780134096346_print.indb   425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cf82a094-29f4-4dad-bbb3-f2947f807567":{"__data__":"{\"id_\":\"cf82a094-29f4-4dad-bbb3-f2947f807567\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xN/4CFa/xmkyFxfhxQbO//FSxPwH08bY6Vkunqh4PmQ=\"},\"NEXT\":{\"nodeId\":\"daa98a0f-c5ff-425d-b03e-5653c4722ec3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"WhwJWv39kRupCWShr8i9w+En2EIDgjtA3mfdnfYIjVQ=\"}},\"hash\":\"WzanZaT39Xf5T40zan3QVzdD/+iwmtGhOyFvHiaj8Yo=\",\"text\":\"5AOSP and Google\\r\\nto license are things such as Wi-Fi, Bluetooth, multimedia codecs, and other more esoteric \\r\\nthings (like a file system!). What makes this even more confusing is the AOSP tree includes software implementations of \\r\\nsome of these components (such as multimedia encoders and decoders) as placeholders. They \\r\\ndo not come with any kind of patent or license grant from Google or the intellectual property \\r\\n(IP) holders. When you build a new device, these third-party components must be carefully \\r\\nexamined to ensure the device is in compliance with technology-specific licenses. Microsoft, in particular, has a portfolio of patents that it has successfully used in strong-\\r\\narming an estimated $1 billion in license fees from various Android device manufacturers. The \\r\\nexact contents of this portfolio were a closely held secret for many years. In 2014, however, \\r\\nthe Chinese government leaked the contents of the portfolio, and you can now easily find it \\r\\nonline. AOSP and Google\\r\\nGoogle holds its control over the Android OS in two ways. First, most consumer Android-\\r\\nlabeled systems contain a feature-rich, proprietary Google platform that is not part of AOSP. This platform includes things such as Google Play Services, Google Maps, and the Play Store. Second, to install any of these proprietary services—or even, for that matter, to label the system \\r\\nas an Android™ system and adorn it with the Android robot icon—a device manufacturer \\r\\nmust ensure the device complies with the Android Compatibility Definition Document (CDD) \\r\\nand passes the Android Compatibility Test Suite (CTS) and the Vendor Test Suite (VTS). After a \\r\\ndevice is verified as compliant, Google Mobile Services may be licensed for the device, allowing \\r\\nit to ship with Google’s proprietary add-ons. These constraints—the Google proprietary code, the licensing agreement, compliance with the \\r\\nCDD, and passing the CTS and VTS—do not affect the use of the AOSP codebase. Developers \\r\\nand device creators are free to use and adapt the AOSP code as long as they neither label the \\r\\nresulting device as “Android” nor need the Google proprietary code and its associated function-\\r\\nality (marketplace, cloud services, and so on). Several examples exist of forks of the AOSP codebase. Perhaps the best known of these is Fire \\r\\nOS, used on Amazon devices such as the Kindle, Fire TV, and the Fire Phone.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"daa98a0f-c5ff-425d-b03e-5653c4722ec3":{"__data__":"{\"id_\":\"daa98a0f-c5ff-425d-b03e-5653c4722ec3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xN/4CFa/xmkyFxfhxQbO//FSxPwH08bY6Vkunqh4PmQ=\"},\"PREVIOUS\":{\"nodeId\":\"cf82a094-29f4-4dad-bbb3-f2947f807567\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"WzanZaT39Xf5T40zan3QVzdD/+iwmtGhOyFvHiaj8Yo=\"}},\"hash\":\"WhwJWv39kRupCWShr8i9w+En2EIDgjtA3mfdnfYIjVQ=\",\"text\":\"Many, if not most, \\r\\napplications built for Android will run on Fire OS. Nonetheless, Fire OS cannot be labeled as \\r\\nAndroid, cannot include the Google Play Store, and does not support Google Play Services. Both Samsung and LineageOS (formerly CyanogenMod) also maintain operating systems that \\r\\nare heavily modified versions of the AOSP codebase. Both of these forks, though, have managed \\r\\nto pass the CTS and stay on Google’s good side. Both are labeled as Android. Many other examples of AOSP code in non-Google devices exist, from popular phones and \\r\\ntablets in China and India to the UI for Comcast’s Xfinity service. Although each of these \\r\\ndevices has its own legal story and its own legal concerns, the use of the AOSP codebase is not, \\r\\nin itself, a problem for any of them. Depending on whether a manufacturer feels that it can \\r\\n9780134096346_print.indb   525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f72496a7-c2b5-4c76-93b0-0b195fd254b7":{"__data__":"{\"id_\":\"f72496a7-c2b5-4c76-93b0-0b195fd254b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pZcL7B/I7psF/CKlfGMnZ96VXjvNlUSEqgbxyWzB+9k=\"},\"NEXT\":{\"nodeId\":\"33124dfe-3933-4a54-ad34-eac7e17e4c00\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XqEVTIrnPAU21aVtyYN+kAFWaAc7B+h8zEYRmrTS7w4=\"}},\"hash\":\"VV9i2cQUehfOEkjIvwP53A8wevf8rLPuDegEezpp7gs=\",\"text\":\"6Chapter 1  Why Android? provide an alternative to the Android label and the accompanying Google proprietary services, \\r\\nit either does or does not invite Google into its AOSP-based product. The devices it creates \\r\\nusing AOSP code do not need be visible to Google in any way and do not need any permission \\r\\nor participation from Google. Where it gets complicated is devices in the middle ground between the two ends of the spec-\\r\\ntrum just described: a device that does not need or want the Android label but on which the \\r\\nmanufacturer wants to include apps with which users are familiar but are provided by Google. For example, consider a kiosk for renting movies that is powered by Android. The manufacturer \\r\\nwould like to bundle YouTube so that users can view video trailers. Google’s position is this \\r\\narrangement is not supported. The manufacturer needs either to ensure the device is CDD/CTS \\r\\ncompliant or find an alternative way of providing the desired functionality. Other Choices\\r\\nThe number of products with embedded systems may be exploding but the idea of embedded \\r\\ncomputing itself is nothing new. Many alternatives to Android are available as the intelligence \\r\\nfor an IoT device; Real Time Operating Systems (RTOSs), some much older than Android and \\r\\nsome newly developed. An even better alternative, though, might be no OS at all. Micro-Controllers\\r\\nEven with the falling prices and increasing power of single-board computers (SBCs), at the time \\r\\nof this writing, a board that can run Android will cost something in the $20–$50 range. It will \\r\\nalso occupy around 20 cubic centimeters of space. That can be a lot of overhead for a small \\r\\ndevice. When cost and space are of paramount importance, a micro-controller like the wildly popular \\r\\nArduino may be an attractive alternative. Most micro-controllers are not full-fledged processors \\r\\nand cannot support multiple simultaneous processes, Linux, or a flashy UI, let alone Android. At the time of this writing, so-called “mini” micro-controllers are a full order of magnitude \\r\\nless expensive than SBCs and may require less than a single cubic centimeter of space. Over \\r\\ntime, certainly, the line between SBCs and micro-controllers will blur. SBCs will get smaller, \\r\\n micro-controllers will become more powerful, and RTOS capabilities will scale linearly with the \\r\\nhardware.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"33124dfe-3933-4a54-ad34-eac7e17e4c00":{"__data__":"{\"id_\":\"33124dfe-3933-4a54-ad34-eac7e17e4c00\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pZcL7B/I7psF/CKlfGMnZ96VXjvNlUSEqgbxyWzB+9k=\"},\"PREVIOUS\":{\"nodeId\":\"f72496a7-c2b5-4c76-93b0-0b195fd254b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VV9i2cQUehfOEkjIvwP53A8wevf8rLPuDegEezpp7gs=\"}},\"hash\":\"XqEVTIrnPAU21aVtyYN+kAFWaAc7B+h8zEYRmrTS7w4=\",\"text\":\"Even now, though, it is possible to accomplish some very impressive magic with one \\r\\nor more small, simple micro-controllers. An important limitation of micro-controllers, to be considered before choosing one as \\r\\nthe brains for a project, is its upgradeability. While it is certainly possible to update a \\r\\n microcontroller-based system over the air, it can be difficult and might require additional \\r\\nspecialized hardware. If over-the-air (OTA) updates are part of your device strategy, you might \\r\\nneed a  full-fledged OS. 9780134096346_print.indb   625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"21c2ed46-4801-4698-b179-1a4655496fea":{"__data__":"{\"id_\":\"21c2ed46-4801-4698-b179-1a4655496fea\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"c/WnYZ8FJtKdQV3J46rOKrXJ/5nKje6NPSkd8vjnCk0=\"},\"NEXT\":{\"nodeId\":\"b51be96f-24b9-4e6d-bd35-5eb9514cd4fc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bJZxg3t11FjOMQRDIrzeng63jrFsp7Z+EGZwFCx+WzM=\"}},\"hash\":\"5nvZujJkT1IBdepLViF6ehGJ0p0q60PRCvXUGoibYvM=\",\"text\":\"7Other Choices\\r\\nSimplicity is a double-edged sword. A system that can be updated can be hacked. Hacking a \\r\\nmicro-controller is entirely possible. Think Stuxnet. However, doing so is probably difficult and \\r\\nnot interesting to an attacker. A simple read-only memory (ROM)-based micro-controller that \\r\\nis just sufficient to power your project may save you from a substantial security budget and \\r\\nkeep your product out of the headlines during the next distributed denial of service (DDoS) \\r\\nincident. Other RTOSs\\r\\nThe list of operating system alternatives to Android is long. Each of them solves some set of \\r\\nproblems and introduces others. QNX\\r\\nQNX was the most popular embedded OS in the world before the advent of Android. Originally \\r\\ncalled QUNIX, it is a micro-kernel-based system and was developed by two students at the \\r\\nUniversity of Waterloo. It was released in 1984 as QNX to avoid trademark infringement. Since \\r\\nthat time it has been rewritten several times, and sold, first to Harman International and then \\r\\nto Research In Motion, now Blackberry. Shortly after Blackberry acquired QNX, it restricted \\r\\naccess to the source. VxWorks\\r\\nIf your device needs the kind of reliability and dependability that powers the Martian probes \\r\\nand military aircraft, you should consider VxWorks. VxWorks is a proprietary OS originally \\r\\ndeveloped by RTOS pioneers, Wind River. Wind River is now a wholly owned subsidiary of \\r\\nIntel. The VxWorks kernel is monolithic (unlike QNX), but the system is nicely modularized and the \\r\\ntoolchain well developed. All of this, of course, comes at a price: Vxworks is proprietary and \\r\\nclosed source. Wind River also produces Wind River Linux, a hardened kernel with a custom \\r\\nbuild system. Android Things\\r\\nAndroid Things is Google’s version of Android stripped down for IoT. Codenamed Brillo, this \\r\\nstripped down version of Android was designed to be used by low-power IoT devices with \\r\\nsignificantly less RAM (as low as 32 MB) while still including Bluetooth Low Energy (BLE) and \\r\\nWi-Fi support. Android Things requires manufacturers to use supported single-board computers \\r\\n(SBCs) or System on Modules (SoMs). Such devices would automatically receive OS and security \\r\\nupdates from Google.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b51be96f-24b9-4e6d-bd35-5eb9514cd4fc":{"__data__":"{\"id_\":\"b51be96f-24b9-4e6d-bd35-5eb9514cd4fc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"c/WnYZ8FJtKdQV3J46rOKrXJ/5nKje6NPSkd8vjnCk0=\"},\"PREVIOUS\":{\"nodeId\":\"21c2ed46-4801-4698-b179-1a4655496fea\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5nvZujJkT1IBdepLViF6ehGJ0p0q60PRCvXUGoibYvM=\"}},\"hash\":\"bJZxg3t11FjOMQRDIrzeng63jrFsp7Z+EGZwFCx+WzM=\",\"text\":\"Such devices would automatically receive OS and security \\r\\nupdates from Google. Additionally, Android Things included a standard framework for develop-\\r\\ning custom hardware interfaces without requiring changes to the underlying kernel or Android \\r\\nframework. This approach allowed IoT manufacturers to focus on their specific purpose and not \\r\\nworry about the underlying OS, its security, or system-level updates. 9780134096346_print.indb   725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a117f3e2-cfed-49bc-9788-db9bbc48c778":{"__data__":"{\"id_\":\"a117f3e2-cfed-49bc-9788-db9bbc48c778\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9nMMvOddb+LklY+/I1HFYuTlrrvyuoqf7iRoFCL+LRw=\"},\"NEXT\":{\"nodeId\":\"2da7c9de-b231-4340-84e8-0bea89f6d5b2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"W1qoDTJTsoWmCOfwHMxZBRc93CIeEOtYyfhcnqNJrR4=\"}},\"hash\":\"Qy92oB1bLpkNbRwuA38tSKToWY/U2j0AMYs/2EN3T1A=\",\"text\":\"8Chapter 1  Why Android? Unfortunately, in early 2019 Google announced that Android Things had been refocused on \\r\\nsmart TV and smart speaker systems and that broader long-term support is at end of life. Others\\r\\nWindows CE has been a very popular embedded OS as is evidenced by the blue screens of \\r\\ndeath on everything from subway and traffic signs to vending machines and museum kiosks. Microsoft recently introduced a successor to CE, called Windows 10 for IoT. Nucleus RTOS, from Wind River’s long-time rival, Mentor Graphics, found a home in a number \\r\\nof Samsung, LG, and Motorola phones. Riot OS, Arm Mbed OS, and Green Hills Integrity are all \\r\\nalso players. Nearly all of these popular RTOSs are proprietary and closed source. Free and open-sourced \\r\\nRTOSs are out there, though—FreeRTOS, MontaVista, and Contiki, to name a few—but none of \\r\\nthem has the kind of history and support that Android has. Summary\\r\\nYou can find many alternatives to Android. Few, however have the collection of features and \\r\\nsupport that make it such a great choice for an IoT project:\\r\\n ■It is free. Take as much or as little as you like; use it as you please. ■It is portable. Android can be made to run on virtually any type of hardware. Getting any operating system running on a new device can be very difficult. Android is no exception. There is, though, a lot of existing code and a large community with lots of experience \\r\\nwith porting it. ■It is adaptable. Plumbing support for new peripherals into the Android framework is a straightforward and usually simple task. Doing so is the subject of the rest of this book. ■The toolchain is good. The low-level C and C++ code use standard tools augmented with a baroque but useful build system. Most of the code—high level and written in Java—is \\r\\nsupported by Gradle, a couple custom plug-ins, and Android Studio. All of these tools are \\r\\nundergoing constant improvement. ■It supports reactive and beautiful UIs. Android can handle a variety of media, both audio and video. It has powerful tools for animation, and supports three-dimensional layouts \\r\\nand both touchscreen and D-pad input.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2da7c9de-b231-4340-84e8-0bea89f6d5b2":{"__data__":"{\"id_\":\"2da7c9de-b231-4340-84e8-0bea89f6d5b2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9nMMvOddb+LklY+/I1HFYuTlrrvyuoqf7iRoFCL+LRw=\"},\"PREVIOUS\":{\"nodeId\":\"a117f3e2-cfed-49bc-9788-db9bbc48c778\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Qy92oB1bLpkNbRwuA38tSKToWY/U2j0AMYs/2EN3T1A=\"}},\"hash\":\"W1qoDTJTsoWmCOfwHMxZBRc93CIeEOtYyfhcnqNJrR4=\",\"text\":\"9780134096346_print.indb   825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0f187707-3726-45ce-b55f-6c8828dde66f":{"__data__":"{\"id_\":\"0f187707-3726-45ce-b55f-6c8828dde66f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kJ1BCGSI+bTlCPiPxV8uoJ71ELNGbTCl1wQdx/HMjew=\"}},\"hash\":\"e8i2WaYq5XEgmRHuseSvsNRPKtdPGMPFDN9kUCPlbcI=\",\"text\":\"2\\r\\nBooting Acme\\r\\nLet’s get started! Consider a project: customizing Android for a new device, the Acme device. The hardware engineers for the Acme project have, fortunately, chosen hardware that turns out \\r\\nto be fairly similar in architecture to a HiKey960. That means the Acme project will be based on \\r\\nthe well-supported HiKey variant of AOSP and gradually modified to suit the project goals. Note\\r\\nThe code and examples in this book were built and run on a HiKey960, using the release tag \\r\\nandroid-10.0.0_r33 for the Android AOSP source tree and compiled on a Linux Ubuntu 16.04. While, of course, this is not a guarantee of reproducibility, it is some guarantee of consistency. Even for developers who are not so fortunate as to have such a lucky choice of hardware for \\r\\ntheir project, the general strategy described in this chapter should be completely applicable. The absolute pre-requirements for the development process described in the rest of this book \\r\\nare a code-base that\\r\\n ■Is under source control and can be reproduced exactly\\r\\n ■Can be built with a stable, available toolchain to create a flashable image\\r\\n ■Produces an image that successfully boots into Android\\r\\nBringing up a device is work for wizards; it can be frustrating, time consuming, and unique to a \\r\\nparticular device. It is unlikely that any book could describe it. Even if such a book did exist, it \\r\\nwould be obsolete by the time it got to the printer. Note\\r\\nDevelopers at the interface between hardware and software call the process of getting a basic \\r\\noperating system running on a new device as “bring up. ” Bringing up a board is, usually, an \\r\\niterative process, first getting some small simple code running and then using it to bootstrap a \\r\\nboot loader and, eventually, an operating system. 9780134096346_print.indb   925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"62c9c3db-36ce-4f86-a572-4809451a6c58":{"__data__":"{\"id_\":\"62c9c3db-36ce-4f86-a572-4809451a6c58\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nxqwgjv4sm8TSca/Ci8+xMkSlYe4dTWXOBPMnmQu00Q=\"},\"NEXT\":{\"nodeId\":\"d2bc6156-4452-4bc9-9a98-5abce84a319d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"K7SgaYKHJ+KDNFt5euVx3kW/nJzzVUl3v/3WSyOM/o4=\"}},\"hash\":\"d1XjxqZokVxlew5PjfQH674tPm896GL4ZA/IYGnBUuc=\",\"text\":\"10Chapter 2  Booting Acme\\r\\nAlthough this chapter is a skeleton for the process, there is some wild hand waving: This is not \\r\\na cookbook. Being able to get from source to running Android, however, is absolutely a pre-\\r\\nrequirement for proceeding. To follow the topics discussed in the rest of this book, a developer \\r\\nmust be able to test incrementally and revert changes when they do not work. Setting Up a Build Machine\\r\\nThe two supported options for a build machine are Linux and OSX. Although developing \\r\\nAndroid applications from Windows is possible, no support for building Android itself on \\r\\nWindows exists. Android is definitely most comfortable on Linux. A plurality of the work done on the Android \\r\\nsystem is done on Linux platforms. The tools, the support community, and even the code itself \\r\\nall originate and are most thoroughly used and tested in the Linux environment. Developers \\r\\nwith Linux development platforms and comfortable using Linux systems are on the best main-\\r\\ntained trail. Many developers prefer to work on OSX. Fortunately, most versions of most of the Android \\r\\ncode can be built from OSX. Linux kernels, custom drivers, and native Linux services can also \\r\\nfrequently be built on OSX. Choosing OSX as a build platform, however, is a charged decision. Developers who depend on \\r\\nOSX for building their products can expect to spend a significant amount of time porting and \\r\\ndebugging tools. The ability to do an OSX native build can certainly be an important time-\\r\\nsaver for an engineer developing on an OSX machine—when it works. The distinction between \\r\\nexpecting a native OSX build to work most of the time and depending on having them work all \\r\\nthe time may seem subtle. It can become very clear, though, when a deadline looms and the \\r\\nOSX native C compiler refuses to compile the most recent source. Perhaps surprisingly, virtual machines can be realistic alternatives. They are the only way to do \\r\\nbuilds on a Windows system. Of course, builds definitely run slowly on a virtual machine. With \\r\\na little forethought, though, the possibility exists that full builds may be necessary only rarely. Depending on the size of the incremental build, a virtual machine may be viable.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d2bc6156-4452-4bc9-9a98-5abce84a319d":{"__data__":"{\"id_\":\"d2bc6156-4452-4bc9-9a98-5abce84a319d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nxqwgjv4sm8TSca/Ci8+xMkSlYe4dTWXOBPMnmQu00Q=\"},\"PREVIOUS\":{\"nodeId\":\"62c9c3db-36ce-4f86-a572-4809451a6c58\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"d1XjxqZokVxlew5PjfQH674tPm896GL4ZA/IYGnBUuc=\"}},\"hash\":\"K7SgaYKHJ+KDNFt5euVx3kW/nJzzVUl3v/3WSyOM/o4=\",\"text\":\"Depending on the size of the incremental build, a virtual machine may be viable. Note\\r\\nUnfortunately, at least at the time of this writing, one of the most appealing possibilities, a \\r\\nshared folder, visible from both an OSX host and a Linux guest, does not work using either \\r\\nrecent versions of VirtualBox or VMWare Fusion for virtualization. A flaw in the mapping \\r\\nbetween guest and host file permissions prevents the build from completing successfully. Complete, easily followed directions for setting up the build machine are available on the AOSP \\r\\nsource website at https://source.android.com/setup/build/initializing. 9780134096346_print.indb   1025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"187ea013-8172-4a63-8d3c-1c0793eeb1c8":{"__data__":"{\"id_\":\"187ea013-8172-4a63-8d3c-1c0793eeb1c8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Qv0vyu1N27n/s81RDNkSvrBJw4MeJxENLuw3z2hrdGw=\"}},\"hash\":\"rz+1n/SASYkEZYCea5rZ7AJQlZlXpvdTSO7ebkIELAY=\",\"text\":\"11Repo\\r\\nWhen building with OSX, creating a separate, case-sensitive volume to hold the source code \\r\\nis especially important. The volume can be a mountable disk image file or a physical external \\r\\ndrive but it must, unlike the normal OSX file system, be case sensitive. The next step is downloading the source. Downloading the Code\\r\\nThe process of downloading the Android source tree is also well documented at the source \\r\\nwebsite. The full source is fairly large (around 100 GB) and nearly twice that much space will \\r\\nbe necessary for a complete build. Both the download and build processes can be quite lengthy \\r\\nand take hours, even on a fairly powerful machine with a good network connection. The code is structured as a forest of git repository trees and maintained with a tool called \\r\\nrepo. As described in the documentation, downloading the source consists of\\r\\n1. Obtaining the repo tool\\r\\n2. Obtaining the repo manifest\\r\\n3. Using repo to download the git repositories named in the manifest\\r\\nRepo\\r\\nRepo is an interesting and powerful tool. It is a Python program that uses git to provide func-\\r\\ntionality similar to that provided by git submodules. Repo, however, was around well before \\r\\nsubmodules. The following discussion assumes a good working knowledge of git. Several excellent resources  \\r\\nfor developers that are new to git are available, including Jon Loeliger and Matthew McCullough’s  \\r\\nexcellent Version Control with Git (Loeliger, 2012) and the complete and readable documentation \\r\\nat GitHub (https://help.github.com). Repo manages an interesting two-layered versioning system. The following command line \\r\\ninitializes a directory as a Repo workspace:\\r\\nrepo init –u https://android.googlesource.com/platform/manifest \\\\\\r\\n          -m default.xml\\r\\nRunning this command in a directory creates a new top-level subdirectory named .repo. That \\r\\ndirectory contains, among other things, the manifest repository—a git repository identified \\r\\nin the initialization command by the argument of the –u option. The manifest repository is \\r\\ncloned into the .repo directory and named manifests. The manifest repo may contain all kinds of things, but it must contain one or more manifest \\r\\nfiles. The manifest file that is named as the argument of the –m command line option (or the \\r\\n9780134096346_print.indb   1125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ced30b2c-c030-433f-b28f-8c822d4e279c":{"__data__":"{\"id_\":\"ced30b2c-c030-433f-b28f-8c822d4e279c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lexj1PFWlLUmaMU/6NWOhsq7c7s+IwwFwltYAS38heM=\"}},\"hash\":\"n3wDkmDya6ReAhUrSvGGmrtg3ssHYrgyZ0iIFdOYLsI=\",\"text\":\"12Chapter 2  Booting Acme\\r\\nfile named default.xml, if no –m option is specified) is soft-linked or included from the top \\r\\nlevel of the .repo directory as manifest.xml. The manifest.xml file controls the structure of \\r\\nthe rest of the repository. Figure 2.1 illustrates the structure of the repo workspace. .repo\\r\\nmanifests\\r\\nGit RepoGit RepoGit Repo\\r\\ndefault.xmlmanifest.xml\\r\\nFigure 2.1 Repo Workspace\\r\\nAfter the workspace is initialized, repo can download the actual source. This is done by issuing \\r\\nthe sync command from the command line:\\r\\nrepo sync\\r\\nIn response to this command, the repo program parses manifest.xml, which is a list of git \\r\\nrepositories. It clones each git repository into a location, also specified in the manifest. When \\r\\nthe sync command completes, the working directory is an identical copy of every other work-\\r\\nspace created with the same commands. Caution! Do not copy a repo workspace as you might a normal git repository. Repo workspaces make \\r\\nheavy use of soft links. A simple file copy will actually refer to the exact same workspace as \\r\\nthe original. 9780134096346_print.indb   1225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"eff5d9d6-ba84-4c21-ad93-100764c93daf":{"__data__":"{\"id_\":\"eff5d9d6-ba84-4c21-ad93-100764c93daf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xGdaBocu2NcZg1xT3JyebPbOUmui6nGzXD9d3vBhp9c=\"},\"NEXT\":{\"nodeId\":\"1c82daaa-4f20-48c6-bdff-d543a1a7efd6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Rfldr4bAO/4VpYbnv6ZoBQtchdBmrcpupIuR/n68xzI=\"}},\"hash\":\"41ofC7BaEV2dzSqogp956M8rW4yClINTOj2ZORzk4SQ=\",\"text\":\"13Repo\\r\\nBecause the manifest itself is kept in a git repository, it may be versioned: It is a versioned list \\r\\nof names of versioned repositories. The manifest directory, in addition to having different \\r\\nmanifests—say, one for each of several different customers—may also contain multiple versions \\r\\nof each of those manifests, each on a separate git branch. Repo’s –b option allows the developer \\r\\nto check out the version of a manifest on a particular branch. That versioned manifest may, in \\r\\nturn, point to specific branches (or even commits) within each of the repositories that make up \\r\\nthe workspace. A subsequent sync command will populate the workspace as specified by the \\r\\nbranch version of the manifest. A manifest is a fairly simple XML document. Listing 2.1 gives a partial example. Listing 2.1 Repo Manifest\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\"..\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1c82daaa-4f20-48c6-bdff-d543a1a7efd6":{"__data__":"{\"id_\":\"1c82daaa-4f20-48c6-bdff-d543a1a7efd6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xGdaBocu2NcZg1xT3JyebPbOUmui6nGzXD9d3vBhp9c=\"},\"PREVIOUS\":{\"nodeId\":\"eff5d9d6-ba84-4c21-ad93-100764c93daf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"41ofC7BaEV2dzSqogp956M8rW4yClINTOj2ZORzk4SQ=\"}},\"hash\":\"Rfldr4bAO/4VpYbnv6ZoBQtchdBmrcpupIuR/n68xzI=\",\"text\":\"\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n   <project path=\\\"build/blueprint\\\" name=\\\"platform/build/blueprint\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  \\r\\n  <project path=\\\"build/blueprint\\\"\\r\\n           name=\\\"platform/build/blueprint\\\"\\r\\n           groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  </project>\\r\\n  <project path=\\\"abi/cpp\\\" name=\\\"platform/abi/cpp\\\" groups=\\\"pdk\\\" />\\r\\n  <project path=\\\"art\\\" name=\\\"platform/art\\\" groups=\\\"pdk\\\" />\\r\\n  <project path=\\\"bionic\\\" name=\\\"platform/bionic\\\" groups=\\\"pdk\\\" />\\r\\n... </manifest>\\r\\n9780134096346_print.indb   1325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9e288555-86e9-46bb-8c4d-b64c4904cbd7":{"__data__":"{\"id_\":\"9e288555-86e9-46bb-8c4d-b64c4904cbd7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"sdNeRzuUqgn/75SyjgOjpIL1PEVTlYc+JtOw6ndWr1M=\"},\"NEXT\":{\"nodeId\":\"57028f4a-401d-428d-bb1e-00765089dc4a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Bx6g2wYx5N2p2ogU+uP7nE3wingGogoU67q6ObKROYc=\"}},\"hash\":\"1A8XaswWqJwChl6SsLtVLukU2AzwVjzIC8Pq4Kzf7no=\",\"text\":\"14Chapter 2  Booting Acme\\r\\nThe full syntax for the manifest file is specified in the documentation accompanying the \\r\\nrepo source at https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.md. Essentially, each project element in the XML identifies a git repository by its name, relative to \\r\\nsome base URL, its remote; and where that repository should be placed in the local workspace, \\r\\nits path. The manifest in Listing 2.1, for instance, identifies a git repository named “platform/\\r\\nbionic”, to be placed at the top level of the workspace in a directory named “bionic”. Deciphering the full URL for the “bionic” source git repository requires a bit more investiga-\\r\\ntion. Because no explicit remote is specified for the bionic project, repo will use the default \\r\\nremote. The default remote for this manifest is specified up in the default element near the \\r\\ntop of the manifest. The manifest in Listing 2.1 specifies the remote named “aosp” as the \\r\\ndefault. The “aosp” remote is defined in the element immediately above the default element. Normally a remote definition would include a name and a base URL. Instead, the “aosp” \\r\\nremote includes the somewhat cryptic “fetch” attribute “..”, which has a special meaning. It \\r\\nindicates that the URL for this remote should be derived from the URL used to initialize the \\r\\nworkspace (the argument to the –u option, the URL of the original manifest) by leaving off the \\r\\nlast element. In this example, that URL was https://android.googlesource.com/platform/ \\r\\nmanifest. Removing the name of the manifest repository and the last path element leaves a \\r\\nbase URL of https://android.googlesource.com/. Putting this all together, then, the URL for the \\r\\n“bionic” repository is https://android.googlesource.com/platform/bionic. The “.. ” trick is essential for organizations that want to reduce network bandwidth usage by \\r\\ncreating a local source mirror. Because the source for Android is very large and may take as \\r\\nmuch as an hour to download at WAN speeds, a distributed company with offices in Boston \\r\\nand Seattle, for example, might find that maintaining mirrors on each site’s local network is \\r\\npreferable. The initialization-relative addressing made possible by repo’s fetch=\\\"..\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"57028f4a-401d-428d-bb1e-00765089dc4a":{"__data__":"{\"id_\":\"57028f4a-401d-428d-bb1e-00765089dc4a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"sdNeRzuUqgn/75SyjgOjpIL1PEVTlYc+JtOw6ndWr1M=\"},\"PREVIOUS\":{\"nodeId\":\"9e288555-86e9-46bb-8c4d-b64c4904cbd7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1A8XaswWqJwChl6SsLtVLukU2AzwVjzIC8Pq4Kzf7no=\"}},\"hash\":\"Bx6g2wYx5N2p2ogU+uP7nE3wingGogoU67q6ObKROYc=\",\"text\":\"The initialization-relative addressing made possible by repo’s fetch=\\\".. \\\" attribute \\r\\nmakes it possible for the developers in the two offices to use identical manifests to download \\r\\ntheir workspaces from two different sources. The next section covers forking the tree and local \\r\\nmirrors in more detail. Because each project in a manifest specifies its own source, creating a manifest that downloads \\r\\ncode mostly from the canonical source and adds or replaces only things that must be custom-\\r\\nized for a particular development project is easy. It is unlikely, for instance, that customizing \\r\\nAndroid for a particular device will require modifications to the Android runtime (Dalvik or \\r\\nART) or that it will require changes to one or more of the core Java libraries. Most projects’ \\r\\nmanifests can continue to refer to the canonical AOSP source for the runtime but their own \\r\\nrepository for core libraries. Repo is capable of several other excellent tricks. The copyfile, linkfile, and include \\r\\nelements all do just what their names suggest. The first two allow, for instance, placing files at \\r\\nthe top level of the workspace (not otherwise possible, because the top-level directory is not a git \\r\\nrepository). The include element allows multiple manifests to explicitly share common configu-\\r\\nration (in fact, modern repo now “include”s the target manifest, instead of soft-linking it). The groups attribute within the XML project element allows even further customization of a \\r\\nworkspace by allowing the creation of coherent subsets of repositories. Consider, for instance, \\r\\na codebase that is being developed for both Intel and ARM hardware architectures. Although \\r\\n9780134096346_print.indb   1425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fb5fd238-0d1b-4eb0-9d6d-3207fa91ea37":{"__data__":"{\"id_\":\"fb5fd238-0d1b-4eb0-9d6d-3207fa91ea37\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"H0bN1VJ+Q2Jw+XZojA0Vy6YRSYzo5KgYaJFQD1Apv9M=\"},\"NEXT\":{\"nodeId\":\"af8cab08-f5a3-430a-9862-82e63f50cdda\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9l+Qvo/PH5pcPlIys2Xg5GLgHw2GXqBv3Z2/8IhbuEM=\"}},\"hash\":\"Cl1OPbhCfjnCwbsY5nNm+MArpbTzPXrGDnogwSjdGUY=\",\"text\":\"15Forking the Source\\r\\nintegration testing must verify that all tests pass on both platforms, most developers will \\r\\nprobably work only on one or the other. A developer working with the Intel platform might \\r\\nprefer not to download and build source related only to ARM architectures. Tagging project \\r\\nelements with groups makes it possible to do this. Repo supports the Gerrit continuous integration tool used in the open source community and \\r\\nat Google to fold contributions back into AOSP. A typical repo workflow might look like this:\\r\\nrepo checkout working proj1 proj2 proj3\\r\\n# normal edit/git commit cycle in project directories\\r\\nrepo upload --cbr proj1 proj2 proj3\\r\\n# repeat edit/git commit to respond to code reviews\\r\\nrepo upload --cbr proj1 proj2 proj3\\r\\nrepo abandon working proj1 proj2 proj3\\r\\nHere, the developer starts a new feature branch called “working” in three repositories: “proj1”, \\r\\n“proj2”, and “proj3”. After doing some work using git, normally, to commit incremental \\r\\nupdates and rebase, merge and squash as usual, the developer pushes the current state for all \\r\\nthree of the working branches to Gerrit for review. Note \\r\\nrepo upload is not atomic—it does not necessarily all succeed or all fail. Each of the three \\r\\nprojects in the preceding example is a separate repository. It would be entirely possible that \\r\\ntwo of the three pushes succeed but that one fails, leaving the workspace in an inconsistent \\r\\nstate. As usual, the review/revise loop iterates until the new work is accepted and merged at the \\r\\norigin. After the merge is complete, the local branches can be abandoned. Two final repo features may also be useful. One is the forall command. Forall executes a \\r\\nshell command in each of the named projects. For instance:\\r\\nrepo forall –c 'git reset --hard HEAD; git clean -xdf'\\r\\nis one way of resetting all repositories to their initial state. A second useful feature is repo support for local manifests. A local manifest—either .repo/\\r\\nlocal_manifest.xml (deprecated) or all of the files .repo/local_manifests/*.xml, in \\r\\nalphabetical order—are merged with the manifest in manifest.xml as part of the sync \\r\\ncommand. By using local manifests, developers can further customize their local workspace, \\r\\nadding definitions for remotes or for additional projects as appropriate.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"af8cab08-f5a3-430a-9862-82e63f50cdda":{"__data__":"{\"id_\":\"af8cab08-f5a3-430a-9862-82e63f50cdda\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"H0bN1VJ+Q2Jw+XZojA0Vy6YRSYzo5KgYaJFQD1Apv9M=\"},\"PREVIOUS\":{\"nodeId\":\"fb5fd238-0d1b-4eb0-9d6d-3207fa91ea37\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Cl1OPbhCfjnCwbsY5nNm+MArpbTzPXrGDnogwSjdGUY=\"}},\"hash\":\"9l+Qvo/PH5pcPlIys2Xg5GLgHw2GXqBv3Z2/8IhbuEM=\",\"text\":\"Forking the Source\\r\\nThe first step to modifying Android for a new device is to create your project fork of the AOSP \\r\\nsource. There are a number of ways of creating such a fork with repo and git. The choice of \\r\\nwhich approach to take is up to the development team and what makes sense for the organiza-\\r\\ntion. Not all of these options are a good fit for all organizations. This section outlines several \\r\\n9780134096346_print.indb   1525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"65fdec14-2873-4223-a403-d832c9096598":{"__data__":"{\"id_\":\"65fdec14-2873-4223-a403-d832c9096598\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"M8VUTz3AZejQa1QTF7d2uPZt209nkliI/o8IER4hptU=\"},\"NEXT\":{\"nodeId\":\"32f4ccdb-b0f0-497d-af16-9830649187a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xvyCAYIGwParmkUCdc5Ncg4KBWkjTVVjAV3hNxL+7lk=\"}},\"hash\":\"wW/Eay91l+mV4j8XZQ0hEhYw6f9vL+4hzvGcVS+UbvY=\",\"text\":\"16Chapter 2  Booting Acme\\r\\napproaches that a team might choose. In each case, a customized manifest specifies the projects \\r\\nthat make up the platform. The details of the manifest changes are slightly different for each \\r\\nchoice. Android Version Selection\\r\\nBefore diving into the options for creating a fork of the Android sources, ensure that you select \\r\\nthe correct version of Android. This is not as straightforward as one might think, partly because \\r\\nof variations in system on a chip (SoC) vendor support and the ever-changing landscape of \\r\\nAndroid’s internals (as will be obvious in this book). SoC vendor support for different Android versions presents a challenge for any project. Android \\r\\nis driven by mobile handset development, which has less than an 18-month lifecycle. This \\r\\nmeans that it is likely that the development for SoC chipsets used in new phones released \\r\\ntoday was started 18 months ago. It also means the chipsets have a support lifetime that is typi-\\r\\ncally around 18 months after release. Traditionally, because Google has Android on roughly an \\r\\nannual release schedule, a given chipset is likely to receive vendor support for only one major \\r\\nOS version update after it is first released. At that point the SoC vendor moves its focus to its \\r\\nnew “flagship” SoC. This can present challenges when creating an IoT device that does not require the latest and \\r\\ngreatest chipset features and performance, not to mention the hefty price point that comes \\r\\nwith newer chipsets. Finding a chipset with the right price point, capabilities, and support for a \\r\\nversion of Android appropriate for the product is a balancing act. Further complicating version selection is Android’s internal structure. Although Android’s \\r\\noverall architecture has remained intact since its first release, it has had many enhancements to \\r\\nits internals over time. For the third-party app developer, these revisions are usually transpar-\\r\\nent. Exceptions exist, of course, such as the Android permission system overhaul that happened \\r\\nin the Android 6 (Marshmallow) release. The normally friction-free development environment \\r\\ndoes not apply when creating new products and working at the system level. Platform vendors \\r\\nare much more susceptible to Android’s changing internals, which also factors in to the SoC \\r\\nvendor level of support over time. One of the most disrupting changes for platform creators came with Android 8 (Oreo): project \\r\\nTreble.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"32f4ccdb-b0f0-497d-af16-9830649187a2":{"__data__":"{\"id_\":\"32f4ccdb-b0f0-497d-af16-9830649187a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"M8VUTz3AZejQa1QTF7d2uPZt209nkliI/o8IER4hptU=\"},\"PREVIOUS\":{\"nodeId\":\"65fdec14-2873-4223-a403-d832c9096598\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wW/Eay91l+mV4j8XZQ0hEhYw6f9vL+4hzvGcVS+UbvY=\"}},\"hash\":\"xvyCAYIGwParmkUCdc5Ncg4KBWkjTVVjAV3hNxL+7lk=\",\"text\":\"Project Treble completely changed the way that platforms/SoC expose hardware-related \\r\\nfunctions to the OS. The entire Hardware Abstraction Layer (HAL) was re-architected to allow \\r\\nvendors to upgrade to future versions of Android. All of these features come at the cost of \\r\\nincreased complexity. The HAL is covered in more detail in Chapters 8 through 12, but it is \\r\\nworth an early word of caution. In short, vendor integration prior to Android 8 was simpler from a HAL perspective. The \\r\\nvendor needed only to provide a kernel with the required hardware support, a set of shared \\r\\nlibraries that followed a specific naming model, and a set of APIs at the C/C++ level. Starting \\r\\nwith Android 8, the HAL forces a strict vendor interface that is exposed using Binder (Android’s \\r\\ninterprocess communication [IPC] mechanism). While this makes forward migration faster and \\r\\neasier, it complicates the platform developer’s job when bringing up a new device. 9780134096346_print.indb   1625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d12974d0-db79-473e-a6a6-04468147e087":{"__data__":"{\"id_\":\"d12974d0-db79-473e-a6a6-04468147e087\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"euknRt+hc2fLF/lZCdHndGnzOkauyXCG5GBbcyywxEM=\"},\"NEXT\":{\"nodeId\":\"c94c5f19-e000-4740-bcbc-cb95c5f9e7ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ReRolVzFd0gnoOtugxwMpGtqTFaRLhWT3zGeK0au70Y=\"}},\"hash\":\"kYyvL0qcaIgrmH/MIqcna3q3v36TxpL0LNvwLWIpOcU=\",\"text\":\"17Forking the Source\\r\\nUnfortunately, there is no one right answer when picking an Android version for use on a new \\r\\nplatform. To benefit from fixes and enhancements made to future Android versions, going \\r\\nwith Android 8 or newer is the way to go. Choosing such a recent release, however, can make \\r\\nthe initial system bring-up process much more complicated, particularly if the device utilizes \\r\\ncustom hardware or features not provided by the SoC vendor. The choice of Android version also depends on whether the SoC vendor supports Android \\r\\n8 or newer. If a product does not require regular updates or need to take advantage of new \\r\\nOS features, going with Android 7 (or even earlier) may be a good choice. Even if a product \\r\\nis released with an Android version prior to 8, updating units in the field via an over-the-air \\r\\n(OTA) update may still be possible. Of course, implementing a safe, secure OTA update mecha-\\r\\nnism is difficult, completely up to the platform vendor, and well outside the scope of this book. Local Mirror\\r\\nAlthough it is not strictly necessary, creating a local mirror of the Android source is almost \\r\\ncertainly a good idea. Google maintains special repo manifest (not the manifest for AOSP \\r\\nsource) to be used for creating a mirror. The process is documented in detail in the section \\r\\n“Using a local mirror” on the AOSP Downloading page (https://source.android.com/source/\\r\\ndownloading). Several reasons exist for using a local mirror. The chief reason is that local file copy or, at worst, \\r\\nlocal network transfer, is likely to be much faster than an Internet connection. Although the \\r\\nmirror takes a fair amount of space (around 150G) and takes more time to download than just \\r\\nthe AOSP source, it all becomes worthwhile the first time it is necessary to check out the AOSP \\r\\nsource at a new and different git tag or to download the source for some big component a \\r\\nsecond time. Note \\r\\nUnderstanding the file-system size requirements when building an AOSP derived tree or creat-\\r\\ning a local mirror are important. As noted previously, the local mirror size is around 150GB of \\r\\ndisk space. This is the bare git repository size, not the size of an actual working tree used for \\r\\ndevelopment.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c94c5f19-e000-4740-bcbc-cb95c5f9e7ec":{"__data__":"{\"id_\":\"c94c5f19-e000-4740-bcbc-cb95c5f9e7ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"euknRt+hc2fLF/lZCdHndGnzOkauyXCG5GBbcyywxEM=\"},\"PREVIOUS\":{\"nodeId\":\"d12974d0-db79-473e-a6a6-04468147e087\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kYyvL0qcaIgrmH/MIqcna3q3v36TxpL0LNvwLWIpOcU=\"}},\"hash\":\"ReRolVzFd0gnoOtugxwMpGtqTFaRLhWT3zGeK0au70Y=\",\"text\":\"Each instance of the AOSP tree that is initialized and synchronized will consume \\r\\nanother 60+GB of space in its pristine state and close to double that size when fully built. There is also compiler cache, which consumes more space (but is configurable in size). The bottom line is that when using a local mirror on the same system that is being used for \\r\\ndevelopment, the total disk space needed is the size of the mirror plus the size of all the AOSP-\\r\\nbased trees in use for development or building. A second reason for creating a mirror is that doing so provides more control over the way the \\r\\nlocal fork of the source is updated. As described in the previous section, the repo tool maintains \\r\\na manifest: a list of git repositories. The repo sync command clones each of the repositories \\r\\nlisted in the manifest into the local workspace and then checks out the contents. As is usual \\r\\npractice with a git repository, the repo tool checks out the HEAD of a branch. 9780134096346_print.indb   1725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7d839580-309d-4da8-9715-845fce715b78":{"__data__":"{\"id_\":\"7d839580-309d-4da8-9715-845fce715b78\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"p8xt9h5sOsYuz6xmvd9/1EJFaveRqB5lAE2dzLf3d0k=\"},\"NEXT\":{\"nodeId\":\"0f1ee0ec-5436-484a-bc73-f87169740788\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Vs0mBj8gz2CKqb1YJGOm0EAXD3OPJjwPwN12Jw2UfUU=\"}},\"hash\":\"/oJiA7Ui76Z/SXT85ecpAVb6nXcvyTbrhiALZeE1Jxo=\",\"text\":\"18Chapter 2  Booting Acme\\r\\nThe whole point of a git branch, though, is that it is a moving target. The commit that is head \\r\\nof a given branch today is not the commit that was the head of that branch a week ago. For \\r\\nthis reason, creating a local mirror is valuable because it makes local checkouts repeatable. The mirror is a static snapshot of the AOSP source. Unless the mirror itself is updated, two \\r\\ncheckouts made weeks apart will result in identical source. Obviously, this is not the case if the \\r\\ncheckouts are made directly from the Google source. The Acme device manifest uses the tag android-10.0.0_r33 of AOSP. Note this is different than \\r\\nusing one of the similarly named Android release branches, like android10-mainline-release. The HEAD of a branch may change between two repo syncs. Using tags or pinning specific \\r\\ncommits mitigates this problem: Tags generally do not move. In fact, Google and SoC vendors \\r\\noften provide a manifest for Android on a particular SoC or development kit in exactly this way. When using a local mirror, you have two different approaches: a local file-system copy (which \\r\\nis described on the AOSP Downloading page), or a local git server setup, a mirror of the Google-\\r\\nhosted repositories. The local filesystem mirror is a great approach for single developers but \\r\\ndoes not easily allow multiple developer contributions. This is where the local git server mirror \\r\\nis a better choice. A local git server mirror, however, comes with the added overhead of setting up a hosted, acces-\\r\\nsible git server. Although there are plenty of resources available online for this, it may be more \\r\\nof a burden than some teams are willing to incur. It is also worth noting that we definitely do not recommend using a single monolithic git \\r\\nrepository. The AOSP source tree is made up of several hundred individual source code trees. Many of these are within the main Android sources whereas others come from existing open \\r\\nsource projects. Putting all of these separate codebases into a monolithic repository would make \\r\\nit nearly impossible to stay in sync with either AOSP or third-party sources. Instead of pulling \\r\\na single repository’s git history into the local mirror, you would need to manually apply each \\r\\npatch to the appropriate directory within the tree.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0f1ee0ec-5436-484a-bc73-f87169740788":{"__data__":"{\"id_\":\"0f1ee0ec-5436-484a-bc73-f87169740788\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"p8xt9h5sOsYuz6xmvd9/1EJFaveRqB5lAE2dzLf3d0k=\"},\"PREVIOUS\":{\"nodeId\":\"7d839580-309d-4da8-9715-845fce715b78\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/oJiA7Ui76Z/SXT85ecpAVb6nXcvyTbrhiALZeE1Jxo=\"}},\"hash\":\"Vs0mBj8gz2CKqb1YJGOm0EAXD3OPJjwPwN12Jw2UfUU=\",\"text\":\"Hosted Git Repositories\\r\\nAnother common alternative is the use of hosted git repositories, such as GitHub, Bitbucket, \\r\\nor GitLab. Many software development organizations are already using these services for their \\r\\nday-to-day work. Adopting them for an Android project allows teams to leverage the existing \\r\\nworkflows and infrastructure with which they are already familiar. In addition, hosted reposito-\\r\\nries may already have IT support, provide useful continuous integration tools, and have refined \\r\\ncontrols for team member access. There can be complications, though. Cloud-hosted repositories such as GitHub typically do not \\r\\nsupport the path-like, name-spaced layout used by AOSP. A common way around this issue is  \\r\\nto replace the path separator (a slash) with an underscore. For example, the AOSP repository \\r\\n“platform/hardware/libhardware” becomes “platform_hardware_libhardware. ”\\r\\nAdditionally, hosted git services usually place a size limit on each repository. For most git repos-\\r\\nitories, this is not a problem. However, some repositories within the Android build tree exceed \\r\\n9780134096346_print.indb   1825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e82b5b61-6f3a-4a25-b8ab-ac9e8a393f06":{"__data__":"{\"id_\":\"e82b5b61-6f3a-4a25-b8ab-ac9e8a393f06\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"tysBDOxPxKhg4Nj+9sXR1n0Ts+7C6ALAdm8thcrZHUQ=\"},\"NEXT\":{\"nodeId\":\"fc2aa07d-e4c2-4d25-9b02-b2b9180ff808\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YyZzVUs3dFjhF1XAhUr0eGWcuNrZcGoM5jgGx3aHlxw=\"}},\"hash\":\"J/PCNvQNSHbvRE/JAYCPPy0NdfhH9LHFbEbP4Fta0h0=\",\"text\":\"19Example: Local Mirror of Forked Repositories\\r\\nstandard GitHub size limits (typically 2GB) and cannot be hosted with their full history. These \\r\\ninclude the frameworks/base and the Linux kernel repositories. The best approach to take when \\r\\nusing a cloud-based service is to host only the repositories under active development. All other \\r\\nrepositories should be pulled from Google or a local mirror. Tree Snapshot\\r\\nAnother and somewhat more space-expensive way of providing this stability is simply to snap-\\r\\nshot the entire AOSP source tree. That certainly is a very safe approach. If the space is available \\r\\nand the target version of the Android source to be used for the project is not sufficiently stable, \\r\\nit may also be the best. This is definitely not a recommended technique, though, especially \\r\\nwhen teams are developing the platform, because it removes the use of remote git repositories. Repository Commit Pinning\\r\\nAs mentioned earlier in the “Local Mirror” section, one of the big advantages of a mirror is \\r\\nhaving a consistent “snapshot” of the AOSP tree at a point in time that does not change. When \\r\\nteam members are setting up new machines, a continuous integration (CI) server, and so on, \\r\\nusing the same source revisions to build the platform is critical. Local mirrors, though, are not \\r\\nalways practical due to team size, IT infrastructure, or file system space constraints. The next \\r\\nbest approach is specific commit pinning within the manifest file. In Listing 2.1, the remote \\r\\nproperty for the “aosp” specifies a revision attribute that points to a specific tag, android-\\r\\n10.0.0_r33. This means that all repositories fetched from the aosp remote will be checked out \\r\\nat this specific tag unless it is overridden at a given project’s entry. The same revision attribute, specifying a tag, branch, or even git commit ID can be used within \\r\\na project tag to specify an individual repository within the manifest. For example, if a platform \\r\\nneeded the Bionic C library implementation at commit 8c43445152e3372ea284b65845012fd \\r\\nfe7270f82, it could specify that commit hash in its manifest as shown in Listing 2.2.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fc2aa07d-e4c2-4d25-9b02-b2b9180ff808":{"__data__":"{\"id_\":\"fc2aa07d-e4c2-4d25-9b02-b2b9180ff808\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"tysBDOxPxKhg4Nj+9sXR1n0Ts+7C6ALAdm8thcrZHUQ=\"},\"PREVIOUS\":{\"nodeId\":\"e82b5b61-6f3a-4a25-b8ab-ac9e8a393f06\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"J/PCNvQNSHbvRE/JAYCPPy0NdfhH9LHFbEbP4Fta0h0=\"}},\"hash\":\"YyZzVUs3dFjhF1XAhUr0eGWcuNrZcGoM5jgGx3aHlxw=\",\"text\":\"Listing 2.2 Manifest Project Entry with Revision\\r\\n  <project groups=\\\"default\\\" name=\\\"platform/bionic\\\" path=\\\"bionic\\\"  revision=”8c43445152e3372ea284b65845012fdfe7270f82”/>\\r\\nExample: Local Mirror of Forked Repositories\\r\\nThis example uses the repo tool to replace only the individual portions of the AOSP code base \\r\\nthat will be changed locally, in a more fine-grained and specific way. This partially forked \\r\\nconcept can be used with a local mirror, third-party hosted git repositories, internally hosted git \\r\\nrepositories, or a hybrid of these. 9780134096346_print.indb   1925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4905a0c7-5cda-471e-948a-4f0859dfb4b5":{"__data__":"{\"id_\":\"4905a0c7-5cda-471e-948a-4f0859dfb4b5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cgLLvLLqAdBaO60qE4bnRJ/sbhSF/aWGMlkf0g8htOY=\"},\"NEXT\":{\"nodeId\":\"aac696f2-f977-4cb3-bc5a-fe1d91510f73\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"2PzDQG6p8oSoY0OweK2qTTT/jho14JT8kd8qhICz87Y=\"}},\"hash\":\"J1pWsNzsLFpJAMu8cwbwOdA6Q2XUy3lbXvJv4wjnt3o=\",\"text\":\"20Chapter 2  Booting Acme\\r\\nTo use the repo tool to create partially forked source, first clone the AOSP manifest repo itself:\\r\\ngit clone https://android.googlesource.com/platform/manifest -b refs/tags/android-10.0.0_r33\\r\\nThis manifest will become the manifest for the Acme project fork of Android source. It, and not \\r\\nthe AOSP original, is the manifest that Acme developers will use to check out the Acme source \\r\\ncode. The new, local clone of the manifest directory contains the repo manifest file “default.xml” as \\r\\nshown in Listing 2.3. Listing 2.3 The AOSP Manifest File\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\".. \\\"\\r\\n           review=\\\"https://android-review.googlesource.com/\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n  <project\\r\\n    path=\\\"build/blueprint\\\"\\r\\n    name=\\\"platform/build/blueprint\\\"\\r\\n    groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  <project>\\r\\n  <!-- ...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"aac696f2-f977-4cb3-bc5a-fe1d91510f73":{"__data__":"{\"id_\":\"aac696f2-f977-4cb3-bc5a-fe1d91510f73\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cgLLvLLqAdBaO60qE4bnRJ/sbhSF/aWGMlkf0g8htOY=\"},\"PREVIOUS\":{\"nodeId\":\"4905a0c7-5cda-471e-948a-4f0859dfb4b5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"J1pWsNzsLFpJAMu8cwbwOdA6Q2XUy3lbXvJv4wjnt3o=\"}},\"hash\":\"2PzDQG6p8oSoY0OweK2qTTT/jho14JT8kd8qhICz87Y=\",\"text\":\"/>\\r\\n  </project\\r\\n    path=\\\"device/linaro/hikey-kernel\\\"\\r\\n    name=\\\"device/linaro/hikey-kernel\\\"\\r\\n    groups=\\\"device,hikey,pdk\\\"\\r\\n    clone-depth=\\\"1\\\" />\\r\\n9780134096346_print.indb   2025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"80e012ec-f049-4d1a-a369-200f683934b0":{"__data__":"{\"id_\":\"80e012ec-f049-4d1a-a369-200f683934b0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JV5rFW2NmlqfZXfejMmNxkobu31MMaF/nK/8Th0PREU=\"}},\"hash\":\"nBc1lvBHcDYAuV/rZS3pwHgkFfKHFKCiMVSvgCmqKZg=\",\"text\":\"21Example: Local Mirror of Forked Repositories\\r\\n  <!-- ... />\\r\\n<manifest>\\r\\nCreating a clone of the source requires only a few small changes, as illustrated in Listing 2.4 \\r\\nafter the comment, “Acme Projects. ”\\r\\nListing 2.4 Manifest for a Forked AOSP Source\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n<manifest>\\r\\n  <!-- Acme Remote -->\\r\\n  <remote  name=\\\"acme\\\"\\r\\n           fetch=\\\". \\\"\\r\\n           revision=”master” />\\r\\n  <remote  name=\\\"aosp\\\"\\r\\n           fetch=\\\"https:/acme.net/acme/source\\\" />\\r\\n  <default revision=\\\"refs/tags/android-10.0.0_r33\\\"\\r\\n           remote=\\\"aosp\\\"\\r\\n           sync-j=\\\"4\\\" />\\r\\n  <!-- Acme Projects -->\\r\\n  <project path=\\\"device/linaro/hikey\\\"\\r\\n           name=\\\"platform/device/linaro/hikey\\\"\\r\\n           remote=\\\"acme\\\"\\r\\n           revision=\\\"acme\\\"\\r\\n           groups=\\\"device,hikey,pkd” />\\r\\n  <project path=\\\"device/acme/one/acme_one\\\"\\r\\n           name=\\\"platform/device/acme/one/acme_one\\\" remote=\\\"acme\\\" >\\r\\n    <linkfile src=\\\"AndroidProducts.makefile\\\" \\r\\n              dest=\\\"device/acme/one/AndroidProducts.mk\\\" />\\r\\n    <linkfile src=\\\"acme_one.mk\\\" dest=\\\"device/acme/one/acme_one.mk\\\" />\\r\\n  </project>\\r\\n  <project path=\\\"device/acme/one/include\\\"\\r\\n           name=\\\"platform/device/acme/one/include\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/lib\\\" \\r\\n           name=\\\"platform/device/acme/one/lib\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/daemon\\\"\\r\\n           name=\\\"platform/device/acme/one/daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n <project path=\\\"device/acme/one/app/simple_daemon\\\"\\r\\n           name=\\\"platform/device/acme/one/app/simple_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n9780134096346_print.indb   2125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8feaf6e3-ac3b-4bc8-90e5-f175a0e3d036":{"__data__":"{\"id_\":\"8feaf6e3-ac3b-4bc8-90e5-f175a0e3d036\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pLR3j/t+oOJYk9GwnkJyiGfAr4gcl9fTpxkouj9wGZg=\"},\"NEXT\":{\"nodeId\":\"1eb2b829-27e9-4a08-a15a-dfec65e3cb70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ALrSLXWwRZSWpH5sV1ZTluMOL2zy86VlcMkZFpZp/kc=\"}},\"hash\":\"dQ+UuHVlX82QIOtXl/vOYEIeWksxMH/cuYJjsSh6bvo=\",\"text\":\"22Chapter 2  Booting Acme\\r\\n  <project path=\\\"device/acme/one/hidl\\\"\\r\\n           name=\\\"platform/device/acme/one/hidl\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"vendor/acme/one/interfaces\\\" \\r\\n           name=\\\"platform/vendor/acme/one/interfaces\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <!-- AOSP -->\\r\\n  <project path=\\\"build/make\\\" name=\\\"platform/build\\\" groups=\\\"pdk\\\" >\\r\\n    <copyfile src=\\\"core/root.mk\\\" dest=\\\"Makefile\\\" />\\r\\n    <linkfile src=\\\"CleanSpec.mk\\\" dest=\\\"build/CleanSpec.mk\\\" />\\r\\n    <linkfile src=\\\"buildspec.mk.default\\\" dest=\\\"build/buildspec.mk.default\\\" />\\r\\n    <linkfile src=\\\"core\\\" dest=\\\"build/core\\\" />\\r\\n    <linkfile src=\\\"envsetup.sh\\\" dest=\\\"build/envsetup.sh\\\" />\\r\\n    <linkfile src=\\\"target\\\" dest=\\\"build/target\\\" />\\r\\n    <linkfile src=\\\"tools\\\" dest=\\\"build/tools\\\" />\\r\\n  </project>\\r\\n  <project\\r\\n    path=\\\"build/blueprint\\\"\\r\\n    name=\\\"platform/build/blueprint\\\"\\r\\n    groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/kati\\\" name=\\\"platform/build/kati\\\" groups=\\\"pdk,tradefed\\\" />\\r\\n  <project path=\\\"build/soong\\\" name=\\\"platform/build/soong\\\" groups=\\\"pdk,tradefed\\\" >\\r\\n    <linkfile src=\\\"root.bp\\\" dest=\\\"Android.bp\\\" />\\r\\n    <linkfile src=\\\"bootstrap.bash\\\" dest=\\\"bootstrap.bash\\\" />\\r\\n  </project>\\r\\n  <!-- ... />\\r\\n<manifest>\\r\\nFirst, the new manifest defines a new remote, \\\"acme\\\", for the Acme project. The \\\"fetch\\\" \\r\\nattribute for the acme remote is \\\".\\\", indicating that projects downloaded from this remote \\r\\nwill have URLs that are the same as that used for the manifest file itself; that is, if the repo \\r\\ncommand used to initialize an Acme project workspace is: \\r\\nrepo init –u https:/acme.net/acme/source/manifest\\r\\nThe repo tool will search for the repository that contains the source for a project whose name \\r\\nattribute in the manifest has the value “zork” at the URL:\\r\\nhttps:/acme.net/acme/source/zork\\r\\nNext, note that the “review” attribute has been removed from the “aosp” remote.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1eb2b829-27e9-4a08-a15a-dfec65e3cb70":{"__data__":"{\"id_\":\"1eb2b829-27e9-4a08-a15a-dfec65e3cb70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pLR3j/t+oOJYk9GwnkJyiGfAr4gcl9fTpxkouj9wGZg=\"},\"PREVIOUS\":{\"nodeId\":\"8feaf6e3-ac3b-4bc8-90e5-f175a0e3d036\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dQ+UuHVlX82QIOtXl/vOYEIeWksxMH/cuYJjsSh6bvo=\"}},\"hash\":\"ALrSLXWwRZSWpH5sV1ZTluMOL2zy86VlcMkZFpZp/kc=\",\"text\":\"The process \\r\\nby which new code is submitted, reviewed, and committed, and the tools for doing so, are one \\r\\nmore topic that is beyond the scope of this book. The repo tool does support a wide variety of \\r\\n9780134096346_print.indb   2225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f4d7dae3-5ce2-42d4-92ad-6a5a8ade3a71":{"__data__":"{\"id_\":\"f4d7dae3-5ce2-42d4-92ad-6a5a8ade3a71\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"te19Jte3pSYQPhB7QgkxMXZwNP9ir3QtmAuzqjpetg0=\"}},\"hash\":\"U/r4uLZA0dktQ88/f1CwGYEmZbnFWz2CT/i2sOQlaNY=\",\"text\":\"23Example: Local Mirror of Forked Repositories\\r\\ncommit processes and local customization. To find out more about this topic, look at the docu-\\r\\nmentation for the repo tool’s “repo-hooks” element at \\r\\nhttps://android.googlesource.com/platform/tools/repohooks/+/master/README.md\\r\\nThe next modification to the manifest points the “aosp” remote explicitly at the local AOSP \\r\\nmirror. Instead of using the relative location “.. ” (a relative reference similar to the one now \\r\\nused by the “acme” remote), the AOSP source now comes absolutely from the mirror (located \\r\\nin this example at https:/acme.net/acme/aosp). Finally, the new manifest contains the specifications for the several non-AOSP projects at paths \\r\\nlike “device/linaro/hikey” and “vendor/acme/one/interfaces”. Kernel source and some pre-built binaries necessary to boot the HiKey960, the device used as \\r\\nthe baseline for the Acme One device, are easily available.. Instructions for cloning them can be \\r\\nfound in device/linaro/hikey/hikey960/README. Because it is very likely that you will need \\r\\nto modify the kernel source, you will probably also maintain forks of these repos, as well. Nearly every Android-compatible device will require similar device-specific customization \\r\\nnecessary to build a system image that will boot on the device. Finding, acquiring, and inte-\\r\\ngrating the device-specific additions into the AOSP source code is an essential first step toward \\r\\nbringing up a device. The directory structure for the server providing the source for the Acme project now looks \\r\\nsomething like Figure 2.2. https://acme.com/acme\\r\\nmirrorsource\\r\\nmanifestkernelbuild\\r\\nFigure 2.2 The Acme Source Tree\\r\\n9780134096346_print.indb   2325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3d5daaa9-9b83-428b-a5d9-411ade6ac998":{"__data__":"{\"id_\":\"3d5daaa9-9b83-428b-a5d9-411ade6ac998\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7hUm1ZpAEKj6xtSiJZzgpvAdLxXFK/jl/BJYKk612II=\"},\"NEXT\":{\"nodeId\":\"f8887d97-de7d-4078-b667-f64e3f00b653\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AxQk4gPzpajKSLokp8SMapYvN/k/C1gUsZtvdYOOvIk=\"}},\"hash\":\"3BSf/ZzVERL3Cz8l+xXeWwXih4GOLlwiIGc76vPispo=\",\"text\":\"24Chapter 2  Booting Acme\\r\\n \\r\\nNote \\r\\nYou can find a manifest similar to the one shown in Figure 2.2 by using the following URL in the \\r\\nrepo init command (discussed next): https://github.com/InsideAndroidOS/acme_platform_\\r\\nmanifest.git. This manifest contains references to repositories holding the code and changes \\r\\nfor the Acme One platform covered throughout this book. Time to build a workspace! > cd workspace\\r\\n> repo init –u https:/acme.net/acme/source/manifest\\r\\n# output elided... > repo sync\\r\\n# lots of output elided... The sync operation will certainly take a while; possibly several hours. It should, however, \\r\\ncomplete successfully. If it does not, carefully debug the manifest before proceeding. Building an Image\\r\\nThe Android build system is large, complex, and not well documented. A full explanation of its \\r\\nhistory and usage is beyond the scope of this book. Future chapters address adding new pieces \\r\\nto the build relevant to the components being developed. Fortunately, for the moment, the \\r\\ngoal is simply to get from code to a running Android. An important part of the build system’s complexity is the ability to customize it to produce \\r\\nimages for the prodigious number of Android devices. The customization is accomplished by \\r\\nsetting a number of shell variables using a tool called lunch. Note \\r\\nDistributions of the Android source code other than AOSP, as well as some versions of AOSP \\r\\nthat have been extended with third-party code, may use variants of lunch, usually with cute \\r\\nnames like snackbar, brunch, or some such thing. These alternatives all essentially accom-\\r\\nplish the same task: assigning values to a set of shell environmental variables used to config-\\r\\nure the build system. The lunch tool is itself a shell script loaded by running another shell script build/envsetup.sh. Note that it is essential that the definitions provided by envsetup.sh are loaded into the \\r\\ncurrent shell (using “. ” or “source”). Just running envsetup.sh from the command line \\r\\naccomplishes nothing at all.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f8887d97-de7d-4078-b667-f64e3f00b653":{"__data__":"{\"id_\":\"f8887d97-de7d-4078-b667-f64e3f00b653\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7hUm1ZpAEKj6xtSiJZzgpvAdLxXFK/jl/BJYKk612II=\"},\"PREVIOUS\":{\"nodeId\":\"3d5daaa9-9b83-428b-a5d9-411ade6ac998\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3BSf/ZzVERL3Cz8l+xXeWwXih4GOLlwiIGc76vPispo=\"}},\"hash\":\"AxQk4gPzpajKSLokp8SMapYvN/k/C1gUsZtvdYOOvIk=\",\"text\":\"Just running envsetup.sh from the command line \\r\\naccomplishes nothing at all. > source build/envsetup.sh\\r\\nincluding device/asus/fugu/vendorsetup.sh\\r\\nincluding device/generic/car/car-arm64/vendorsetup.sh\\r\\nincluding device/generic/car/car-armv7-a-neon/vendorsetup.sh\\r\\nincluding device/generic/car/car-x86/vendorsetup.sh\\r\\nincluding device/generic/car/car-x86_64/vendorsetup.sh\\r\\n9780134096346_print.indb   2425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d9e5236f-5892-417d-86ed-c145fb31d8bd":{"__data__":"{\"id_\":\"d9e5236f-5892-417d-86ed-c145fb31d8bd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"r++O8KCMSVI2htBIG/wG6TmAinMUGsDLP6uOQj6KTO4=\"},\"NEXT\":{\"nodeId\":\"d1687814-dc7f-4d24-9e4a-4e7e2fddecac\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cqcC0bkINz26i8KzB5xSaUKy+CsuRYSj1ubWF6FDVUw=\"}},\"hash\":\"bl/B5znho/z37hGBP41iD2HSp3JWC02bbG5MO7GQFOI=\",\"text\":\"25Building an Image\\r\\nincluding device/generic/mini-emulator-arm64/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-armv7-a-neon/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-mips/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-mips64/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-x86/vendorsetup.sh\\r\\nincluding device/generic/mini-emulator-x86_64/vendorsetup.sh\\r\\nincluding device/generic/uml/vendorsetup.sh\\r\\nincluding device/google/dragon/vendorsetup.sh\\r\\nincluding device/google/marlin/vendorsetup.sh\\r\\nincluding device/huawei/angler/vendorsetup.sh\\r\\nincluding device/lge/bullhead/vendorsetup.sh\\r\\nincluding device/linaro/hikey/vendorsetup.sh\\r\\nincluding sdk/bash_completion/adb.bash\\r\\nNow that all the tool definitions from the envsetup.sh script have been incorporated into the \\r\\ncurrent running shell, they can be used from the command line. In this particular example, \\r\\nconfiguring the build system to build an image for the Acme project, based on HiKey960-like \\r\\nhardware, the appropriate lunch menu selection is “3”: acme_one-userdebug. > lunch\\r\\nYou're building on Linux\\r\\nLunch menu... pick a combo:\\r\\n     1. acme_one-eng\\r\\n     2. acme_one-user\\r\\n     3. acme_one-userdebug\\r\\n     4. aosp_arm-eng\\r\\n     5. aosp_arm64-eng\\r\\n     6. aosp_blueline-userdebug\\r\\n     7. aosp_bonito-userdebug\\r\\n     8. aosp_car_arm-userdebug\\r\\n     9. aosp_car_arm64-userdebug\\r\\n     10. aosp_car_x86-userdebug\\r\\n     11. aosp_car_x86_64-userdebug\\r\\n     12. aosp_cf_arm64_phone-userdebug\\r\\n     13. aosp_cf_x86_64_phone-userdebug\\r\\n     14. aosp_cf_x86_auto-userdebug\\r\\n     15. aosp_cf_x86_phone-userdebug\\r\\n     16. aosp_cf_x86_tv-userdebug\\r\\n     17. aosp_coral-userdebug\\r\\n     18. aosp_crosshatch-userdebug\\r\\n     19. aosp_flame-userdebug\\r\\n     20.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d1687814-dc7f-4d24-9e4a-4e7e2fddecac":{"__data__":"{\"id_\":\"d1687814-dc7f-4d24-9e4a-4e7e2fddecac\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"r++O8KCMSVI2htBIG/wG6TmAinMUGsDLP6uOQj6KTO4=\"},\"PREVIOUS\":{\"nodeId\":\"d9e5236f-5892-417d-86ed-c145fb31d8bd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bl/B5znho/z37hGBP41iD2HSp3JWC02bbG5MO7GQFOI=\"}},\"hash\":\"cqcC0bkINz26i8KzB5xSaUKy+CsuRYSj1ubWF6FDVUw=\",\"text\":\"aosp_flame-userdebug\\r\\n     20. aosp_marlin-userdebug\\r\\n     21. aosp_sailfish-userdebug\\r\\n     22. aosp_sargo-userdebug\\r\\n     23. aosp_taimen-userdebug\\r\\n     24. aosp_walleye-userdebug\\r\\n9780134096346_print.indb   2525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"96250b22-b1cb-4729-94b3-899f15568476":{"__data__":"{\"id_\":\"96250b22-b1cb-4729-94b3-899f15568476\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"I9rc3TiDUelZvdvKjlhYxwNau9+cr/Z+o98jlORWvjI=\"}},\"hash\":\"0c5Y5F8VaItUQR7pObwxGFNbco5oVQClvAcBXRVp1m0=\",\"text\":\"26Chapter 2  Booting Acme\\r\\n     25. aosp_walleye_test-userdebug\\r\\n     26. aosp_x86-eng\\r\\n     27. aosp_x86_64-eng\\r\\n     28. beagle_x15-userdebug\\r\\n     29. car_x86_64-userdebug\\r\\n     30. fuchsia_arm64-eng\\r\\n     31. fuchsia_x86_64-eng\\r\\n     32. hikey-userdebug\\r\\n     33. hikey64_only-userdebug\\r\\n     34. hikey960-userdebug\\r\\n     35. hikey960_tv-userdebug\\r\\n     36. hikey_tv-userdebug\\r\\n     37. m_e_arm-userdebug\\r\\n     38. mini_emulator_arm64-userdebug\\r\\n     39. mini_emulator_x86-userdebug\\r\\n     40. mini_emulator_x86_64-userdebug\\r\\n     41. poplar-eng\\r\\n     42. poplar-user\\r\\n     43. poplar-userdebug\\r\\n     44. qemu_trusty_arm64-userdebug\\r\\n     45. uml-userdebug\\r\\nWhich would you like? [aosp_arm-eng] 3\\r\\n============================================\\r\\nPLATFORM_VERSION_CODENAME=REL\\r\\nPLATFORM_VERSION=10\\r\\nTARGET_PRODUCT=acme_one\\r\\nTARGET_BUILD_VARIANT=userdebug\\r\\nTARGET_BUILD_TYPE=release\\r\\nTARGET_ARCH=arm64\\r\\nTARGET_ARCH_VARIANT=armv8-a\\r\\nTARGET_CPU_VARIANT=cortex-a73\\r\\nTARGET_2ND_ARCH=arm\\r\\nTARGET_2ND_ARCH_VARIANT=armv8-a\\r\\nTARGET_2ND_CPU_VARIANT=cortex-a73\\r\\nHOST_ARCH=x86_64\\r\\nHOST_2ND_ARCH=x86\\r\\nHOST_OS=linux\\r\\nHOST_OS_EXTRA=Linux-4.4.0-184-generic-x86_64-Ubuntu-16.04.6-LTS\\r\\nHOST_CROSS_OS=windows\\r\\nHOST_CROSS_ARCH=x86\\r\\nHOST_CROSS_2ND_ARCH=x86_64\\r\\nHOST_BUILD_TYPE=release\\r\\nBUILD_ID=QQ2A.200405.005\\r\\nOUT_DIR=out\\r\\n============================================\\r\\n9780134096346_print.indb   2625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"40c50d99-f54a-4799-902a-dea29f59c023":{"__data__":"{\"id_\":\"40c50d99-f54a-4799-902a-dea29f59c023\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VbiXJnqtJbdG4tboEoL4WuE2RV0/xh02ojKjLe1nlws=\"},\"NEXT\":{\"nodeId\":\"17ae5752-f40c-461b-b67d-e30ed6a8df1e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YBglg5o1rXm2Bj2A+O859BLD0zvPJjJuPwOF2kPfkAo=\"}},\"hash\":\"pS9agdnPIJZryXx1pCnITDfUR/GN/6cSO0D97ykBH5c=\",\"text\":\"27Device Tools \\r\\nThe build system is now configured and ready to go. The make command starts the build. It takes a wide variety of argument flags. For now, the \\r\\nimportant argument is –j, which tells it how many processes to run simultaneously. Common \\r\\nwisdom seems to suggest that a good choice for this number is two more than the number of \\r\\navailable processors. Thus, on a build machine with an eight-core Intel processor, the build \\r\\ncommand might look like this:\\r\\n> make –j10\\r\\n# ... pages and pages of output elided\\r\\nEven on a very fast machine, the build is likely to take hours. The name of the configuration \\r\\ncommand, “lunch,” is appropriate for much more than the process of choosing the target \\r\\nbuild device. Fortunately, the long build time is generally only for “clean” builds of the source. Iterative builds are usually considerably faster, often completing in just a few minutes. With luck, the build will complete successfully. Unfortunately, hundreds of ways exist that it \\r\\ncan go wrong. That is an important reason that getting something that builds reliably is such \\r\\nan important first step! Many build failures involve incorrect or incompatible toolchains. This is especially common \\r\\nwhen trying to build on OSX. Another common cause of failure is that a particular device, \\r\\nalthough listed in the lunch menus, is simply not supported in the version of the Android \\r\\nsource checked out in the workspace. It is absolutely not the case that every lunch option is \\r\\ntested on every git branch or at every git tag of the AOSP source. No magic bullets exist for fixing a source that won’t build. If the problem is something as small \\r\\nas a recognizable syntax error, something supported by some C++ compilers but not by others, \\r\\nsimply patching the source may be possible. It is at least as likely, though, that a more effective \\r\\nstrategy is finding (through the community or possibly even trial and error) some other version \\r\\nof the source or toolchain that does work. Device Tools \\r\\nWhen the build completes successfully, the directory out/target/product contains several file \\r\\nsystem images ready for installation on the target device. Installing the images on the device \\r\\nand then working with the running system requires two specialized tools: fastboot and adb. Getting familiar with them before proceeding makes sense. The sources for both tools are part of AOSP.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"17ae5752-f40c-461b-b67d-e30ed6a8df1e":{"__data__":"{\"id_\":\"17ae5752-f40c-461b-b67d-e30ed6a8df1e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VbiXJnqtJbdG4tboEoL4WuE2RV0/xh02ojKjLe1nlws=\"},\"PREVIOUS\":{\"nodeId\":\"40c50d99-f54a-4799-902a-dea29f59c023\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pS9agdnPIJZryXx1pCnITDfUR/GN/6cSO0D97ykBH5c=\"}},\"hash\":\"YBglg5o1rXm2Bj2A+O859BLD0zvPJjJuPwOF2kPfkAo=\",\"text\":\"The sources for both tools are part of AOSP. More conveniently, though, compiled versions  \\r\\nare distributed as part of the Android SDK in the platform-tools folder. The Android SDK  \\r\\nis available from the Android Developer Website (https://developer.android.com/studio/ \\r\\nindex.html) either as part of the Android SDK Developer Bundle (which includes Android \\r\\nStudio, the standard Android IDE) or separately as a zipped, stand-alone folder. Versions  \\r\\nare available for each of the three most common development platforms: Linux, Mac,  \\r\\nand Windows. 9780134096346_print.indb   2725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"66319e95-c495-4456-a173-bfd9c70c2177":{"__data__":"{\"id_\":\"66319e95-c495-4456-a173-bfd9c70c2177\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x1+4hQgHRHw9fR+A+JTgdJxfk8vI0fZihilRvuYOHWg=\"},\"NEXT\":{\"nodeId\":\"7b245276-3b8f-4589-8582-f0d6c33577a3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3RZnYwYFgKJky3jHOHH+T9LInPqc5RAu7mf0J+XEaEs=\"}},\"hash\":\"DIlTYkDGcnBHSsyf1LQkMnoc9ix9aDsNoVrPx31Qyts=\",\"text\":\"28Chapter 2  Booting Acme\\r\\nfastboot\\r\\nfastboot is an overloaded term: It is both a boot mode for a device and the name of a tool \\r\\nused to communicate with a device when it is in fastboot mode. Incidentally, it is also the \\r\\nname of the protocol that the tool and device use to communicate when the device is in fast-\\r\\nboot mode. Booting an Android device into fastboot mode is very similar to booting a larger computer \\r\\ninto its BIOS. In much the way one can boot a laptop computer into its BIOS by holding down \\r\\na key-chord during boot, the most common way of booting an Android device into fastboot \\r\\nmode is to power cycle it while holding a specific set of buttons (frequently power and volume \\r\\ndown). Instead of starting the normal bootloader, boot phase-2 instead loads and begins execut-\\r\\ning the fastboot program. (Figure 6.1 in Chapter 6 illustrates the boot process. )\\r\\n \\r\\nWarning! Bricking a device with fastboot is really, really easy to do! The fastboot program may have complete and unrestricted access to device memory. Overwriting  \\r\\nnot only the operating system and the backup recovery system but also the fastboot program \\r\\nitself may be possible. A device on which all phase-3 boot programs are garbage cannot be \\r\\nbooted and cannot be repaired without physical access to device memory. By default, the fastboot program communicates with a device over a USB connection. Perhaps \\r\\nsurprisingly, when a device is booted into fastboot mode, it is likely to have a USB device iden-\\r\\ntifier that is different from the one it presents after a normal boot. An operating system that \\r\\ncontrols access to naked devices (as udev does on Linux) may have to be configured to allow a \\r\\nfastboot connection, even if adb connections to the normally booted device work perfectly.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7b245276-3b8f-4589-8582-f0d6c33577a3":{"__data__":"{\"id_\":\"7b245276-3b8f-4589-8582-f0d6c33577a3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x1+4hQgHRHw9fR+A+JTgdJxfk8vI0fZihilRvuYOHWg=\"},\"PREVIOUS\":{\"nodeId\":\"66319e95-c495-4456-a173-bfd9c70c2177\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DIlTYkDGcnBHSsyf1LQkMnoc9ix9aDsNoVrPx31Qyts=\"}},\"hash\":\"3RZnYwYFgKJky3jHOHH+T9LInPqc5RAu7mf0J+XEaEs=\",\"text\":\"After the device is in fastboot mode and properly attached to a client, it will be visible to the \\r\\nfastboot program, invoked from the command line:\\r\\n> fastboot devices\\r\\nZX1G324JBJ       fastboot\\r\\n> fastboot getvar all\\r\\n(bootloader) slot-count: not found\\r\\n(bootloader) slot-suffixes: not found\\r\\n(bootloader) slot-suffixes: not found\\r\\n(bootloader) version: 0.5\\r\\n(bootloader) version-bootloader: moto-apq8084-72.01\\r\\n(bootloader) product: shamu\\r\\n(bootloader) board: shamu\\r\\n(bootloader) secure: yes\\r\\n... 9780134096346_print.indb   2825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fa1515d8-2f1b-4595-a760-2e4a0ac0e854":{"__data__":"{\"id_\":\"fa1515d8-2f1b-4595-a760-2e4a0ac0e854\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"fNfCUEba2pNZSxpuKpYx3knMoPEHsdiguPiwQl5MSqE=\"},\"NEXT\":{\"nodeId\":\"e96ede56-560c-4729-b462-2f5cd92ca9c7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"u2zPpZR0Jozgnx7NWm/k7ukTZ0VDeVhKhP/97y8vvJ0=\"}},\"hash\":\"4A1gPJJI5D78Oh0yS0pcB5EipWD4RniCKWINlRGCbv4=\",\"text\":\"29Device Tools \\r\\nUntil the devices command shows a device, no other commands will be useful. It is the indi-\\r\\ncation that the tool has successfully established a connection to the device. Fastboot supports a long list of commands, most of which have to do with flashing the device \\r\\nmemory. As usual, the –h flag will cause fastboot to print a help message. You can discover \\r\\nadditional commands not described in the help text by reading the fastboot source. Note \\r\\nAs of late 2016, there is code in the fastboot tool to support TCP connections. For this to work, \\r\\nof course, the fastboot program on the device (as well as the client tool) must be recent and \\r\\nsupport TCP connections. TCP fastboot may be particularly valuable for small, proximity-charged \\r\\ndevices that do not have a USB port. To use TCP fastboot, specify the IP address of the target \\r\\ndevice on the command line as follows:\\r\\nfastboot –s tcp:<ip/hostname>[:port] <command>\\r\\nadb\\r\\nAdb is probably the most important tool in the Android system developer’s toolbox. It is the \\r\\nSwiss Army knife of Android and provides a variety of functions: file transfer, shell, application \\r\\ninstallation, and logging. Adb communicates with the Android adb daemon, adbd, which is started early in the boot \\r\\nprocess of both the recovery and normal Android systems (but not fastboot). Like fastboot, the \\r\\nadb tool is most commonly used over a USB connection. Also, like fastboot, it supports TCP. Unlike fastboot, however, adb supports multiplexed communications. It can be used to follow \\r\\na device’s logging output in one window at the same time that another window is running an \\r\\nactive shell. A properly connected device should become visible to adb shortly after its boot screen appears. As with fastboot, use the devices command to verify that adb can connect to the device \\r\\ndaemon process. > adb devices\\r\\nList of devices attached\\r\\nZX1G324JBJ     device\\r\\nDepending on how the Android image running on a device was built, the adbd daemon may \\r\\nnot start as root, and its value as an investigative tool will be severely limited. In such a case, if \\r\\nit is possible to run the daemon as root, the command adb root will do so.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e96ede56-560c-4729-b462-2f5cd92ca9c7":{"__data__":"{\"id_\":\"e96ede56-560c-4729-b462-2f5cd92ca9c7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"fNfCUEba2pNZSxpuKpYx3knMoPEHsdiguPiwQl5MSqE=\"},\"PREVIOUS\":{\"nodeId\":\"fa1515d8-2f1b-4595-a760-2e4a0ac0e854\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4A1gPJJI5D78Oh0yS0pcB5EipWD4RniCKWINlRGCbv4=\"}},\"hash\":\"u2zPpZR0Jozgnx7NWm/k7ukTZ0VDeVhKhP/97y8vvJ0=\",\"text\":\"Note that, because \\r\\nof security restrictions, the daemon cannot be run as root on commercial or “user” builds. > adb shell\\r\\nshamu:/ $ \\r\\n> adb root\\r\\nrestarting adbd as root\\r\\n> adb shell\\r\\nshamu:/ # \\r\\n9780134096346_print.indb   2925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1e134db7-119e-4932-be85-5c187df1e2c5":{"__data__":"{\"id_\":\"1e134db7-119e-4932-be85-5c187df1e2c5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ehLeyaLNNtVG90apYZM2gUZK0SyPfs7fdSWy3IQly3k=\"},\"NEXT\":{\"nodeId\":\"083e4f87-67c8-4c9f-991e-feb4278797ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OxWiGfrlm7Rf21Q6jLeP8+tf3PXzJi20fr/NJPTKfGw=\"}},\"hash\":\"o5bJYopRowri/wCPcYd+he1tAxls3DxmeuhWiwCbXB0=\",\"text\":\"30Chapter 2  Booting Acme\\r\\n \\r\\nNote \\r\\nAlthough the tools described here will work for nearly any Android system, some development \\r\\nboards also support a UART console. With a little work—sometimes even a stock piece of addi-\\r\\ntional hardware—it is likely that this console can be adapted to use USB and monitored from a \\r\\ncomputer using a serial console program such as minicom or GNU screen. The access to the \\r\\nstartup logging available from such a console almost certainly makes it worth the effort. Flashing the Device\\r\\nCertainly the most convenient way of flashing a device is to remove its memory card and insert \\r\\nit into a card reader/writer attached to the build machine. On the build machine, all the stan-\\r\\ndard partitioning and file system maintenance tools are available. In addition, a device that \\r\\nboots from removable memory is nearly impossible to brick: a huge advantage. Many devices, even those that do not normally do so, are completely capable of booting from \\r\\na memory card. Making this possible typically requires installing a custom bootloader. The \\r\\ncustom bootloader, usually U-Boot, takes the place of the standard second-phase bootloader \\r\\nand boots from the removable memory card instead of from the on-board memory. Setting up a \\r\\ndevice so that it boots from removable memory is ideal. The more common way of flashing images to a device, though, is by using fastboot. Again, the \\r\\nprocess of getting a device to fastboot mode is hardware dependent. On some devices, holding \\r\\nsome combination of buttons immediately after powering on the device will cause it to enter \\r\\nfastboot mode. Some devices have DIP switches that in some configuration force the board \\r\\ninto fastboot mode at boot. Nearly any device, if running, can be forced to reboot into fastboot \\r\\nmode with the command:\\r\\n> adb reboot bootloader\\r\\nWhen booting into fastboot, a device should power up and, after much less time than it takes \\r\\nfor a full boot, should be visible from the flashboot program:\\r\\n> fastboot devices\\r\\nZX1G324JBJ       fastboot\\r\\nIt will not be visible from adb. What happens next depends on the version of Android to be flashed to the device. Those \\r\\nopaque binary blobs of proprietary software mentioned earlier in this chapter have always \\r\\nbeen a part of Android.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"083e4f87-67c8-4c9f-991e-feb4278797ec":{"__data__":"{\"id_\":\"083e4f87-67c8-4c9f-991e-feb4278797ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ehLeyaLNNtVG90apYZM2gUZK0SyPfs7fdSWy3IQly3k=\"},\"PREVIOUS\":{\"nodeId\":\"1e134db7-119e-4932-be85-5c187df1e2c5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"o5bJYopRowri/wCPcYd+he1tAxls3DxmeuhWiwCbXB0=\"}},\"hash\":\"OxWiGfrlm7Rf21Q6jLeP8+tf3PXzJi20fr/NJPTKfGw=\",\"text\":\"They are the genesis of the Hardware Abstraction Layer (HAL) \\r\\ndiscussed in Chapters 8 and 10. Prior to Android Oreo, standard practice was to drop the binary blobs into a device-specific \\r\\nsection of the build tree along with the customized make files that knew where to find them. The blobs would then be incorporated into the installable image during the build process and \\r\\ninstalled as part of the image. Clearly, however, that implies that each Android image is customized for a specific hardware \\r\\nplatform. The Android Nougat image for a Nexus 5 device will almost certainly not work on \\r\\n9780134096346_print.indb   3025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"944df452-0b1b-4d3e-90f7-a5a27a70ced5":{"__data__":"{\"id_\":\"944df452-0b1b-4d3e-90f7-a5a27a70ced5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eXLec7vrxAgQIJyQhtL6OE2OPZbZ2wWJL6zJ6lUYLYU=\"},\"NEXT\":{\"nodeId\":\"f165ce7a-3c9b-439f-97b3-ea86899a91e9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"SqpvReNcS/XayD2muORDbU6nKhuB/TCy+jGD0y3zUtE=\"}},\"hash\":\"uWw9/L3OQLWhj0nq79vly6veCjFNm192+1VeBiJ70C4=\",\"text\":\"31Flashing the Device\\r\\neven the fairly similar Nexus 5X. In addition to causing a proliferation of images, this neces-\\r\\nsary customization also gave carriers a way to drag their feet providing updates. It was not \\r\\nenough for Google to produce a new version of Android. In addition, each phone vendor had \\r\\nto produce a new image for each phone, incorporating all the changes. With the advent of Android 8, Oreo, this changed. A Google project called Treble worked to \\r\\nstandardize the Android image. Under Treble, proprietary binary blobs go into new file system \\r\\npartitions reserved exclusively for device- and carrier-specific binaries, where they are not \\r\\naffected by system updates. New releases of the Android system replace or rewrite partitions \\r\\nthat belong exclusively to the Android system. The possibility exists that a single Android \\r\\nimage will work for many devices. This is the way the Acme device is configured. Chapter 10 \\r\\ncovers the updated HAL (HIDL) in more detail. The change is important when flashing an Android version 8 or later to a device, because the \\r\\nAndroid that you flash will expect to find the proprietary shims in those new file system parti-\\r\\ntions. If they are not there, the device will fail to boot. The code that installs the device binary shims should be part of the device-specific bundle \\r\\ndownloaded to customize the basic AOSP source for the device. For the Acme device based on \\r\\nthe HiKey960, the script flash-all.sh in the directory device/linary/hikey/install/ \\r\\ndoes the trick. The initial flash for the new Acme device looks like this:\\r\\n> cd device/linaro/hikey/installer/hikey960\\r\\n> adb reboot bootloader\\r\\n> fastboot devices\\r\\n0483826824000000        fastboot\\r\\n> chmod a+x flash-all\\r\\n> ./flash-all.sh \\r\\nandroid out dir:./../../../../..//out/target/product/hikey960\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'ptable' (196 KB)... OKAY [  0.059s]\\r\\nwriting 'ptable'... OKAY [  0.075s]\\r\\nfinished. total time: 0.134s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'xloader' (151 KB)...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f165ce7a-3c9b-439f-97b3-ea86899a91e9":{"__data__":"{\"id_\":\"f165ce7a-3c9b-439f-97b3-ea86899a91e9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eXLec7vrxAgQIJyQhtL6OE2OPZbZ2wWJL6zJ6lUYLYU=\"},\"PREVIOUS\":{\"nodeId\":\"944df452-0b1b-4d3e-90f7-a5a27a70ced5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uWw9/L3OQLWhj0nq79vly6veCjFNm192+1VeBiJ70C4=\"}},\"hash\":\"SqpvReNcS/XayD2muORDbU6nKhuB/TCy+jGD0y3zUtE=\",\"text\":\"OKAY [  0.048s]\\r\\nwriting 'xloader'... OKAY [  0.269s]\\r\\nfinished. total time: 0.317s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'fastboot' (3346 KB)... OKAY [  0.138s]\\r\\nwriting 'fastboot'... OKAY [  0.074s]\\r\\nfinished. total time: 0.211s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'nvme' (128 KB)... 9780134096346_print.indb   3125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b08751ab-44ec-4c1f-9036-731db0e685f5":{"__data__":"{\"id_\":\"b08751ab-44ec-4c1f-9036-731db0e685f5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eb/VAHha2oN5Os3vjabZP2YdqQ4yNdlPlh4Rhfcb5Fk=\"}},\"hash\":\"2QigIfbsxZ5mR04w7exHZcn/J3Kj5WbQYdig++GFCrA=\",\"text\":\"32Chapter 2  Booting Acme\\r\\nOKAY [  0.045s]\\r\\nwriting 'nvme'... OKAY [  0.087s]\\r\\nfinished. total time: 0.132s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'fw_lpm3' (212 KB)... OKAY [  0.047s]\\r\\nwriting 'fw_lpm3'... OKAY [  0.054s]\\r\\nfinished. total time: 0.102s\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'trustfirmware' (145 KB)... OKAY [  0.049s]\\r\\nwriting 'trustfirmware'... OKAY [  0.053s]\\r\\nfinished. total time: 0.102s\\r\\n# more uploads elided... > \\r\\nRunning this initialization script again should not be necessary. Only a few changes could \\r\\nrequire it:\\r\\n ■The manufacturer discovers an important bug and offers an update. ■The Project Treble interface standards change, and a future Android is incompatible. All that is left to do is to flash the newly built image:\\r\\n> cd ../../../../.. > pwd\\r\\n/home/acme/workspace\\r\\n> fastboot flash boot out/target/product/hikey960/boot.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'boot' (9650 KB)... OKAY [  0.345s]\\r\\nwriting 'boot'... OKAY [  0.124s]\\r\\nfinished. total time: 0.468s\\r\\n> fastboot flash dts out/target/product/hikey960/dt.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'dts' (14 KB)... OKAY [  0.047s]\\r\\nwriting 'dts'... OKAY [  0.048s]\\r\\nfinished. total time: 0.095s\\r\\n9780134096346_print.indb   3225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c37d416-59b2-4cd8-ade3-df368ade9933":{"__data__":"{\"id_\":\"2c37d416-59b2-4cd8-ade3-df368ade9933\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"EBsJTS+DeZbhtENRYU4C2B9L1ZDnmm0f0qf+o77jsv0=\"},\"NEXT\":{\"nodeId\":\"c837d974-7007-4fcd-bc0c-c574f14ae4f9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"K+eV/B7jJEIjnsR5lOsF35FOmz+AYvHPTK2TjB6aPLo=\"}},\"hash\":\"/8UyT0XaMl8EkwQRFUMiM2BA7i+nadnYCkrckxx194w=\",\"text\":\"33Summary\\r\\n> fastboot flash system out/target/product/hikey960/system.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending sparse 'system' 1/3 (445539 KB)... OKAY [203.250s]\\r\\nwriting 'system' 1/3... OKAY [ 10.197s]\\r\\nsending sparse 'system' 2/3 (447504 KB)... OKAY [198.764s]\\r\\nwriting 'system' 2/3... OKAY [  8.254s]\\r\\nsending sparse 'system' 3/3 (109822 KB)... OKAY [ 46.770s]\\r\\nwriting 'system' 3/3... OKAY [  1.566s]\\r\\nfinished. total time: 468.801s\\r\\n> fastboot flash cache out/target/product/hikey960/cache.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'cache' (4280 KB)... OKAY [  0.189s]\\r\\nwriting 'cache'... OKAY [  0.154s]\\r\\nfinished. total time: 0.343s\\r\\n> fastboot flash userdata out/target/product/hikey960/userdata.img\\r\\ntarget reported max download size of 471859200 bytes\\r\\nsending 'userdata' (147713 KB)... OKAY [  4.627s]\\r\\nwriting 'userdata'... OKAY [  5.587s]\\r\\nfinished. total time: 10.214s\\r\\n> \\r\\nYou should now be able to boot your board! Summary\\r\\nThis chapter introduced the Acme project, an example of customizing Android for specific \\r\\nhardware. The project consists of a build system, managed source, and a device based on well-\\r\\nsupported hardware, the HiKey960. It described a couple of strategies for organizing source and \\r\\nthe basic tools necessary to build and install the source on a device. It is very likely that the process of creating a real project for a real device will not be as simple \\r\\nas the process described in this chapter. It might easily take days, even weeks, to get a board to \\r\\nboot at all. It might take many more weeks to find source that reliably and repeatably produces \\r\\na running Android.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c837d974-7007-4fcd-bc0c-c574f14ae4f9":{"__data__":"{\"id_\":\"c837d974-7007-4fcd-bc0c-c574f14ae4f9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"EBsJTS+DeZbhtENRYU4C2B9L1ZDnmm0f0qf+o77jsv0=\"},\"PREVIOUS\":{\"nodeId\":\"2c37d416-59b2-4cd8-ade3-df368ade9933\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/8UyT0XaMl8EkwQRFUMiM2BA7i+nadnYCkrckxx194w=\"}},\"hash\":\"K+eV/B7jJEIjnsR5lOsF35FOmz+AYvHPTK2TjB6aPLo=\",\"text\":\"It might even take several days to find a build machine that can be config-\\r\\nured with a toolchain that will consistently build a flashable image without error. 9780134096346_print.indb   3325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8f0ee030-e54b-4716-9f12-91fcb218161b":{"__data__":"{\"id_\":\"8f0ee030-e54b-4716-9f12-91fcb218161b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aYGae7MURwjafE52xZXhIxG3yK7O1qQfJtJfhjIXph0=\"}},\"hash\":\"O0el6aJmq3qlywTOOwcjNFu7K4H2pdHf1ZGK2cbs+Jg=\",\"text\":\"34Chapter 2  Booting Acme\\r\\nUnfortunately, like the unhappy families in Tolstoy’s Anna Karenina, each of the problems \\r\\nencountered on each individual project will be more or less unique to that project. Google and \\r\\nthe community of people who have used similar hardware are the key resources. Finding the \\r\\ntwo other people in the world who corrupt their NTS+ file systems every time they run a build, \\r\\nthe person who has figured out how to set the video resolution for the LCD panel you are \\r\\nusing, or the one who has discovered the proper GNU Screen setting for your board’s UART can \\r\\nbe incredibly time consuming. It is, however, usually quite a bit faster than trying to solve each \\r\\nof those esoteric problems yourself. Despite the warning, this chapter provides a powerful framework. It presents a path that will \\r\\nlead from chaos to the solid ground from which it is possible to move forward boldly and with \\r\\npredictable, measurable progress. If your project is forced from the described path at various \\r\\npoints, the best course of action is to address the specific, limited problem and to get back on \\r\\nthe path. After you can repeatably build a working Android from a duplicable code base, you are out of \\r\\nthe zone where dragons be. The rest is just engineering. 9780134096346_print.indb   3425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6464c543-98c8-4a32-908b-25bd8c5fc43d":{"__data__":"{\"id_\":\"6464c543-98c8-4a32-908b-25bd8c5fc43d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"s/UJnSYnJiMQv8fFqMTQ4OAOwUvzbrOaKrfEn94+ho0=\"}},\"hash\":\"ndXI69T+in6JjldNEx5UNpUZum4NqlbLhWl1UWPJH/o=\",\"text\":\"3\\r\\nGetting Started\\r\\nThis chapter is an overview that provides context for the rest of the book. It will present three \\r\\ndifferent, high-level views of the Android system. It is divided into two parts, a conceptual \\r\\nsection followed by a practical section. The conceptual half of the chapter explores Android, metaphorically, from the side. This \\r\\nsection models Android as a geologist might, as a stack of strata. Each layer in the model has its \\r\\nown significance, and each supports the layer above it. The exploration will reveal most of the \\r\\nmajor components of the Android system as well as several key architectural structures. The second half of the chapter—the practical half—explores the AOSP source. It addresses \\r\\nacquiring the code, its organization, its customization, and some of the tools used to maintain it. Putting Android in Its Place\\r\\nYou have almost certainly seen one of the many illustrations of Android as a layer cake before. Figure 3.1 is another version. System\\r\\nServices\\r\\nNative\\r\\nApplications\\r\\nAndroid\\r\\nServices\\r\\nAndroid\\r\\nApplications\\r\\nAndroid API Libraries\\r\\nAndroid\\r\\nNative\\r\\nLibraries\\r\\nHAL\\r\\nBinder\\r\\netc.Linux Kernel\\r\\nHardware\\r\\nSystem Libraries\\r\\nDalvik/\\r\\nART\\r\\nZygote\\r\\nFigure 3.1 Android Layer Cake\\r\\n9780134096346_print.indb   3525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"604b3270-3cb5-4887-a558-aad874cebd26":{"__data__":"{\"id_\":\"604b3270-3cb5-4887-a558-aad874cebd26\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YzEmxJ/hkBs6SvDWixnoC8MCKAbCeu2iQ34lE8Kysj4=\"},\"NEXT\":{\"nodeId\":\"e0f76b55-8a18-4e29-a2f2-9d0af1ddf954\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"581uevCGJnkd3T6SGS2CnUQhKhkSDs2/LsEpV9KUzR4=\"}},\"hash\":\"NcBRS5wV3gUYHtJDZez2/9GAx/O7qay1QQq32iDvZN0=\",\"text\":\"36Chapter 3  Getting Started\\r\\nFigure 3.1 shows the Android system in its context. The left half of the figure could be a generic \\r\\nLinux distribution such as Ubuntu or Mint. The right half illustrates the components specific to \\r\\nAndroid. In the model, the system is divided into four major layers, each based on the one underneath \\r\\nit. Starting at the bottom, they are:\\r\\n ■Hardware: This is the physical device; a piece of metal you can hold in your hand. ■Linux Kernel: The kernel is software that creates the process and memory environments in which all applications run. As noted in Chapter 1, Android uses the \\r\\nvery popular Linux kernel. ■System Libraries: System libraries are software libraries, frequently supplied as opaque binaries by third-party providers that implement services used by multiple applications. ■Applications and System Services: Applications use the environment provided by the lower layers to do work useful to the user. A set of special, long-running applications, \\r\\ncalled system services or sometimes “daemons,” perform periodic tasks and manage \\r\\nsystem state. In this model, most Android developers work predominantly in the block labeled “Android \\r\\nApplications” at the top right of the figure. They develop the applications that run in the \\r\\nAndroid environment. These developers spend their time learning and using the environment \\r\\nprovided by the surrounding Android system. The rest of this book is about customizing Android itself to adapt it to new hardware. Its focus \\r\\nis the shaded areas outlined with the bold border, most of which is in the System Services layer \\r\\nof Figure 3.1. Before launching into the discussion of the Android-specific components, though, \\r\\nreviewing the rest of the environment in which those components run will be useful. Hardware\\r\\nIn this model, the bottom of the stack is the hardware. The hardware is the motivation: some \\r\\ndevice with cool new features. It is the part that you, the reader, bring to the party. The purpose \\r\\nof the entire software stack above the hardware is to enable the creation of applications that \\r\\nprovide a human user with appropriate and intuitive control of some new, innovative hardware \\r\\nfeatures. Designing and bringing up hardware are dark arts that are well outside the scope of this book.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e0f76b55-8a18-4e29-a2f2-9d0af1ddf954":{"__data__":"{\"id_\":\"e0f76b55-8a18-4e29-a2f2-9d0af1ddf954\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YzEmxJ/hkBs6SvDWixnoC8MCKAbCeu2iQ34lE8Kysj4=\"},\"PREVIOUS\":{\"nodeId\":\"604b3270-3cb5-4887-a558-aad874cebd26\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NcBRS5wV3gUYHtJDZez2/9GAx/O7qay1QQq32iDvZN0=\"}},\"hash\":\"581uevCGJnkd3T6SGS2CnUQhKhkSDs2/LsEpV9KUzR4=\",\"text\":\"Designing and bringing up hardware are dark arts that are well outside the scope of this book. Roger Ye’s book, Embedded Programming with Android (Ye, 2016), part of the Android Deep Dive \\r\\nSeries, is an excellent introduction to “bare-metal” programming and the process of bringing \\r\\nup a device from scratch. The Linux Kernel\\r\\nAs noted in Chapter 1, Android’s kernel is a variant of the Linux kernel. Linux is wildly \\r\\npopular, especially in embedded devices because it is open source and fairly easy to adapt to \\r\\nnew hardware. Chapter 4 discusses it again in more detail. 9780134096346_print.indb   3625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1b528f78-8fcd-467e-9203-38eb6cf86a59":{"__data__":"{\"id_\":\"1b528f78-8fcd-467e-9203-38eb6cf86a59\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oiTJxvWvFDwK0hSwKNT7EsuadjCxVobu5R/EQz11GEg=\"},\"NEXT\":{\"nodeId\":\"d180a23d-af3d-4e4a-bbcf-26f752501f71\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vj5ZqwOd4kUFLG8RtKxbj4XhxLXUT3CB5M1qLyDb4dg=\"}},\"hash\":\"5bgGNTjipSjS7mwMRDSlRMiN4jOL5AylHYaRaB06f3Y=\",\"text\":\"37Putting Android in Its Place\\r\\nThe kernel is the Android system’s primary porting layer. The process of porting Android to a \\r\\nnew device consists in large part of getting an Android variant of the Linux kernel running on \\r\\nthe target device and then pulling the rest of the Android stack over on top of it. Although a kernel is a key part of Android, building a kernel is not normally part of building \\r\\nan Android system. Instead, the Android build tools treat the kernel as a black box: a pre-built, \\r\\nthird-party binary. As Chapter 4 will illustrate, it is a device developer’s responsibility to assem-\\r\\nble the working kernel and to provide it for inclusion into the device-installable file system \\r\\nimage that the Android build system creates. You might be surprised to hear that the kernel is Android’s primary porting layer. Much of \\r\\nAndroid programming is done in the Java programming language, whose motto was “write \\r\\nonce, run anywhere. ” For Android, however, Java source code is compiled into instructions \\r\\nfor Dalvik and ART, not instructions for the Java Virtual Machine (JVM). The purpose of the \\r\\nAndroid VM is to make applications portable across Android devices. Unlike the JVM, multi-\\r\\nplatform and OS portability was not a goal at all in the design of Android’s virtual machine. System Libraries\\r\\nThere are  common capabilities and functions that are used by multiple applications. Some \\r\\nof these capabilities—cryptography, video and audio rendering, a web browser—are large and \\r\\ncomplex. Implementing them as libraries that can be used by multiple applications makes \\r\\nsense. Most system libraries are included in the Android system, as is the kernel, as third-party, black \\r\\nbox binaries. They are essential to Android but are neither built nor maintained as part of the \\r\\nAndroid source tree. This is an important area of customization for the developer of a new device. If software already \\r\\nexists—and that definitely includes software written in a language other than Java—that can be \\r\\nused as part of the interface to a new device, it can be included as part of this layer. Enterprises that already have extensive investments in software may be, quite understandably, \\r\\nreluctant to abandon that investment simply to move to the Android platform. Including the \\r\\nproprietary code as a system library and then plumbing it into the Android framework with \\r\\nJava bindings may preserve the investment at a reasonable cost.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d180a23d-af3d-4e4a-bbcf-26f752501f71":{"__data__":"{\"id_\":\"d180a23d-af3d-4e4a-bbcf-26f752501f71\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oiTJxvWvFDwK0hSwKNT7EsuadjCxVobu5R/EQz11GEg=\"},\"PREVIOUS\":{\"nodeId\":\"1b528f78-8fcd-467e-9203-38eb6cf86a59\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5bgGNTjipSjS7mwMRDSlRMiN4jOL5AylHYaRaB06f3Y=\"}},\"hash\":\"vj5ZqwOd4kUFLG8RtKxbj4XhxLXUT3CB5M1qLyDb4dg=\",\"text\":\"One of the system libraries that is part of a standard Android system and that deserves particu-\\r\\nlar attention is Bionic. Bionic is Android’s equivalent of the standard C library. Most applications do not request kernel services directly. Instead, they use a standard library, \\r\\nthe C library, to request them. The standard C library interface was specified originally as part \\r\\nof the ANSI C standard and subsequently accepted by ISO. The widely established POSIX C \\r\\nlibrary standard is an incremental superset. The C library standards are expressed as C header files (.h) against which applications are \\r\\ncompiled. These header files define symbols that allow a compiler to emit code for macros, \\r\\nconstants, variables, and functions in the application source code. Building an application \\r\\nrequires only the header files. The actual implementations of the C library are not included in \\r\\nthe compiled application. 9780134096346_print.indb   3725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c59e3577-dc1f-4c9f-bd29-9386b018bb27":{"__data__":"{\"id_\":\"c59e3577-dc1f-4c9f-bd29-9386b018bb27\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"0MNAEmn7bItqKwCqSh97eWPPixoTgvNR1KQCnptg1bI=\"},\"NEXT\":{\"nodeId\":\"87c6f760-5787-4b2c-92f4-ca85dcc809f7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"o3pQAE/hoRKcRF5JIsv6WvOxq2W+0I5yl1Th/qvJPUo=\"}},\"hash\":\"aPTqxfwGZK2YjKxK1b6faY8tVkaxjPfsi4mVxQtKYPM=\",\"text\":\"38Chapter 3  Getting Started\\r\\nInstead, at run time, a linker binds the compiled application dynamically to the implementa-\\r\\ntion of the C library that is present on the system on which the application is running. Because \\r\\nthe API definitions against which the application was compiled are (with luck! ) identical to \\r\\nthose actually implemented by the host system library, everything works. Usually, this just \\r\\nmeans that the C library is compiled using the exact same header files that the library clients \\r\\nuse when they are compiled. A given piece of code can be binary compatible across multiple, \\r\\nsimilar platforms, as long as all the platforms have C libraries that implement the exact  \\r\\nsame API. Bionic is Android’s version of the standard C library. As part of Android’s ongoing battle for \\r\\nfrugality, it has been pruned relentlessly and is dramatically smaller than its BSD ancestors. It is so small, in fact, that it does not meet even the ANSI standard, let alone the ubiquitous \\r\\nPOSIX standard. Applications that run perfectly well on other platforms may not run at all on \\r\\nAndroid, because Bionic does not support the functionality they require. The implication that Bionic has its roots in BSD may come as a surprise. Most operating \\r\\nsystems based on a Linux kernel use a version of the GNU C library, glibc. Instead, Bionic is \\r\\nderived from the BSD UNIX, libc. There are several reasons for this but the most obvious is \\r\\nthat libc is licensed under the BSD license and is thus free of the constraints that its LGPL \\r\\nlicensing imposes on glibc. One of the goals in Android’s design was to eliminate any possible \\r\\nimpediment to its acceptance. That goal absolutely implies removing any possible licensing \\r\\nconstraints. Many existing applications, libraries, and utilities may be used on Android as long as they are \\r\\nrecompiled against the Android platform. Obviously, some limits exist because of the extent of \\r\\nthe pruning in Bionic. For example, existing code that uses System V IPC or certain functions \\r\\nin the kernel concurrency feature, pthreads, cannot be built or run on Android. Additionally, \\r\\nas this chapter will make clearer, the Android software stack is fundamentally different than \\r\\na typical Linux stack, which sometimes makes the use of existing Linux programs difficult or \\r\\nimpossible. Augmenting an Android system by adding one of the standard C-library implementations is \\r\\nentirely feasible.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"87c6f760-5787-4b2c-92f4-ca85dcc809f7":{"__data__":"{\"id_\":\"87c6f760-5787-4b2c-92f4-ca85dcc809f7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"0MNAEmn7bItqKwCqSh97eWPPixoTgvNR1KQCnptg1bI=\"},\"PREVIOUS\":{\"nodeId\":\"c59e3577-dc1f-4c9f-bd29-9386b018bb27\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aPTqxfwGZK2YjKxK1b6faY8tVkaxjPfsi4mVxQtKYPM=\"}},\"hash\":\"o3pQAE/hoRKcRF5JIsv6WvOxq2W+0I5yl1Th/qvJPUo=\",\"text\":\"This simple and very common augmentation makes it possible to run many \\r\\nstandard Unix applications and libraries on an Android system. Applications\\r\\nSystem services are those special applications, typically with minimal user interfaces, that main-\\r\\ntain various subsystems: indexing files for search, locating and connecting to Wi-Fi networks, \\r\\nmounting and unmounting removable media, and so on. One special system service, init, \\r\\nis the first application run on system startup. It is responsible for much of the system startup \\r\\nprocess, including bringing up the other system services. It is discussed in more detail in \\r\\nChapter 6. The Android system service environment is not the same as that on typical Linux systems. On \\r\\na Linux system, running the command:\\r\\nps –ef\\r\\n9780134096346_print.indb   3825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"818ab586-8d29-4067-8592-1063af04e2de":{"__data__":"{\"id_\":\"818ab586-8d29-4067-8592-1063af04e2de\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"d1TPU1ZAuGyamMrr1WJhMyAAItKakHEe50xUDgY9ljA=\"},\"NEXT\":{\"nodeId\":\"f685225a-8712-4b61-9abc-427eaae41917\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"46isGKYfR/82V7lLWwbBgRnrQg7xNWX/6C3BYcIK0Gw=\"}},\"hash\":\"SI6/ZnhKSQ2N/0MmlNrFquOyqUed8YWL508PvTVG8+Q=\",\"text\":\"39Putting Android in Its Place\\r\\nproduces a list of currently running applications. On one of these systems, running this \\r\\ncommand will typically result in tens of lines of output describing many processes. Even if the \\r\\nsystem has just been finished booting and is not yet running many user applications, there \\r\\nare still likely to be quite a few applications running. These are the system services: the long \\r\\nrunning “daemons. ” \\r\\nComparing the list of system services for a generic Linux system with a similar list from an \\r\\nAndroid system is instructive. Although the 30 to 40 system services that run as part of most \\r\\ncommon Linux distributions are fairly similar, the overlap with those running on an Android \\r\\nsystem is relatively small. The Android system has unfamiliar system services such as installd, \\r\\nrild, surfaceflinger, and vold instead of more common services such as udevd and \\r\\nsyslogd. Although Chapter 6 addresses some of these daemons in a bit more detail, in-depth \\r\\ndiscussion of the differences between the daemons in the Android universe and those in the \\r\\nstandard Linux universe are not the focus of this book. Linux daemons are well documented \\r\\nelsewhere. Although slightly dated, Karim Yaghmour’s excellent book Embedded Android \\r\\n(Yaghmour, 2013) is a fantastic resource for work in this area. The Android Framework\\r\\nFigure 3.1 illustrates some of the Android-specific components of an Android system and their \\r\\npositions within the broader model of a working Linux system. The right side of the figure \\r\\nshows the Android framework in relation to the larger OS. Android has components that \\r\\noperate within each of the layers of the system model. From the bottom up, the components of \\r\\nthe Android system are\\r\\n ■Binder and other kernel plug-ins: Android requires several non-standard kernel  capabilities to function. These extensions are implemented as standard kernel extension  \\r\\nmodules. Chief among these extensions is Binder. Binder is an Interprocess Communi-\\r\\ncations service and is, perhaps, the heart of Android. ■HAL: The Hardware Abstraction Layer (HAL) is a system library that supports binary compatibility for the Android system across multiple hardware/driver platforms. The \\r\\nHAL, actually a group of libraries, serves as the interface between Android and certain \\r\\ngeneric types of hardware devices.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f685225a-8712-4b61-9abc-427eaae41917":{"__data__":"{\"id_\":\"f685225a-8712-4b61-9abc-427eaae41917\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"d1TPU1ZAuGyamMrr1WJhMyAAItKakHEe50xUDgY9ljA=\"},\"PREVIOUS\":{\"nodeId\":\"818ab586-8d29-4067-8592-1063af04e2de\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"SI6/ZnhKSQ2N/0MmlNrFquOyqUed8YWL508PvTVG8+Q=\"}},\"hash\":\"46isGKYfR/82V7lLWwbBgRnrQg7xNWX/6C3BYcIK0Gw=\",\"text\":\"Like the C library, the HAL is, essentially, a set of \\r\\nheader (.h) files that define an API for each of several common categories of hardware. The HAL abstracts an interface between the underlying hardware and Android almost \\r\\nexactly as the C library abstracts the interface to the kernel and other common  \\r\\nfunctionality. The HAL has evolved over Android’s lifetime. Newer versions of Android \\r\\ncombine a library and a daemon/service to push the abstraction even farther. Most HAL \\r\\ncode is written in C or C++ and compiled to device native binaries. Chapters 8 and 10 \\r\\ncover this in greater detail. ■Dalvik, ART, and the Native Libraries: These are the special system libraries that comprise the virtual machine and runtime environment in which Android applications \\r\\nexecute. ART (and Dalvik, which it replaced) are Android’s analog of the Java virtual \\r\\nmachine and the libraries it provides. Both the runtime and many of the libraries that \\r\\nsupport it are written in C/C++ and compiled to native code for the device. Above \\r\\n9780134096346_print.indb   3925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"02e621d4-2dca-47c3-876c-c6da6fb3e288":{"__data__":"{\"id_\":\"02e621d4-2dca-47c3-876c-c6da6fb3e288\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"m0Hn82RoQRUI6JtFkhpkuQbw5O1VA7+Uh/BOJ9nvPBA=\"}},\"hash\":\"1DeMw4vjJtkrGC2iUYfC8+K/Ecg+nCFnQTUMCEY4gmA=\",\"text\":\"40Chapter 3  Getting Started\\r\\nthis layer, however, nearly all source code is written in Java and compiled to virtual \\r\\ninstructions. Chapter 7 discusses ART and Dalvik. ■Android API Libraries: These are system libraries written in Java, compiled to dex virtual machine code, and translated to near-machine code (.oat files) during installation. They are bound to Android applications at runtime, almost exactly as the C Library \\r\\nis bound to native applications. The code they contain, though, cannot be executed \\r\\nwithout the help of the virtual machine and its runtime environment. These libraries are \\r\\nthe APIs to Android services. ■Android Services: The Android analog of a system service, these privileged Android applications written in Java provide essential Android functionality. The Zygote service, \\r\\nespecially, plays a key role in an Android system. Zygote is covered in Chapter 6. The \\r\\nAndroid service model is covered in the next section and seen again in Chapters 10 and \\r\\n11 as part of the binderized HAL. ■Android Applications: These applications are developed for Android, compiled against the Android API, and run within the runtime environment. Building an Android \\r\\napplication is unlike developing applications either for other varieties of Linux or for \\r\\nother mobile platforms. Many other resources are available to a developer building an \\r\\napplication. Application building is discussed only peripherally in this book. The Android Service Model\\r\\nA second, side-on view of the Android system gives a more functional perspective. Shown in \\r\\nFigure 3.2, it illustrates the basic structure of Android’s service model. Application\\r\\nProcess\\r\\nAndroid\\r\\nApplication\\r\\nAndroid API\\r\\nLibraries\\r\\nService\\r\\nProcess\\r\\nAndroid\\r\\nService\\r\\nAndroid API\\r\\nLibraries\\r\\nAndroid Native\\r\\nLibraries\\r\\nHAL\\r\\nBinderLinux Kernel\\r\\nHardwareScarceResource\\r\\nFigure 3.2 The Android System Model\\r\\n9780134096346_print.indb   4025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cdbdbecf-e3b0-411b-a065-fe6ec7986b2a":{"__data__":"{\"id_\":\"cdbdbecf-e3b0-411b-a065-fe6ec7986b2a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Kxz7gpHjipZIk418oedYW+fUlNkaJ8bNI8jI2EP8HlU=\"},\"NEXT\":{\"nodeId\":\"c235af7e-0dd9-4d87-a31c-804b83d76216\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"O2LNCKdjOqXGIZd/mpuxMQqJukp7YCnZQnH9mLbERiI=\"}},\"hash\":\"CJ7i+5DFPFI1IXVh2T7mDb31G5Qo8r14tgnKx7M27ZY=\",\"text\":\"41The Android Service Model\\r\\nThis diagram is key. It illustrates two applications in two separate processes, one on the right \\r\\nand one on the left. The application in the process on the left side of the diagram needs access \\r\\nto the scarce resource at the bottom of the diagram. The arrow from the application to the \\r\\nscarce resource represents its request. In the diagram the scarce resource is shown as hardware because it often is. Examples of scarce \\r\\nhardware resources might include a phone’s screen, status lights, or a buzzer. Allowing all appli-\\r\\ncations unrestricted access to these things wouldn’t make sense. At best, applications would \\r\\nhave to coordinate access among themselves. At worst, a malicious application could make a \\r\\ndevice unusable by seizing one or more of the essential resources and refusing to release them. Hardware resources, of course, are not the only things that can be scarce or that need protec-\\r\\ntion. A list of accounts or a database of acquaintances might require similar protection. Android \\r\\nuses the same mechanism to protect non-hardware resources. In Figure 3.2, the arrow illustrating the application’s intended request for the scarce resource is \\r\\nmarked with an “X. ” The “X” indicates that application is blocked by the system from making \\r\\nthe request directly. The portal through which an application interacts with hardware—its driver—is almost \\r\\ncertainly catalogued as a file in the /dev directory. Recall that as the creator of the file system \\r\\nabstraction, the kernel is able to represent nearly anything as a file. The driver is a special kind \\r\\nof file but still a file. To interact with the resource directly, the application must open the driver \\r\\nfile and read and write from it. Like all files in the Linux file system, the driver file is catalogued with permissions. These \\r\\npermissions determine which processes the kernel will allow to open the file. Listing 3.1 shows excerpts from the listing of the contents of the /dev directory from a typical \\r\\nAndroid device. Most of these files are drivers for one device or another. In most cases, the file’s \\r\\npermissions (the first column) limit access to the file’s owner (second column) or owning group \\r\\n(third column). Only a couple of the files in this example allow unrestricted access (crw-rw-rw).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c235af7e-0dd9-4d87-a31c-804b83d76216":{"__data__":"{\"id_\":\"c235af7e-0dd9-4d87-a31c-804b83d76216\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Kxz7gpHjipZIk418oedYW+fUlNkaJ8bNI8jI2EP8HlU=\"},\"PREVIOUS\":{\"nodeId\":\"cdbdbecf-e3b0-411b-a065-fe6ec7986b2a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CJ7i+5DFPFI1IXVh2T7mDb31G5Qo8r14tgnKx7M27ZY=\"}},\"hash\":\"O2LNCKdjOqXGIZd/mpuxMQqJukp7YCnZQnH9mLbERiI=\",\"text\":\"Only a couple of the files in this example allow unrestricted access (crw-rw-rw). The others are accessible only by processes with specific UIDs. Listing 3.1 Files in /dev\\r\\ncrw------- root     root     233,   0 1970-07-29 16:48 adsprpc-smd\\r\\ncrw-rw-r-- system   radio     10,  56 1970-07-29 16:48 alarm\\r\\n... crw-rw---- system   audio     10,  40 1970-07-29 16:48 audio_slimslave\\r\\ncrw-rw---- nfc      nfc       10,  70 1970-07-29 16:48 bcm2079x-i2c\\r\\ncrw-rw-rw- root     root      10,  62 1970-07-29 16:48 binder\\r\\ncrw-r----- radio    radio    230,   0 1970-07-29 16:48 hsicctl0\\r\\ncrw-r----- radio    radio    230,   1 1970-07-29 16:48 hsicctl1\\r\\ncrw-r----- radio    radio    230,  10 1970-07-29 16:48 hsicctl10\\r\\n... cr--r----- root     system    10, 183 1970-07-29 16:48 hw_random\\r\\n9780134096346_print.indb   4125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ed3b19e2-3ba2-4652-87e8-4a9fec6b03e3":{"__data__":"{\"id_\":\"ed3b19e2-3ba2-4652-87e8-4a9fec6b03e3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JVOUuhznpqhEMI/nj4IT89GM8f+PKajUGO2QAVtgh+g=\"},\"NEXT\":{\"nodeId\":\"dc700125-0925-4600-bea7-b861053dac24\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ig1ZMnD2T7Nyg19FAdjD6zka7Lz2AJwMk2qbbxFkKzA=\"}},\"hash\":\"moPtoeLZmrRcWuUGMfsoQuObm6bHKn02msp3oYL/h/4=\",\"text\":\"42Chapter 3  Getting Started\\r\\ncrw------- root     root      89,   0 1970-07-29 16:48 i2c-0\\r\\n... crw-rw---- system   camera   239,   0 1970-07-29 16:48 jpeg0\\r\\n... crw-rw---- system   camera   251,   0 1970-07-29 16:48 media0\\r\\n... crw-rw---- root     mtp       10,  43 1970-07-29 16:48 mtp_usb\\r\\n... crw-rw---- radio    vpn      108,   0 1970-07-29 16:48 ppp\\r\\n... crw-rw---- system   drmrpc   244,   0 1970-07-29 16:48 qseecom\\r\\ncrw------- root     root      10,  92 1970-07-29 16:48 ramdump_adsp\\r\\n...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dc700125-0925-4600-bea7-b861053dac24":{"__data__":"{\"id_\":\"dc700125-0925-4600-bea7-b861053dac24\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JVOUuhznpqhEMI/nj4IT89GM8f+PKajUGO2QAVtgh+g=\"},\"PREVIOUS\":{\"nodeId\":\"ed3b19e2-3ba2-4652-87e8-4a9fec6b03e3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"moPtoeLZmrRcWuUGMfsoQuObm6bHKn02msp3oYL/h/4=\"},\"NEXT\":{\"nodeId\":\"e7b05585-4341-42a9-8f5c-54189fba93d7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5jpHUHcvx8B1Xhj6NXz4W/VIKA9YiGuxPij69g93cA8=\"}},\"hash\":\"ig1ZMnD2T7Nyg19FAdjD6zka7Lz2AJwMk2qbbxFkKzA=\",\"text\":\"crw------- root     root     232,   3 1970-07-29 16:48 smd3\\r\\ncrw------- root     root     232,  36 1970-07-29 16:48 smd36\\r\\ncrw-rw---- system   system   232,   4 1970-07-29 16:48 smd4\\r\\ncrw-rw---- system   system   232,   5 1970-07-29 16:48 smd5\\r\\ncrw-rw---- system   system   232,   6 1970-07-29 16:48 smd6\\r\\ncrw-rw---- bluetooth bluetooth 232,   7 1970-07-29 16:48 smd7\\r\\ncrw------- root     root     232,   8 1970-07-29 16:48 smd8\\r\\ncrw-r----- radio    radio    231,  25 1970-07-29 16:48 smd_cxm_qmi\\r\\ncrw-rw---- bluetooth net_bt_stack 248,   0 2017-01-22 12:16 ttyHS0\\r\\ncrw------- media    media    248,   3 2017-01-22 12:16 ttyHS3\\r\\ncrw------- root     root     247,   0 1970-07-29 16:48 ttyHSL0\\r\\ncrw-rw---- system   vpn       10, 200 1970-07-29 16:48 tun\\r\\ncrw-rw---- system   net_bt_stack  10, 239 1970-07-29 16:48 uhid\\r\\n... crw-rw-rw- root     root       1,   9 1970-07-29 16:48 urandom\\r\\ncrw-rw---- root     usb       10,  41 1970-07-29 16:48 usb_accessory\\r\\nWhen Linux was first developed in the 1990s, it was designed for computers that were shared \\r\\nby many users. At that time, security in an operating system meant, exactly, protecting users \\r\\nof the same computer from each other.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e7b05585-4341-42a9-8f5c-54189fba93d7":{"__data__":"{\"id_\":\"e7b05585-4341-42a9-8f5c-54189fba93d7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JVOUuhznpqhEMI/nj4IT89GM8f+PKajUGO2QAVtgh+g=\"},\"PREVIOUS\":{\"nodeId\":\"dc700125-0925-4600-bea7-b861053dac24\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ig1ZMnD2T7Nyg19FAdjD6zka7Lz2AJwMk2qbbxFkKzA=\"}},\"hash\":\"5jpHUHcvx8B1Xhj6NXz4W/VIKA9YiGuxPij69g93cA8=\",\"text\":\"Although attacks from across a network were not \\r\\nunknown, it was far more likely that one of the users of a system would compromise another’s \\r\\nresources on a single system than it was that an attack would originate externally. Over years of \\r\\nuse, the ability of the Linux system to protect individual user accounts from one another has \\r\\nbeen tested, retested, and tested again. It is quite secure. The permissions system is what prevents the request for the scarce resource shown in Figure 3.2  \\r\\nfrom succeeding. The application’s process is not running with the user and group IDs that \\r\\nprotect the resource and, therefore, the application does not have read or write permission on \\r\\nthe driver. It does not have any way to obtain direct access to the resource. Starting with KitKat, Android included an adaptation of SE Linux that further enhanced \\r\\naccess controls. The original discretionary access control (DAC) model of permissions was not \\r\\n9780134096346_print.indb   4225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ee11d3c7-bc2c-4fbf-844d-17e9aeb8ab47":{"__data__":"{\"id_\":\"ee11d3c7-bc2c-4fbf-844d-17e9aeb8ab47\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BQV08bHZycOGrDQAUHBX+YMQD8+i+L6dTU4egg1x0Gg=\"},\"NEXT\":{\"nodeId\":\"38806129-47f2-4e37-96d9-2515045254c1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"GoPd+sPDAvSc+dTq1JNT60Txztb3AZhHJJA34F1DJKM=\"}},\"hash\":\"7yw0l8iMlF0lXGt0R+lmBY54VCpbrGe4aaehHpYrjOc=\",\"text\":\"43Exploring the Source\\r\\nenough to prevent a system from being compromised. For example, using only DAC, a highly \\r\\nprivileged system service (such as init), if compromised, might allow unfettered access to \\r\\nthe system. SE Linux for Android introduced mandatory access control (MAC). It allows each \\r\\nrunning process to be further constrained from a security standpoint. All applications, includ-\\r\\ning system processes, are assigned SE context that is enforced by the kernel. This limits the \\r\\ndamage any one process can do, if compromised. As Chapter 5 will demonstrate, writing and extending SE policies is a non-trivial task. Unless \\r\\nabsolutely necessary, not altering the SE policies that are provided in the AOSP tree is best \\r\\nbecause they are CDD/CTS compliant. This is particularly important if the device is to be certi-\\r\\nfied as an Android device. The series of unblocked arrows in Figure 3.2 show how Android applications actually do get \\r\\naccess to scarce resources when they need them. Instead of requesting the access directly, they \\r\\nuse an interprocess communication (IPC) mechanism, Binder, to make a request to a system \\r\\nservice. Normally, the IPC request is completely hidden from the caller because it is wrapped in \\r\\nin the Android API libraries. The client app sees only a call to a local method. When the client app wants to obtain access to a scarce resource, it simply calls one of the \\r\\nmethods in the Android API. The method call actually initiates an IPC conversation with \\r\\nAndroid service applications in one or more remote processes. These service processes, unlike \\r\\nthe client, have the necessary security privileges that do permit them to access the scarce \\r\\nresource. The service can coordinate the requests as appropriate and manage access and control \\r\\nclient use of the resource. Services provide fine-grained control over application access to the \\r\\nscarce resources they manage by declaring permissions. A permission is nothing more than a \\r\\nunique string that is recognized by the Android system. Android strictly manages permissions: \\r\\nApplications that want to use them must declare their intentions in their manifests and must \\r\\nget explicit approval from the application user before the permissions are granted. When an \\r\\napplication requests access to a scarce resource from a service, the service can provide access in \\r\\nthe firm knowledge that the application is acting on behalf of an informed user.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"38806129-47f2-4e37-96d9-2515045254c1":{"__data__":"{\"id_\":\"38806129-47f2-4e37-96d9-2515045254c1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BQV08bHZycOGrDQAUHBX+YMQD8+i+L6dTU4egg1x0Gg=\"},\"PREVIOUS\":{\"nodeId\":\"ee11d3c7-bc2c-4fbf-844d-17e9aeb8ab47\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7yw0l8iMlF0lXGt0R+lmBY54VCpbrGe4aaehHpYrjOc=\"}},\"hash\":\"GoPd+sPDAvSc+dTq1JNT60Txztb3AZhHJJA34F1DJKM=\",\"text\":\"This mechanism, access to resources through a proxy service, is the key to hardware access in \\r\\nAndroid. Exploring the Source\\r\\nThe last of this chapter’s high-level views of Android is, as promised, much more practical. It’s \\r\\ntime to look at the AOSP code-base. The primary source for Android code is the Android Open Source Project (AOSP) site at https://\\r\\nsource.android.com/. Android system developers should be familiar with this site whether it is \\r\\nthe source of the code for their project or not. Android originates here, and documentation and \\r\\nupdate information are available here before being available anywhere else. In particular, the Overview section of the AOSP website contains important information about \\r\\nsource branching and tagging strategies and the legal constraints on the use of the Android \\r\\n9780134096346_print.indb   4325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"52db26fc-149c-40cf-9693-6ff92e5b0818":{"__data__":"{\"id_\":\"52db26fc-149c-40cf-9693-6ff92e5b0818\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"t1nCIh0AzRJ3cWTD27E2107Xbvg8/bqXq4l2GTyC4/o=\"},\"NEXT\":{\"nodeId\":\"2c0cc92a-6610-4361-83bd-85372acf9c2a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PBDQg1ET78+ONfCi9UAuxPc0LAaAeM9oVC1kyC1Q56o=\"}},\"hash\":\"5Z2FTeJAvm/kDwhEpPiKsCMo/iUrkx/ua5Jg1gWEFBs=\",\"text\":\"44Chapter 3  Getting Started\\r\\nname, logos, and so on. Anyone working with Android code should read this documentation \\r\\nand be, at the least, generally familiar with it. Other Sources\\r\\nSeveral other sources for forks of the AOSP code exist, each with its own advantages and disad-\\r\\nvantages. Among these forks, perhaps the best known are AOKP and MIUI. Sadly, one of the \\r\\nmost important forks, CyanogenMod, has disappeared from the scene. The support community \\r\\nhas rebranded it as LineageOS, and it may return to viability in the future. What’s in the Box? The remaining sections of this chapter assume that the developer/build machine has been set \\r\\nup as described in Chapter 2. Let’s take a quick walk through the source, just to get the lay of \\r\\nthe land. Listing 3.2 shows the top-level directory structure.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c0cc92a-6610-4361-83bd-85372acf9c2a":{"__data__":"{\"id_\":\"2c0cc92a-6610-4361-83bd-85372acf9c2a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"t1nCIh0AzRJ3cWTD27E2107Xbvg8/bqXq4l2GTyC4/o=\"},\"PREVIOUS\":{\"nodeId\":\"52db26fc-149c-40cf-9693-6ff92e5b0818\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5Z2FTeJAvm/kDwhEpPiKsCMo/iUrkx/ua5Jg1gWEFBs=\"}},\"hash\":\"PBDQg1ET78+ONfCi9UAuxPc0LAaAeM9oVC1kyC1Q56o=\",\"text\":\"Listing 3.2 shows the top-level directory structure. Listing 3.2 Source Top Level\\r\\nlrwxr-xr-x    1 aosp  staff     19 Oct 13 09:26 Android.bp\\r\\n-r--r--r--    1 aosp  staff     92 Oct 13 09:26 Makefile\\r\\ndrwxr-xr-x   35 aosp  staff   1564 Oct 13 09:26 art\\r\\ndrwxr-xr-x   14 aosp  staff    816 Oct 13 09:26 bionic\\r\\ndrwxr-xr-x    3 aosp  staff    102 Oct 13 09:26 bootable\\r\\nlrwxr-xr-x    1 aosp  staff     26 Oct 13 09:26 bootstrap.bash\\r\\ndrwxr-xr-x    5 aosp  staff    374 Oct 13 09:26 build\\r\\ndrwxr-xr-x    3 aosp  staff    102 Oct 13 09:26 compatibility\\r\\ndrwxr-xr-x   12 aosp  staff    748 Oct 13 09:26 cts\\r\\ndrwxr-xr-x    8 aosp  staff    476 Oct 13 09:26 dalvik\\r\\ndrwxr-xr-x    5 aosp  staff    170 Oct 13 09:26 developers\\r\\ndrwxr-xr-x   20 aosp  staff    748 Oct 13 09:26 development\\r\\ndrwxr-xr-x   10 aosp  staff    340 Oct 13 09:27 device\\r\\ndrwxr-xr-x  310 aosp  staff  10540 Oct 13 09:30 external\\r\\ndrwxr-xr-x   15 aosp  staff    510 Oct 13 09:31 frameworks\\r\\ndrwxr-xr-x   12 aosp  staff    408 Oct 13 09:31 hardware\\r\\ndrwxr-xr-x    5 aosp  staff    170 Oct 13 09:31 kernel\\r\\ndrwxr-xr-x   20 aosp  staff   1258 Oct 13 09:31 libcore\\r\\ndrwxr-xr-x    8 aosp  staff    680 Oct 13 09:31 libnativehelper\\r\\ndrwxr-xr-x    9 aosp  staff    306 Oct 13 09:32 packages\\r\\ndrwxr-xr-x    6 aosp  staff    272 Oct 13 09:32 pdk\\r\\ndrwxr-xr-x   10 aosp  staff    374 Oct 13 09:32 platform_testing\\r\\ndrwxr-xr-x   30 aosp  staff   1020 Oct 13 09:36 prebuilts\\r\\ndrwxr-xr-x   24 aosp  staff   1054 Oct 13 09:36 sdk\\r\\ndrwxr-xr-x   37 aosp  staff   1258 Oct 13 09:36 system\\r\\ndrwxr-xr-x   10 aosp  staff    340 Oct 13 09:36 test\\r\\ndrwxr-xr-x    4 aosp  staff    136 Oct 13 09:36 toolchain\\r\\ndrwxr-xr-x   21 aosp  staff    714 Oct 13 09:37 tools\\r\\n9780134096346_print.indb   4425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0adfe9a2-b2c6-4965-a359-29904fe98ecf":{"__data__":"{\"id_\":\"0adfe9a2-b2c6-4965-a359-29904fe98ecf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OJbIwXuGwDE963yhb+UCBV7LiTl4LrCTiZyvlcO/cJE=\"}},\"hash\":\"/eVHfiRboqMVFHBxQel9TGZ+wAIfMqrpw1i5jFwrKE0=\",\"text\":\"45Exploring the Source\\r\\nAndroid.bp\\r\\nThe build system for Android is in transition. Up through the Marshmallow release, Android \\r\\nused an extension of GNU make as the underlying build system. The system used build files \\r\\nnamed Android.mk dispersed throughout the build tree, selected using a configuration describ-\\r\\ning the particular device being built. The process resulted in a large in-memory makefile to \\r\\ndo the build. While powerful, this approach had limitations and never scaled well, especially \\r\\nnoticeable as the Android source tree grew in size. Nougat introduced a new build system, Soong, which is inspired by Bazel and uses a Go syntax. With Soong, the Android.mk files are replaced with Android.bp (blue print) files. As announced \\r\\nin late 2020, Google will be further transitioning the build system to Bazel in the near future. Makefile\\r\\nMakefile is the top-level makefile used in the legacy GNU make build system. It is copied here \\r\\nfrom the build directory when repo sync is executed. art\\r\\nThe art directory contains the code for the Android Runtime (ART), an ahead-of-time compiled \\r\\nruntime that replaces the original Android virtual machine, Dalvik. bionic\\r\\nThe bionic directory contains the code for the Android Standard-C-like library, Bionic. The \\r\\nearlier section of this chapter, “System Libraries,” describes Bionic. bootable\\r\\nThe bootable directory contains the source for the recovery executable. Recovery is used to \\r\\napply OTA updates, write new firmware, and perform a factory data wipe. bootstrap.bash\\r\\nThe bootstrap.bash script is part of the new build system, Soong. build\\r\\nThe build directory contains the both the old and the new build systems. In particular, it \\r\\ncontains the shell script envsetup.sh, used to configure the build environment. In addition to \\r\\nsetting up required environment variables, this script introduces helper aliases and shell func-\\r\\ntions, such as lunch, which are used to configure and execute the build, as discussed in detail \\r\\nin Chapter 2. cts\\r\\nThe cts directory contains the Android Compatibility Test Suite tests. Passing these tests is \\r\\nthe minimum requirement for certification as an Android device. 9780134096346_print.indb   4525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"67ce45df-bd52-4495-beba-422a4f121884":{"__data__":"{\"id_\":\"67ce45df-bd52-4495-beba-422a4f121884\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"GYej/q95d17wxjFTVng6QneL0Xrgenmz/f9P9Bg9zAQ=\"},\"NEXT\":{\"nodeId\":\"47f41e1f-c06d-4626-bdfd-87a8f498619b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"P6MF5fqjjzl9RH7Nmniao0n72etKrvFN+GKr2h7aBgU=\"}},\"hash\":\"YM/uX4Vcwi5gg05WPU1nVpMDYR41xdxEtUH1oNqSxtU=\",\"text\":\"46Chapter 3  Getting Started\\r\\ndalvik\\r\\nThe dalvik directory contains the source for Android’s original VM, Dalvik. developers\\r\\nThe developers directory contains three different repositories of mostly legacy example code. The example Gradle plug-ins may be of interest. development\\r\\nThe development directory contains odds and ends that may be useful to developers. It \\r\\ncontains things such as tools for editing Android source using one of the popular IDEs, Eclipse \\r\\nor IntelliJ; more example code; developer debug applications; configurations for checkstyle, the \\r\\nemulator; and other tools. device\\r\\ndevice is an extremely important directory for a device developer. The Android source and \\r\\nbuild system are designed with the intention that all device-specific code—device-specific \\r\\nconfiguration of the build system, toolchain customizations, kernel selection, and even special-\\r\\nized versions of applications—go here. Although most device developers will find that very \\r\\nconstraining, it is a smart strategy to keep as much device-specific code as possible in this direc-\\r\\ntory. Only broader, more generic cross-platform changes should be made outside of the device-\\r\\nspecific directory. Much of the work in the rest of this book will happen in this directory. external\\r\\nexternal contains all the buildable packages that are used, but not maintained, as part of \\r\\nAndroid. It contains things like bouncycastle, the Android cryptography library; expat, an \\r\\nXML parser; junit, a standard testing framework; and so on. All of these things are essential \\r\\ncomponents of a running Android system but are obtained from external providers. Placing the \\r\\ncode for these components in this directory makes the dependency explicit and makes Android \\r\\nless susceptible to versioning issues. frameworks\\r\\nThe frameworks directory is the heart of Android. The public Android API is located \\r\\nhere, in the directory frameworks/base/core/java. Core system services such as the \\r\\nActivityManagerService and PackageManagerService are in frameworks/base/\\r\\nservices/core/java. Input event management and sensors code can be found under  \\r\\nframeworks/base/native. You can usually find native implementation code next to java \\r\\ndirectories in sibling jni directories and static resources in directories named res. hardware\\r\\nThe hardware directory contains the HAL. This is the abstraction layer code for common \\r\\ndevices: Wi-Fi, Bluetooth, and baseband radios; sensors; cameras; and so on.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"47f41e1f-c06d-4626-bdfd-87a8f498619b":{"__data__":"{\"id_\":\"47f41e1f-c06d-4626-bdfd-87a8f498619b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"GYej/q95d17wxjFTVng6QneL0Xrgenmz/f9P9Bg9zAQ=\"},\"PREVIOUS\":{\"nodeId\":\"67ce45df-bd52-4495-beba-422a4f121884\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YM/uX4Vcwi5gg05WPU1nVpMDYR41xdxEtUH1oNqSxtU=\"}},\"hash\":\"P6MF5fqjjzl9RH7Nmniao0n72etKrvFN+GKr2h7aBgU=\",\"text\":\"Although this \\r\\n9780134096346_print.indb   4625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c72c9529-1e1e-40d2-a1d3-425d87dc5ab7":{"__data__":"{\"id_\":\"c72c9529-1e1e-40d2-a1d3-425d87dc5ab7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cGdJih2o/RdmY+iSUQi/q4WvO3qhEXf+2Fh18WVUe4w=\"}},\"hash\":\"WXJmfUEK2ymu1DEO40R6AU1tIHQxnGXaQlZhgtpEIbw=\",\"text\":\"47Exploring the Source\\r\\ndirectory contains shim code for many common devices, it is the device directory that \\r\\ncontains customizations for a specific board and any one-off hardware on that board. libcore\\r\\nThe most interesting things that live in the libcore directory are the sources for the Apache \\r\\nHarmony base implementations of the Java API. For example, the file\\r\\nlibcore/ojluni/src/main/java/java/lang/Class.java\\r\\nis the source for Android’s implementation of the Java type Class. libnativehelper\\r\\nAs the name implies, the libnativehelper directory contains native helper functions. It is \\r\\nsort of a “commons” directory for HAL code that leverages Java Native Interface (JNI) to bridge \\r\\nthe gap between the runtime code and backing native code. packages\\r\\nThe packages directory contains applications that will be included as part of the system. The \\r\\ndirectory packages/apps, for instance, contains the standard DeskClock, Phone, and Camera \\r\\napps that are pre-installed (and not uninstallable) on a typical Android device. pdk\\r\\nThe pdk directory contains the platform development toolkit (PDK). It is given to original \\r\\ndevice manufacturers (ODMs) so that they can develop HAL and other specialization soft-\\r\\nware for their devices. The PDK is a subset of the full Android source, so this directory doesn’t \\r\\ncontain much that is useful as part of the Android source tree. platform-testing\\r\\nThe platform-testing directory contains odds and ends of tools for testing device \\r\\nfunctionality. prebuilts\\r\\nThe large prebuilts directory is very similar to the external directory, except that the things \\r\\nthat it contains are not built as part of the system build process. For instance, it contains the \\r\\nbinaries for the clang and gcc, C compilers; the Python and Go language SDKs; and the kernel \\r\\nfor the QEMU-based Android emulator. sdk\\r\\nsdk, a mostly historical directory, contains source for some of the Android development tools \\r\\nas they were just before Android Studio was introduced. Since Android Studio, the SDK tools \\r\\nhave their own, partially overlapping, repo-maintained build tree (see http://tools.android.com/ \\r\\nbuild). Most of the code here is obsolete. 9780134096346_print.indb   4725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f22cfc1a-d58e-44ed-8381-f866f2ff368c":{"__data__":"{\"id_\":\"f22cfc1a-d58e-44ed-8381-f866f2ff368c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"I5U6/xkQdUT8ldHLbO91VgqGquc4Wzeee7eRvndveYg=\"}},\"hash\":\"H4gaZAPsDRYSPDVitDABvjah6wBFmfNBC4lz7b/L+EA=\",\"text\":\"48Chapter 3  Getting Started\\r\\nsystem\\r\\nAnother very important directory, system contains the native daemons, system libraries, and \\r\\ndata essential to an Android system. In here are the sources for vold, the SE Linux policies, and \\r\\nthe system trusted certificates. These are the parts of the Android system that are illustrated in \\r\\nthe top-left of Figure 3.1 and discussed in Chapter 7. toolchain\\r\\nThe toolchain directory contains a set of automated tests that can be executed to gather \\r\\nbenchmarking data. Building and running these tests require patching the source tree. tools\\r\\nThe tools directory contains a number of helper tools, such as ones to ease the creation of \\r\\nAndroid AVDs and to analyze atrace data captures. out\\r\\nThe out directory is not part of the build environment maintained by repo. It is, however, the \\r\\ndefault scratchpad for the build system. None of the previously mentioned directories should \\r\\nbe affected in any way by a system build. From the build’s point of view, they are all read only. Restoring a build environment to its pristine state should always be possible by simply deleting \\r\\nthis directory. All intermediates as well as the final build artifacts are put here. Summary\\r\\nThis chapter has been a very high-level tour of the Android system. It inspects Android from \\r\\nthree very broad points of view: as a series of layers of abstraction, starting at the hardware and \\r\\nending with user applications; as a client-server architecture in which servers regulate access to \\r\\nscarce resources; and as a build environment, with source and tools for generating the running \\r\\nsystem. Subsequent chapters walk up the stack illustrated in Figure 3.1, illustrating the relation between \\r\\nthe source code and the running system and demonstrating at each layer how to customize \\r\\nbehavior. 9780134096346_print.indb   4825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c704e0c7-3737-4d35-91cc-50d768f70b3f":{"__data__":"{\"id_\":\"c704e0c7-3737-4d35-91cc-50d768f70b3f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"COG/C6kCy+eZMUscOGjciSIEhJIrM07PuTt3RifoXHU=\"}},\"hash\":\"UrM1i4oFTseRKsB9McKTjCuOV7SduD6ozwJAPjvTv8o=\",\"text\":\"4\\r\\nThe Kernel\\r\\nAs mentioned previously, the Android system uses a Linux kernel. The Linux kernel is a very \\r\\nlarge and extremely complex piece of software. Some developers spend their entire careers \\r\\nunderstanding and modifying it. It is the subject of many books, including the excellent \\r\\nBuilding Embedded Linux Systems, 2nd ed. (Yaghmour, 2008) and Linux Device Drivers, 3rd ed. (Corbet, 2005). This chapter is not, of course, a substitute for any of those books—or for a  \\r\\nfew years of experience. Bringing up a kernel for a brand new device—setting up a build environment, choosing the \\r\\ncorrect compilation flags, and getting all the necessary drivers debugged and working—is a dark \\r\\nart that is likely to require a significant investment of time. A developer with specific kernel \\r\\nporting experience is likely to be able to accomplish the task in a fraction of the time required \\r\\nby even a very talented and motivated novice. The Linux kernel is incorporated into an Android system as an essential but completely opaque \\r\\nbinary. It is—at least from the point of view of the Android build system—just a dependency. There are, however, several very specific modifications, kernel modules, that are unique to \\r\\nthe Android system. Those features are the central topic of this chapter. The Linux Kernel\\r\\nThe kernel creates the virtual environment in which applications live. As discussed in Chapter 1,  \\r\\nmany kinds of kernels exist and create many kinds of environments. Linux is a member of the \\r\\nfamily of kernels that provide two broad environmental features to client applications: a virtual \\r\\nexecution space and a file system. Other members of this class (chosen fairly arbitrarily) are the \\r\\nWindows NT Kernel, Dartmouth DTSS, and Digital Equipment Corporation’s RSTS/E. The astute reader will notice that two of these three kernels, Dartmouth DTSS and Digital \\r\\nEquipment Corporation’s RSTS/E, are not exactly household words today. That is because \\r\\nwithin its family of operating systems, UNIX-like systems are by far the dominant genus. In \\r\\nparticular, the Linux species has pretty much won the evolutionary battle, especially in the \\r\\nembedded system niche. 9780134096346_print.indb   4925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2dbc4503-75d7-40ba-b336-1789e9b2f523":{"__data__":"{\"id_\":\"2dbc4503-75d7-40ba-b336-1789e9b2f523\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4kDzkXDLpaWRI9QTSNiHriyP3E7ogwbeKN8QpTTEC2Q=\"},\"NEXT\":{\"nodeId\":\"eb7bf19e-f111-4e9c-a189-9764bdea02a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PFFbJjeHUWLZ8rGe3zs46j8ictA9HjQPGV9U74Gz7cE=\"}},\"hash\":\"QrvNPBOxogMuFoyGGCwubx+TQibjkkFPK8Z7uLdmDt4=\",\"text\":\"50Chapter 4  The Kernel\\r\\nIn addition to managing a virtual environment, the Linux kernel is also Android’s porting \\r\\nlayer. The process of porting Android to a new device is, for the most part, porting Linux \\r\\nto that device and then pulling the rest of the Android stack over on top of it. The Android \\r\\nvirtual machines, Dalvik and ART, discussed in Chapter 6 and responsible for executing the \\r\\nvirtual machine code into which Java language programs for the Android system are compiled, \\r\\nalthough analogs of the JVM, have very little to do with portability. Kernel Process Management\\r\\nMost modern computing hardware has, at its center, a small number (probably more than one \\r\\nbut probably less than ten) of processing units (also called cores or sometimes processors). These are the components of a device that execute machine instructions. A piece of computing hardware is capable of running a number of simultaneous processes more \\r\\nor less equal to the number of processors that it has. Simplistically, each core starts executing \\r\\na stream of instructions when the power to the chip is turned on and stops when the power is \\r\\nturned off. The other essential ingredient for a von Neumann architecture computer is memory. Modern \\r\\nhardware typically has several different kinds of memory, each of which is a different balance \\r\\nbetween cost and speed: registers, several levels of cache, and on-board and external RAM \\r\\n(random-access memory). In an ideal, theoretical machine, each core has identical capabilities and identical access to all \\r\\nthe memory. In practice, there are exceptions. Registers and, perhaps, some kinds of cache may \\r\\nbe available only to a specific, associated core. Most memory, though, is globally accessible \\r\\nto all the processors. In the hardware environment, it is completely unremarkable for a value \\r\\nwritten by one CPU to be overwritten by another. Note\\r\\nNot all hardware is ideal. In an attempt to get the most bang for the buck, some hardware has \\r\\nspecialized cores that have differing capabilities: more cores for common tasks, fewer for less \\r\\ncommon. One example of unequal core capability is hardware popular for many Android devices, \\r\\nwhich is capable of adjusting the clock speeds independently for each core. On such hardware, \\r\\ntasks of lesser importance may be assigned to slower processors. The first job of the kernel is to create a virtual execution environment on top of the hardware.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"eb7bf19e-f111-4e9c-a189-9764bdea02a0":{"__data__":"{\"id_\":\"eb7bf19e-f111-4e9c-a189-9764bdea02a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4kDzkXDLpaWRI9QTSNiHriyP3E7ogwbeKN8QpTTEC2Q=\"},\"PREVIOUS\":{\"nodeId\":\"2dbc4503-75d7-40ba-b336-1789e9b2f523\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"QrvNPBOxogMuFoyGGCwubx+TQibjkkFPK8Z7uLdmDt4=\"}},\"hash\":\"PFFbJjeHUWLZ8rGe3zs46j8ictA9HjQPGV9U74Gz7cE=\",\"text\":\"The first job of the kernel is to create a virtual execution environment on top of the hardware. This virtual environment is very different from the hardware environment described earlier. In \\r\\nit, a nearly infinite number of processes appear to run simultaneously. Each process appears to \\r\\nuse one or more virtual CPUs to execute instructions and to have its own, private address space \\r\\n9780134096346_print.indb   5025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"376b6163-97ba-47d0-ad2d-d795c3b8d25b":{"__data__":"{\"id_\":\"376b6163-97ba-47d0-ad2d-d795c3b8d25b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OJ8NcYi5h6NvYnO64C1qLb+Zh7J+dsY1t1RlMYEyvbU=\"},\"NEXT\":{\"nodeId\":\"cc5209a8-0f5f-4deb-8108-462f87cd5f09\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZvnuA+mx8e6lx+9tsVY9Q1B2PJmNlg3kV65YG2fat08=\"}},\"hash\":\"61Sur5pINjfh3m7iy0gkyIGbEeq2mcFPghg54Oqh1AM=\",\"text\":\"51The Linux Kernel\\r\\nin which the memory cannot be accessed from other processes. In this virtual environment, the \\r\\nCPUs are ideal and identical, and it would be very surprising if one process could overwrite a \\r\\nmemory that belonged to another. This is the environment with which most application devel-\\r\\nopers are familiar. Note\\r\\nWithin this book, a thread of execution, or simply thread, is a sequence of instructions  \\r\\nexecuted one at a time in order by a single, possibly virtual CPU, or processor. A process is  \\r\\none or more threads of execution with a single, private address space not shared with any \\r\\nother process. An application is a collection of code with a single purpose. Frequently, but not always, an appli-\\r\\ncation runs as a single process. Kernel Memory Management\\r\\nManaging memory is the second major task of a kernel. Hardware memory can roughly be \\r\\ndivided into two categories: random-access and block-structured. Information can be \\r\\nstored into or retrieved from random access memory, RAM, exactly as its name suggests, simply \\r\\nby addressing the specific cell of the memory that is of interest. When the CPU requires the \\r\\nvalue that it stored at address 3730, it requests the value at address 3730 explicitly as part \\r\\nof executing an instruction. Access to address 3730 is completely independent of access to \\r\\naddresses 3731 or 3729. In an ideal computer, all memory would probably be random access. In actuality, because \\r\\nrandom-access memory is expensive, most computer systems also have block-structured \\r\\nmemory. Block structured memory is usually cheaper, bigger, and, most likely, slower to access \\r\\nthan random access memory. Think of a disk drive or its modern equivalent, a solid-state  \\r\\ndrive (SSD). Whereas a processor can directly access random access memory by address, accessing block-\\r\\nstructured memory is considerably more complicated. Typically, a process that needs data that \\r\\nis stored in block-structured memory must first reserve a contiguous piece of random-access \\r\\nmemory. Next, it must communicate to the block-structured memory device that contains the \\r\\ninformation that it needs, the addresses of both the block of memory in which it is interested, \\r\\nand the location and size of the RAM it has reserved. This initiates a data transfer. The block-structured memory device copies the contents of the \\r\\nrequested block from its internal store to the RAM.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cc5209a8-0f5f-4deb-8108-462f87cd5f09":{"__data__":"{\"id_\":\"cc5209a8-0f5f-4deb-8108-462f87cd5f09\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OJ8NcYi5h6NvYnO64C1qLb+Zh7J+dsY1t1RlMYEyvbU=\"},\"PREVIOUS\":{\"nodeId\":\"376b6163-97ba-47d0-ad2d-d795c3b8d25b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"61Sur5pINjfh3m7iy0gkyIGbEeq2mcFPghg54Oqh1AM=\"}},\"hash\":\"ZvnuA+mx8e6lx+9tsVY9Q1B2PJmNlg3kV65YG2fat08=\",\"text\":\"When the transfer is complete, it notifies \\r\\nthe processor. The requested block of memory is now available as RAM. 9780134096346_print.indb   5125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"06fb35fa-d4b9-4912-9278-d4be0161cada":{"__data__":"{\"id_\":\"06fb35fa-d4b9-4912-9278-d4be0161cada\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"N9Z7X6OcirdNjS+Hrgb3XtKPv46kSsj55YIMuo40/B0=\"},\"NEXT\":{\"nodeId\":\"9ccbe727-6b55-45eb-878e-3bdfb3f75272\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BMn0L9sgrdzZrwjxTF+BpvDKSifjAdcwPmO4xY38rOo=\"}},\"hash\":\"nFOIMVhv5r2xZFTTgl0Zv9TA5vftsFNncaJuvyZfY/0=\",\"text\":\"52Chapter 4  The Kernel\\r\\nNote\\r\\nThe differentiation between the two different types of memory is not arbitrary. Of course, it is \\r\\ntrue that both types of memory are block structured and addressable: The only real distinction \\r\\nis in the size of the block and the amount of time that it takes to move one of them across \\r\\na device’s data paths. As usual, though, size matters—a lot. If the number of bits in a block \\r\\nis less than or equal to the number of bits that can be transported simultaneously through \\r\\nthe device (the device word size), the memory is considered random access. If the number of \\r\\nbits in the memory block requires that the block be transferred sequentially, word by word, the \\r\\ndevice is considered block structured. Block-structured memory is used in two very important ways. The first is as a way of creating \\r\\nthe virtual memory spaces in which applications run. When an application process is not actively using some part of its memory (it is waiting; \\r\\nperhaps for user input or for a certain amount of time to elapse) the kernel, using a process \\r\\nthat is exactly the reverse of that just described, can free the memory for other use. The kernel \\r\\nmarks a section of the application’s RAM as unavailable and requests that a block-structured \\r\\ndevice store it. After the transfer is complete (the contents of the RAM have been “swapped” to block storage), \\r\\nthe RAM can be reallocated for use by other processes and other purposes. Of course, when \\r\\nthe paused application once again needs access to the piece of its address space that has been \\r\\nswapped to disk, the kernel must, once more, reverse the process. It reallocates memory for the \\r\\nstored data, reads it from the block storage device, and replaces the contents exactly as they \\r\\nwere the last time the application looked. This is virtual memory, one of the main tools \\r\\nnecessary to allow the sum of the memory used by all the applications running on a device to \\r\\nbe much greater than the amount of hardware RAM that is installed in the device. At the time Android was designed, the block-structured memory devices on most computers \\r\\nwere hard drives: spinning magnetic disks with moveable read-write heads. Hard drives are fairly \\r\\nfragile and running them requires amounts of power that are out of the question for a battery-\\r\\npowered device.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9ccbe727-6b55-45eb-878e-3bdfb3f75272":{"__data__":"{\"id_\":\"9ccbe727-6b55-45eb-878e-3bdfb3f75272\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"N9Z7X6OcirdNjS+Hrgb3XtKPv46kSsj55YIMuo40/B0=\"},\"PREVIOUS\":{\"nodeId\":\"06fb35fa-d4b9-4912-9278-d4be0161cada\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nFOIMVhv5r2xZFTTgl0Zv9TA5vftsFNncaJuvyZfY/0=\"}},\"hash\":\"BMn0L9sgrdzZrwjxTF+BpvDKSifjAdcwPmO4xY38rOo=\",\"text\":\"Mobile devices, in contrast, even then used solid-state memory, similar in many respects to the \\r\\nmemory ubiquitous in modern laptops: SSDs. The big difference between solid-state memory \\r\\nthen and now is that, in 2002, solid-state memory devices deteriorated significantly with each \\r\\nwrite operation. At that time, a bit on a disc drive might be good for millions of read/write \\r\\ncycles, whereas a bit on a flash card might fail after only tens of thousands of cycles. The implication is that, although storing data persistently was possible, the operating system \\r\\nhad to be quite parsimonious in its use. In particular, trying to use flash memory as virtual \\r\\nmemory swap space, in addition to being slow, would severely limit the life of the device. Starting with Android 4.4 (KitKat), Android included a kernel module, zram, to provide swap \\r\\ncapability. zram targets devices with very little  memory: as low as 512MB of RAM. It provides \\r\\n9780134096346_print.indb   5225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7f33a9ac-9294-467e-8255-76ffb14a34ff":{"__data__":"{\"id_\":\"7f33a9ac-9294-467e-8255-76ffb14a34ff\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/KtVD+D810Sax0PxzBFD6oWa9iWTz+uw5cOXjCsMExw=\"},\"NEXT\":{\"nodeId\":\"fe3eae2e-4c99-48d7-a89e-21225726254e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Sp7bErfy4mWay3y6dyk58C1drvPDcflJDRA4vfgpyjo=\"}},\"hash\":\"o1ytzAropdzn5IAqTUMGe9WheGTd4iGQe1JpxhpbO1I=\",\"text\":\"53The Android Kernel\\r\\na compressed memory space used to swap out process pages, just as they are swapped to non-\\r\\nvolatile block storage. This may seem counterintuitive: The kernel carves out a bit of RAM \\r\\nto use as swap space for application memory pages. The zram module, though,  compresses \\r\\npages as they are stored using a fast compress/decompress algorithm: LZ4 or LZO. Because it \\r\\nuses RAM as a virtualized swap space, zram is fast and efficient. zram notwithstanding, lack of \\r\\nvirtual memory is second only to power as the most important constraint in the design of the \\r\\nAndroid system. The kernel’s second memory management trick is the catalog tree. Moving blocks of stored \\r\\ninformation in and out of RAM is nifty, but it doesn’t go very far toward the nearly univer-\\r\\nsally accepted abstraction for long-term memory, a tree of folders (catalogs) containing both \\r\\nother folders and sequentially accessible files. The kernel has one or more components, called \\r\\nfile systems, which manage different varieties of block-structured memory hardware and use \\r\\ndifferent strategies to create the tree-of-files abstraction. An important thing to remember about the file tree is that the kernel creates it out of thin air. A block-structured memory device has not even the faint whiff of a tree structure about it. It \\r\\nis just a big, flat array of bits. If a kernel can make block-storage look like a tree-structured file \\r\\nsystem, it can make nearly anything else look like a file just as easily. This capability comes up \\r\\nagain in Chapter 5, when we discuss Android’s security and again in Chapters 8 and 10 in the \\r\\ndiscussion of Android’s hardware abstraction layer. The Android Kernel\\r\\nAlthough the Android system is based on the Linux kernel, it is not the case that any Linux \\r\\nkernel will support Android. The Android system requires several very special kernel features. At least two of these features have been the source of extended and sometimes acrimonious \\r\\ndiscussion in the Linux community. These features can be a major hurdle in porting Android  \\r\\nto a new device: finding a kernel that supports both the target hardware and Android at the \\r\\nsame time. Like most kernels, Linux implements a plug-in system that allows it to be customized for \\r\\nvarious hardware and software requirements. These plug-ins are either kernel modules or \\r\\ndevice drivers.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fe3eae2e-4c99-48d7-a89e-21225726254e":{"__data__":"{\"id_\":\"fe3eae2e-4c99-48d7-a89e-21225726254e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/KtVD+D810Sax0PxzBFD6oWa9iWTz+uw5cOXjCsMExw=\"},\"PREVIOUS\":{\"nodeId\":\"7f33a9ac-9294-467e-8255-76ffb14a34ff\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"o1ytzAropdzn5IAqTUMGe9WheGTd4iGQe1JpxhpbO1I=\"}},\"hash\":\"Sp7bErfy4mWay3y6dyk58C1drvPDcflJDRA4vfgpyjo=\",\"text\":\"These plug-ins are either kernel modules or \\r\\ndevice drivers. The kernel software components that manage a mouse, a keyboard, speakers, \\r\\nand network communication are all examples of device drivers. Device drivers have two roles. First, a driver may manage a specific piece of hardware. The \\r\\ndriver may be programmed with the device protocol nearly at the level of controlling voltages \\r\\nand pulse timing. Usually, the driver is also the public interface to the hardware. The driver is the definition of \\r\\nthe hardware API. Drivers usually expose, for application use, either a random-access or a block-\\r\\nstructured virtual interface that abstracts the details of a hardware device away from the rest of \\r\\nthe system: no other code need be aware of it. An application that wants to use a given hard-\\r\\nware mechanism will do so by connecting with that mechanism’s device driver and interacting \\r\\nwith it according to the driver’s interface. 9780134096346_print.indb   5325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fe7e3d14-6995-4abf-8382-dbd0757a47f1":{"__data__":"{\"id_\":\"fe7e3d14-6995-4abf-8382-dbd0757a47f1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hEc7uMtJQrHFI/xjUi6qaGB8dravu1X7Dlos4Ddpy5s=\"},\"NEXT\":{\"nodeId\":\"5ae1244f-ea31-4088-b50c-f56d83b7df59\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"P2w6hvtxlA+dRZxTF+hXIro1RQ7JFucwQU5QW91YOb0=\"}},\"hash\":\"Fyfei2dRjjIK3Tq3AqMJzIuiuD/ORkJutdE4E95QaLw=\",\"text\":\"54Chapter 4  The Kernel\\r\\nAndroid adds an additional layer of abstraction between user space Android framework \\r\\nprocesses and the hardware, called the Hardware Abstraction Layer (HAL). This additional \\r\\nlayer of abstraction allows Android to use a single API for several different kernel drivers that \\r\\nprovide access to similar types of devices, despite the fact that each is controlled by its own \\r\\ndriver and that each of the drivers defines it its own, unique API. Device drivers execute as part of the kernel. A driver can do anything any other part of the \\r\\nkernel can do, from scribbling in the memory of any application to changing what instructions \\r\\nit executes. An error in the driver frequently manifests as a “kernel panic” and is likely to bring \\r\\ndown the entire system. Because of this, by convention, device drivers are as small and simple \\r\\nas they can possibly be. In their seminal book, Linux Device Drivers, authors Corbet et al. admonish:\\r\\n... it emphasizes that the role of a device driver is providing mechanism, not policy. The distinction between mechanism and policy is one of the best ideas behind the \\r\\nUnix design. Most programming problems can indeed be split into two parts: “what \\r\\ncapabilities are to be provided” (the mechanism) and “how those capabilities can be \\r\\nused” (the policy). If the two issues are addressed by different parts of the program, \\r\\nor even by different programs altogether, the software package is much easier to de-\\r\\nvelop and to adapt to particular needs. (Corbet, Rubini, and Kroah-Hartman, 2005)\\r\\nThis is probably the reason that the Linux community has been so reluctant to accept the \\r\\ndevice drivers required by Android, in particular Binder and wakelocks. For quite a while, the Linux kernel used in Android systems was a complete fork of the Linux \\r\\nkernel. Android kernels could not be downloaded from the canonical Linux website, kernel.org. Instead, they were hosted on Google websites. The ensuing debates between the two communi-\\r\\nties, Linux and Android, were unpleasant and prolonged. Note\\r\\nAs an example of the conflict, wakelocks and the debate surrounding them are discussed in \\r\\ndetail by Rafael J.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5ae1244f-ea31-4088-b50c-f56d83b7df59":{"__data__":"{\"id_\":\"5ae1244f-ea31-4088-b50c-f56d83b7df59\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hEc7uMtJQrHFI/xjUi6qaGB8dravu1X7Dlos4Ddpy5s=\"},\"PREVIOUS\":{\"nodeId\":\"fe7e3d14-6995-4abf-8382-dbd0757a47f1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Fyfei2dRjjIK3Tq3AqMJzIuiuD/ORkJutdE4E95QaLw=\"}},\"hash\":\"P2w6hvtxlA+dRZxTF+hXIro1RQ7JFucwQU5QW91YOb0=\",\"text\":\"Wysocki in his Linux Weekly News article, “An alternative to suspend block-\\r\\ners” (Wysocki, 2010) and the articles it references at https://lwn.net/Articles/416690/. Although it might be optimistic to say that the rift has been healed, a certain pragmatism \\r\\nhas prevailed. Android has accomplished what no other Linux distribution has accomplished: \\r\\nmaking Linux ubiquitous. By orders of magnitude, most devices using Linux today are Android \\r\\ndevices. Android is popular, and the Linux community has proved itself mature enough to \\r\\nassimilate the popularity. Downloading an Android Linux from kernel.org is now possible. Android Kernel Features\\r\\nBuilding an accurate catalog of the differences between a generic Linux kernel and a kernel \\r\\nnecessary to run an Android device is difficult. Several people have attempted it over the years, \\r\\nand a small but useful body of literature on the topic exists (mostly rooted at http://elinux.org). 9780134096346_print.indb   5425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f0bb12ea-cf12-4134-8e99-5acab626f296":{"__data__":"{\"id_\":\"f0bb12ea-cf12-4134-8e99-5acab626f296\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"K06CRh6UoPF5B67O3YxtBpKlgV7MOZ1+Gna1A8LCbbI=\"},\"NEXT\":{\"nodeId\":\"0540dfce-5203-4eac-a2c1-fbc502702f83\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YwsTEKVQWzzWnfjVK4DvJGwYGmGjyamVKt7BSytNfwk=\"}},\"hash\":\"lpOsl9Dnnt675D+f0hjsAbrYGfB36NedPcBcPEMr0Pw=\",\"text\":\"55The Android Kernel\\r\\nBecause the Android kernels are stored in git, creating the patch set necessary to create the \\r\\nAndroid kernel from the vanilla kernel on which it is based is a relatively straightforward \\r\\nprocess. However, at last check, the exercise creates something just under 300 patches with a \\r\\ncombined size of around 4 megabytes. What do all these patches do? The following subsec-\\r\\ntions, while not exhaustive, describe most of the important features specific to Android kernels. Wakelocks\\r\\nSourceNow part of the standard Linux kernel\\r\\nOne of the special features required by Android is the wakelock. Wakelocks or suspend-\\r\\nblockers are a form of opportunistic power control. By default, most Linux devices are running. Although it may seem obvious to point that out, \\r\\nit is important because at the time that Android was developed, most Linux devices were also \\r\\nattached to practically infinite supplies of power. On a mobile device, the most important resource by far is the battery. At the time that Android \\r\\nwas in its early development, running a standard Linux on a mobile device meant battery life \\r\\nthat was measured in minutes, not in days. One of the first hurdles the original Android team \\r\\nhad to leap was dramatically reducing the battery drain. An important step in this direction \\r\\nwas reversing the default wake state. Like the dormouse from Alice in Wonderland, the Linux \\r\\nkernel on an Android device prefers to be asleep. Obviously, although being asleep is great for battery life, it isn’t much good for getting work \\r\\ndone. Enter wakelocks. A wakelock is a simple binary flag. The kernel is constantly trying to go to sleep. If any wake-\\r\\nlocks are set, however, they prevent it from doing so. Application programs seize wakelocks and \\r\\nbecome responsible for keeping the kernel (and, by extension, the hardware) awake until they \\r\\ncomplete whatever useful work they are doing. A responsible application, when it is done with \\r\\nuseful work, releases any wakelocks it holds. If no other applications are holding wakelocks, the \\r\\nkernel immediately puts the device to sleep. The original implementation of wakelocks from the Google/Android team contained a serious \\r\\nrace condition (described in detail in the article cited in the earlier Note).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0540dfce-5203-4eac-a2c1-fbc502702f83":{"__data__":"{\"id_\":\"0540dfce-5203-4eac-a2c1-fbc502702f83\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"K06CRh6UoPF5B67O3YxtBpKlgV7MOZ1+Gna1A8LCbbI=\"},\"PREVIOUS\":{\"nodeId\":\"f0bb12ea-cf12-4134-8e99-5acab626f296\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lpOsl9Dnnt675D+f0hjsAbrYGfB36NedPcBcPEMr0Pw=\"}},\"hash\":\"YwsTEKVQWzzWnfjVK4DvJGwYGmGjyamVKt7BSytNfwk=\",\"text\":\"Because of this race \\r\\ncondition, the possibility existed for the kernel to fail to notice an application’s request for a \\r\\nwakelock if the request happened while the kernel was already in the process of powering down \\r\\nthe device. A device could sleep despite an application’s attempt to keep it awake. In 2010, as part of healing the fork between the Android and the standard Linux kernels, Arve \\r\\nHjønnevåg rewrote the original Google/Android patches, renamed them, “Suspend Blockers,” \\r\\nand resubmitted them. They were accepted into the mainline kernel source. Subsequently, \\r\\nAndroid wakelocks were rewritten. They are now based on standard Linux suspend blockers. In addition, Android introduced two additional power management tools in version 6.0 \\r\\n(Marshmallow): Doze and App Standby. When a device enters Doze mode, it may continue to \\r\\n9780134096346_print.indb   5525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1f31021f-f85b-4470-beca-265ad7c9301f":{"__data__":"{\"id_\":\"1f31021f-f85b-4470-beca-265ad7c9301f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6oNNrQbVnGCzv+rd+5pyV3I8KKMfVhTATFDzYQrgSX4=\"},\"NEXT\":{\"nodeId\":\"c74d51fb-57d7-495c-8807-ac909c592a3b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Pac+CY2SdWUBZp8pUCv0zkgKHTwsdF6F4biSRQSznIM=\"}},\"hash\":\"XPoc4HzxysZ+NLAEjEiVmYHm4FhNyRbS+hI5AUgMlHA=\",\"text\":\"56Chapter 4  The Kernel\\r\\noperate but not at full power. The mode imposes some severe restrictions on apps, including \\r\\nlimits on network access, Wi-Fi scanning, and other power-hungry operations. Because a device \\r\\nonly enters Doze mode when the user is not actively interacting with it, the system assumes \\r\\nthat applications do not have any valid reason for holding a wakelock and completely ignores \\r\\nthem. Binder\\r\\nGoogle Source            Several locations, most commonly  \\r\\n/drivers/staging/android/binder.c\\r\\nCanonical Source/drivers/android/binder.c \\r\\nExposed as/dev/binder\\r\\nBinder is an interprocess communication system based on shared memory that, as introduced \\r\\nin Chapter 3, is at the very heart of Android. It turns up again in Chapter 10, in the context \\r\\nof Binderized HAL (Project Treble). Binder’s central role in the Android environment becomes \\r\\napparent with a reconsideration of wakelocks and the way Android handles memory pressure. As described in the previous section, the wakelock system places the responsibility for allowing \\r\\na device to sleep with the user application. It takes only a moment’s consideration to realize \\r\\nthat that situation is simply too dangerous to permit. Clearly, a malicious application could \\r\\nstage the equivalent of a denial-of-service attack against a device on which it is installed, drain-\\r\\ning the battery by keeping the device awake. It is at least as likely, though, that an ignorant or \\r\\nincompetently programmed application might seize a wakelock and then crash before releasing \\r\\nit. Unless the system has some way of cleaning up after the crashed application, the wakelock it \\r\\nseized will keep the device awake until its battery dies. To protect itself from this kind of problem, Android uses the architecture described earlier in \\r\\nthe book in Figure 3.2, the Android System Model. The scarce resources, in this case, wake-\\r\\nlocks, are not directly available to user applications. Instead, they are controlled by a system \\r\\nservice. Specifically, wakelocks are controlled by the PowerManager. User applications cannot \\r\\ndirectly seize wakelocks. The Android system security model prevents normal applications from \\r\\ninteracting with them directly. Only system services, in this case, PowerManagerService and \\r\\nits process, are granted the necessary permission.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c74d51fb-57d7-495c-8807-ac909c592a3b":{"__data__":"{\"id_\":\"c74d51fb-57d7-495c-8807-ac909c592a3b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6oNNrQbVnGCzv+rd+5pyV3I8KKMfVhTATFDzYQrgSX4=\"},\"PREVIOUS\":{\"nodeId\":\"1f31021f-f85b-4470-beca-265ad7c9301f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XPoc4HzxysZ+NLAEjEiVmYHm4FhNyRbS+hI5AUgMlHA=\"}},\"hash\":\"Pac+CY2SdWUBZp8pUCv0zkgKHTwsdF6F4biSRQSznIM=\",\"text\":\"Instead, applications use the interprocess \\r\\ncommunications system, Binder, to ask the system service to seize a wakelock on their behalf. Another situation that requires similar treatment is that of low memory, described in more \\r\\ndetail in the following section. Android does not have the near-infinite memory space avail-\\r\\nable to it that desktop Linux systems do. Instead, it must ruthlessly control available RAM and \\r\\nwill kill processes to reclaim memory for use by another, more important process. Like the DoS \\r\\nexample mentioned earlier, this could result in a process being killed while holding resources or \\r\\nIPC connections to other processes without being given a chance to release those resources. Most interprocess communications systems are peer-to-peer and are, themselves, applications. Common IPC systems, whether System V IPC centered implementations of the D-Bus protocol, \\r\\n9780134096346_print.indb   5625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a7d53572-051c-40d2-8212-6b1de7ca217f":{"__data__":"{\"id_\":\"a7d53572-051c-40d2-8212-6b1de7ca217f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iorNgtwOWQgAvNua1QPiZcrxGBGf+l0QZ3fTVxmPLA8=\"},\"NEXT\":{\"nodeId\":\"69698a5e-95fb-45d8-a276-d4a6a358a868\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"FAuQzsmjS+fzQ+FHcceHe+F/4lGE6DltA1VD9yk7dfI=\"}},\"hash\":\"Nx792F06K7Craiepgry1sSkTAf6oFkLqWTiW9gxsKcs=\",\"text\":\"57The Android Kernel\\r\\nor based on some other architecture, are just applications. Though frequently special system-\\r\\nlevel applications, they support communications architectures in which all participants are \\r\\nequivalent. In these systems, distinguishing between a client that doesn’t happen to be talking \\r\\nat the moment and one that cannot talk and will never talk again (for example, it has crashed) \\r\\ncan be quite difficult. Recall that the kernel is the thing that creates processes. It is the absolute authority on which \\r\\nprocesses exist and which have terminated. Because it is part of the kernel, Binder has immedi-\\r\\nate access to this information. Binder can tell, without a shadow of a doubt, whether one of \\r\\nthe ends of an interprocess conversation is simply occupied elsewhere or whether it will never \\r\\nrespond again. It can supply that information to other clients. This is the solution to the wakelock and low memory killer problems. A system service controls \\r\\nwakelocks. Client applications do not have sufficient permission to seize their own wakelocks. Instead, they use Binder IPC to request that the system service (which does have permission) \\r\\nhold a wakelock on their behalf. The system service, in return, registers with Binder for notifi-\\r\\ncation of the death of the client app. Now the system service can guarantee that the wakelock \\r\\nwill be released, either because the client app explicitly releases it or because it is eventually \\r\\nterminated. Processes using Binder to communicate with each other can register for notification \\r\\nabout a peer process’s death. This allows any application to manage resources that are no longer \\r\\nrequired because a peer ceased to exist. Binder started life as part of BeOS, the would-be replacement for Apple’s Classic Macintosh \\r\\nOS. Apple had other ideas. It offered a scant $125 million for BeOS. BeOS, for better or worse, \\r\\nrejected the offer. Instead, Apple ended up buying NeXTSTEP (along with Steve Jobs) for  \\r\\n$429 million. BeOS (and the rights to Binder) were eventually sold to Palm, Inc., where Binder \\r\\nbecame the basis for their Cobalt OS. Around the time of the demise of Palm, a version of \\r\\nBinder called OpenBinder was released as open source under the Mozilla Public License  \\r\\nVersion 1.1. Android’s version of Binder, while clearly related, is none of these.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"69698a5e-95fb-45d8-a276-d4a6a358a868":{"__data__":"{\"id_\":\"69698a5e-95fb-45d8-a276-d4a6a358a868\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iorNgtwOWQgAvNua1QPiZcrxGBGf+l0QZ3fTVxmPLA8=\"},\"PREVIOUS\":{\"nodeId\":\"a7d53572-051c-40d2-8212-6b1de7ca217f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Nx792F06K7Craiepgry1sSkTAf6oFkLqWTiW9gxsKcs=\"}},\"hash\":\"FAuQzsmjS+fzQ+FHcceHe+F/4lGE6DltA1VD9yk7dfI=\",\"text\":\"Android’s version of Binder, while clearly related, is none of these. It was reimplemented from \\r\\nscratch near the start of the Android project and added to Google’s fork of the kernel tree in \\r\\nearly 2009. Over time, it became available from kernel.org (www.kernel.org/) but was relegated \\r\\nto a special “staging” area (drivers/staging/android). Late in 2014—again, with much debate \\r\\nabout its security and stability—it was moved into the “real” part of the kernel (drivers/\\r\\nandroid). There has been discussion (though little progress) toward writing a binder-compatible \\r\\nlibrary that uses the stable, supported Linux kbus mechanism. At the moment, Android abso-\\r\\nlutely depends on Binder, and other Linux systems are warned to use it at their peril. Low Memory Killer\\r\\nGoogle Sourcedrivers/staging/android/lowmemorykiller.c\\r\\nCanonical Sourcedrivers/staging/android/lowmemorykiller.c\\r\\nDaemon Sourcesystem/core/lmkd\\r\\nExposed asOriginally /proc/<pid>/oom_adj, now /proc/<pid>/oom_score_adj\\r\\n9780134096346_print.indb   5725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"26937d06-fee4-4c2e-aa5b-e55c05757e30":{"__data__":"{\"id_\":\"26937d06-fee4-4c2e-aa5b-e55c05757e30\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zOyjHAxV39H0kSWi7jA+t4hTblOEayoCCpltvFhiSYg=\"},\"NEXT\":{\"nodeId\":\"1d5f9651-d363-4c24-85ee-4cb3be119023\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ghy54G/vUNyr+RYk6sv0sPPdPOIzxIvQ6KIlNocFRZU=\"}},\"hash\":\"WCvg7euiqYins6Lz7QEtfd5nrU88fwkD9xyKRugn08I=\",\"text\":\"58Chapter 4  The Kernel\\r\\nAs noted earlier, the early Android systems had to be careful about their use of persistent \\r\\nmemory. Flash memory at the time simply could not support swapping and virtual memory. The Linux kernels for Android devices are configured with little (zram) or no swap space. This presents a conundrum. The device is practically guaranteed to run out of memory! If the \\r\\nuser of a mobile device keeps starting new applications, in the manner to which they have \\r\\nbecome accustomed with their other computer devices, eventually memory is filled and the \\r\\nsystem cannot start another. This almost never happens on, for instance, a laptop, because \\r\\nolder applications are swapped to the nearly limitless virtual memory space. Without virtual \\r\\nmemory, though, a device runs out of memory fairly quickly. Given this constraint, only a couple of possible choices exist. Users would never tolerate a \\r\\ndevice on which an incoming call (which causes the phone application to run) generated an \\r\\nout-of-memory condition and forced the user to select an application to terminate, before \\r\\nallowing her to answer the call. The plausible alternatives are either that there is a limit on the \\r\\nnumber of applications that can be running at any given time so that there is always sufficient \\r\\nmemory to run an important app or that the operating system can terminate any application \\r\\nto recover the memory that the application is using. Most mobile operating systems chose the former path—limiting the number of applications \\r\\nthat the OS allows a user to run. Users of most mobile OSs were limited to a small number of \\r\\nsimultaneously running applications (usually one). A few designated special applications—\\r\\nmaybe a camera, a music player, or the phone—were immune from the constraint. Most appli-\\r\\ncations, though, had to be run one at a time. However, Android from the very start allowed users to start as many applications as they \\r\\nliked. It is just that Android reserved the right kill those applications, any time it liked! This \\r\\nis, perhaps, the hardest thing for new Android developers to understand. On most comput-\\r\\ners, terminating an application abruptly (Unix signal kill -9) is a very rare occurrence. On \\r\\nAndroid, it is the most common way for an application to end. All Linux kernels have an out-of-memory killer.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1d5f9651-d363-4c24-85ee-4cb3be119023":{"__data__":"{\"id_\":\"1d5f9651-d363-4c24-85ee-4cb3be119023\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zOyjHAxV39H0kSWi7jA+t4hTblOEayoCCpltvFhiSYg=\"},\"PREVIOUS\":{\"nodeId\":\"26937d06-fee4-4c2e-aa5b-e55c05757e30\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"WCvg7euiqYins6Lz7QEtfd5nrU88fwkD9xyKRugn08I=\"}},\"hash\":\"ghy54G/vUNyr+RYk6sv0sPPdPOIzxIvQ6KIlNocFRZU=\",\"text\":\"All Linux kernels have an out-of-memory killer. If some process on a server in a rack some-\\r\\nwhere misbehaves and runs out of memory, it is much preferable that the operator be able \\r\\nto connect to the device remotely, perhaps conduct some simple analysis, and then do a soft \\r\\nreboot, rather than having to walk into the data center, locate the crippled machine, and turn \\r\\nit off and on again. If the machine is out of memory, though, it is possible that no memory is \\r\\nleft in which to start the remote connection application. The Linux out-of-memory killer addresses this situation. When the kernel finds that it is danger-\\r\\nously low on memory, it will kill some processes to start others based on a priority table. Android, which, as described earlier, is constantly in a dangerous low memory situation, simply \\r\\nextends this facility. The Android OOM-Killer is dynamic and based on two tables. The first table is static, is constructed \\r\\nat startup, and creates several priority groups for applications. For each of the priority groups, it \\r\\nestablishes the memory threshold at which applications of that priority may be killed. On the  \\r\\noriginal Android systems this table always identified 31 priorities, numbered from –16 to 15. 9780134096346_print.indb   5825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2bb566d5-58c7-4532-a5df-82c9ab155d83":{"__data__":"{\"id_\":\"2bb566d5-58c7-4532-a5df-82c9ab155d83\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HRjySv18U34C3iGTr7ZVSresu8VGUA2m3aZfA6njJ9k=\"},\"NEXT\":{\"nodeId\":\"d0a6c791-f5bb-4986-9769-72736f2b63da\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KTb9EDHxkBNeEzqAofz05IJV0wVjshEmpzorkbNGkPk=\"}},\"hash\":\"NciNYOz4EdY2p4587NymJ3XYWx8kuHQHZrWc7i5CdN4=\",\"text\":\"59The Android Kernel\\r\\nOn a device with 192MB of RAM, for instance, the table specified that applications with prior-\\r\\nity 15 should be killed if there were less than 8192 4k pages of free memory. On the other \\r\\nhand, applications with priority 0 could be killed only if there were fewer than 2048 pages of \\r\\nfree memory. The second table assigns each process a priority dynamically, depending on how important it is \\r\\nto the user at the moment. Android’s Activity Manager Service manages this second table. Starting with Android 4.4 (KitKat), the low memory killer was moved out of the kernel and \\r\\ninto user space as the low memory killer daemon (lmkd). This daemon is accessed via the \\r\\nActivity Manager Service over named socket, when it is available. When the daemon is not \\r\\npresent in the system, Activity Manager Service reverts to the kernel low memory killer. The \\r\\ndaemon leverages existing Linux kernel vmpressure events to perform the same operations as \\r\\nthe kernel driver. The daemon, however, is more extensible and can be configured by OEMs. As of Android 9 and kernel 4.12, the kernel low memory killer (but not its behavior) has been \\r\\ncompletely removed from Android. Shared Memory: Ashmem\\r\\nGoogle SourceOriginally mm/ashmem.c, now drivers/staging/android/ashmem.c\\r\\nCanonical Sourcedrivers/staging/android/ashmem.c \\r\\nExposed as/dev/ashmem\\r\\nBinder works, as noted earlier, by mapping a single block of physical memory into the virtual \\r\\nmemory spaces of one or more applications. Any write by any of the applications sharing the \\r\\nmemory block will be visible in all the other applications. Interprocess communication is very \\r\\nefficient when no copies are necessary; the recipient sees the exact bits that the sender wrote. Ashmem makes this possible. The Android team found the existing Linux shared memory system “shmem” insufficient for \\r\\ntheir needs and introduced a variant “ashmem. ” Ashmem, according to its documentation is, \\r\\n“a new shared memory allocator, similar to POSIX SHM but with different behavior and sport-\\r\\ning a simpler file-based API. ” Its distinctive feature appears to be the ability to shed memory \\r\\nunder pressure. Ashmem-allocated memory is reference counted and depends on Binder for \\r\\nsharing the reference to the ashmem-allocated memory between processes.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d0a6c791-f5bb-4986-9769-72736f2b63da":{"__data__":"{\"id_\":\"d0a6c791-f5bb-4986-9769-72736f2b63da\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HRjySv18U34C3iGTr7ZVSresu8VGUA2m3aZfA6njJ9k=\"},\"PREVIOUS\":{\"nodeId\":\"2bb566d5-58c7-4532-a5df-82c9ab155d83\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NciNYOz4EdY2p4587NymJ3XYWx8kuHQHZrWc7i5CdN4=\"}},\"hash\":\"KTb9EDHxkBNeEzqAofz05IJV0wVjshEmpzorkbNGkPk=\",\"text\":\"PMEM and Ion: Shared Memory\\r\\nGoogle Source            Pmem was drivers/misc/pmem.c\\r\\nIon was drivers/gpu/ion/* but is now  \\r\\ndrivers/staging/android/ion/*\\r\\nCanonical Sourcedrivers/staging/android/ion/* \\r\\nExposed as/dev/ion\\r\\n9780134096346_print.indb   5925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"90c45171-b8f5-4a61-8a6d-47af914ac84e":{"__data__":"{\"id_\":\"90c45171-b8f5-4a61-8a6d-47af914ac84e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ny7c10k4H4JRsYXU3ZJeXJe8jbVdmkHzJxXZLqZ+/Y4=\"},\"NEXT\":{\"nodeId\":\"feb2613d-4fc0-43bc-a4d3-32a6828e3be1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"d1bVD9E4DSLgKSIXpaRq3gAlo0jo903zmyFgipsXYlo=\"}},\"hash\":\"5y0c6Ls759qS8rKi45AWQgAL3PrNqPvxEO6f6QMY+xE=\",\"text\":\"60Chapter 4  The Kernel\\r\\nAndroid needs other ways of sharing memory across processes. The most obvious of these \\r\\nneeds comes from drawing on the screen. One of the remarkable things about Android at the time of its first releases was its commitment \\r\\nto OpenGL. From the very start, the Android system included as standard components both \\r\\n2D (Skia) and 3D graphics libraries. The latter library was a software implementation of the \\r\\nOpenGL API, providing OpenGL ES 2 compatibility. Because Android included this library as \\r\\npart of the system, it guaranteed that an application that used the OpenGL API would run on \\r\\nany Android device, whether the device itself supported OpenGL or not. To operate efficiently, both the 2D and 3D drawing libraries require that the client be able \\r\\nto write to the memory that represents the pixels on the screen. Early versions of Android \\r\\nreserved the physical memory and mapped it into each process as it took control of the screen. Rendering, then, simply meant writing bits into the screen’s physical memory. The kernel module that allowed this mapping of specific regions of physical memory in early \\r\\nAndroid was called pmem. Pmem is very similar to its cousin ashmem, except that where \\r\\nashmem allows the sharing of blocks of virtual memory, pmem allocates and shares blocks of \\r\\ncontiguous physical memory. For a time, Skia was removed from Android and the entire rendering chain depended on \\r\\ncompiling small graphics programs run by a GPU. Google has reversed direction on this, \\r\\nhowever. Starting with Android 9, Skia has resurfaced and has a GL backend. The Android \\r\\nsystem also needs a way to reserve and share blocks of physical memory to handle the camera. Modern Androids use Ion, pmem’s successor, to manage pools of shared physical memory. Logger\\r\\nGoogle Sourcedrivers/staging/android/logger.c (obsolete)\\r\\nCanonical Source        No longer used\\r\\nDaemon SourceSystem/core/logd\\r\\nExposed as                See Table 4.1\\r\\nAs another consequence of having to be careful about its use of persistent memory, Android \\r\\ncannot write its system logs, as they normally are, to files. Spewing kilobytes per minute to a \\r\\nflash memory–based file system—even if the files were carefully managed to prevent filling the \\r\\nlimited space on a mobile device—would wear out the flash memory very quickly.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"feb2613d-4fc0-43bc-a4d3-32a6828e3be1":{"__data__":"{\"id_\":\"feb2613d-4fc0-43bc-a4d3-32a6828e3be1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ny7c10k4H4JRsYXU3ZJeXJe8jbVdmkHzJxXZLqZ+/Y4=\"},\"PREVIOUS\":{\"nodeId\":\"90c45171-b8f5-4a61-8a6d-47af914ac84e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5y0c6Ls759qS8rKi45AWQgAL3PrNqPvxEO6f6QMY+xE=\"}},\"hash\":\"d1bVD9E4DSLgKSIXpaRq3gAlo0jo903zmyFgipsXYlo=\",\"text\":\"Android addressed this problem by writing its logs to a circular buffer in the kernel: Logs do \\r\\nnot go to files. If the drawbacks of this idea are not immediately obvious, they will become \\r\\nobvious during attempts to diagnose an unmonitored system crash. When an Android system \\r\\nreboots, its memory is reinitialized and all logs are lost. The Android kernel logger supports four separate log buffers, shown in Table 4.1. 9780134096346_print.indb   6025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"db71f0db-75fc-477c-ad0a-702da736810e":{"__data__":"{\"id_\":\"db71f0db-75fc-477c-ad0a-702da736810e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hoOvO6bo7vxLhCE+4aeaPPQRDCjLsyziGxl0TCUFRKY=\"},\"NEXT\":{\"nodeId\":\"2e912b10-4364-41e1-be29-b7f3de6c23f3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OL4J1AW7LcHbg/L+YTo55LKdJYh7RTHKmo9a5c0AVXM=\"}},\"hash\":\"DoruKHzNRxYqSP+wdGDgmx22ziHPn8lNysno7M45Dbo=\",\"text\":\"61The Android Kernel\\r\\nTable 4.1 Android Logs\\r\\nLocationUse\\r\\n/dev/log/mainApplication logs. Where messages from the android.util.Log class go. /dev/log/systemSystem logs. Where messages from the hidden android.util.Slog \\r\\nclass and the native liblog library go. /dev/log/eventsBinary log of system events: garbage collections, ActivityManager state, \\r\\nand so on\\r\\n/dev/log/radioLogs from the baseband processor\\r\\nNote that although these logs are catalogued in the file system, they are not files. This is an \\r\\nexample of the kernel’s ability to make anything, including a circular buffer in its own memory, \\r\\nlook like a file. As with the low memory killer support, logging functionality has also been moved into user \\r\\nspace with the daemon logd. The daemon allows OEMs to adjust log buffer size instead of \\r\\nforcing a fixed size circular buffer size as the kernel driver did. The daemon also supports \\r\\nan additional buffer type: a crash buffer. The crash buffer provides a single place for process \\r\\ncrashes, which usually include stack backtraces and register information and is not intermixed \\r\\nwith the main logcat output. Unlike the kernel logger interface, logd exposes a named socket \\r\\nfor processes to read and write logs. The details of this, however, are abstracted away in the \\r\\nAndroid logging APIs. Alarms\\r\\nGoogle SourceOriginally drivers/rtc/alarm.c, now  \\r\\ndrivers/staging/android/alarm-dev.c, replaced by POSIX alarm  \\r\\ntimers, kernel/time/alarmtimer.c\\r\\nCanonical Sourcekernel/time/alarmtimer.c\\r\\nExposed as/dev/alarm (Android Alarm Driver)\\r\\ntimerfd_create and /dev/rtc*\\r\\nAndroid depends on the ability to wake itself up at a pre-scheduled time. Even when in their \\r\\nlowest power modes, nearly all mobile chipsets include a clock capable of sending an interrupt \\r\\nsignal that causes the rest of the chip to power up. Android supports this capability with the \\r\\nalarm driver, which allows applications to request that the kernel schedule a wakeup call at a \\r\\nspecific time. This, in combination with a wakelock, allows an application to schedule itself at a \\r\\ntime at which the system is otherwise asleep. Android initially used a custom driver to supply this alarm and wake functionality. That driver \\r\\nwas developed outside of the Linux kernel community and did not adhere to the best practices \\r\\nfollowed by the kernel team.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2e912b10-4364-41e1-be29-b7f3de6c23f3":{"__data__":"{\"id_\":\"2e912b10-4364-41e1-be29-b7f3de6c23f3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hoOvO6bo7vxLhCE+4aeaPPQRDCjLsyziGxl0TCUFRKY=\"},\"PREVIOUS\":{\"nodeId\":\"db71f0db-75fc-477c-ad0a-702da736810e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DoruKHzNRxYqSP+wdGDgmx22ziHPn8lNysno7M45Dbo=\"}},\"hash\":\"OL4J1AW7LcHbg/L+YTo55LKdJYh7RTHKmo9a5c0AVXM=\",\"text\":\"It was never accepted into the tree. In 2011, John Stultz of Linaro \\r\\nintroduced a POSIX alarm driver into the Linux kernel. This driver eventually replaced the \\r\\n9780134096346_print.indb   6125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c74ca66b-ab29-4b31-a133-3cd4c4206555":{"__data__":"{\"id_\":\"c74ca66b-ab29-4b31-a133-3cd4c4206555\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"u/156lj2uOA1fFk6xNMTs6tNUaabBeaTQgQ6VLZDmfY=\"},\"NEXT\":{\"nodeId\":\"ff08b052-d589-40a9-b3e5-3055ed7fd3fa\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"tuzAH8ZrOZqBecK9V7S4x/iBCb6PRLT1pqjoRm6UP/s=\"}},\"hash\":\"C0D/O3WxiOzIAgJB1f9D2KxnvyhcQN+CMR21vLsxdFI=\",\"text\":\"62Chapter 4  The Kernel\\r\\nAndroid alarm driver in the kernel and in 2016 became the officially supported alarm support \\r\\nfor Android. Paranoid Networking\\r\\nGoogle Sourcenet/ipv4/af_inet.c, net/ipv6/af_inet6.c, drivers/net/tun.c, \\r\\nsecurity/commoncap.c\\r\\nCanonical Sourcenet/ipv4/af_inet.c, net/ipv6/af_inet6.c, drivers/net/tun.c, \\r\\nsecurity/commoncap.c\\r\\nExposed asN/A\\r\\nOn most operating systems, networking, if it is available at all, is provided to all applications as \\r\\na general service. The designers of Android thought it important that users be able to control \\r\\naccess to the network. There are several reasons for this. Perhaps the most important is that use of the network may, \\r\\ndepending on your carrier, cost money. If something costs money, the user ought to be able \\r\\nto control it. Another possible reason is that a user may want control over what information \\r\\nleaves her device. She may be willing to give an application access to her list of contacts or to \\r\\nthe network, but never both. Paranoid networking, unlike the previous Android-specific kernel features, is not a separate \\r\\ndriver. Instead, Android implements network access control with a very simple bit of code in \\r\\nthe IP v4 network driver, switched by the compile time flag, CONFIG_ANDROID_PARANOID_\\r\\nNETWORK. This code simply checks the group ID (gid) of the application making the network \\r\\nrequest. Unless the application belongs to the process group AID_INET, the request is denied. On an Android system, each new application is assigned its own unique user ID when it is \\r\\ninstalled. At the same time, it may be assigned to one or more process groups. If the application \\r\\nrequests access to the network, it is assigned to the AID_INET group and will thus be able to use \\r\\nthe network. Android’s security features and its use of group and user IDs are the subject of the next chapter. Other Custom Drivers\\r\\nThese are just the largest, most easily categorized features. In those four megabytes of patches \\r\\nthere are, clearly, many other customizations.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ff08b052-d589-40a9-b3e5-3055ed7fd3fa":{"__data__":"{\"id_\":\"ff08b052-d589-40a9-b3e5-3055ed7fd3fa\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"u/156lj2uOA1fFk6xNMTs6tNUaabBeaTQgQ6VLZDmfY=\"},\"PREVIOUS\":{\"nodeId\":\"c74ca66b-ab29-4b31-a133-3cd4c4206555\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"C0D/O3WxiOzIAgJB1f9D2KxnvyhcQN+CMR21vLsxdFI=\"}},\"hash\":\"tuzAH8ZrOZqBecK9V7S4x/iBCb6PRLT1pqjoRm6UP/s=\",\"text\":\"In those four megabytes of patches \\r\\nthere are, clearly, many other customizations. Among these smaller changes are specializations \\r\\nfor the USB subsystem, the Bluetooth subsystem, and a RAM console that stores kernel panic \\r\\ninformation across reboots, in /proc/last_kmsg. Building a Kernel\\r\\nFortunately, starting from scratch is not usually necessary. Most hardware manufacturers recog-\\r\\nnize the barrier that kernel development represents for potential customers. Most SoC vendors \\r\\n9780134096346_print.indb   6225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"eff603ff-c5a6-4337-83fe-a3845fa8d670":{"__data__":"{\"id_\":\"eff603ff-c5a6-4337-83fe-a3845fa8d670\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"c7uQWtk7M/4t24MP7V8hHufbSAC2d9a+jufhLtv3XKA=\"},\"NEXT\":{\"nodeId\":\"6203af4a-0c79-4e99-914b-0f4254925b81\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bk0WMlt2B4v+tBsBJAMkqQwoawFzgrP2ZcQDaTyfub4=\"}},\"hash\":\"6SUub8PQmvEe8ZsnGZoV+YW1u+ybxKLU3ZqiJX8EKg4=\",\"text\":\"63Building a Kernel\\r\\nsupply pre-built kernels—probably even Android compatible kernels—along with their chips. Nearly any vendor for external hardware (sensors, touchscreens, network interfaces, and so on) \\r\\nwill provide, at the very least, a template Linux driver. Also, unless the target hardware is bleed-\\r\\ning edge, it is very likely that a community effort addresses it. Note\\r\\nAs mentioned in the introduction, the complexities of getting a kernel running on any specific \\r\\npiece of hardware can be quite daunting. This chapter is not a recipe for building a kernel for \\r\\nyour device. In fact, even if you follow the process step-by-step for building a kernel for one of \\r\\nthe hardware devices discussed in this chapter, you may not end up with a working system! Tiny \\r\\nchanges in versions, both in hardware and in the software, may break things in ways that are \\r\\nquite mysterious and difficult to diagnose. Although we absolutely guarantee that we were able \\r\\nto build a working system, as described, with our copy of the source and our hardware, there is \\r\\nno way to guarantee that the same steps, even followed carefully, will work for you and yours. The Build System\\r\\nAs noted in Chapter 2, the best way to build a Linux kernel is on a machine running Linux. As \\r\\nwith building the AOSP source, building the kernel takes significant compute power. Investing \\r\\nin a build machine with fast processors and plenty of memory may be worthwhile. Also, as noted in Chapter 2, a virtual machine running a Linux distribution on a normal devel-\\r\\nopment host machine is a plausible second choice. Attempting to build a kernel, native, on a \\r\\nnon-Linux machine may work in specific cases but is not generally a workable solution. The examples here use a standard installation of Ubuntu 16.04 running either on bare metal or \\r\\nin a VirtualBox. Downloading the Source\\r\\nThe choice of source is probably the most important decision. Obviously, a kernel that is \\r\\nknown to work for a given chipset, even if it will require significant modification, is the best \\r\\nchoice. Time spent in research, even significant time, can easily be a very worthwhile trade-off \\r\\nagainst frustration and bring-up time. Probably the best starting point is the chipset manufac-\\r\\nturer and any attached support community. Many board manufacturers supply not only custom kernels but extensive systems for custom-\\r\\nizing the AOSP build.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6203af4a-0c79-4e99-914b-0f4254925b81":{"__data__":"{\"id_\":\"6203af4a-0c79-4e99-914b-0f4254925b81\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"c7uQWtk7M/4t24MP7V8hHufbSAC2d9a+jufhLtv3XKA=\"},\"PREVIOUS\":{\"nodeId\":\"eff603ff-c5a6-4337-83fe-a3845fa8d670\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6SUub8PQmvEe8ZsnGZoV+YW1u+ybxKLU3ZqiJX8EKg4=\"}},\"hash\":\"bk0WMlt2B4v+tBsBJAMkqQwoawFzgrP2ZcQDaTyfub4=\",\"text\":\"Many board manufacturers supply not only custom kernels but extensive systems for custom-\\r\\nizing the AOSP build. They include the various board configuration files necessary to appropri-\\r\\nately customize AOSP to run on the board. Many of them also integrate the kernel build into \\r\\nthe AOSP build system. Although these third-party systems definitely can work, several of them ride roughshod over \\r\\nthe standard AOSP tools: git, make, and so on. Different SoC manufacturers support Android \\r\\nwith different levels of tools usage, and some are better than others. Regardless, where it is \\r\\n9780134096346_print.indb   6325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9f991503-a675-46f5-8c6f-b4e874075dd6":{"__data__":"{\"id_\":\"9f991503-a675-46f5-8c6f-b4e874075dd6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x7ZJcW4HH2BenPCC6iVVyBXyozECHl0ILlrnORHDD2M=\"},\"NEXT\":{\"nodeId\":\"2de002cb-5c29-4202-a5a8-34e1b2983581\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"+oe2WN2CCUaukNWPDMA2osMjGl6IqKMit6ocAyXJKuY=\"}},\"hash\":\"JpTtFcUIQyO3+PrwGTclfEO2hFap66GT6t5S52hSpnc=\",\"text\":\"64Chapter 4  The Kernel\\r\\npossible to do so, try to keep the patches that these systems install on their own git branch. At \\r\\nthe very least, this will make cherry-picking patches from the AOSP source much easier to do. Opinion\\r\\nGoogle stopped building the kernel as part of the source in 2009 and made it, instead, an \\r\\nexternal binary dependency. The AOSP build is plenty complex already. Build the kernel sepa-\\r\\nrately. Drop it into the Android build when it changes. Automating the process of moving the kernel after it is built to a canonical location in the AOSP \\r\\nsource is entirely reasonable. Trying to make the AOSP source build depend, in the sense of \\r\\nmake, on the kernel build, exponentially increases the complexity of the build system. You have \\r\\nbeen warned! This example builds a 4.9.176 kernel for the HiKey-960 board, used throughout this book as the \\r\\nAcme project. At the time of this writing, the AOSP pages include instructions for download-\\r\\ning and building the kernel for this board at https://source.android.com/setup/build/devices. However, in the interest of completeness, a walkthrough of acquiring the sources and building \\r\\nthem follows. Begin by setting up the AOSP tree, acquired in Chapter 2, to build for the HiKey-960:\\r\\n$ source build/envsetup.sh\\r\\n$ lunch hikey960-userdebug\\r\\nNext, clone the kernel git repository into this tree, creating a new subdirectory, hikey-linaro. Immediately change into this directory. $ git clone https://android.googlesource.com/kernel/hikey-linaro\\r\\n$ cd hikey-linaro\\r\\nThis is the kernel source directory. Unlike kernel source trees provided by some vendors, this \\r\\ntree contains the git history for the HiKey kernel. Before attempting to build, the tree needs to \\r\\nbe checked out to the correct release branch, android-hikey-linaro-4.9:\\r\\n$ git checkout -b android-hikey-linaro-4.9 origin/android-hikey-linaro-4.9\\r\\nThe kernel build depends on a couple of environment variables. The first is clear enough:\\r\\n$ export ARCH=arm64\\r\\nThe HiKey-960 is based on a Cortex A73/A53 ARM processor in a big.LITTLE architecture.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2de002cb-5c29-4202-a5a8-34e1b2983581":{"__data__":"{\"id_\":\"2de002cb-5c29-4202-a5a8-34e1b2983581\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x7ZJcW4HH2BenPCC6iVVyBXyozECHl0ILlrnORHDD2M=\"},\"PREVIOUS\":{\"nodeId\":\"9f991503-a675-46f5-8c6f-b4e874075dd6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JpTtFcUIQyO3+PrwGTclfEO2hFap66GT6t5S52hSpnc=\"}},\"hash\":\"+oe2WN2CCUaukNWPDMA2osMjGl6IqKMit6ocAyXJKuY=\",\"text\":\"The \\r\\ntarget architecture is arm64. The next variable setting is significantly more mysterious:\\r\\n$ export CROSS_COMPILE=aarch64-linux-android-\\r\\nDo not make the mistake of thinking that this is a directory path or a specific file! This is a \\r\\nstring that is prefixed onto the names of the major tools that the build process uses when \\r\\nbuilding the kernel. If you look in the directory, ../prebuilts/gcc/linux-x86//aarch64/\\r\\naarch64-linux-android-4.9/bin/, you will find common tools—ar, cpp, gcc, ld, and so \\r\\non—all with prefixes added to their names. The value of the variable must exactly be the prefix! 9780134096346_print.indb   6425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2a57b49e-6f11-4b9a-af45-0bef4719371b":{"__data__":"{\"id_\":\"2a57b49e-6f11-4b9a-af45-0bef4719371b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3lYo5asQciJUQqD982Ep3j6LrJ5KI0wiR1hWXA2lNRI=\"},\"NEXT\":{\"nodeId\":\"68cf49ae-0a86-4b21-a783-1fbb52793a9f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vosm9bIcoGv8nyBOoifGA6k0dcvc3ayMe/MhmHHur4A=\"}},\"hash\":\"pnUtQZymSv4wIzHVkyhwbeUvIiidFYApVgxu6B7aVjg=\",\"text\":\"65Building a Kernel\\r\\nTo make sure that the build directory is in a pristine state, clean it:\\r\\n$ make distclean\\r\\nThe distclean target does not remove the config file (discussed in a moment). To do that, so \\r\\nthat you start completely fresh, also type:\\r\\n$ make mrproper\\r\\nThe first step in building a kernel is configuring the build. “Configuring” sets the values of a \\r\\ncouple hundred compile time variables that determine which drivers and which other features \\r\\nare included in the new kernel. If the target device is already running, often the config file that was used to build it can be \\r\\nfound in the directory /proc/config.gz. Simply download it, expand it, put it in the kernel \\r\\ndirectory, and rename it .config. The Hi-Key960 kernel source contains a basic config file for the board. Use make to copy it into \\r\\nplace:\\r\\n$ make hikey960_defconfig\\r\\n  HOSTCC  scripts/basic/fixdep\\r\\n  HOSTCC  scripts/kconfig/conf.o\\r\\n  SHIPPED scripts/kconfig/zconf.tab.c\\r\\n  SHIPPED scripts/kconfig/zconf.lex.c\\r\\n  SHIPPED scripts/kconfig/zconf.hash.c\\r\\n  HOSTCC  scripts/kconfig/zconf.tab.o\\r\\n  HOSTLD  scripts/kconfig/conf\\r\\n#\\r\\n# configuration written to .config\\r\\n#\\r\\nTo make any further customizations, just edit the .config file. Alternatively, the kernel build \\r\\nsystem includes a simple menu-driven system for editing the config. Invoke it, again using \\r\\nmake:\\r\\n$ make menuconfig\\r\\nmenuconfig requires the ncurses libraries. If the build system does not have them installed, \\r\\nyou will need to use the apt-get package management tool on Ubuntu to install them before \\r\\ninvoking it. Finally, build the kernel. It will take about 15 minutes on a bare-metal machine with a quad \\r\\ncore i7 processor, 16GB of RAM, and SSD storage.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"68cf49ae-0a86-4b21-a783-1fbb52793a9f":{"__data__":"{\"id_\":\"68cf49ae-0a86-4b21-a783-1fbb52793a9f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3lYo5asQciJUQqD982Ep3j6LrJ5KI0wiR1hWXA2lNRI=\"},\"PREVIOUS\":{\"nodeId\":\"2a57b49e-6f11-4b9a-af45-0bef4719371b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pnUtQZymSv4wIzHVkyhwbeUvIiidFYApVgxu6B7aVjg=\"}},\"hash\":\"vosm9bIcoGv8nyBOoifGA6k0dcvc3ayMe/MhmHHur4A=\",\"text\":\"make -j4\\r\\n  \\r\\nscripts/kconfig/conf  --silentoldconfig Kconfig\\r\\n  CHK     include/config/kernel.release\\r\\n  WRAP    arch/arm64/include/generated/asm/bugs.h\\r\\n  WRAP    arch/arm64/include/generated/asm/clkdev.h\\r\\n  WRAP    arch/arm64/include/generated/asm/cputime.h\\r\\n  WRAP    arch/arm64/include/generated/asm/delay.h\\r\\n9780134096346_print.indb   6525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a7b76924-607e-41ce-aeb7-b31031c02b91":{"__data__":"{\"id_\":\"a7b76924-607e-41ce-aeb7-b31031c02b91\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KONXmoxtPJbDGladUtYn8XW0pdalGdz2JuqU8+sZ9zM=\"}},\"hash\":\"JjoRrPv/upHWvvoeEe2Z5O1UJ3phQB+tRnaiyhs1F+4=\",\"text\":\"66Chapter 4  The Kernel\\r\\n  WRAP    arch/arm64/include/generated/asm/div64.h\\r\\n  WRAP    arch/arm64/include/generated/asm/dma.h\\r\\n  WRAP    arch/arm64/include/generated/asm/dma-contiguous.h\\r\\n  WRAP    arch/arm64/include/generated/asm/early_ioremap.h\\r\\n  CHK     include/generated/uapi/linux/version.h\\r\\n  WRAP    arch/arm64/include/generated/asm/emergency-restart.h\\r\\n  UPD     include/generated/uapi/linux/version.h\\r\\n  ... As previously mentioned, kernel builds and flashing for each SoC and/or board are unique and \\r\\nare not something this book can discuss in general. In the case of the HiKey-960, though, now \\r\\nthat the kernel has been built, we’ll need to create a new boot image that contains it. To do \\r\\nthis, first copy the device tree information and the newly created kernel image into the HiKey-\\r\\n960 device tree, and then rebuild the boot image. $ cp arch/arm64/boot/dts/hisilicon/hi3660-hikey960.tdb ../device/linaro/hikey- kernel/hi3660-hikey960.tdb-4.9\\r\\n$ cp arch/arm64/boot/Image.gz-tdb ../device/linaro/hikey-kernel/Image.gz-dtb-hikey960-4.9\\r\\n$ cd .. $ m bootimage –j 24\\r\\nSummary\\r\\nThis section introduced the Linux kernel as modified for Android. It describes the major \\r\\nfeatures unique to the Android version of the kernel: Binder, the low-memory killer, wakelocks, \\r\\nand several others. In addition, it demonstrated building a kernel for an Android system. Although not a recipe for \\r\\nbuilding a kernel for every Android system, it is a starting point and, perhaps, provides a few \\r\\nhints that will make the process less distressing. 9780134096346_print.indb   6625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b4e7948f-113b-4bc0-88c0-22a37b4de589":{"__data__":"{\"id_\":\"b4e7948f-113b-4bc0-88c0-22a37b4de589\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"d5HeMZeqIQF+7uXd8oe64eJFVAc7fguhf0Zcjay5oPc=\"}},\"hash\":\"gTLEPMh0zeBbhUUQEN0WF0E/PkJqKSy0kRh5xKE23mo=\",\"text\":\"5\\r\\nPlatform Security\\r\\nSecuring an embedded platform is extremely challenging, especially with a large system such \\r\\nas Android. Android’s security infrastructure permeates up through the entire software stack. Security encompasses numerous technologies and concepts. From encrypting data with the \\r\\nlatest cryptographic techniques to ensuring that data in one application is not accessible by \\r\\nanother, the system needs to be constructed so it can readily support the various facets of plat-\\r\\nform security. Android’s security stack starts with the kernel and is built up from there. It leverages readily \\r\\navailable technologies, using common Linux concepts with a twist, and finishes out with some \\r\\nAndroid specifics. This chapter examines how Android’s security stack is constructed and which \\r\\npieces are often customized for new devices. Types of Security\\r\\nA platform like Android must be concerned with numerous types of security. When most \\r\\npeople think of security and computing systems, they think of what cryptographic technique \\r\\nor protocol is in use. But there is more to security than just taking one set of bits and encrypt-\\r\\ning it into another set of bits. As with the layers of software in the stack, you must consider \\r\\nmultiple facets of security:\\r\\n ■Chipset: How does the system on a chip (SoC) know it is executing the right thing? ■Operational: How does the system know this operation is allowed? ■User: How do the app and system secure their data and operations? ■Customization: How can apps or the system extend what is available? Android addresses each of these facets with varying levels of complexity and completeness. An \\r\\noriginal equipment manufacturer (OEM) must understand not only how security is handled \\r\\nwithin the platform so it can be used effectively, but also how to avoid introducing security \\r\\nholes by inadvertently misusing the system. 9780134096346_print.indb   6725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f3525cc5-4144-44fc-acea-c3f669719eb8":{"__data__":"{\"id_\":\"f3525cc5-4144-44fc-acea-c3f669719eb8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6S3hReG2JaXvPK5hDTGTWc9l+1/PMr7QzZryz1w8QTg=\"},\"NEXT\":{\"nodeId\":\"ac640b80-1ccc-4eb5-bb70-b28212113a11\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x1H7+/cxJQGwQhYHZYgNcpXZqIzTwJ8NFgNMHjwpd1Q=\"}},\"hash\":\"Oss8csYkuXs/Wv4clOV0P7DXFgle+l3s1ViDJ9E/O98=\",\"text\":\"68Chapter 5  Platform Security\\r\\nVerified Boot\\r\\nStarting with Android 7, verified boot is required for all Android devices. Android’s support for \\r\\nverified boot is derived from the secure boot techniques used in ChromeOS. It is a combina-\\r\\ntion of secure boot-chain support embedded in the silicon as well as the dm-verity feature of \\r\\nthe Linux kernel. Verified boot is used to ensure the system is only executing a trusted kernel \\r\\nand a trusted Android system. It is worth reiterating that although verified boot is required for \\r\\nall Android devices running Android 7 or newer, not all AOSP-based devices will be “Android” \\r\\ndevices. Typically, the chipset uses public cryptography techniques to ensure that the boot-chain is \\r\\nsecure. The chipset has a set of public keys (certificates) in one-time write storage on the device \\r\\n(that is, burned in). Just like the way X.509 certificates are used to secure TLS/SSL connections, \\r\\nthere is a trusted “root” within the chip’s ROM along with one or more intermediate signing \\r\\ncertificates. The OEM is responsible for creating its own set of keys/certificates, getting them \\r\\nsigned by the silicon vendor (or another trust present in the ROM), and ultimately “burning” \\r\\nthe OEM public certificate into the one-time write area of the chipset. A final one-time write \\r\\noperation permanently sets the secure boot operation, commonly referred to as “blowing the \\r\\nfuse” in the device. Depending on the chipset, this may be done when the OEM keys/certifi-\\r\\ncates are written or as a separate operation. This enables the device’s secure boot mode and \\r\\nrequires signed firmware/images to be present for it to execute the boot loader and start the \\r\\nLinux kernel. When the fuse has been blown in the chipset and the OEM’s certificate is present, the ROM \\r\\nboots the lowest level bootloader (trusted) and verifies the next bootloader in the chain. Most \\r\\nchipsets’ secure boot functionality verifies the validity up through the “application bootloader” \\r\\n(for example, what loads the kernel and ultimately Android). From this point, it is up to the \\r\\nOEM to provide the necessary support to verify that any kernel it loads is valid and trusted. This is where it gets interesting for the OEM. Each silicon vendor may provide different appli-\\r\\ncation bootloaders to use, such as uboot or a custom bootloader.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ac640b80-1ccc-4eb5-bb70-b28212113a11":{"__data__":"{\"id_\":\"ac640b80-1ccc-4eb5-bb70-b28212113a11\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6S3hReG2JaXvPK5hDTGTWc9l+1/PMr7QzZryz1w8QTg=\"},\"PREVIOUS\":{\"nodeId\":\"f3525cc5-4144-44fc-acea-c3f669719eb8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Oss8csYkuXs/Wv4clOV0P7DXFgle+l3s1ViDJ9E/O98=\"}},\"hash\":\"x1H7+/cxJQGwQhYHZYgNcpXZqIzTwJ8NFgNMHjwpd1Q=\",\"text\":\"It is up to the OEM to either \\r\\nenable the silicon vendor’s support for secure boot or extend the provided bootloader to prop-\\r\\nerly provide this support. After the application bootloader has validated the Linux kernel using a crypto signature, the \\r\\nkernel is loaded and control transferred to it with details about the Android system image (and \\r\\npossibly vendor and oem images) and secure hash metadata that corresponds to it. Starting \\r\\nwith Android 8, a reference implementation of Android verified boot is provided as part of \\r\\nAOSP. You can enable this support to build secure images by adding a line to the platform \\r\\nmakefile (for example, acme_one.mk), as shown in Listing 5.1. Listing 5.1 Makefile Change to Enable Android Verified Boot\\r\\nBOARD_AVB_ENABLE := true\\r\\nThis causes the build system to create a metadata image, vbmeta.img, for the target that \\r\\nincludes hash data for the boot image and hash tree details for the system image and sets up \\r\\n9780134096346_print.indb   6825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3e26e34c-1f0d-4bb2-850e-4393475d5159":{"__data__":"{\"id_\":\"3e26e34c-1f0d-4bb2-850e-4393475d5159\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zi+bPu7g7ML9hcpza+8L0CPtEkTipS+laBaByVw764c=\"},\"NEXT\":{\"nodeId\":\"b10157e8-0c70-48b8-8149-7137ae729f7d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"LgL9dNSwYenALwlxJsdQPw6EMivvTUfgPpeoTh8DG+U=\"}},\"hash\":\"4oJB6ggzCAcpUiIP/Us24TP5P2YQkKeqosLSO6fcwdg=\",\"text\":\"69Operational Security\\r\\nthe command line boot arguments for the kernel to use dm-verity for the system image. Other images, such as the vendor image used for vendor-provided binderized HALs, are  \\r\\nalso supported. The default implementation uses SHA-256 with an RSA 4096 bit key from \\r\\nexternal/avb/test/data in the AOSP tree. This must be overridden by the OEM and a \\r\\ncustom key provided. The algorithm and key content can be specified using two additional \\r\\nplatform makefile variables, as shown in Listing 5.2. Listing 5.2 Makefile Change to Specify AVB Signing Key\\r\\nBOARD_AVB_ALGORITHM := SHA512_RSA4096\\r\\nBOARD_AVB_KEY_PATH := /path/to/rsa_key_4096bits.pem\\r\\nThe public portion of the provided key must be available for the bootloader to use to verify the \\r\\nimage(s). The reference implementation includes the tools necessary to extract this data into \\r\\nthe correct format. Additionally, the reference implementation includes a C library, libavb, \\r\\nwhich can be integrated into application bootloaders to provide the required support for veri-\\r\\nfied boot. After the boot image is validated, the kernel is loaded and instructed via its command line \\r\\narguments to use dm-verity to ensure certain images are secure. The kernel’s dm-verity \\r\\nsupport uses the secure hash data for validating the system image at runtime. Each block of \\r\\nthe file system is cryptographically hashed as part of a hash tree, up to a root hash. The root \\r\\nhash is what gets signed by the OEM at build time. At runtime, the kernel’s dm-verity driver \\r\\ncomputes the secure hash for a block of the file system any time it is read, up to the root hash \\r\\nin the tree. Although this sounds like it would hurt performance, the computation does not \\r\\nreally add significant overhead on top of the I/O wait times needed to read the data from \\r\\nstorage. The hash result is then compared to the signed hash in the metadata. If they differ, \\r\\nthe file system has been tampered with or corrupted. In this case, the kernel will return an I/O \\r\\nerror from the low-level file system driver, causing failures higher in the stack. This means that \\r\\ndm-verity can only be used to verify read-only file systems or ones that should not change for \\r\\na given build of Android for the device!\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b10157e8-0c70-48b8-8149-7137ae729f7d":{"__data__":"{\"id_\":\"b10157e8-0c70-48b8-8149-7137ae729f7d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zi+bPu7g7ML9hcpza+8L0CPtEkTipS+laBaByVw764c=\"},\"PREVIOUS\":{\"nodeId\":\"3e26e34c-1f0d-4bb2-850e-4393475d5159\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4oJB6ggzCAcpUiIP/Us24TP5P2YQkKeqosLSO6fcwdg=\"}},\"hash\":\"LgL9dNSwYenALwlxJsdQPw6EMivvTUfgPpeoTh8DG+U=\",\"text\":\"The file systems that fall into this category for Android \\r\\nare system, system_ext, product, vendor, and odm images. For more information about verified boot, dm-verity, and Android verified boot, see these \\r\\npages from the AOSP project:\\r\\nhttps://source.android.com/security/verifiedboot\\r\\nhttps://source.android.com/security/verifiedboot/avb\\r\\nhttps://source.android.com/security/verifiedboot/dm-verity\\r\\nOperational Security\\r\\nComplex operating systems, such as Android, are constantly performing operations by applica-\\r\\ntions or other types of processes. These operations may be simply executing the internal code \\r\\n9780134096346_print.indb   6925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5094272c-5049-4c17-8ff2-e22c3792944d":{"__data__":"{\"id_\":\"5094272c-5049-4c17-8ff2-e22c3792944d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zfzTkDa9FNvlyN7t6OkBwBJoHQ0dVEiglmp8rDKDi1g=\"},\"NEXT\":{\"nodeId\":\"96f5ecdb-2be7-4448-a4ab-ab8177d120fc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bwRHDG+gJG8DYam1aP+UmMgHB0pfdsvmrSPtNTT2qFY=\"}},\"hash\":\"VmPGpyRV+BflzbnBksM4jnqeQONdS2FGa/Tr4QLrV5k=\",\"text\":\"70Chapter 5  Platform Security\\r\\nof an application or performing some action based on the request of the application. In either \\r\\ncase, the system manages what operations are allowed and enforces the necessary restrictions. Android leverages several different mechanisms to ensure operational security: process sandbox-\\r\\ning, SE Linux for Android, and Android-defined permissions. Each of these plays an important \\r\\nrole with platform security. However, this is all made possible because of the distinct layers of \\r\\nthe software stack and the underlying Linux kernel. Android Software Layers\\r\\nRecall from Chapter 3 the concept of the Android software stack as a “layer cake,” shown again \\r\\nin Figure 5.1. At the bottom of this stack is the Linux kernel. Not only does the kernel control \\r\\nthe underlying hardware and all processes running in the system, but it also provides the base \\r\\nof the security architecture. System\\r\\nServices\\r\\nNative\\r\\nApplications\\r\\nAndroid\\r\\nServices\\r\\nAndroid\\r\\nApplications\\r\\nAndroid API Libraries\\r\\nAndroid\\r\\nNative\\r\\nLibraries\\r\\nHAL\\r\\nBinder\\r\\netc.Linux Kernel\\r\\nHardware\\r\\nSystem Libraries\\r\\nDalvik/\\r\\nART\\r\\nZygote\\r\\nFigure 5.1 Android Software Layers (reprise of Figure 3.1)\\r\\nThe Linux kernel is the primary security boundary within the system. The kernel is in complete \\r\\ncontrol of the underlying hardware, process scheduling, memory management, and SE enforce-\\r\\nment. The runtime used to execute application code (ART or Dalvik) provides no additional \\r\\nsecurity. That detail surprises most Android app developers but is crucial for understanding how \\r\\nthe system uses and enforces security. All user space processes, whether they are third-party \\r\\napplications (APKs) or daemons running native code, are subject to the same exact security \\r\\nboundaries. In other words, just because code is written in C/C++ or compiled using the NDK \\r\\ndoes not mean it can bypass system security. By default, each process in the system is “sand-\\r\\nboxed” into its own little world. The Process Sandbox\\r\\nJust like other Linux-based systems, Android loads and executes applications within their \\r\\nown process. Each process has its own distinct memory space, providing isolation from other \\r\\nprocesses in memory. Further, each process is given a section of the file system which, by \\r\\ndefault, only it can access. Other areas of the file system are generally off limits.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"96f5ecdb-2be7-4448-a4ab-ab8177d120fc":{"__data__":"{\"id_\":\"96f5ecdb-2be7-4448-a4ab-ab8177d120fc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zfzTkDa9FNvlyN7t6OkBwBJoHQ0dVEiglmp8rDKDi1g=\"},\"PREVIOUS\":{\"nodeId\":\"5094272c-5049-4c17-8ff2-e22c3792944d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VmPGpyRV+BflzbnBksM4jnqeQONdS2FGa/Tr4QLrV5k=\"}},\"hash\":\"bwRHDG+gJG8DYam1aP+UmMgHB0pfdsvmrSPtNTT2qFY=\",\"text\":\"Other areas of the file system are generally off limits. Processes really \\r\\n9780134096346_print.indb   7025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"acb408c0-f737-4a31-a5e7-ea5bf9f21a42":{"__data__":"{\"id_\":\"acb408c0-f737-4a31-a5e7-ea5bf9f21a42\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1DoE+B3/K61LQpMSD7Lu+p3hG2pIIThtz9Hw8TQ5EWs=\"}},\"hash\":\"NdXCbx5ArIN09RbQSjX275LmUhhXQz0jr1rPbj5UQE0=\",\"text\":\"71Operational Security\\r\\ncannot interact with much outside of their own memory and file system space. As discussed in \\r\\nChapter 3 in the “Android Service Model” section, application processes cannot keep the device \\r\\nawake, access kernel device handles, and so on. Thus, the application is sandboxed. On the \\r\\nsurface, this sounds like a solid approach. However, even this is not enough. Some subtle details \\r\\nare at work to keep the various components in the system isolated. Figure 5.2 illustrates how \\r\\nprocesses, by default, are not only restricted from accessing scarce resources but also cannot \\r\\ndirectly interact with each other due to sandboxing and their Linux user ID. mediaserver\\r\\n(UID 1013)\\r\\nsystem_server\\r\\n(UID 1000)\\r\\ninit\\r\\n(UID 0)\\r\\napp1\\r\\n(UID 10001)\\r\\nLinux Kernel\\r\\nFigure 5.2 Android Process Sandbox\\r\\nThe traditional Linux UID concept (and GID) is turned on its head in Android. Rather than \\r\\na UID representing a specific person using the system, each application in Android is assigned \\r\\na UID when it is installed. When the running Android system is using multiple user profiles, \\r\\neach app is assigned unique UIDs for the app plus the specific user. Note\\r\\nWith the introduction of multiple user profiles in Android 4 (Ice Cream Sandwich), UID/GID \\r\\nassignment utilizes an “encoding” to bind together the application portion of the UID and the \\r\\nuser profile for which the application belongs. The general form is\\r\\nuser_app_uid = 100000 x user_profile_id + app_uid\\r\\nwhere app_uid is the same for all instances of a given app and third-party app assigned val-\\r\\nues starting with 10000, and user_profile_id is 0 for the first user (owner) then 10, 11, 12, \\r\\nand so on after that. When viewed via the ps command, an app process assigned app_uid \\r\\n10022 will be shown as u0_a22 for the first user, u1_a22 for the second user, u2_a22 for \\r\\nthe third user, and so on, and the actual encodings of each would be 10022, 1010022, and \\r\\n1110022, respectively. 9780134096346_print.indb   7125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f00ffd4d-01f5-4609-a5c4-76194d818ca1":{"__data__":"{\"id_\":\"f00ffd4d-01f5-4609-a5c4-76194d818ca1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bUwSJHAdkji7TcO/yFPgFyWc4eaq3rz5daYYz/iDuM4=\"},\"NEXT\":{\"nodeId\":\"022666f0-f43a-4a2c-a1cb-7fa81a115ed5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4EVQW7aQi7uzwxhp1CbvPkuuHDqUvRCns8GAOHnEnIA=\"}},\"hash\":\"jn30ERgjo7hdqb13jaabyd5SYCzoFLv8vh2nrTb7e1s=\",\"text\":\"72Chapter 5  Platform Security\\r\\nSystem processes (for example, daemons/services) get similar treatment: They are assigned \\r\\nspecial UIDs at build time. The UID and GID assignment ensures the running processes stay \\r\\nisolated from each other. Without this concept, each process would effectively be able to \\r\\nchange and manipulate things from other processes as they do on some other embedded real-\\r\\ntime operating systems. The base UID/GID definitions in Android are defined within the AOSP tree at system/core/\\r\\ninclude/private/android_filesystem_config.h rather than in /etc/passwd and /etc/\\r\\ngroup as they would be on a traditional Linux system. Applications are assigned a UID when \\r\\nthey are installed on a device. The UID assignment does not change for as long as the app is \\r\\ninstalled on that device. After the app is removed, though, the UID is free and can be assigned \\r\\nto another app. The Android framework tracks installed app packages and their assigned  \\r\\nUID/GID via the file /data/system/packages.xml. The use of UID/GID with the process sandbox provides very coarse-grained control of the \\r\\nsystem, also called discretionary access control (DAC). Originally, Android used only this tech-\\r\\nnique for app and system process isolation, as discussed in Chapter 3 with respect to scarce \\r\\nresource access. As Android grew in popularity and expanded its features, DAC was no longer \\r\\nadequate to protect the apps from each other and the system from itself. For example, a \\r\\ncompromised version of the system server process could potentially damage the entire system \\r\\nbecause it holds superuser privileges. Using DAC alone, there is no way to impose a consistent, \\r\\nsystem-wide policy to protect the system. An alternative approach, known as mandatory access control (MAC), mitigates this problem. MAC allows all processes, even system processes running as the superuser, to be contained. Use \\r\\nof MAC allows a consistent, system-wide policy to be established in the system. Processes are \\r\\nnot only sandboxed in memory and via file system access but further restricted from perform-\\r\\ning other fine-grained operations in the system. Returning to our example of a compromised system server process, with MAC even a process \\r\\nwith superuser permissions can be restricted so that it is not allowed to fork another process, \\r\\naccess specific device files, and so on. MAC support was first added in Android 4 via SE Linux \\r\\nfor Android.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"022666f0-f43a-4a2c-a1cb-7fa81a115ed5":{"__data__":"{\"id_\":\"022666f0-f43a-4a2c-a1cb-7fa81a115ed5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bUwSJHAdkji7TcO/yFPgFyWc4eaq3rz5daYYz/iDuM4=\"},\"PREVIOUS\":{\"nodeId\":\"f00ffd4d-01f5-4609-a5c4-76194d818ca1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jn30ERgjo7hdqb13jaabyd5SYCzoFLv8vh2nrTb7e1s=\"}},\"hash\":\"4EVQW7aQi7uzwxhp1CbvPkuuHDqUvRCns8GAOHnEnIA=\",\"text\":\"MAC support was first added in Android 4 via SE Linux \\r\\nfor Android. With MAC, all packages, executables, devices, and so on are assigned contexts or \\r\\nlabels that are then granted permission to do things based on policy, which is defined at system \\r\\nbuild time. SE Linux for Android\\r\\nSecurity Enhanced Linux, or SE Linux, was created by RedHat and the NSA. It was first released \\r\\nin 2000. SE Linux is a combination of Linux kernel changes along with user space tools to \\r\\nmanage and control SE operations. Just like traditional DAC support in Linux, MAC enforcement is handled by the Linux kernel. SE Linux refines the way security is handled by the OS, making it much finer grained and \\r\\ncapable of restricting process functionality beyond the simple “owner-oriented” mechanisms \\r\\nused by traditional DAC. When enabled, the kernel is given a set of policies and what to do \\r\\nwhen a policy is violated. 9780134096346_print.indb   7225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"17e0af00-6021-436d-82a5-c4c86c692922":{"__data__":"{\"id_\":\"17e0af00-6021-436d-82a5-c4c86c692922\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hd2CPA7rkhEZ5TC+8kF2BJfSBiAgyRMBBE5AbiZsCeY=\"},\"NEXT\":{\"nodeId\":\"bce4f34f-2a3e-4f54-b744-993881611ba6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4lztqzpIfaPYxO6VwbeF9rONXB4YgxFJg/egwAb6e+0=\"}},\"hash\":\"5nXo8e9JcePha2522+NyMTyQYW+Da8Gg2CUyo1U/D34=\",\"text\":\"73Operational Security\\r\\nThe two different operating modes for the kernel with SE enabled are permissive and enforcing. With permissive mode, the kernel emits audit logs when policy violations occur, but does not \\r\\nstop the operation from continuing. Enforcing mode, on the other hand, both logs the viola-\\r\\ntion and stops the operation from continuing. Adding SE Linux to Android helped the platform to meet several goals for securing the OS: \\r\\n ■Prevent privilege escalation, even for system apps/executables, which would allow a process to access resources for which it would normally not have access \\r\\n ■Prevent data leakage between processes\\r\\n ■Prevent security bypass techniques\\r\\nSE is not a replacement for traditional DAC. Instead, the Linux kernel still has DAC controls \\r\\nin place, and SE simply builds upon it. This takes the Android process sandbox to a whole new \\r\\nlevel. The kernel is responsible for enforcing the SE policies. The kernel is loaded with the SE \\r\\npolicies at startup from the initram file system (read only). SE operates in a “default deny” \\r\\nmode. This means that unless a policy (rule) is defined that allows an operation, the operation \\r\\nwill be denied. This shift from DAC to MAC is not a lightweight change. Policy definition is everything in SE. If the policy is wrong and processes are not constructed in a way to handle failures, the system \\r\\ncan come to a very abrupt halt. Similarly, bad policy might inadvertently allow operations that \\r\\ncould compromise the system or an app. For this reason, SE was rolled out slowly: first added in Android 4.2 (Jelly Bean) in permissive \\r\\nmode, then refined and placed in full enforcing mode in Android 5 (Lollipop). Taking a step \\r\\nback to look at a complete, Linux-based system architecture, the ideal architecture would be \\r\\nconstructed to have decentralized, least privilege, separation of concerns, and corresponding SE \\r\\npolicy along with it. Because of this, the SE policies and system structure continue to evolve to \\r\\nbetter contain critical operations. Chapter 10 builds on this idea in its discussion of the binder-\\r\\nized HAL, which, as of Android 8, allows for vastly improved separation and constraint of OEM \\r\\nand vendor components. SE Policy Definition\\r\\nSE policy definitions can be extremely granular. Essentially, anything that is known to the \\r\\nkernel can be protected using a policy.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bce4f34f-2a3e-4f54-b744-993881611ba6":{"__data__":"{\"id_\":\"bce4f34f-2a3e-4f54-b744-993881611ba6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hd2CPA7rkhEZ5TC+8kF2BJfSBiAgyRMBBE5AbiZsCeY=\"},\"PREVIOUS\":{\"nodeId\":\"17e0af00-6021-436d-82a5-c4c86c692922\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5nXo8e9JcePha2522+NyMTyQYW+Da8Gg2CUyo1U/D34=\"}},\"hash\":\"4lztqzpIfaPYxO6VwbeF9rONXB4YgxFJg/egwAb6e+0=\",\"text\":\"Essentially, anything that is known to the \\r\\nkernel can be protected using a policy. From device files to sockets and shared memory areas, it \\r\\ncan all be protected. With this functionality comes a large increase in complexity. Fortunately, \\r\\nSE for Android simplifies this slightly compared to desktop or server Linux. With pure SE Linux, policies are made up of several fundamental building blocks: users, roles, \\r\\ntypes, labels, and multi-level security (MLS) levels. Adding to the complexity, types can be \\r\\ncalled “domains” and labels can be called “contexts. ” The number of terms becomes dizzying \\r\\nvery quickly. Briefly, the key terms and their definitions are as follow:\\r\\n ■Users: SE-defined users, which are not the same as the Linux user. The SE user does not change during a session (as a Linux user can change using su or sudo. ) It is worth noting, \\r\\nhowever, that in many configurations, there is a 1:1 mapping of SE user to Linux user. 9780134096346_print.indb   7325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"41b7fec3-74ce-4197-90fe-48cc01279378":{"__data__":"{\"id_\":\"41b7fec3-74ce-4197-90fe-48cc01279378\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"g8rGA5yW4Az4Px101Re0Nbodr2dFPEBOHf/DgXKJxcQ=\"},\"NEXT\":{\"nodeId\":\"7abdda93-a076-4126-8150-d73c2e1930c4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bjPMYgKXvCUzTRJyfldVK5wEbLuF+9u/IlYUUbUf7X4=\"}},\"hash\":\"gar8eE7MG/pFfx2ACxSdDNizNTnW0e2BQTaC0cOGUzQ=\",\"text\":\"74Chapter 5  Platform Security\\r\\n ■Roles: A grouping of users. ■Types: A means of determining access to something. ■Domains: Process types can be referred to as domains. ■Labels: A combination of user, role, type, and MLS level. A label can also be referred to as a “context. ” For example, on Android the device files /dev/tty* are given the label \\r\\ntty_device via the following label definition:\\r\\n/dev/tty[0-9]*   u:object_r:tty_device:s0\\r\\nThe preceding concepts are still rather vague, but it is clear that SE policies are both powerful \\r\\nand complicated. Because of Android’s nature, some of the complexity of SE Linux is reduced; \\r\\nin practice, Android does not use the concepts of users, roles, or MLS levels in their full general-\\r\\nity. Instead, there is only a single user, a single role, and a single MLS level used across all poli-\\r\\ncies. The user is always u, the role is always object_r, and the MLS level is always s0. Whew! Android’s approach to SE, using only a portion of all the available features, makes this \\r\\na lot easier to digest! Unfortunately, although this makes it a bit easier to grasp SE for Android, \\r\\nthere are still a lot of details in the policies. So what exactly are SE policies? SE policies are a collection of “type enforcement” files that \\r\\nare compiled into a build for a device. These files have a .te suffix and are provided as part of \\r\\nAOSP and by OEMs/vendors. Policy rules can be built up as well as overridden. Rules have one \\r\\nof the following keywords:\\r\\n ■allow: A domain is allowed to use an SE type/object type with permissions. ■neverallow: A domain is never allowed to use an SE type/object type with permissions. ■dontaudit: Violations of rules for this domain are not logged/audited. Think of SE policies as rules: Rules that can say something like, “Allow/deny this domain when \\r\\nusing this type based on these permissions. ” The snippet from the Android SE policy for the \\r\\ninit process, shown in Listing 5.3, will make this breakdown understandable.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7abdda93-a076-4126-8150-d73c2e1930c4":{"__data__":"{\"id_\":\"7abdda93-a076-4126-8150-d73c2e1930c4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"g8rGA5yW4Az4Px101Re0Nbodr2dFPEBOHf/DgXKJxcQ=\"},\"PREVIOUS\":{\"nodeId\":\"41b7fec3-74ce-4197-90fe-48cc01279378\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"gar8eE7MG/pFfx2ACxSdDNizNTnW0e2BQTaC0cOGUzQ=\"}},\"hash\":\"bjPMYgKXvCUzTRJyfldVK5wEbLuF+9u/IlYUUbUf7X4=\",\"text\":\"Listing 5.3 A Snippet of init.te\\r\\nallow init tty_device:chr_file rw_file_perms\\r\\nThis rule states that the init domain (a process) is allowed to operate on something with the \\r\\nlabel tty_device, a character special file, using the permissions defined as rw_file_perms. Conceptually, this is relatively straightforward. In practice, some details here still may not be obvious when crafting new policies: what/where \\r\\nare chr_file and rw_file_perms defined? Beyond the .te files used to define policies, several \\r\\nother special files define different objects, contexts, and macros for use in the SE policy files. 9780134096346_print.indb   7425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a6155d24-a1f5-41b2-bd37-a03e726b20b1":{"__data__":"{\"id_\":\"a6155d24-a1f5-41b2-bd37-a03e726b20b1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DMurAHSFHH/DYFoHhqK4KSsLGQVhOA4QL95usegP0Jw=\"},\"NEXT\":{\"nodeId\":\"10435700-df1e-49c8-b1b4-cfe3f6b2ebe4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3ma6kAggAd1fn/olJQs+vcrk+JAiDh6TME6VPE/CL70=\"}},\"hash\":\"S1ko1pgcO2Hbp0F3UCgJkDM1butZYwuCfBt0rwH8gWo=\",\"text\":\"75Operational Security\\r\\nThe type chr_file is defined in a file called access_vectors, which establishes which kernel-\\r\\ndefined objects, entities, or operations make up this type. Similarly, rw_file_perms is defined \\r\\nin global_macros as a combination of read and write file operations exposed by the kernel. Note\\r\\nThe location of the AOSP files depends on the version of AOSP in use. Prior to Android 8, these \\r\\nfiles are in external/sepolicy within the AOSP tree. Starting with Android 8, the files are \\r\\nin system/sepolicy within the AOSP tree. These policies are CDD compliant for the specific \\r\\nversion of Android to which they belong. OEMs and vendors should ensure that any changes or \\r\\ncustomizations do not result in CDD violations! The standard SE policies cover functionality defined by AOSP, protecting the system as well as \\r\\nprocesses from each other. However, what about when OEMs have customizations? Just like \\r\\nanything else in AOSP, the provided components could be modified, but an OEM should not. Modifying the AOSP-provided SE policy files is an almost sure way for the device to fail to be \\r\\nCDD compliant. Even if an OEM is not seeking to have the device labeled as Android, modify-\\r\\ning the base SE policies potentially opens security holes in the end device. Instead, OEMs who \\r\\nneed to add to or revise SE policy should place SE policy additions or customizations beneath \\r\\nthe board-specific area and leverage special build variables. For example, the HiKey devices \\r\\ncontain some customizations to SE policies and can be found at device/linaro/hikey/\\r\\nsepolicy in the AOSP tree setup discussed in Chapter 2. The Acme One platform built up throughout this book will need some SE policy additions, \\r\\ncovered in later chapters. If you used the Acme repo manifest from GitHub (refer to Chapter 2), \\r\\nsome SE policy files used in later chapters are present in device/acme/acme_one/sepolicy in \\r\\nthe build tree. Two different build variables are available for vendors to use to pull in new SE policies or revi-\\r\\nsions. The first, BOARD_SEPOLICY_DIRS, specifies a directory to add to the SE policies when \\r\\nbuilding the platform. The contents of this directory will extend or override other policies.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"10435700-df1e-49c8-b1b4-cfe3f6b2ebe4":{"__data__":"{\"id_\":\"10435700-df1e-49c8-b1b4-cfe3f6b2ebe4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DMurAHSFHH/DYFoHhqK4KSsLGQVhOA4QL95usegP0Jw=\"},\"PREVIOUS\":{\"nodeId\":\"a6155d24-a1f5-41b2-bd37-a03e726b20b1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"S1ko1pgcO2Hbp0F3UCgJkDM1butZYwuCfBt0rwH8gWo=\"}},\"hash\":\"3ma6kAggAd1fn/olJQs+vcrk+JAiDh6TME6VPE/CL70=\",\"text\":\"The contents of this directory will extend or override other policies. Only .te files will be pulled from this directory when you’re compiling the policies for the \\r\\ntarget. The second variable, BOARD_SEPOLICY_UNION, defines files that should be combined with \\r\\nexisting files from AOSP of the same name. This is how an OEM can create new type labels \\r\\nor extend existing type labels for a new executable or device file. Any file(s) called out here \\r\\nmust have the same name as files from the AOSP tree, such as file_contexts. For example, \\r\\nif the OEM, such as Acme used throughout this book, adds a new daemon to monitor a device \\r\\nfeature, called monitord, there would need to be a policy file defined as well as an addition \\r\\nto file_contexts so the executable is assigned the correct label. The net result would be two \\r\\nadditional files in the device/acme/one/acme_one/sepolicy directory: monitord.te and \\r\\nfile_contexts. In the board-level makefile, acme_one.mk, two additional lines will be added, \\r\\nas shown in Listing 5.4. 9780134096346_print.indb   7525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b301b977-6b19-4f49-8497-a4476e4e6fd3":{"__data__":"{\"id_\":\"b301b977-6b19-4f49-8497-a4476e4e6fd3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"y8rP7/RQVbECi7l3itTm9+jvqgWr7aSy5mfdrXUa/AM=\"},\"NEXT\":{\"nodeId\":\"d04fc9a2-8604-4d10-b25a-9c8c44c3c39c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NXbK86di8yi6BEJJBur9DgkvPL9AZSh9LJpiJ2v0RKI=\"}},\"hash\":\"nLBorvZxsim0JoEf8+5EvmgSTjKEBAUUWqoHTeqGSdE=\",\"text\":\"76Chapter 5  Platform Security\\r\\nListing 5.4 Example SE Policy Changes\\r\\nBOARD_SEPOLICY_DIRS += \\\\\\r\\n    device/acme/one/sepolicy\\r\\nBOARD_SEPOLICY_UNION += \\\\\\r\\n    file_contexts\\r\\nChapters 6, “System Startup: Installing and Booting the System,” and 12, “Clients for a Custom \\r\\nBinderized HAL,” demonstrate adding custom SE policies. Android Permissions\\r\\nAs described in the previous section, Android’s permissions system builds on top of the MAC \\r\\nand process sandbox systems to provide even more granular control. The permissions system, \\r\\nwhile powerful, can also be confusing for both developers and end users. Permissions are used \\r\\nto control access to apps, features, and even specific API calls. Unfortunately, this complexity \\r\\ncan sometimes be subtle and depends on good documentation to understand when, where, and \\r\\nhow permissions are used. Permissions are defined to be one of four protection “levels”:\\r\\n ■normal: Protects features that do not expose hardware, device specifics, user private data, and so on\\r\\n ■dangerous: Protects features that could expose hardware, device specifics, user private data, and so on\\r\\n ■signature: Can only be used (granted) by packages signed with the same certificate\\r\\n ■signatureOrSystem: Just like signature, but can also be used by system apps\\r\\nThe permissions themselves are implementation defined and identified simply by the name of \\r\\nthe permission. You read that correctly: The permissions are just strings that have implementation specific \\r\\nmeaning. In certain cases permissions are defined by Android that are also tied to specific SE \\r\\ncontext or GID, but this is more the exception than the rule. Furthermore, there is no central \\r\\nauthority or required form for the permission names. This creates a potential for naming \\r\\nconflicts which are largely resolved by the system on a first come, first serve basis. As a best \\r\\npractice, when new permissions are being defined, they should be namespaced to minimize \\r\\nthe potential for collisions. For example, instead of creating a new permission, \\\"PROXIMITY_\\r\\nACCESS\\\", it would be better to use \\\"com.acme.permission.PROXIMITY_ACCESS\\\". Enforcing permissions boils down to two different approaches: automatic enforcement and \\r\\nmanual enforcement. Both approaches are needed for Android to provide the different types of \\r\\nprotection.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d04fc9a2-8604-4d10-b25a-9c8c44c3c39c":{"__data__":"{\"id_\":\"d04fc9a2-8604-4d10-b25a-9c8c44c3c39c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"y8rP7/RQVbECi7l3itTm9+jvqgWr7aSy5mfdrXUa/AM=\"},\"PREVIOUS\":{\"nodeId\":\"b301b977-6b19-4f49-8497-a4476e4e6fd3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nLBorvZxsim0JoEf8+5EvmgSTjKEBAUUWqoHTeqGSdE=\"}},\"hash\":\"NXbK86di8yi6BEJJBur9DgkvPL9AZSh9LJpiJ2v0RKI=\",\"text\":\"Both approaches are needed for Android to provide the different types of \\r\\nprotection. 9780134096346_print.indb   7625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d40c57a2-410c-43c4-a67a-d0701f4c644a":{"__data__":"{\"id_\":\"d40c57a2-410c-43c4-a67a-d0701f4c644a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cN5knG8BdHfR2i5dRYEgPHbzSNsFbX8aRLvEXER7zSQ=\"}},\"hash\":\"fgeudAi/EV69moCgl4HzLxsmNe/OWktF93Dettqvigw=\",\"text\":\"77Operational Security\\r\\nAutomatic Permission Enforcement\\r\\nThe AOSP framework provides automatic enforcement of permissions when they are used to \\r\\nprotect app components: Activity, Service, BroadcastReceiver, and ContentProvider \\r\\n(via URI). Apps, including system apps, that need to protect their components via a permission \\r\\ncan do so using the app’s manifest or in some cases at runtime. Permissions may be specified for a given component via the appropriate tag in the app’s mani-\\r\\nfest. For example, to protect a BroadcastReceiver so that only apps holding the permission \\r\\ncom.example.permission.USE_FEATURE may send it an Intent, the manifest entry would \\r\\nlook similar to what is shown in Listing 5.5. Listing 5.5 Example Permission for a BroadcastReceiver\\r\\n<receiver android:name=\\\".FeatureReceiver\\\"\\r\\n          android:permission=\\\"com.example.permission.USE_FEATURE\\\">\\r\\n    <intent-filter>\\r\\n        <action android:name=\\\"com.example.action.FEATURE>\\r\\n    </intent-filter>\\r\\n</receiver>\\r\\nIf the sender of the Intent does not hold the required permission, the call will fail with a \\r\\nSecurityException. The same concept can be applied to <activity>, <service>, and \\r\\n<provider> elements. Note, however, that some features are available only for specific component types:\\r\\n ■Service: The permission is used to protect starting as well as binding to the specific service. ■ContentProvider: Separate readPermission and writePermission attributes can be used to specify separate permissions for read and write. Additionally, \\r\\ngrantUriPermission attribute and <grant-uri-permission> subelement can be  \\r\\nused to grant temporary access to apps based on a URI served by the provider. Also, if the <application> tag within the manifest has a permission attribute set, that \\r\\npermission is a fallback for access to any of the components within the application! The framework-provided enforcement is relatively coarse grained. The Android-provided \\r\\nSettings application again provides a working example of this. The Settings activity for request-\\r\\ning access to Bluetooth is protected by the permission \\\"android.permission.BLUETOOTH\\\". So \\r\\nany application that wants to enable Bluetooth or make the device discoverable (which it  \\r\\nmust do by running the Setting app) must have this permission. If it does not, its call to \\r\\nstartActivity() will fail. 9780134096346_print.indb   7725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7dd61319-8dd9-4712-acf9-dcfed6c98bdf":{"__data__":"{\"id_\":\"7dd61319-8dd9-4712-acf9-dcfed6c98bdf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PuhKNzgOhfag3X9bk+xN2Jmkt0fPvaDSWgDlKzgcdiY=\"},\"NEXT\":{\"nodeId\":\"ba3742f3-03e1-4188-ad11-2bbb564c0a72\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZGfwShyLQLi/9Dm3e4ryqs+pyPozQkRdwxB6qGZSqdY=\"}},\"hash\":\"6K2oOQL3gsRfiAT+gqsRvRqYTCUS03SzM8CcVrnps6c=\",\"text\":\"78Chapter 5  Platform Security\\r\\nManual Permission Enforcement\\r\\nAutomatic permission enforcement is great for protecting an entire feature or component \\r\\nimplementing a feature. However, it is a broad level of protection. What if a specific API \\r\\nwithin a feature set needs to be protected, but not the feature as a whole? For example, \\r\\nConnectivityManager does not require a permission to call isDefaultNetworkActive(), but \\r\\nit does require the android.permission.ACCESS_NETWORK_STATE permission in order to access \\r\\nthe APIs that provide specific details about a network (such as getNetworkCapabilities()). How does this actually work? These types of APIs are generally accessed via Binder-based calls (for example, AIDL-defined \\r\\ninterfaces). In fact, Android’s various “manager” classes, which are retrieved via  \\r\\nContext.get-SystemService(), are just wrapper APIs around binder proxies. System  \\r\\nservices and binder and Android’s service model were covered in Chapter 3. The API  \\r\\nimplementations manually check and enforce the permission requirements. The approaches used by different implementations can vary, but permissions checks are typi-\\r\\ncally performed very early in the API implementation. The check must be done on the service \\r\\nside; otherwise, there is no way to enforce it! The framework’s Context object, part of the \\r\\nbacking service’s process, provides the APIs used to manually verify that the caller has the \\r\\nnecessary permission. Two types of calls are available: check and enforce. The difference between the two is that the \\r\\n“check” calls simply return PackageManager.PERMISSION_GRANTED or PackageManager. PERMISSION_DENIED as appropriate. The “enforce” calls, on the other hand, automatically \\r\\nthrow SecurityException if the caller does not hold the required permission. These APIs are called on the service side by code that is aware of the context of the calling \\r\\napplication. The service side “knows” the calling application’s process ID (PID) and user ID \\r\\n(UID), and the framework can use this information to check whether or not the caller has been \\r\\ngranted the required permission. This illustrates another reason the Binder subsystem is backed \\r\\nby a kernel module: the kernel provides details about the calling process’s context and resources. Revisiting the ConnectivityManager.getNetworkCapabilities() API, the backing service \\r\\nimplementation for Android 10 is in frameworks/base/services/core/java/com/android/\\r\\nserver/ConnectivityService.java. Listing 5.6 shows the relevant code.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ba3742f3-03e1-4188-ad11-2bbb564c0a72":{"__data__":"{\"id_\":\"ba3742f3-03e1-4188-ad11-2bbb564c0a72\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PuhKNzgOhfag3X9bk+xN2Jmkt0fPvaDSWgDlKzgcdiY=\"},\"PREVIOUS\":{\"nodeId\":\"7dd61319-8dd9-4712-acf9-dcfed6c98bdf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6K2oOQL3gsRfiAT+gqsRvRqYTCUS03SzM8CcVrnps6c=\"}},\"hash\":\"ZGfwShyLQLi/9Dm3e4ryqs+pyPozQkRdwxB6qGZSqdY=\",\"text\":\"Listing 5.6 shows the relevant code. Listing 5.6 ConnectivityManager Manual Check for Permissions\\r\\n    @Override\\r\\n    public NetworkCapabilities getNetworkCapabilities(Network network) {\\r\\n        enforceAccessPermission();\\r\\n        return getNetworkCapabilitiesInternal(\\r\\n            getNetworkAgentInfoForNetwork(network));\\r\\n    }\\r\\n... 9780134096346_print.indb   7825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4a25f09b-3d71-4a88-9483-211314a4109d":{"__data__":"{\"id_\":\"4a25f09b-3d71-4a88-9483-211314a4109d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aboamc76t70NrN68xhM2bX1UbxFKXOx8YtCtWnuGIBk=\"},\"NEXT\":{\"nodeId\":\"459919e8-d2e8-4207-8016-6b921a59c921\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ah4m5bYGSaP3pu1CDDSbFj/YJkL7MvTdZ3q+NhHq+Xk=\"}},\"hash\":\"9/Nt+lGBO+8V34jXPEvleQh4/vo0ziU+8VYHRiusb20=\",\"text\":\"79Operational Security\\r\\n    private void enforceAccessPermission() {\\r\\n        mContext.enforceCallingOrSelfPermission(\\r\\n            android.Manifest.permission.ACCESS_NETWORK_STATE,\\r\\n            \\\"ConnectivityService\\\");\\r\\n    }\\r\\n}\\r\\nFile Systems\\r\\nThe final piece of the “operational level” security is the file system. A portion of this has been \\r\\ndiscussed briefly in the application sandbox and SE Linux for Android sections. However, more \\r\\ndetails are important for an OEM to understand. Just like other Linux-based systems, the file system layout in Android is a hierarchical tree that \\r\\nhas one or more backing physical devices and some virtual devices mounted at locations in the \\r\\ntree. What level of access is available to these mount points is dependent on the backing media \\r\\nand the SE policies of the platform. You can find additional information on Android’s storage mechanisms, file systems, and parti-\\r\\ntions in these two AOSP locations:\\r\\nhttps://source.android.com/devices/storage\\r\\nhttps://source.android.com/devices/bootloader/partitions\\r\\nThe remainder of this section enumerates the key file systems and how security affects them. Mount Point: / \\r\\nThis (/) is the root of the file system and is a Linux initial RAM disk. This image is part of the \\r\\nboot.img image file for the target. It contains startup scripts, SE policies, configuration files, \\r\\nproperty files, and so on. This file system is read-only, both in the way it is mounted and \\r\\nbecause it is an initial RAM disk. The contents cannot be modified at runtime. Mount Point: /system \\r\\nTypically, this file system is backed by eMMC, NAND, or some other type of non-volatile \\r\\nstorage. Depending on the storage media, it might be formatted ext4, jffs, yaffs2, and so on. On most modern Android builds, it is ext4. Its contents are exactly the system.img file after \\r\\na successful build. This is where the core Android services, framework, libraries, daemons, and \\r\\nnative binaries are stored. It is mounted as a read-only file system, which is critical from a secu-\\r\\nrity standpoint. See the previous section, “Verified Boot,” for more information. Note\\r\\nNon-production builds can often include the su command, which can be used to gain elevated \\r\\naccess and then remount the /system partition as read-write. This can be helpful during an \\r\\ninitial system bring up or debugging.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"459919e8-d2e8-4207-8016-6b921a59c921":{"__data__":"{\"id_\":\"459919e8-d2e8-4207-8016-6b921a59c921\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aboamc76t70NrN68xhM2bX1UbxFKXOx8YtCtWnuGIBk=\"},\"PREVIOUS\":{\"nodeId\":\"4a25f09b-3d71-4a88-9483-211314a4109d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9/Nt+lGBO+8V34jXPEvleQh4/vo0ziU+8VYHRiusb20=\"}},\"hash\":\"ah4m5bYGSaP3pu1CDDSbFj/YJkL7MvTdZ3q+NhHq+Xk=\",\"text\":\"This can be helpful during an \\r\\ninitial system bring up or debugging. However, it should never be possible on a production build. Rewriting the /system partition on a release build is a huge security hole! 9780134096346_print.indb   7925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5cb40645-eff6-4c84-b903-b41699f34fdd":{"__data__":"{\"id_\":\"5cb40645-eff6-4c84-b903-b41699f34fdd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"E1bv2Y8Y5z+1gL9qZu8nFRB7VdL5KuqN0e4S3xdYFiI=\"},\"NEXT\":{\"nodeId\":\"291ddf6c-0afd-4166-90be-c975977d0478\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"blukN9Sl1ygMLfReV9SO2VFbPutUEmMLRImlKPiZ/yc=\"}},\"hash\":\"OzaXnlkPrUeTsA4q8vfG3WymD3tV/lRKn2cHKGMcWyA=\",\"text\":\"80Chapter 5  Platform Security\\r\\nMount Point: /data \\r\\nThe /data file system is also typically backed by eMMC or some other non-volatile storage. Also like /system, most modern Android systems utilize the ext4 format for this file system. It \\r\\nis mounted read-write and contains data for both the platform as well as apps. Although it is \\r\\nmounted read-write, write access is strictly controlled by permissions and SE policy. The image \\r\\nfrom the build that is used for this file system is the userdata.img file. App data is located at /data/data/<package name>. This is the file system portion of the \\r\\napplication sandbox, outlined earlier in this chapter. When an app wants to create a database, \\r\\nshared preferences, or even a regular file, this is where its app private storage is located. This \\r\\nis protected by file system permissions based on the application’s assigned UID/GID. This also \\r\\nmeans that it is possible for apps to “share” files from this private space by setting file system– \\r\\nlevel permissions (though this is generally not recommended). The Android framework also uses portions of the /data file system for its own purposes. Application installs, granted permissions for packages, new permissions, package native librar-\\r\\nies, and optimized DEX/OAT binaries are some examples of what the framework stores here. Just like the app private areas, these files are protected by file system–level permissions as well \\r\\nas SE policy so the contents are kept from prying eyes. Mount Point: /sdcard \\r\\nPrehistoric Android phones included a SD/MMC slot used for additional storage or removable \\r\\ncontent, such as pictures or video. This is because back in the 2008 timeframe, NAND or other \\r\\nflash devices were relatively expensive per MB of storage but SD cards were not. Plus, in the \\r\\ndays of NAND flash, the typical Linux file systems (such as ext4) were not good about spread-\\r\\ning data throughout the device, or “wear leveling,” that was necessary to prevent the SSDs of \\r\\nthe time from failing. Although most devices in the market today do not have separate SD/MMC card slots, the \\r\\nsystem retains a symbolic link at the root file system, /sdcard. Depending on the hardware, \\r\\nthis can point to a real SD card device (which is mounted elsewhere) or to emulated “external \\r\\nstorage.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"291ddf6c-0afd-4166-90be-c975977d0478":{"__data__":"{\"id_\":\"291ddf6c-0afd-4166-90be-c975977d0478\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"E1bv2Y8Y5z+1gL9qZu8nFRB7VdL5KuqN0e4S3xdYFiI=\"},\"PREVIOUS\":{\"nodeId\":\"5cb40645-eff6-4c84-b903-b41699f34fdd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OzaXnlkPrUeTsA4q8vfG3WymD3tV/lRKn2cHKGMcWyA=\"}},\"hash\":\"blukN9Sl1ygMLfReV9SO2VFbPutUEmMLRImlKPiZ/yc=\",\"text\":\"”\\r\\nPerhaps even more confusing is the concept of “primary” versus “secondary” external storage. Secondary external storage devices are just like primary, with the exception that some of the \\r\\npermissions handling is different. On both types of external devices, apps can read and write \\r\\nto their own private namespace without any additional permissions. This is handled by synthe-\\r\\nsized permissions provided by the kernel and a user space file system (FUSE) daemon. Apps can read other areas of external storage by holding the Android permission READ_\\r\\nEXTERNAL_STORAGE. However, the WRITE_EXTERNAL_STORAGE permission only gives apps the \\r\\nability to write to non-package private areas of primary external storage. Any secondary exter-\\r\\nnal storage device(s) can only be written by system apps or processes. When emulated external storage is used, the device is typically eMMC soldered on to the board \\r\\nand treated like an SD card. When no separate device exists for “external storage,” it is layered \\r\\non top of the /data file system, effectively sharing the same storage space. The intent of this \\r\\n9780134096346_print.indb   8025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"17dd9616-4525-4bac-8947-0920f12297e1":{"__data__":"{\"id_\":\"17dd9616-4525-4bac-8947-0920f12297e1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CaFZiCX7w0kJs6ZMCYsjDtbM9Tfx4sz9cYCrRuY1/Nw=\"},\"NEXT\":{\"nodeId\":\"b7593919-5114-4048-83fd-e0d4a4f21866\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7juas5MeT7vgErerhHE+q1xlCiDKSznnIgABn+dlYfs=\"}},\"hash\":\"QIKOLaNlXioPnyDuF0HqYZuKMiL4LrHuQe65QpvJEy8=\",\"text\":\"81Operational Security\\r\\nstorage media is for larger files. Refer to the AOSP storage documentation for examples of exter-\\r\\nnal storage configurations: \\r\\nhttps://source.android.com/devices/storage/config-example\\r\\nMount Points: /product, /odm, and /vendor\\r\\nAndroid 8 introduced the concept of the /vendor image containing any vendor-specific propri-\\r\\netary binaries for a platform. This is typically where board or SoC-specific customizations, such \\r\\nas a HAL or custom daemon, are located. Starting with Android 9, manufacturers can use product file systems so that a single system \\r\\nimage can be used with different product images to support different software SKUs. With \\r\\nthis support in place, different Android software loads can be built for a single device using the \\r\\nsame core Android OS with only the manufacturer-supplied software differing for the various \\r\\nproducts. Android 10 introduced the concept of original design manufacturers (ODMs) file systems. These \\r\\nallow ODMs to further customize SoC or board-specific changes while having a common /\\r\\nvendor area. The concept is similar to the /product file system, except this is used to differen-\\r\\ntiate multiple hardware SKUs rather than software SKUs. These mount points are treated like /system from a security perspective: They are read-only \\r\\nmount points that are typically secured using dm-verity to ensure they are not manipulated \\r\\nafter being flashed to the device. Mount Points: /sys, /dev, and /proc\\r\\nThe Linux kernel can expose different types of virtual file systems to user space: These can be \\r\\nmounted like file systems–backed storage devices. As described in Chapter 4, the kernel creates \\r\\nthe file system out of thin air: It can put anything it wants into it. These three mount points expose kernel internals, devices interfaces, and kernel runtime infor-\\r\\nmation. In Android, the content of these areas is generally locked down for access only by \\r\\nsystem or privileged processes. It is easy to understand why: Exposing kernel internals or direct \\r\\ncalling access can cause a number of security problems. The AOSP framework’s SE policies allow for certain interfaces to be accessed by end apps (such \\r\\nas the binder interfaces), but by and large, most apps/processes cannot access these areas. In \\r\\nfact, the CDD specifically limits access, and there are CTS/VTS tests to verify this.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b7593919-5114-4048-83fd-e0d4a4f21866":{"__data__":"{\"id_\":\"b7593919-5114-4048-83fd-e0d4a4f21866\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CaFZiCX7w0kJs6ZMCYsjDtbM9Tfx4sz9cYCrRuY1/Nw=\"},\"PREVIOUS\":{\"nodeId\":\"17dd9616-4525-4bac-8947-0920f12297e1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"QIKOLaNlXioPnyDuF0HqYZuKMiL4LrHuQe65QpvJEy8=\"}},\"hash\":\"7juas5MeT7vgErerhHE+q1xlCiDKSznnIgABn+dlYfs=\",\"text\":\"Any OEM \\r\\ncreating a new device with new kernel interfaces needs to be especially careful not to allow \\r\\nunfettered access to custom kernel objects and interfaces! Miscellaneous Mount Points\\r\\nSeveral other mount points and partitions can exist in a running Android system. For example, \\r\\nthe /cache mount point is a read-write area that can be used by the system and applica-\\r\\ntions to store temporary data. Files and directories here are scoped per application, utilizing \\r\\na similar file system sandbox per application as used in the /data partition. Depending on \\r\\n9780134096346_print.indb   8125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d6212ce9-abeb-465f-a8a2-024c0ea2d339":{"__data__":"{\"id_\":\"d6212ce9-abeb-465f-a8a2-024c0ea2d339\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ztn7bnHqRmAmwP+SngZsV1AMSHm3w5tiqtuceukoQAA=\"},\"NEXT\":{\"nodeId\":\"5abf20f8-7570-4979-a6a7-d16d0654a758\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VNs+QuU9NiwtbYvs0pE5pNUy319Sql2jFCnRFo0ZJ7g=\"}},\"hash\":\"EprGON0n+Q82RDsI3Lfllw7Z8TkZdxiAX2ShaGp9gOY=\",\"text\":\"82Chapter 5  Platform Security\\r\\nthe manufacturer, other mount points may exist as well. As a general rule to keep with CDD \\r\\ncompliance, any mount point added to the system should be treated read-only or have  \\r\\nspecial SE policies defined to strictly limit access. For example, some manufacturers include a \\r\\n/firmware partition that contains firmware binaries for hardware on the board. This type of \\r\\npartition should be read-only and also protected with strict SE policy so only the OEM/vendor-\\r\\nprovided binaries and/or the kernel can use the contents. User Protections\\r\\nAndroid is first and foremost a mobile phone operating system. Although it has been shipped \\r\\non numerous tablets and IoT devices, at its heart it was made to power a mobile phone. With \\r\\nphones and tablets, users really do carry their lives with them. From contacts and email to \\r\\nvideo players and social media apps, people have become accustomed to carrying their life’s \\r\\ndetails on a device that can be lost or stolen. Protecting this information is critical. Android has supported a variety of user identification mechanisms beyond simple passwords \\r\\nor drawing sequences. Face unlock capability was first introduced in API 14 (Android 4.0, Ice \\r\\nCream Sandwich). Since then, it has expanded to include fingerprint readers and other biomet-\\r\\nrics. For many IoT type devices, this functionality is likely to be less important. One feature \\r\\nthat is used to protect the user and could be useful for IoT devices is the encrypted file system \\r\\nsupport. Full disk encryption (FDE) was added to the platform as far back as API 11 (Android 3.0, \\r\\nHoneycomb). FDE was a great step in protections as it allowed users to protect data on the \\r\\ndevice until their credentials had been entered. One major drawback is that with FDE, the \\r\\ndevice can only perform some very basic operations until credentials are entered. No phone \\r\\ncalls can be made (other than emergency), no alarms set, and so on. Starting with API 24 \\r\\n(Android 7.0, Nougat), file-based encryption (FBE) was added to the platform. FBE is built on top of a feature called Direct Boot. With Direct Boot, devices have two different \\r\\ntypes of storage locations to manage device data before and after the user has entered creden-\\r\\ntials.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5abf20f8-7570-4979-a6a7-d16d0654a758":{"__data__":"{\"id_\":\"5abf20f8-7570-4979-a6a7-d16d0654a758\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ztn7bnHqRmAmwP+SngZsV1AMSHm3w5tiqtuceukoQAA=\"},\"PREVIOUS\":{\"nodeId\":\"d6212ce9-abeb-465f-a8a2-024c0ea2d339\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"EprGON0n+Q82RDsI3Lfllw7Z8TkZdxiAX2ShaGp9gOY=\"}},\"hash\":\"VNs+QuU9NiwtbYvs0pE5pNUy319Sql2jFCnRFo0ZJ7g=\",\"text\":\"The Credential Encrypted (CE) storage area is the default location for data storage. It is \\r\\navailable only after the user has unlocked the device. The Device Encrypted (DE) storage area is available during Direct Boot as well as after the user \\r\\nhas entered credentials. Each area is protected using independent keys and encrypted data. Not \\r\\nonly does this allow Android and some system apps to operate before the user has unlocked the \\r\\ndevice, but it also better separates user profiles because each is encrypted with a different key. Note\\r\\nStarting with Android 10, all new devices are required to support FBE. There are also certain \\r\\nlimitations with FBE and adoptable storage, depending on the version of Android in use, if ear-\\r\\nlier than Android 10. See the AOSP documentation on file-based encryption for more details: \\r\\nhttps://source.android.com/security/encryption/file-based. 9780134096346_print.indb   8225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1363ed2f-169a-43e2-9c37-57ad2fbcbbda":{"__data__":"{\"id_\":\"1363ed2f-169a-43e2-9c37-57ad2fbcbbda\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Pqix26pN3YQNkVCz+xJEopt+IFE0rQdRG3Adu8+O2tg=\"},\"NEXT\":{\"nodeId\":\"a57ddf2f-0254-4b3d-9ade-0ee96c7d555d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dMT+YhyJqmIojca7zfUhXS0qZMyGkmeefqfABx7DkR8=\"}},\"hash\":\"rq9+TIcqsnfNx3eNv64EEm4jCi4eNgZnRMwJuTEE/90=\",\"text\":\"83Customizing Permissions\\r\\nFBE and Direct Boot require several lower-level features to be supported in the platform: kernel \\r\\nsupport, keymaster support (using HAL 1.0 or 2.0), Trusted Execution Environment (TEE) to \\r\\nimplement keymaster and keystore, and hardware root of trust and Verified Boot bound to \\r\\nkeymaster initialization. Additionally, system apps that must work before the user unlocks \\r\\nthe device must add support for new lifecycle events and APIs so CE protected areas are used \\r\\nappropriately. You can find details about FDE, FBE, and Direct Boot on the AOSP and main Android developer \\r\\nwebsites:\\r\\nhttps://source.android.com/security/encryption/full-disk\\r\\nhttps://source.android.com/security/encryption/file-based\\r\\nhttps://developer.android.com/training/articles/direct-boot\\r\\nCustomizing Permissions\\r\\nEarlier, this chapter described the Android Permissions model and showed how the permissions \\r\\nare leveraged by the framework to protect features. Although Android defines a multitude of \\r\\npermissions within the SDK, those are not the only permissions that are present in a running \\r\\nsystem. Some third-party SDKs, including some of Google’s SDKs for Android, define their own \\r\\npermissions, which may be used by apps. Both system-bundled applications and third-party \\r\\napplications can extend the system in this way. Note\\r\\nDefining new permissions is normally only necessary for system-level applications or apps that \\r\\nare part of a “suite” where there is a need to provide a level of protection when accessing cer-\\r\\ntain features and components. It is important to remember that in most cases, Android permis-\\r\\nsion protection for a package is a fairly low barrier for potential attackers to overcome if it is \\r\\nnot defined and used correctly. New Android permissions outside of the core framework are defined by individual packages for \\r\\npackage-specific reasons. For system-bundled applications, the custom permissions are added \\r\\nto the system when the first boot optimizes and installs the APK on the platform. For apps \\r\\ninstalled by third parties or installed after first boot, the permissions are defined when the \\r\\npackage is installed. How is this done? Via the application’s manifest, of course! The easiest way to understand \\r\\ncustom permissions is to see an example in action. Sample Custom Permission–Protected App\\r\\nA simple example of using custom permissions requires both a “host” application, which \\r\\ndefines the permissions, and a “consumer” app, which uses the permissions.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a57ddf2f-0254-4b3d-9ade-0ee96c7d555d":{"__data__":"{\"id_\":\"a57ddf2f-0254-4b3d-9ade-0ee96c7d555d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Pqix26pN3YQNkVCz+xJEopt+IFE0rQdRG3Adu8+O2tg=\"},\"PREVIOUS\":{\"nodeId\":\"1363ed2f-169a-43e2-9c37-57ad2fbcbbda\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rq9+TIcqsnfNx3eNv64EEm4jCi4eNgZnRMwJuTEE/90=\"}},\"hash\":\"dMT+YhyJqmIojca7zfUhXS0qZMyGkmeefqfABx7DkR8=\",\"text\":\"The Acme One \\r\\nplatform tree, set up in Chapter 2, contains both the host and client app. Rather than walk \\r\\n9780134096346_print.indb   8325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9e717a5e-621c-40f1-ade4-5eee41ab5181":{"__data__":"{\"id_\":\"9e717a5e-621c-40f1-ade4-5eee41ab5181\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BysW6JSC1+AlOkxDTYgYKilHp/j3pxnG0eNSphB4h1Q=\"},\"NEXT\":{\"nodeId\":\"1622b80d-0375-4bdb-b4cd-d73dadec3dae\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ByuXp8IaK05NwAcP/clgCuy1YTD+mMYbTM8sfgm675o=\"}},\"hash\":\"QW9VxP/3hePVguEKeWVJX12vGVehhrpdFaiglEzJ29A=\",\"text\":\"84Chapter 5  Platform Security\\r\\nthrough creation of the build files, resources, and so on, this section and the next show only \\r\\nthe files relevant to customizing permission usage. The host sample app is in device/acme/one/app/PermsSampleHost. The app defines  \\r\\ntwo new permissions, com.acme.one.permission.GET_MIN_TGT_SDK and com.acme.one. permission.NOTIFY_MIN_TG_SDK. These permissions are used to protect a BroadcastReceiver  \\r\\nand specific broadcast Intent response so that only apps granted the permissions can request \\r\\nand receive the minimum target SDK supported by the Acme platform. The minimum target \\r\\nSDK supported by the platform is stored in a system property (ro.build.version.min_\\r\\nsupported_target_sdk), but is not exposed via a public Android framework API. Although \\r\\nnot incredibly useful to the consumer application, it provides a clear illustration of how custom \\r\\npermissions can be defined and used with a simple example. Note\\r\\nThis contrived example of a custom permission protecting something within the platform also \\r\\nillustrates one of the dangers an OEM must bear in mind: accidentally exposing details to other \\r\\napps, which is called a side channel leak or feature leak. OEMs need to carefully consider what \\r\\nplatform private APIs or information is exposed via a custom API. When Android permissions are defined, they can be grouped together for organization  \\r\\npurposes. Surprisingly, permission cannot be granted or denied to groups as a whole. Permissions can only be controlled individually. In other words, permission groups are useful \\r\\nfor end users to view permissions via the Settings application. Otherwise, though, they do not \\r\\ncome into play. The manifest for the example host application defines a permission group and \\r\\nthe two new permissions. The new permission group for these two permissions is optional and \\r\\nshown here for completeness. Listing 5.7 shows the manifest file for the sample host application.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1622b80d-0375-4bdb-b4cd-d73dadec3dae":{"__data__":"{\"id_\":\"1622b80d-0375-4bdb-b4cd-d73dadec3dae\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BysW6JSC1+AlOkxDTYgYKilHp/j3pxnG0eNSphB4h1Q=\"},\"PREVIOUS\":{\"nodeId\":\"9e717a5e-621c-40f1-ade4-5eee41ab5181\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"QW9VxP/3hePVguEKeWVJX12vGVehhrpdFaiglEzJ29A=\"}},\"hash\":\"ByuXp8IaK05NwAcP/clgCuy1YTD+mMYbTM8sfgm675o=\",\"text\":\"Listing 5.7 shows the manifest file for the sample host application. Listing 5.7 PermsSampleHost AndroidManifest.xml\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<manifest xmlns:android=http://schemas.android.com/apk/res/android\\r\\n    coreApp=\\\"true\\\"\\r\\n    package=\\\"com.acme.one.permssamplehost\\\" >\\r\\n    <permission-group android:name=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                      android:description=\\\"@string/perm_group_tgt_info_descr\\\"\\r\\n                      android:label=\\\"@string/perm_group_tgt_info_label\\\" />\\r\\n    <permission android:name=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\"\\r\\n                android:description=\\\"@string/perm_get_min_tgt_sdk_descr\\\"\\r\\n                android:label=\\\"@string/perm_get_min_tgt_sdk_label\\\"\\r\\n                android:permissionGroup=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                android:protectionLevel=\\\"signature\\\" />\\r\\n9780134096346_print.indb   8425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"685cd3b4-d3b0-4d5e-8fb7-f01351560a84":{"__data__":"{\"id_\":\"685cd3b4-d3b0-4d5e-8fb7-f01351560a84\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kX5O0vjOihkH9TV+hLfJil9kEaHOt7RzsS7gZfiAt4I=\"}},\"hash\":\"jR6Phk66nBrw7e/dPfYgZ0MLXSCTQOd5oFNuIpJe6XI=\",\"text\":\"85Customizing Permissions\\r\\n    <permission android:name=\\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\"\\r\\n                android:description=\\\"@string/perm_notify_min_tgt_sdk_descr\\\"\\r\\n                android:label=\\\"@string/perm_notify_min_tgt_sdk_label\\\"\\r\\n                android:permissionGroup=\\\"com.acme.one.permission-group.TGT_INFO\\\"\\r\\n                android:protectionLevel=\\\"signature\\\" />\\r\\n    <application android:label=\\\"@string/app_name\\\"\\r\\n                 android:icon=\\\"@drawable/app_launcher_icon\\\"\\r\\n                 android:supportsRtl=\\\"true\\\"\\r\\n                 android:allowBackup=\\\"false\\\" >\\r\\n        <receiver android:name=\\\".MinTargetReceiver\\\"\\r\\n                 android:label=\\\"@string/min_tgt_receiver_name\\\"\\r\\n                 android:permission=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\" >\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"com.acme.one.service.GET\\\" />\\r\\n            </intent-filter>\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"com.acme.one.service.NOTIFY\\\" />\\r\\n            </intent-filter>\\r\\n        </service>\\r\\n    </application>\\r\\n</manifest>\\r\\nNote how the permissions are defined in the <permission> subelements of the <manifest> \\r\\ntag, and both are signature-level permissions. Similarly, both are part of a new permission \\r\\ngroup, defined via the <permission-group> tag. Be very careful when using the group that the \\r\\npermissionGroup attribute in the permission matches exactly with the name attribute of the \\r\\npermission group! It must be exact, and the specified group actually defined in the manifest (or \\r\\nelsewhere in the system), otherwise the new permissions will not be created! The soong blueprint file (see Listing 5.8) calls out the app as product specific and utilizes plat-\\r\\nform APIs. This means that the app will be built against the internal framework libraries, not \\r\\nthe one that is stripped for inclusion in the Android SDK. Because the app utilizes a hidden \\r\\nclass to access the system properties, it must be built this way. Listing 5.8 PermsSampleHost Android.bp\\r\\nandroid_app {\\r\\n    name: \\\"PermsSampleHost\\\",\\r\\n    product_specific: true,\\r\\n    certificate: \\\"shared\\\",\\r\\n    srcs: [\\r\\n        \\\"app/src/**/*.java\\\",\\r\\n9780134096346_print.indb   8525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0946d886-7cb4-4a85-9a40-73e9cd11d3d8":{"__data__":"{\"id_\":\"0946d886-7cb4-4a85-9a40-73e9cd11d3d8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"RE28QvhstKNoObD9+WiK6rJFHXOYEX0/cLneD5kQZww=\"}},\"hash\":\"//0MQleIgxZ3DixlU9CY+eviWUObmx2+D7EnkF0mfNw=\",\"text\":\"86Chapter 5  Platform Security\\r\\n    ],\\r\\n    resource_dirs: [\\r\\n        \\\"app/src/main/res\\\",\\r\\n    ],\\r\\n    manifest: \\\"app/src/main/AndroidManifest.xml\\\"\\r\\n}\\r\\nThe main source of the application is a BroadcastReceiver, which is started via an explicit \\r\\nIntent and responds accordingly. The requesting application sends the Intent with one of two actions specified. The GET \\r\\naction requires an extra to be included with a Messenger that the receiver will use to send \\r\\nback the response as a Message. The NOTIFY action will send a response via broadcast Intent \\r\\nwhich can only be received by applications that hold the NOTIFY_MIN_TGT_SDK permission. The receiver code is contained in app/src/main/java/com/acme/one/permssamplehost/\\r\\nMinTargetReceiver.java, and Listing 5.9 shows the key portions of it. Listing 5.9 PermsSampleHost MinTargetReceiver.java\\r\\npackage com.acme.one.permssamplehost;\\r\\n... public class MinTargetReceiver extends BroadcastReceiver {\\r\\n    private static final String TAG = \\\"MinTargetReceiver\\\";\\r\\n    private static final String ACTION_GET = \\\"com.acme.one.action.GET\\\";\\r\\n    private static final String ACTION_NOTIFY = \\\"com.acme.one.action.NOTIFY\\\";\\r\\n    private static final String ACTION_NOTIFY_RESP =\\r\\n            \\\"com.acme.one.action.NOTIFY_RESP\\\";\\r\\n    private static final String EXTRA_MESSENGER =\\r\\n            \\\"com.acme.one.extra.EXTRA_MESSENGER\\\";\\r\\n    private static final String EXTRA_MIN_TGT_SDK =\\r\\n            \\\"com.acme.one.extra.EXTRA_MIN_TGT_SDK\\\";\\r\\n    private static final String PERMISSION_NOTIFY =\\r\\n            \\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\";\\r\\n    private static final String SYSTEM_PROP_MIN_TGT_SDK =\\r\\n            \\\"ro.build.version.min_supported_target_sdk\\\";\\r\\n    private static final int MESSAGE_MIN_TGT_SDK = 1000;\\r\\n    public int getMinTargetSdk() {\\r\\n        return SystemProperties.getInt(SYSTEM_PROP_MIN_TGT_SDK, -1);\\r\\n    }\\r\\n    @Override\\r\\n    public void onReceive(Context context, Intent intent) {\\r\\n9780134096346_print.indb   8625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9a50b003-0da1-45cb-a4fa-413b1600be22":{"__data__":"{\"id_\":\"9a50b003-0da1-45cb-a4fa-413b1600be22\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oYNuC5bnCmUm9Y1oO7t/fSFXqkwEfeqc3ay8uE1GE3M=\"}},\"hash\":\"oQXMw/96gI+gySDvAMNvjLBsYpdK+0agRM1sqbLJ9sg=\",\"text\":\"87Customizing Permissions\\r\\n        String action = intent.getAction();\\r\\n        if (action == null) {\\r\\n            Log.e(TAG, \\\"No action provided\\\");\\r\\n        }\\r\\n        if (TextUtils.equals(action, ACTION_GET)) {\\r\\n            Messenger msgr = intent.getParcelableExtra(EXTRA_MESSENGER);\\r\\n            if (msgr != null) {\\r\\n                Message resp = Message.obtain();\\r\\n                resp.what = MESSAGE_MIN_TGT_SDK;\\r\\n                resp.arg1 = getMinTargetSdk();\\r\\n                try {\\r\\n                    msgr.send(resp);\\r\\n                } catch (RemoteException e) {\\r\\n                    //  Ignore, client has died\\r\\n                }\\r\\n            } else {\\r\\n                Log.e(TAG, \\\"No Messenger provided for response\\\");\\r\\n            }\\r\\n        } else if (TextUtils.equals(action, ACTION_NOTIFY)) {\\r\\n            Intent respIntent = new Intent(ACTION_NOTIFY_RESP);\\r\\n            respIntent.putExtra(EXTRA_MIN_TGT_SDK, getMinTargetSdk());\\r\\n            sendBroadcast(respIntent, PERMISSION_NOTIFY);\\r\\n        } else {\\r\\n            Log.e(TAG, \\\"Invalid action: \\\" + action);\\r\\n        }\\r\\n    }\\r\\n}\\r\\nAfter it is built into the system image, you can launch the application by sending the appropri-\\r\\nate Intent. Because the shell does not have the necessary permission granted, an attempt to \\r\\nrun the app from the command line will fail, as shown in the logcat output:\\r\\n$ am broadcast -a \\\"com.acme.one.action.GET\\\" \\\\\\r\\n-n \\\"com.acme.one.permssamplehost/.MinTargetService\\\"\\r\\nW/BroadcastQueue( 2742): Permission Denial: broadcasting Intent  { act=com.acme.one.action.GET flg=0x400010  \\r\\ncmp=com.acme.one.permssamplehost/.MinTargetReceiver } from null (pid=19015, uid=2000) requires com.acme.one.permission.GET_MIN_TGT_SDK due to receiver  \\r\\ncom.acme.one.permssamplehost/.MinTargetReceiver\\r\\n9780134096346_print.indb   8725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b6094174-85ac-46d7-ac63-392a2467765f":{"__data__":"{\"id_\":\"b6094174-85ac-46d7-ac63-392a2467765f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hYV6lIPwAnZpGZWvfT9oM2Njy3tD/2oWN8idlPNgseY=\"}},\"hash\":\"EV6SdolozNvKTu0jLqSBBr5cY+FSwVRABpFqVyLA/iE=\",\"text\":\"88Chapter 5  Platform Security\\r\\nSample Custom Permission Client App\\r\\nTo complete the example of custom permissions, we’ll need a client app that uses the permis-\\r\\nsions. This sample can be found in device/acme/one/app/PermsSampleClient. This app uses \\r\\nthe permissions defined by the host app by declaring that it uses them in its manifest. When \\r\\nthe app is installed on the platform, it will be granted the custom permissions as long as it was \\r\\nsigned by the same certificate as the host. Listing 5.10 shows the manifest for the client app. Listing 5.10 PermsSampleClient AndroidManifest.xml\\r\\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\r\\n<manifest xmlns:android=http://schemas.android.com/apk/res/android\\r\\n    package=\\\"com.acme.one.permssampleclient\\\" >\\r\\n    <uses-permission android:name=\\\"com.acme.one.permission.GET_MIN_TGT_SDK\\\" />\\r\\n    <uses-permission android:name=\\\"com.acme.one.permission.NOTIFY_MIN_TGT_SDK\\\" />\\r\\n    <application\\r\\n        android:label=\\\"@string/app_name\\\"\\r\\n        android:icon=\\\"@drawable/app_launcher_icon\\\"\\r\\n        android:supportsRtl=\\\"true\\\"\\r\\n        android:allowBackup=\\\"false\\\">\\r\\n        <activity android:name=\\\".MainActivity\\\">\\r\\n            <intent-filter>\\r\\n                <action android:name=\\\"android.intent.action.MAIN\\\" />\\r\\n                <category android:name=\\\"android.intent.category.LAUNCHER\\\" />\\r\\n            </intent-filter>\\r\\n        </activity>\\r\\n    </application>\\r\\n</manifest>\\r\\nIt may not be obvious, but a potential race condition exists with custom permissions. What \\r\\nhappens if the client app is installed but the host app is not? In this case the custom permis-\\r\\nsions are not granted to the consumer app, because they do not exist in the system at the time \\r\\nthe consumer app is installed. This is true even if the host app is installed at a later point in \\r\\ntime! The client app’s permissions are not revisited just because the host app is installed. Another interesting situation occurs when the host app is removed after its permissions have \\r\\nbeen granted to another app. In this case the custom permissions are wiped from the system’s \\r\\nknown permissions, but the client app retains the permissions being granted until it is removed \\r\\nor reinstalled! 9780134096346_print.indb   8825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"49f68d76-3e1b-4934-908f-c94e2af50c42":{"__data__":"{\"id_\":\"49f68d76-3e1b-4934-908f-c94e2af50c42\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vXYFwSnpV0/98KBd9kotZljzcrlc2KTyCdclNFegpxU=\"},\"NEXT\":{\"nodeId\":\"c2e4be1a-459f-4847-89cc-7e3408c59888\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BwMIumY87o4+o+qcOpjjOn4jjpZsRVytveX+0n+5ZtE=\"}},\"hash\":\"oYN97dShq4iAFOOfK+WW2IH5DPGdm1+/7mRIe0tDTuA=\",\"text\":\"89Customizing Permissions\\r\\n Note\\r\\nAndroid custom permissions work on a “first come, first defined” basis. If two app packages \\r\\ndefine the same exact permission, the first one to be installed is the one that defines it from \\r\\nthe system’s point of view. Remember, it’s just a string associated with a package and signa-\\r\\nture! The exception to this is if the system (or system package) defines a permission. Since \\r\\nAndroid 4.4.3, the system ensures that system-defined permissions take precedence. The client app has a painfully simple UI. It presents two buttons for retrieving the minimum \\r\\ntarget SDK, one using the “get” technique and the other using the “notify” technique. The text \\r\\nstatus area shows the result or a failure, if encountered. When the “get” button is tapped, an \\r\\nIntent is sent to the service and includes the Messenger where the response is to be sent. The \\r\\nMessenger is bound to a new Handler object that runs in the main thread of the app. When \\r\\nthe “notify” button is tapped, the Intent is sent to the service, and the BroadcastReceiver \\r\\nis listening for the response. Listing 5.11 shows the key parts of the activity source file, written \\r\\nin Kotlin. You can find detailed information about Messenger and Message in the book Android \\r\\nConcurrency, published by Pearson, Inc. Listing 5.11 PermsSampleClient MainActivity.kt\\r\\npackage com.acme.one.permssampleclient\\r\\n...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c2e4be1a-459f-4847-89cc-7e3408c59888":{"__data__":"{\"id_\":\"c2e4be1a-459f-4847-89cc-7e3408c59888\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vXYFwSnpV0/98KBd9kotZljzcrlc2KTyCdclNFegpxU=\"},\"PREVIOUS\":{\"nodeId\":\"49f68d76-3e1b-4934-908f-c94e2af50c42\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oYN97dShq4iAFOOfK+WW2IH5DPGdm1+/7mRIe0tDTuA=\"}},\"hash\":\"BwMIumY87o4+o+qcOpjjOn4jjpZsRVytveX+0n+5ZtE=\",\"text\":\"class MainActivity : Activity(), Handler.Callback {\\r\\n    companion object {\\r\\n        private const val TAG = \\\"MainActivity\\\"\\r\\n        private const val ACME_MIN_TGT_RXR_PKG = \\\"com.acme.one.permssamplehost\\\"\\r\\n        private const val ACME_MIN_TGT_RXR =\\r\\n            ACME_MIN_TGT_RXR_PKG + \\\".MinTargetReceiver\\\"\\r\\n        private const val MESSAGE_MIN_TGT_SDK = 1000\\r\\n        private const val ACTION_GET = \\\"com.acme.one.action.GET\\\"\\r\\n        private const val ACTION_NOTIFY = \\\"com.acme.one.action.NOTIFY\\\"\\r\\n        private const val ACTION_NOTIFY_RESP = \\\"com.acme.one.action.NOTIFY_RESP\\\"\\r\\n        private const val EXTRA_MESSENGER =\\r\\n            com.acme.one.extra.EXTRA_MESSENGER\\\"\\r\\n        private const val EXTRA_MIN_TGT_SDK =\\r\\n            com.acme.one.extra.EXTRA_MIN_TGT_SDK\\\"\\r\\n    }\\r\\n    private lateinit var statusText: TextView\\r\\n    private lateinit var getButton: Button\\r\\n    private lateinit var notifyButton: Button\\r\\n    private val handler = Handler(this)\\r\\n    private val messenger = Messenger(handler)\\r\\n    private var active = false\\r\\n    private val respRxr = object : BroadcastReceiver() {\\r\\n9780134096346_print.indb   8925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"29849171-95a2-4a08-a49f-0cac9b956e93":{"__data__":"{\"id_\":\"29849171-95a2-4a08-a49f-0cac9b956e93\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Tu9dAWjRwezbDOx7vwVC2UxNogzz/Uc/DPK6Z5N9OI4=\"}},\"hash\":\"Xzw26RPmG89ovU7sa0PjODi3+A9ijUHLTsrnC+0guqU=\",\"text\":\"90Chapter 5  Platform Security\\r\\n        override fun onReceive(context: Context, intent: Intent) {\\r\\n            when (intent.action) {\\r\\n                ACTION_NOTIFY_RESP -> {\\r\\n                    val minTgtSdk = intent.getIntExtra(EXTRA_MIN_TGT_SDK, -1)\\r\\n                    if (minTgtSdk != -1) {\\r\\n                        handler.obtainMessage(MESSAGE_MIN_TGT_SDK, minTgtSdk, 0)\\r\\n                            .sendToTarget()\\r\\n                    } else {\\r\\n                        Log.w(TAG, \\\"[onReceive] no min target SDK provided\\\")\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    private fun createReceiverIntent(action: String): Intent {\\r\\n        val intent = Intent(action)\\r\\n        intent.component = ComponentName(ACME_MIN_TGT_RXR_PKG, ACME_MIN_TGT_RXR)\\r\\n        return intent\\r\\n    }\\r\\n    override fun onCreate(savedInstanceState: Bundle? ) {\\r\\n        super.onCreate(savedInstanceState)\\r\\n        ... getButton.setOnClickListener {\\r\\n            val getIntent = createReceiverIntent(ACTION_GET)\\r\\n            getIntent.putExtra(EXTRA_MESSENGER, messenger)\\r\\n            statusText.setText(R.string.using_get)\\r\\n            Log.d(TAG, \\\"[GET] starting service\\\")\\r\\n            sendBroadcast(getIntent)\\r\\n        }\\r\\n        notifyButton.setOnClickListener {\\r\\n            val notifyIntent = createReceiverIntent(ACTION_NOTIFY)\\r\\n            statusText.setText(R.string.using_notify)\\r\\n            Log.d(TAG, \\\"[NOTIFY] starting service\\\")\\r\\n            sendBroadcast(notifyIntent)\\r\\n        }\\r\\n    }\\r\\n    override fun onResume() {\\r\\n        super.onResume()\\r\\n        ... 9780134096346_print.indb   9025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"869d52e4-ff02-464c-a16b-aa347f93d75c":{"__data__":"{\"id_\":\"869d52e4-ff02-464c-a16b-aa347f93d75c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZS/99i5xM43LNzI3fetzJZ2FEIjCM1KL9Rgm0AwtBSA=\"}},\"hash\":\"WqEBjHgjEMPOvzhDixiQ9XF5zESOjx44v5czsULsX8I=\",\"text\":\"91Customizing Permissions\\r\\n        active = true\\r\\n    }\\r\\n    override fun onPause() {\\r\\n        active = false\\r\\n        ... super.onPause()\\r\\n    }\\r\\n    override fun handleMessage(msg: Message): Boolean {\\r\\n        if (!active) {\\r\\n            ... return true\\r\\n        }\\r\\n        when (msg.what) {\\r\\n            MESSAGE_MIN_TGT_SDK -> {\\r\\n                ... statusText.text = getString(R.string.min_tgt_sdk_fmt, msg.arg1)\\r\\n            }\\r\\n            else -> {\\r\\n                Log.e(TAG, \\\"[handleMessage] unknown message type: ${msg.what}\\\")\\r\\n            }\\r\\n        }\\r\\n        return true\\r\\n    }\\r\\n}\\r\\n Note\\r\\nAlthough the sample client app does use Kotlin, note that it does not use any androidx librar-\\r\\nies or other third-party libraries. This is intentional, because the app is built as part of the \\r\\nAOSP platform, which does not use Gradle. This means “standard” libraries available in Android \\r\\nStudio via Maven repositories are not readily available with the built-in Android app package \\r\\nrules when building via soong. Integrating Gradle into the AOSP build is possible, but it is out-\\r\\nside of the scope of this book. The build files and other resources are not interesting for this sample. Running the app on the \\r\\nplatform and touching the “get” button shows the output, and monitoring the logcat output \\r\\nshows the expected details:\\r\\nD/MainActivity(20455): [GET] requesting min target SDK\\r\\nD/MainActivity(20455): [handleMessage] received min target SDK: 23\\r\\n9780134096346_print.indb   9125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"46197096-ac27-47eb-98b1-1338caca0a4d":{"__data__":"{\"id_\":\"46197096-ac27-47eb-98b1-1338caca0a4d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"moYE6RqCW6f6Uot3as5kEmayKeMG+TQNyforr5ripss=\"}},\"hash\":\"2stQniTBbr7RIl9MtUZa3RvRjgZmCVLBJQKE4EGh2IU=\",\"text\":\"92Chapter 5  Platform Security\\r\\nSummary\\r\\nAndroid utilizes numerous security features to keep the device, OS, and user data safe. This \\r\\nchapter looked at the basic security concerns of any computing environment:\\r\\n ■The device is running valid code. ■The operation being performed is allowed. ■The app or user data is safe. ■The security features can be extended and customized. The chapter examined how Android verified boot works and how vendors enable or custom-\\r\\nize it. After Android is up and running, the process sandbox, SE policy and Android’s permis-\\r\\nsions system work to keep apps isolated from each other and user data safe. This sandboxing \\r\\nin memory, file system, and via SE policy has morphed over Android’s lifetime to better protect \\r\\nthe system. Rounding out this chapter is a sample of how Android’s permission system can be \\r\\nextended with custom permissions. Utilizing a custom permission can be particularly useful for \\r\\nOEMs or package creators where only certain packages should be able to use the functionality. Pre-bundled app packages from the OEM or a suite of packages from an app vendor signed with \\r\\nthe same certificate are good examples of where this can be leveraged. 9780134096346_print.indb   9225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"abc888a7-eeac-454c-b643-59f6cb67a5be":{"__data__":"{\"id_\":\"abc888a7-eeac-454c-b643-59f6cb67a5be\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"bjvB+pAYircEAsif8caiBaFVspDTzrL5xSOVEs9clg4=\"}},\"hash\":\"zAGrtWq5iDh9fLY3uu1tcZ4/BkHA4pWXRRM2Om7HXjg=\",\"text\":\"6\\r\\nSystem Startup: Installing \\r\\nand Booting the System\\r\\nThe diagram of the Android system, shown in Chapter 3 in Figure 3.1, is more than simply \\r\\nallegorical. It is meant to show, from the bottom to the top, dependencies within the Android \\r\\nsystem. The kernel creates an environment for applications; system applications and libraries \\r\\ncreate an environment for the Android system; and so on up to the top of the chain: Android \\r\\nuser applications. Clearly, if each layer depends on the one beneath it, the components that \\r\\ncomprise any given layer must be initialized before those in the layer above. The process of \\r\\ninitializing the successive layers takes place at system startup when a device is booted. This \\r\\nchapter describes that process. The Boot Process\\r\\nBooting a device is a complex and multi-phase process. It is likely to involve several programs \\r\\nthat are, themselves, large and complex. To further complicate matters, the entire process takes \\r\\nplace in an environment very close to the hardware: something that most developers never \\r\\nexperience. Chapter 5 discussed the ways in which the boot process affects device security. Even \\r\\nif a project does not require creating or customizing it, having a general understanding of how \\r\\nthe boot process works and how its internal phases relate to one another is useful. Figure 6.1 outlines the phases of the boot process from power on through the initialization of \\r\\nthe Android system. 9780134096346_print.indb   9325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"978b75b4-633a-46a2-97ad-a3c33fc231ee":{"__data__":"{\"id_\":\"978b75b4-633a-46a2-97ad-a3c33fc231ee\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CU1nJayuRdCfhskPa4DVUi8nKhh5koW+MjRwG2dYyz4=\"}},\"hash\":\"f+mXOWmxZ0TkFxWA1U+eDoQbgq2s8fLRCzFuDZgL5HI=\",\"text\":\"94Chapter 6  System Startup: Installing and Booting the System\\r\\nPower On\\r\\nBoot ROM\\r\\nBootloader\\r\\nFastbootKernel\\r\\ninit\\r\\ndaemondaemondaemonrecoveryUI\\r\\nKernel\\r\\ninit\\r\\nZygote\\r\\nserviceservice\\r\\nFigure 6.1 The Android Boot Process\\r\\nMore specifically, here are the steps that most Android devices take when booting:\\r\\n1. Hardware Boot\\r\\n a. Power Stable\\r\\n b. Reset CPU\\r\\n c. Load and start Boot ROM (hardwired address)\\r\\n9780134096346_print.indb   9425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1246c188-5202-422d-9c6b-7608018cdce5":{"__data__":"{\"id_\":\"1246c188-5202-422d-9c6b-7608018cdce5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mj0c+u2y0tYXArwt1MQbBl2OQfszTaXpHiXGBuqz7O8=\"}},\"hash\":\"czzH5l0utFCNtxzcKzsw8W7FqJqD0eRjVlAI4pnxSKY=\",\"text\":\"95The Boot Process\\r\\n2. Bootloader (Device dependent, usually proprietary)\\r\\n a. Power-on Self-Test (POST)\\r\\n b. Video boot\\r\\n c. External storage probe\\r\\n d. Device-specific hardware initialization\\r\\n e. Fastboot, system update, other features\\r\\n f. Cryptographic verification of kernel\\r\\n g. Load and start kernel\\r\\n3. Kernel\\r\\n a. Phase 1\\r\\n    i. Memory initialization\\r\\n   ii. File system initialization\\r\\n  iii. Network initialization\\r\\n b. Phase 2 (overwrites phase 1 code)\\r\\n    i. User-space initialization\\r\\n   ii. Load and start init\\r\\n4. init\\r\\n a. Start system daemons\\r\\n b. Start Android\\r\\n5. Android\\r\\n a. Start Zygote\\r\\n b. Android System Services\\r\\nTo examine these steps in full detail, in the next few sections we follow the abbreviated log \\r\\nof the boot of a HiKey960. Although, obviously, even minor changes in software and hard-\\r\\nware will cause substantial changes in the boot log, key events are similar across machines. Reviewing an actual log is useful in the interests of specificity. Bootloader\\r\\nFunctionally, the early phases of system boot are part of the hardware. The code implementing \\r\\nthem is frequently stored in on-chip read-only memory (ROM). They are not something that \\r\\ncan be changed easily, even in the unlikely circumstance that doing so would be desirable. For \\r\\nall practical purposes, both can be considered part of the device. Listing 6.1 shows power-on through the initiation of the software bootloader. 9780134096346_print.indb   9525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ef963765-bd08-4bfa-a264-d388f535bd6a":{"__data__":"{\"id_\":\"ef963765-bd08-4bfa-a264-d388f535bd6a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CiW33g6qXdwYk2zVb5pGVWDYBcxUvskNGTwPLTxdN4I=\"}},\"hash\":\"ezEyAUOio2ShdFpjQ+0z5kCTgcxXdo2s7CzuoZrO81k=\",\"text\":\"96Chapter 6  System Startup: Installing and Booting the System\\r\\nListing 6.1 xloader Boot Log\\r\\n^@hikey960 boarid:5301 xloader use UART6\\r\\nscsysstat_value[0]. clear reset source\\r\\nlast_keypoint0,reboot_type0\\r\\nsecdbg not DCU. SecDbgVer exit\\r\\n xloader chipid is: 0x36600110, start at 470ms. Build Date: Dec  6 2017, 15:31:59 [clock_init] ++\\r\\nhikey960 [hikey960_clk_init]\\r\\nhi3660 [clk_setup]\\r\\n[clock_init] --\\r\\nstorage type is UFS\\r\\nufs retry: 6 count v_tx:0 v_rx:0\\r\\nufs set v_tx:0 v_rx:0\\r\\nHikey960[5301] no need avs_init. ddr ft:0xf20332a3,mode:1 target:4\\r\\nUceLdOk\\r\\n<lines omitted...>\\r\\n1244M\\r\\n1866M\\r\\nC2R,V0x00000015 e:193\\r\\nC2R,V0x00000016 e:66\\r\\nC0R,V0x00000017 e:66\\r\\nC1R,V0x00000017 e:66\\r\\nboot_c0 PROFILE 4\\r\\nslave0 irq0:0x00000004\\r\\nslave1 irq0:0x00000004\\r\\nmain:     ******** Fastboot for Kirin *****************\\r\\nNote\\r\\nAccess to the boot log is essential for debugging the boot process. Clearly, the log will not \\r\\nbe available through adb, a daemon process that is started relatively late in system startup. Although on most systems, retrieving most of the log produced by the most recent boot is \\r\\n possible via the dmesg command, the process is cumbersome and requires that the board \\r\\n successfully boot at least far enough to support a shell. The logs shown in this chapter were captured from a UART mezzanine board attached to the \\r\\nbooting Hikey960. Such a board, or at least something similar, is an essential tool for bringing \\r\\nup a board and debugging the boot process. 9780134096346_print.indb   9625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1b320066-0048-468a-b961-fdea0d5c8bf9":{"__data__":"{\"id_\":\"1b320066-0048-468a-b961-fdea0d5c8bf9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"18PIIdkWoUBLpcVkPt0Wg1myK4f9miIKQsKECF7aFoI=\"},\"NEXT\":{\"nodeId\":\"0c2b9b29-0ab7-4b62-85c6-9c064d53807c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UtJegJ886r+KScveBqKQw5aWYdpHzXLeO15WWqgtadc=\"}},\"hash\":\"t8rnagANlnUQqx3ezX6wHd3cCFEjOiTLfvQ+oXHFaJ4=\",\"text\":\"97The Boot Process\\r\\nWhen the device is powered on, the first thing that happens is that the power supply changes \\r\\nto a powered-up state. When the power supply senses that board power levels have stabilized in \\r\\nthe new state, it sends a RESET signal to the CPU. This signal causes the CPU to load data from \\r\\nboot ROM and to start executing it. The bootloader program is likely to execute in several stages. Typically, the first stage is a small \\r\\nprogram that performs some very low level and device-specific initialization tasks. Among these \\r\\ntasks on most devices is a power-up self-test (POST) that does basic sanity checks of the various \\r\\nhardware subsystems (memory, bus, and so on) to verify that they are working normally. If \\r\\none of the POST tests fails, the entire boot process is usually aborted with some very minimal \\r\\nperceptible feedback: a pattern of sounds, flashing LEDs or, at most, a very simple error code on \\r\\nthe console display. If the POST passes, the bootloader loads additional code from a location specified in a canoni-\\r\\ncal location on a canonical memory device. For Android, this is nearly always a special parti-\\r\\ntion on the main flash card. The exact specifications and format of the special file depend on \\r\\nthe device and the version of Android. Historically, Android devices were formatted using the \\r\\nMaster Boot Record (MBR) standard. Newer devices are more likely to use a newer standard, \\r\\nthe GUID Partition Table (GPT). Regardless of the specifics of how the additional bootloader code is discovered, the process \\r\\nof executing it is very nearly still part of the hardware. The second stage of the bootloader, \\r\\nhowever, is the first code that a starting system executes that is not in read-only memory. Because the later stages of the bootloader are mutable code, one of the tasks of the first stage of \\r\\nthe bootloader is verifying the code for subsequent stages before it is executed. The bootloader \\r\\ncomputes a cryptographic signature for any code obtained from a writable device and compares \\r\\nthe computed signature with one that is stored in the secure area of chipset memory. If the two \\r\\ndo not match, the boot process fails, much as it would fail a POST. Starting with code that is in read-only memory (and which, therefore, cannot be changed), \\r\\neach piece of code cryptographically verifies the next piece of code before executing it.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0c2b9b29-0ab7-4b62-85c6-9c064d53807c":{"__data__":"{\"id_\":\"0c2b9b29-0ab7-4b62-85c6-9c064d53807c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"18PIIdkWoUBLpcVkPt0Wg1myK4f9miIKQsKECF7aFoI=\"},\"PREVIOUS\":{\"nodeId\":\"1b320066-0048-468a-b961-fdea0d5c8bf9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"t8rnagANlnUQqx3ezX6wHd3cCFEjOiTLfvQ+oXHFaJ4=\"}},\"hash\":\"UtJegJ886r+KScveBqKQw5aWYdpHzXLeO15WWqgtadc=\",\"text\":\"This \\r\\ncreates a chain of trust that guarantees that the running system has not been tampered with \\r\\nor altered. This trust is important to keep the user of a device safe from malware: viruses and \\r\\ntrojans that might be hidden in the boot code. It also may be important to protect the device \\r\\nfrom its user. Applications such as digital rights management (DRM) and secure funds transfer \\r\\nmay depend on code that has been verified and that is free from meddling. The strategies used by various manufacturers for configuring the hardware and communicating \\r\\nwith the bootloader vary widely. One common way of building a bootloader that is both flex-\\r\\nible and extensible involves storing configuration parameters and code in hidden partitions on \\r\\nthe device storage. Examining the persistent storage for an actual device will usually reveal a handful of parti-\\r\\ntions that are never mounted as part of the Android file system. Recent revisions of Linux will \\r\\nlist these partitions by name, even if they are never mounted, in the subdirectory of /dev, \\r\\n9780134096346_print.indb   9725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ebe5b1fa-365e-404d-ac7c-a1112017b49f":{"__data__":"{\"id_\":\"ebe5b1fa-365e-404d-ac7c-a1112017b49f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Z2vOIapzomcwJBgmcuYts7bF42R7AYxKWoYa312ZHRo=\"},\"NEXT\":{\"nodeId\":\"cb03bb28-e9c8-4499-81f2-1e3ede77d43f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zoLz3r698cDsy/mfs+AGX/U/bq4q2gcHougb0HOaC3Y=\"}},\"hash\":\"a87Q8ePerBwkb+wRxUQMWHxx3fG7XVPa5jmho5zY/FI=\",\"text\":\"98Chapter 6  System Startup: Installing and Booting the System\\r\\nappropriately called, “by-name. ” For example, Listing 6.2 shows the partitions included on the \\r\\nHiKey960 used in most of these examples.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cb03bb28-e9c8-4499-81f2-1e3ede77d43f":{"__data__":"{\"id_\":\"cb03bb28-e9c8-4499-81f2-1e3ede77d43f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Z2vOIapzomcwJBgmcuYts7bF42R7AYxKWoYa312ZHRo=\"},\"PREVIOUS\":{\"nodeId\":\"ebe5b1fa-365e-404d-ac7c-a1112017b49f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"a87Q8ePerBwkb+wRxUQMWHxx3fG7XVPa5jmho5zY/FI=\"},\"NEXT\":{\"nodeId\":\"0abbc996-c2cc-4e78-83b0-529987b5a4e8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"pE5fsnJQJ3gyNRXqXsZV8mGXp0Iqg/EmcqAzBD4Rm08=\"}},\"hash\":\"zoLz3r698cDsy/mfs+AGX/U/bq4q2gcHougb0HOaC3Y=\",\"text\":\"Listing 6.2 Files in /dev\\r\\nadb shell 'ls –R /dev' | grep by-name\\r\\n/dev/block/platform/soc/ff3b0000.ufs/by-name\\r\\nadb shell ls -l /dev/block/platform/soc/ff3b0000.ufs/by-name\\r\\ntotal 0\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 boot -> /dev/block/sdd7\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 cache -> /dev/block/sdd5\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 dts -> /dev/block/sdd8\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 fastboot -> /dev/block/sdd2\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 fip -> /dev/block/sdd4\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 frp -> /dev/block/sdc1\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 fw_lpm3 -> /dev/block/sdd6\\r\\nlrwxrwxrwx 1 root root 15 1970-01-01 00:01 nvme -> /dev/block/sdd3\\r\\nlrwxrwxrwx 1 root root 16 1970-01-01 00:01 reserved -> /dev/block/sdd12\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 system -> /dev/block/sdd10\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 trustfirmware -> /dev/block/sdd9\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 userdata -> /dev/block/sdd13\\r\\nlrwxrwxrwx 1 root root  16 1970-01-01 00:00 vendor -> /dev/block/sdd11\\r\\nlrwxrwxrwx 1 root root  15 1970-01-01 00:00 xloader_reserved1 -> /dev/block/sdd1\\r\\nThe boot, recovery, vendor, system, cache, and userdata partitions are all canonical \\r\\nAndroid partitions and will be discussed shortly.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0abbc996-c2cc-4e78-83b0-529987b5a4e8":{"__data__":"{\"id_\":\"0abbc996-c2cc-4e78-83b0-529987b5a4e8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Z2vOIapzomcwJBgmcuYts7bF42R7AYxKWoYa312ZHRo=\"},\"PREVIOUS\":{\"nodeId\":\"cb03bb28-e9c8-4499-81f2-1e3ede77d43f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zoLz3r698cDsy/mfs+AGX/U/bq4q2gcHougb0HOaC3Y=\"}},\"hash\":\"pE5fsnJQJ3gyNRXqXsZV8mGXp0Iqg/EmcqAzBD4Rm08=\",\"text\":\"The remaining partitions, though, are likely to \\r\\nbe part of the proprietary system boot process. Note\\r\\nThe inquisitive can take an even more accurate and low-level approach to identifying the parti-\\r\\ntions on a device by reading the partition map itself. Where mountable partitions have names \\r\\nthat end in numbers (for example, sdd7, sdd11), the raw device is usually cataloged in /dev \\r\\nwithout any partition number (for example, sdd). The HiKey960 used in these examples, for \\r\\ninstance, has four separate block storage devices: /dev/block/sda, /dev/block/sdb,  \\r\\n/dev/block/sdc, and /dev/block/sdd. Each of these devices is likely to have a partition map. To decode that map directly, simply dump \\r\\nthe first several thousand bytes from the device. Presuming adb is running as root, for instance:\\r\\nadb pull /dev/block/sdd\\r\\nThere is no need to pull the entire file, so press Ctrl+C after a few seconds. Having obtained \\r\\nthe file header using a byte dump tool like od and a description of the appropriate partition \\r\\ntable format (https://en.wikipedia.org/wiki/GUID_Partition_Table), completely identifying all the \\r\\npartitions is simply a matter of time. 9780134096346_print.indb   9825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c366125-f652-4fe4-9d86-05bd842cf6b7":{"__data__":"{\"id_\":\"2c366125-f652-4fe4-9d86-05bd842cf6b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lsCdp2hv31JDrGE2MGneftxdJjVJ8CSURutjXXtvwzY=\"},\"NEXT\":{\"nodeId\":\"b3cd2f06-23fa-4ba3-a67b-f9a49dfebb7b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1XBMRnELLurKv4Ds5V1o56HUJC3licKhqWHskgS6Ijw=\"}},\"hash\":\"Z4IaESYU+mu1ULbn9d90fovH8TcwjUGHkUBtL6pxKUs=\",\"text\":\"99The Boot Process\\r\\nSome bootloaders support unlocking. Unlocking a bootloader is bypassing the cryptographic \\r\\nverification of the bootloader code before it is executed. Doing this allows the execution of \\r\\nbootloaders other than the one whose signature can be verified by the boot ROM. It also breaks \\r\\nchain of assurance and means that subsequent layers in the OS stack that implicitly trust their \\r\\nenvironment are in danger. Because they are so nearly part of the hardware, there will be no more detailed investigation \\r\\ninto bootloaders here. Roger Ye’s book, Embedded Programming with Android (Ye, 2016), part of \\r\\nthe Android Deep Dive Series, is an excellent investigation of this part of the boot process. In \\r\\naddition, Jonathan Levin’s much more casual self-published essays on Android Internals (http://\\r\\nnewandroidbook.com) document some deep and useful research. Most Android bootloaders, like their large-scale computer counterparts (Grub, LILO, Open \\r\\nFirmware, or the various BIOSs), as their last task identify and initiate a successor. After all, the \\r\\nbootloader’s only real reason for existence is to prepare the device for the real operating system. Bootloaders typically support simple user interfaces that can be used, among other things, to \\r\\nchoose that successor. Android devices usually support three choices: fastboot, recovery, and \\r\\nnormal Android boot. Fastboot\\r\\nFastboot is a very lightweight system that is usually part of the bootloader itself. Although part \\r\\nof the bootloader, it bears separate discussion because it has a UI, as described in Chapter 2. Its \\r\\nfunctionality typically is limited to flashing the persistent storage of the device. A system is usually forced into fastboot mode using some kind of hardware flag: flipping a \\r\\nDIP-switch or holding some combination of buttons during system startup. The bootloader \\r\\ninspects the switches as part of initialization and determines whether it should run the fastboot \\r\\nprogram or not. Listing 6.3 is the continuation of the log started in Listing 6.1. It shows the initialization of the \\r\\nfastboot program that is part of a normal (non-fastboot) startup.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b3cd2f06-23fa-4ba3-a67b-f9a49dfebb7b":{"__data__":"{\"id_\":\"b3cd2f06-23fa-4ba3-a67b-f9a49dfebb7b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lsCdp2hv31JDrGE2MGneftxdJjVJ8CSURutjXXtvwzY=\"},\"PREVIOUS\":{\"nodeId\":\"2c366125-f652-4fe4-9d86-05bd842cf6b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Z4IaESYU+mu1ULbn9d90fovH8TcwjUGHkUBtL6pxKUs=\"}},\"hash\":\"1XBMRnELLurKv4Ds5V1o56HUJC3licKhqWHskgS6Ijw=\",\"text\":\"Listing 6.3 fastboot Log\\r\\nmain:     ******** Fastboot for Kirin *****************\\r\\nmain:   ******** Build Date: Jun 14 2018, 17:48:58 **\\r\\nmain: ******** Fastboot start at 1836 ms **********\\r\\nmain: print soc_id computed in xloader phase, is below:\\r\\nmain: 00000000  main: 00000000  main: 00000000  main: 00000000  main: \\r\\nmain: 00000000  main: 00000000  main: 00000000  main: 00000000  main: \\r\\nled_alwayson: can't get dtb operators\\r\\nbbox: bbox_register_module_ops success. bfm: : >>>>>enter bfm_init\\r\\nbfm: : [disable_boot_fail_system] boot_fail_system state is 0\\r\\nclock: PLL Stat\\r\\n9780134096346_print.indb   9925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c785a4c7-12f8-4f25-9cb6-fc9f1669d588":{"__data__":"{\"id_\":\"c785a4c7-12f8-4f25-9cb6-fc9f1669d588\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7iDf8Zqe8vC68c9hY5pq9GGSY7VayfZZhgqgB7qHgTo=\"},\"NEXT\":{\"nodeId\":\"19dc0c9c-25e8-416b-a8d5-fd0c9ab28bba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"FVfkCh9H/bw9mdHTrxYYX2YVb4CpC7Zb24Oq214hYCQ=\"}},\"hash\":\"uPhUfot9qwMw61+2+WY4qxugW4Q6Tco0QgNzZTLnznM=\",\"text\":\"100Chapter 6  System Startup: Installing and Booting the System\\r\\nclock: PLL2 ctrl0=0x04909604,ctrl1=0x02000000\\r\\nclock: PLL2 acpu en_stat:0x00000008, acpu gt_stat:0x00040000\\r\\nclock: PLL2 final en_stat:0x00100000, final gt_stat:0x00020000\\r\\nclock: PLL3 ctrl0=0x04904005,ctrl1=0x07000000\\r\\nclock: PLL3 acpu en_stat:0x00000000, acpu gt_stat:0x00000000\\r\\nclock: PLL3 final en_stat:0x00200000, final gt_stat:0x00040000\\r\\nclock: clock init OK\\r\\nufs: ufs start on platform[36600110]ufs: ufs current mode: 0x00000011\\r\\nufs: ufs current gear: 0x00000003\\r\\nufs: ufs mphy reg 0x4A = 0x00000000\\r\\nufs: bUD0BaseOffset: 0x00000010, bUDConfigPLength: 0x00000010\\r\\nufs: UFS device manufacturerid = 0x000001ad\\r\\nufs: UFS device: H****\\r\\nbfm: : >>>>>enter set_boot_stage\\r\\n<lines omitted ...>\\r\\nusbloader: iddq is 0x0000000000000000\\r\\nusbloader: hpm is 0x0000000000000000\\r\\nusbloader: dieid is 0x0a048009d1170d0a977947122140ee1c06d65993\\r\\nload_kernel: Hikey960: Enable all ip regulator\\r\\npmu_ip: Hikey960:switch from PPLL0 to PPLL3\\r\\npmu_ip: Hikey960:Enable ispfunc\\r\\npmu_ip: Hikey960:Enable clock-gating\\r\\npmu_ip: [regulator_power_all_enable] all IP regulator is power on! load_kernel: set ISP_CORE_CTRL_S to unsec, val = 0x00000007 \\r\\nload_kernel: set ISP_SUB_CTRL_S to unsec, val = 0x0000000f \\r\\nload_kernel:\\r\\nKernel\\r\\nAt this point, the bootloader is ready to load and run the kernel.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"19dc0c9c-25e8-416b-a8d5-fd0c9ab28bba":{"__data__":"{\"id_\":\"19dc0c9c-25e8-416b-a8d5-fd0c9ab28bba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7iDf8Zqe8vC68c9hY5pq9GGSY7VayfZZhgqgB7qHgTo=\"},\"PREVIOUS\":{\"nodeId\":\"c785a4c7-12f8-4f25-9cb6-fc9f1669d588\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uPhUfot9qwMw61+2+WY4qxugW4Q6Tco0QgNzZTLnznM=\"}},\"hash\":\"FVfkCh9H/bw9mdHTrxYYX2YVb4CpC7Zb24Oq214hYCQ=\",\"text\":\"Listing 6.4 is a continuation \\r\\nof the boot log started in Listing 6.1 and continued in Listing 6.3. The complete log of the kernel boot contains a wealth of useful information. In reading the log, \\r\\nit is important to remember that with the kernel come multiple processes. The log is no longer \\r\\na single path through ordered tasks. It is now the interleaved output of multiple processes that \\r\\nmay be running simultaneously. The listing is extremely abbreviated. Excellent documentation is available elsewhere that \\r\\ndescribes the kernel boot process. This log shows only a few highlights. Note that this log was produced by booting the kernel built in Chapter 4. Also note the initialization of a couple of the key Android components mentioned in  \\r\\nChapter 4, ion (hisi_ion at time 0.000000) and ashmen (at time 1.891833). 9780134096346_print.indb   10025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0792f5d1-5056-41e9-b72d-ac5a7d0f0203":{"__data__":"{\"id_\":\"0792f5d1-5056-41e9-b72d-ac5a7d0f0203\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UlkxOU8K3fxmBeKwWzup8GE0Ma9IKCeXb+hux5tGvuQ=\"},\"NEXT\":{\"nodeId\":\"d9d7fa3f-263e-4b79-a1fb-b0318b3644d5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"tNRrBB6g/LLugAbjnG+rsn34VAma9aLNVN3132fsjoI=\"}},\"hash\":\"t8C331L1ROFn32/Boho2Lw38FtzLZwY3RzJlHRB1Ctw=\",\"text\":\"101The Boot Process\\r\\nFinally, note that the log shows the command line with which the kernel was started. This \\r\\ncommand line is a key means of communicating configuration information to the kernel. The bootloader finds the kernel in the device storage boot partition (shown in Listing 6.4), \\r\\none of the canonical partitions on an Android system. Unlike the Linux systems common on \\r\\nlarger machines, the storage partition that holds the kernel is not mounted in the Android file \\r\\nsystem. Although the bootloader (and, in fact, any other application with low-level access to \\r\\nthe storage device) can read and probably even write to boot partition, the partition does not \\r\\ncontain a file system, files, or catalogs and is never mounted in the Android file tree. To maintain the chain of trust, the bootloader verifies the kernel code by computing its crypto-\\r\\ngraphic signature and comparing it to the signature stored on the device (which was, in turn, \\r\\nverified when the hardware verified the bootloader). Listing 6.4 Kernel Boot Log\\r\\nload_kernel: \\r\\n----boot time is 3442 ms----\\r\\nload_kernel: boot_from_bl31: boot to trusted firmware. addr=0x00000000 \\r\\n[    0.000000] Booting Linux on physical CPU 0x0\\r\\n[    0.000000] Initializing cgroup subsys cpuset\\r\\n[    0.000000] Initializing cgroup subsys cpu\\r\\n[    0.000000] Initializing cgroup subsys cpuacct\\r\\n[    0.000000] Initializing cgroup subsys schedtune\\r\\n[    0.000000] Linux version 4.4.59-02536-g679a543 (jstultz@buildbox) (gcc version 5.4.0 20160609 (Ubuntu/Linaro 5.4.0-6ubuntu1~16.04.4) ) #2507 SMP PREEMPT Wed Aug 9 \\r\\n09:52:10 PDT 2017\\r\\n[    0.000000] Boot CPU: AArch64 Processor [410fd034]\\r\\n[    0.000000] efi: Getting EFI parameters from FDT:\\r\\n[    0.000000] efi: UEFI not found.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d9d7fa3f-263e-4b79-a1fb-b0318b3644d5":{"__data__":"{\"id_\":\"d9d7fa3f-263e-4b79-a1fb-b0318b3644d5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UlkxOU8K3fxmBeKwWzup8GE0Ma9IKCeXb+hux5tGvuQ=\"},\"PREVIOUS\":{\"nodeId\":\"0792f5d1-5056-41e9-b72d-ac5a7d0f0203\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"t8C331L1ROFn32/Boho2Lw38FtzLZwY3RzJlHRB1Ctw=\"}},\"hash\":\"tNRrBB6g/LLugAbjnG+rsn34VAma9aLNVN3132fsjoI=\",\"text\":\"[     0.000000] Ion: base 0xbe200000, size is 0x1e00000, node name graphic, heap-name carveout_gralloc namesize 17,[99][97][114][118]\\r\\n[    0.000000] Ion: insert heap-name carveout_gralloc \\r\\n[    0.000000] Reserved memory: initialized node graphic, compatible id hisi_ion\\r\\n[    0.000000] Reserved memory: created CMA memory pool at 0x0000000016c00000, size  64 MiB\\r\\n[    0.000000] Reserved memory: initialized node fastboot-cma-mem, compatible id  shared-dma-pool\\r\\n[    0.000000] cma: Reserved 64 MiB at 0x00000000ba000000\\r\\n[    0.000000] On node 0 totalpages: 785600\\r\\n[    0.000000]   DMA zone: 12288 pages used for memmap\\r\\n[    0.000000]   DMA zone: 0 pages reserved\\r\\n[    0.000000]   DMA zone: 785600 pages, LIFO batch:31\\r\\n[    0.000000] psci: probing for conduit method from DT. [    0.000000] psci: PSCIv1.0 detected in firmware. [    0.000000] psci: Using standard PSCI v0.2 function IDs\\r\\n[    0.000000] psci: MIGRATE_INFO_TYPE not supported. 9780134096346_print.indb   10125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ecd91e7e-2b9e-4ccc-9828-b23e2d6de7cd":{"__data__":"{\"id_\":\"ecd91e7e-2b9e-4ccc-9828-b23e2d6de7cd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eY2WxpTdBECgR3Q1dMfKEP7CS+mvWD1RAUhKa8jiH5c=\"},\"NEXT\":{\"nodeId\":\"0a272e46-6450-4818-a3bc-a551452f61bc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7wh9V16rT5JSQ1kuhFuoe1oEL6RUNTd2i1ctUpYSFSY=\"}},\"hash\":\"25xEDS4G4Jb86Ui7ty1uJKcugn0xqbjG+8EtVA+Y1gc=\",\"text\":\"102Chapter 6  System Startup: Installing and Booting the System\\r\\n[    0.000000] PERCPU: Embedded 19 pages/cpu @ffffffc0be100000 s47256 r0 d30568 u77824\\r\\n[    0.000000] pcpu-alloc: s47256 r0 d30568 u77824 alloc=19*4096\\r\\n[    0.000000] pcpu-alloc: [0] 0 [0] 1 [0] 2 [0] 3 [0] 4 [0] 5 [0] 6 [0] 7 \\r\\n[    0.000000] Detected VIPT I-cache on CPU0\\r\\n[    0.000000] CPU features: enabling workaround for ARM erratum 845719\\r\\n[    0.000000] Built 1 zonelists in Zone order, mobility grouping on.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0a272e46-6450-4818-a3bc-a551452f61bc":{"__data__":"{\"id_\":\"0a272e46-6450-4818-a3bc-a551452f61bc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eY2WxpTdBECgR3Q1dMfKEP7CS+mvWD1RAUhKa8jiH5c=\"},\"PREVIOUS\":{\"nodeId\":\"ecd91e7e-2b9e-4ccc-9828-b23e2d6de7cd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"25xEDS4G4Jb86Ui7ty1uJKcugn0xqbjG+8EtVA+Y1gc=\"},\"NEXT\":{\"nodeId\":\"bc8c2107-19f3-4157-8b42-4394b45fe9f0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"LbuxIFQ7qzT75dWiKeweEex90fR59VICA5u50SLV4jk=\"}},\"hash\":\"7wh9V16rT5JSQ1kuhFuoe1oEL6RUNTd2i1ctUpYSFSY=\",\"text\":\"Total pages: 773312\\r\\n[    0.000000] Kernel command line: androidboot.hardware=hikey960  androidboot.selinux=permissive firmware_class.path=/system/etc/firmware loglevel=15  \\r\\nbuildvariant=userdebug androidboot.swtype=normal  fastboot_version=DailyBuild_201708091533_FASTBOOT setup_logctl=1 fastbootdmd=0  \\r\\nenter_recovery=0 androidboot.mode=normal low_volt_flag=1 boardid=0x000014b5  normal_reset_type=coldboot ddr_die=3072M@0M  efuse_status=2  \\r\\nandroidboot.serialno=0123456789ABCDEF himntn=111111111111111010111111101001100010001 boot_slice=0x00019c31 reboot_reason=AP_S_COLDBOOT recovery_update=0 userlock=locked \\r\\nbootlock=unlocked hw_bfm_enable=0 ddr_density=3 swiotlb=2 mdmreglogbase=0x00000000 mdmreglogsize=0x00000000 modem_socp_enable=0 androidboot.hardware=HiKey960  \\r\\nandroidboot.veritymode=enforcing androidboot.verifiedbootstate=ORANGE  ufs_product_name=THGBF7G8K4LBATRC format_data=1 cpu_buck_reg=0x;;  \\r\\nandroidboot.ddrsize=3 kce_status=1  console=ttyAMA6,115200 \\r\\n<lines omitted ...>\\r\\n[    1.891833] ashmem: initialized\\r\\n<lines omitted ...>\\r\\n [    6.895248] usb 1-1.5: new high-speed USB device number 4 using xhci-hcd\\r\\n[    6.902456] Freeing unused kernel memory: 1016K (ffffff800901b000 - ffffff8009119000)\\r\\nThe File System\\r\\nAs part of initialization, the kernel mounts the Android file system. Listing 6.5 shows the root \\r\\nof that file system. Several of these partitions were introduced in Chapter 5.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bc8c2107-19f3-4157-8b42-4394b45fe9f0":{"__data__":"{\"id_\":\"bc8c2107-19f3-4157-8b42-4394b45fe9f0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eY2WxpTdBECgR3Q1dMfKEP7CS+mvWD1RAUhKa8jiH5c=\"},\"PREVIOUS\":{\"nodeId\":\"0a272e46-6450-4818-a3bc-a551452f61bc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7wh9V16rT5JSQ1kuhFuoe1oEL6RUNTd2i1ctUpYSFSY=\"}},\"hash\":\"LbuxIFQ7qzT75dWiKeweEex90fR59VICA5u50SLV4jk=\",\"text\":\"Several of these partitions were introduced in Chapter 5. Listing 6.5 Android File System\\r\\nrootfs on / type rootfs (ro,seclabel,size=1444252k,nr_inodes=361063)\\r\\ntmpfs on /dev type tmpfs (rw,seclabel,nosuid,relatime,mode=755)\\r\\ndevpts on /dev/pts type devpts (rw,seclabel,relatime,mode=600,ptmxmode=000)\\r\\nproc on /proc type proc (rw,relatime)\\r\\nsysfs on /sys type sysfs (rw,seclabel,relatime)\\r\\nselinuxfs on /sys/fs/selinux type selinuxfs (rw,relatime)\\r\\nnone on /acct type cgroup (rw,relatime,cpuacct)\\r\\nnone on /dev/memcg type cgroup (rw,relatime,memory)\\r\\nnone on /dev/stune type cgroup (rw,relatime,schedtune)\\r\\ntmpfs on /mnt type tmpfs (rw,seclabel,relatime,mode=755,gid=1000)\\r\\n9780134096346_print.indb   10225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0a8e4313-e442-4638-a970-b82bae9fdf9b":{"__data__":"{\"id_\":\"0a8e4313-e442-4638-a970-b82bae9fdf9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YlhwJmmd+M5z6hm0KpurzaxeTIBQxB67XV1yaiP5+B8=\"},\"NEXT\":{\"nodeId\":\"9507da77-b1e6-4556-9493-59644f405a97\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"RL7Uq1kZo/xkNqp5289Qt96FQsFHX+/YlcgevMWki00=\"}},\"hash\":\"uXFaUxKaENhu4VQ2XarsfOquOFgmaUea1nPaq8lTQog=\",\"text\":\"103The Boot Process\\r\\nnone on /config type configfs (rw,relatime)\\r\\nnone on /dev/cpuctl type cgroup (rw,relatime,cpu)\\r\\nnone on /dev/cpuset type cgroup  (rw,relatime,cpuset,noprefix,release_agent=/sbin/cpuset_release_agent)\\r\\npstore on /sys/fs/pstore type pstore (rw,seclabel,relatime)\\r\\n/sys/kernel/debug on /sys/kernel/debug type debugfs (rw,seclabel,relatime,mode=755)\\r\\n/dev/block/sdd10 on /system type ext4 (ro,seclabel,relatime,data=ordered)\\r\\n/dev/block/sdd5 on /cache type ext4  (rw,seclabel,relatime,discard,noauto_da_alloc,data=ordered)\\r\\n/dev/block/sdd13 on /data type ext4  (rw,seclabel,relatime,discard,noauto_da_alloc,data=ordered)\\r\\ntmpfs on /storage type tmpfs (rw,seclabel,relatime,mode=755,gid=1000)\\r\\ntracefs on /sys/kernel/debug/tracing type tracefs (rw,seclabel,relatime)\\r\\nThe key section of Listing 6.5 is the last five lines, which show the mount points for three of \\r\\nthe six (five, before Android release 26) canonical Android partitions. These important parti-\\r\\ntions were introduced in Chapter 5, and again in Listing 6.2, where they appeared as named \\r\\npartitions found on the main block storage device. They are system, cache, and data. ■system (/system): This is the read-only part of the Android file system discussed in Chapter 5. It is sometimes called the ROM, although its contents are not sufficient to \\r\\ncreate a running Android system, and the ability to write to it is controlled only by \\r\\nsoftware. ■cache (/cache): System cache. Originally, this partition kept such things as optimization data for Android’s just-in-time Java compiler. It now holds a wider variety \\r\\nof ephemeral data. It is a separate partition so that it can be easily erased when, for \\r\\ninstance, a system update renders it useless. ■userdata (/data): System managed writeable data.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9507da77-b1e6-4556-9493-59644f405a97":{"__data__":"{\"id_\":\"9507da77-b1e6-4556-9493-59644f405a97\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"YlhwJmmd+M5z6hm0KpurzaxeTIBQxB67XV1yaiP5+B8=\"},\"PREVIOUS\":{\"nodeId\":\"0a8e4313-e442-4638-a970-b82bae9fdf9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uXFaUxKaENhu4VQ2XarsfOquOFgmaUea1nPaq8lTQog=\"}},\"hash\":\"RL7Uq1kZo/xkNqp5289Qt96FQsFHX+/YlcgevMWki00=\",\"text\":\"■userdata (/data): System managed writeable data. Also introduced in Chapter 5, this is where Android applications are stored and where the system stored the data that is \\r\\nprivate to a given application. These partitions are essential and will be found on every Android device. In recent versions of \\r\\nAndroid, they are often mounted by name from the directory shown in Listing 6.2. In addition, several other partitions appear frequently on Android devices. The boot partition \\r\\nhas already been discussed as the location of the kernel. A few common partitions are\\r\\n ■boot (unmounted): As discussed earlier, this is the partition that contains the Linux kernel. ■vendor (/vendor) Android Oreo introduced Project Treble, Google’s effort to separate the Android system binaries from the proprietary vendor binaries necessary to shim the \\r\\nhardware to the OS. Vendor proprietary code is now stored on the vendor partition, \\r\\nwhere it can be updated independently. This partition was also mentioned in Chapter 5. 9780134096346_print.indb   10325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ccb13e8d-124a-4d88-bbae-da7f6e95ec18":{"__data__":"{\"id_\":\"ccb13e8d-124a-4d88-bbae-da7f6e95ec18\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dYFKuoxY+XxcB+VW4fECJYhzniY4gzKFmKjFx9hhN7k=\"},\"NEXT\":{\"nodeId\":\"bb1a7dc2-1530-42c6-a80c-ad0011a540bd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mtoFI8b/PXjlmnvm2sO83ru8Y1YgR1VsyMQMPkvX+9E=\"}},\"hash\":\"JUA9fxM7JI7E3egZv9Yz7H04efKqHQG2PijTl0zY/NU=\",\"text\":\"104Chapter 6  System Startup: Installing and Booting the System\\r\\n ■recovery (unmounted): Another partition that is never mounted or used by the Android system. It contains the operating and file systems for the recovery system, discussed later \\r\\nin this chapter. It is very similar to the boot partition but used for recovery mode. ■persist (unmounted): Many vendors and carriers have found it useful to store mutable information in a way that is not destroyed when the phone is reset. Those that are \\r\\nwilling to be blatant about this “feature” may choose an obvious name for it. Others may \\r\\nchoose a subtler name. This partition is usually accessed through a special driver and \\r\\navailable only to privileged applications. ■radio (unmounted): This partition contains the operating and file systems for the cellular radio processor. Its contents are likely to be quite proprietary. ■storage (/sdcard): Most Android systems support relatively unprotected bulk storage. Originally, this was likely to be removable (Micro SD cards) and was mounted \\r\\nat /sdcard. When Android moved away from removable media and added support \\r\\nfor multiple users, the mount point was changed. Soft links point /sdcard at the \\r\\nappropriate emulated file system. ■product and odm (/product and /odm) Introduced to the platform in Android versions 9 and 10, respectively, these partitions were described in Chapter 5. They \\r\\nprovide additional flexibility, allowing a single hardware image to support multiple \\r\\nsimilar devices. Software for a specific device can be configured to read only the data and \\r\\ncode that apply to it. init\\r\\nAs the last step of the process of booting Linux, the kernel starts the init application. init \\r\\nis the first application to run in a completely normal application environment, so called user-\\r\\nspace, with mapped virtual memory, a mounted file system, and no direct access to hardware. It \\r\\nis also the root of the process tree, process id 0, and the ancestor of every other process. Listing 6.6 shows the last phase of device boot, again, edited heavily to save space. Listing 6.6 init Boot Log\\r\\n[    6.912976] init: init first stage started!\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bb1a7dc2-1530-42c6-a80c-ad0011a540bd":{"__data__":"{\"id_\":\"bb1a7dc2-1530-42c6-a80c-ad0011a540bd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dYFKuoxY+XxcB+VW4fECJYhzniY4gzKFmKjFx9hhN7k=\"},\"PREVIOUS\":{\"nodeId\":\"ccb13e8d-124a-4d88-bbae-da7f6e95ec18\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JUA9fxM7JI7E3egZv9Yz7H04efKqHQG2PijTl0zY/NU=\"}},\"hash\":\"mtoFI8b/PXjlmnvm2sO83ru8Y1YgR1VsyMQMPkvX+9E=\",\"text\":\"[    6.934559] init: Early mount skipped (missing/incompatible fstab in device tree)\\r\\n[    6.942061] init: Loading SELinux policy\\r\\n[    7.031172] random: init: uninitialized urandom read (40 bytes read, 45 bits of entropy available)\\r\\n[    7.032940] init: init second stage started! [    7.036781] init: property_set(\\\"ro.boot.hardware\\\", \\\"HiKey960\\\") failed: property already set\\r\\n[    7.041578] init: Running restorecon... [    7.109305] init: waitpid failed: No child processes\\r\\n[    7.109546] init: Couldn't load properties from /odm/default.prop: No such file or directory\\r\\n[    7.109604] init: Couldn't load properties from /vendor/default.prop: No such file or directory\\r\\n9780134096346_print.indb   10425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f099ca4a-3cb0-4bc3-9ee8-025183cf639f":{"__data__":"{\"id_\":\"f099ca4a-3cb0-4bc3-9ee8-025183cf639f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rEwBTkMxLoQdfje5fcI/BDrrb0LtxGfghymY65rzKZ0=\"},\"NEXT\":{\"nodeId\":\"a070aeac-d2b1-40a7-917c-d5b1060be878\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iIqu/4bMp/B9xjnYfEZSwKRmmf27q5rEjlrRxVowUkw=\"}},\"hash\":\"VTROXhBef0ZEVfW39eKiZ8fr3gE1QbfVQ+yfaCH8R0s=\",\"text\":\"105The Boot Process\\r\\n[    7.110252] init: Created socket '/dev/socket/property_service', mode 666, user 0, group 0\\r\\n[    7.110322] init: Parsing file /init.rc... [    7.110559] init: Added '/init.environ.rc' to import list\\r\\n[    7.110568] init: Added '/init.usb.rc' to import list\\r\\n[    7.110584] init: Added '/init.hikey960.rc' to import list\\r\\n[    7.110591] init: Added '/init.usb.configfs.rc' to import list\\r\\n[    7.110601] init: Added '/init.zygote64_32.rc' to import list\\r\\n[    7.111239] init: Parsing file /init.environ.rc... [    7.111304] init: Parsing file /init.usb.rc... [    7.111547] init: Parsing file /init.hikey960.rc... <lines omitted ...>\\r\\n[    7.115910] init: processing action (wait_for_coldboot_done)\\r\\n[    7.380541] init: Command 'wait_for_coldboot_done' action=wait_for_coldboot_done returned 0 took 264.577ms. [    7.380569] init: processing action (mix_hwrng_into_linux_rng)\\r\\n[    7.380601] init: /dev/hw_random not found\\r\\n[    7.380633] init: processing action (set_mmap_rnd_bits)\\r\\n[    7.381191] init: processing action (set_kptr_restrict)\\r\\n[    7.381366] init: processing action (keychord_init)\\r\\n[    7.381384] init: processing action (console_init)\\r\\n[    7.381424] init: processing action (init)\\r\\n<lines omitted ...>\\r\\n[    8.197664] init: computing context for service 'hidl_memory'\\r\\n[    8.197820] init: starting service 'hidl_memory'... [    8.198948] init: computing context for service 'bluetooth-1-0'\\r\\n[    8.199153] init: starting service 'bluetooth-1-0'...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a070aeac-d2b1-40a7-917c-d5b1060be878":{"__data__":"{\"id_\":\"a070aeac-d2b1-40a7-917c-d5b1060be878\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rEwBTkMxLoQdfje5fcI/BDrrb0LtxGfghymY65rzKZ0=\"},\"PREVIOUS\":{\"nodeId\":\"f099ca4a-3cb0-4bc3-9ee8-025183cf639f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VTROXhBef0ZEVfW39eKiZ8fr3gE1QbfVQ+yfaCH8R0s=\"}},\"hash\":\"iIqu/4bMp/B9xjnYfEZSwKRmmf27q5rEjlrRxVowUkw=\",\"text\":\"[    8.199873] init: computing context for service 'configstore-hal-1-0'\\r\\n[    8.200025] init: starting service 'configstore-hal-1-0'... [    8.200707] init: computing context for service 'wifi_hal_legacy'\\r\\n[    8.200852] init: starting service 'wifi_hal_legacy'... [    8.201482] init: starting service 'healthd'... [    8.202088] init: computing context for service 'lmkd'\\r\\n[    8.202241] init: starting service 'lmkd'... [    8.202976] init: computing context for service 'servicemanager'\\r\\n[    8.203120] init: starting service 'servicemanager'... [    8.203804] init: computing context for service 'surfaceflinger'\\r\\n[    8.203935] init: starting service 'surfaceflinger'... <lines omitted ...>\\r\\n[   11.087269] init: computing context for service 'bootanim'\\r\\n[   11.087503] init: starting service 'bootanim'... 9780134096346_print.indb   10525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"040d97e6-24f8-427b-b583-5c30bd6ec851":{"__data__":"{\"id_\":\"040d97e6-24f8-427b-b583-5c30bd6ec851\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"arBrvvfeVd6oCRtssV/DJK0/gQhyewLgRpGMUMpeWyI=\"},\"NEXT\":{\"nodeId\":\"7c0dcc2c-76d0-45bb-8e79-d6ba5ce08ad6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yEHNZxrdureQq31/M5bGrif1EnDD1jOUZ3i3Sz4xpKo=\"}},\"hash\":\"DWZ8CRdgTlDDwflVBy0xmwhrbdedi2VSJ+GphiIn/4s=\",\"text\":\"106Chapter 6  System Startup: Installing and Booting the System\\r\\n[   13.044371] init: processing action (sys.sysctl.extra_free_kbytes=*)\\r\\n[   14.099973] init: computing context for service 'wpa_supplicant'\\r\\n[   14.100518] init: starting service 'wpa_supplicant'... [   14.102545] init: Created socket '/dev/socket/wpa_wlan0', mode 660, user 1010, group 1010\\r\\n[   15.089361] init: processing action (sys.boot_completed=1)\\r\\nThe listing highlights several important things. The first is that init runs in multiple phases. The first phase is initialization and configuration. In it, init examines the file system and sets \\r\\nup communications with the kernel. One of the key means of accomplishing this communica-\\r\\ntion uses the /sys and /proc file systems. As noted in Chapter 4, the file system, a hierarchical arrangement of files and directories of \\r\\nfiles, is largely an abstraction created by the kernel. Drivers in the kernel organize the raw, flat \\r\\nblocks presented by hardware storage devices into the familiar tree of directories and files. Again, because the kernel creates the file system, more or less, out of thin air, no need exists \\r\\nfor it to restrict the abstraction to block storage devices. In fact, the /proc storage system is, \\r\\nprecisely, kernel memory cataloged as files. Applications with write permission on certain files \\r\\nin /proc can write directly to kernel memory. Although many programs can read the files in \\r\\n/proc, init is one of the few that can write to them. This is how it communicates with the \\r\\nkernel. In its second stage, init reads and parses its configuration files, usually named \\r\\n“init.<something>.rc. ” The locations and contents of these files are described in some  \\r\\ndetail in a README file in the AOSP init source (https://android.googlesource.com/platform/\\r\\nsystem/core/+/master/init/README.md). init starts a very limited number of Linux daemons and then the root process of the Android \\r\\nsystem, Zygote. Recovery\\r\\nAs shown in Figure 6.1, many Android devices support an alternate boot path: Recovery Mode. Unlike fastboot, recovery mode boots a complete, if limited, operating system.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7c0dcc2c-76d0-45bb-8e79-d6ba5ce08ad6":{"__data__":"{\"id_\":\"7c0dcc2c-76d0-45bb-8e79-d6ba5ce08ad6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"arBrvvfeVd6oCRtssV/DJK0/gQhyewLgRpGMUMpeWyI=\"},\"PREVIOUS\":{\"nodeId\":\"040d97e6-24f8-427b-b583-5c30bd6ec851\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DWZ8CRdgTlDDwflVBy0xmwhrbdedi2VSJ+GphiIn/4s=\"}},\"hash\":\"yEHNZxrdureQq31/M5bGrif1EnDD1jOUZ3i3Sz4xpKo=\",\"text\":\"Unlike fastboot, recovery mode boots a complete, if limited, operating system. It has a full \\r\\nnetwork stack, can mount and unmount volumes, runs adb and a shell, and so on. Although \\r\\nit is a complete, if minimal, Linux, recovery mode does not start the Android container. It is \\r\\nsimilar to the “safe-mode” on larger systems. Some devices have pre-installed, proprietary recovery systems. Obtaining the source for them \\r\\nwill require contacting the board manufacturer. AOSP also contains code for a flashable  \\r\\nrecovery image in the bootable/recovery directory. To generate the flashable image file, \\r\\nrecovery.img, use the make target the recoveryimage:\\r\\nmake –j9 recoveryimage\\r\\n9780134096346_print.indb   10625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"200d2d53-a568-40cf-97ae-3146a140e611":{"__data__":"{\"id_\":\"200d2d53-a568-40cf-97ae-3146a140e611\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZD4+wQ8v+efoUsLVjUIPiOEs2ooq0C8JCoI1kfhOwBI=\"},\"NEXT\":{\"nodeId\":\"33ec521c-aeca-4244-96ab-68cc4c92484a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DIHl7rKyMfHxoDaHUCoxPPy/sHDbKZ67Ybg/fSK8G2I=\"}},\"hash\":\"yJZrvG3HPdwLiwDbIEbII5hfrGik8CspvQBdRFHVpXI=\",\"text\":\"107Creating the Acme Device\\r\\nIn addition, there have been other well-known recovery systems; among them ClockworkMod \\r\\nand Team Win Recovery Project (TWRP). Both are open source. The source for the ClockworkMod recovery system is included in the source for Lineage \\r\\nOS, formerly CyanogenMod, in the android_bootable_recovery-cm repository. As of \\r\\nthis writing, although the code continues to be available in the repositories of the old \\r\\nCyanogenMod organization, it does not appear to be maintained there. The version in the \\r\\nLineage repositories (https://github.com/LineageOS) is maintained and up to date. The source for TWRP is also on GitHub (https://github.com/TeamWin). It is in active develop-\\r\\nment and has been ported to a wide variety of hardware platforms. Building a Daemon\\r\\nOne of the biggest advantages of being a developer creating a custom Android for a new device \\r\\nis the ability to add Linux level daemons. All Android programs run in the Android container,  \\r\\nrather like a web server, and are thus one layer of abstraction removed from the operating \\r\\nsystem and the hardware. An application installed in a typical Android system—regardless of \\r\\nwhether it is written in Java, C, or even assembler—has very little control, even over when it \\r\\nstarts and stops. It is a group of components that are created and destroyed as necessary by the \\r\\ncontainer. When building a custom Android, however, adding a new native daemon requires no more \\r\\nthan writing the necessary code, probably C, and starting it from init. The unique hardware feature in the Acme device is a proximity sensor. Note\\r\\nThe Acme device is actually emulated with the same HiKey960 used in previous chapters \\r\\nand an attached Arduino Uno. The Arduino is configured as a capacitive proximity sensor as \\r\\ndescribed on the Arduino website at https://playground.arduino.cc/Main/CapacitiveSensor. The Arduino periodically reports proximity levels over its USB serial port using a simple binary \\r\\nprotocol. The Android device, the HiKey960, sees the Arduino as a readable USB serial device. You can find the code for the project, along with all the rest of the code in this book, in the \\r\\nGitHub repo at https://github.com/InsideAndroidOS/.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"33ec521c-aeca-4244-96ab-68cc4c92484a":{"__data__":"{\"id_\":\"33ec521c-aeca-4244-96ab-68cc4c92484a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZD4+wQ8v+efoUsLVjUIPiOEs2ooq0C8JCoI1kfhOwBI=\"},\"PREVIOUS\":{\"nodeId\":\"200d2d53-a568-40cf-97ae-3146a140e611\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yJZrvG3HPdwLiwDbIEbII5hfrGik8CspvQBdRFHVpXI=\"}},\"hash\":\"DIHl7rKyMfHxoDaHUCoxPPy/sHDbKZ67Ybg/fSK8G2I=\",\"text\":\"The first approximation to porting the new hardware to Android will be a daemon that reads \\r\\nthe proximity sensor and reports the values by logging them to the system log. Creating the Acme Device\\r\\nChapter 2 outlined the process of customizing Android for a new device, the HiKey960. The \\r\\nprocess involved downloading some hardware-specific code, necessary for the HiKey device, \\r\\n9780134096346_print.indb   10725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d21bb666-0572-4c31-98c6-363ec06937f3":{"__data__":"{\"id_\":\"d21bb666-0572-4c31-98c6-363ec06937f3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eVxuuouyc9sNUJORZjJtnNVT4SeuHKCAYLHHJw6AWiU=\"},\"NEXT\":{\"nodeId\":\"4b3ec772-087b-433c-a4b3-34c5b3b8bd9f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"J7knanj1TKZE2Ctbd/743oFkSDbVO2KIdkc5sDAO1Qw=\"}},\"hash\":\"x/WYqix1w1siTGgAYx/b8/w0FhQTDIMubkIw5EE3Ogc=\",\"text\":\"108Chapter 6  System Startup: Installing and Booting the System\\r\\nand modifying the AOSP manifest to include it. The next step extends those modifications to \\r\\ncreate an entirely new device, the Acme One. An Android device is defined by two directories in the source tree, one in .../device and one in \\r\\n.../vendor. The former is where most of the action is. A device is represented in .../device as a two-level hierarchy. The first layer represents an orga-\\r\\nnization, in this case Acme. The second represents the specific device; in our case, the One. Note\\r\\nUnless explicitly stated otherwise, all directory paths from this point on are relative to the root \\r\\nof the build directory, the directory from which the repo tool was run. They are specified without \\r\\na leading “/” or “...”. In addition to creating a home for device code, you must register a new device in the \\r\\nbuild system. Prior to Android 7, registering the device was accomplished using a special \\r\\nscript, vendorsetup.sh, which would be detected and included by the envsetup.sh \\r\\nscript. The vendorsetup.sh script would call the special function, add_lunch_combo, \\r\\nto add device-specific options to the lunch menu. With the Soong build system, this is \\r\\nnow accomplished via the AndroidProducts.mk makefile by setting the special variable, \\r\\nCOMMON_LUNCH_CHOICES. The AndroidProducts.mk file for a device is likely to register at least a couple of builds because \\r\\na given device may be built in several different ways. The type of the build is encoded in the \\r\\nvalues set in the COMMON_LUNCH_CHOICES variable. The variable’s value must contain exactly one hyphen (“-”). The build system parses the vari-\\r\\nable values, separating each at the hyphen, before the hyphen, the name of the device to be \\r\\nbuilt and after the hyphen, the build type. The name of the device can be anything descriptive. There are, though, exactly three build types:\\r\\n ■eng: eng builds are debugging builds. They include a variety of debugging tools that would be a waste of space except during development. adb runs as root by default on an \\r\\neng build. ■userdebug: userdebug builds are similar to eng builds but have fewer debugging tools. They were originally intended for debugging on hardware with limited storage space.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4b3ec772-087b-433c-a4b3-34c5b3b8bd9f":{"__data__":"{\"id_\":\"4b3ec772-087b-433c-a4b3-34c5b3b8bd9f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eVxuuouyc9sNUJORZjJtnNVT4SeuHKCAYLHHJw6AWiU=\"},\"PREVIOUS\":{\"nodeId\":\"d21bb666-0572-4c31-98c6-363ec06937f3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x/WYqix1w1siTGgAYx/b8/w0FhQTDIMubkIw5EE3Ogc=\"}},\"hash\":\"J7knanj1TKZE2Ctbd/743oFkSDbVO2KIdkc5sDAO1Qw=\",\"text\":\"They were originally intended for debugging on hardware with limited storage space. adb does not run as root by default on a userdebug build, but the su command works. ■user: user builds are production releases. All debugging software is stripped, adb is not run at all by default, and it cannot be run as root, if started. Only one of these three words will work, after the hyphen, as the values of \\r\\nCOMMON_LUNCH_CHOICES. 9780134096346_print.indb   10825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f51c473d-8e8d-42b3-88f4-d06dba361173":{"__data__":"{\"id_\":\"f51c473d-8e8d-42b3-88f4-d06dba361173\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mZj6L5JvmipQV67O74H5I16iKaaOcbmlqQMyoAFJJUs=\"}},\"hash\":\"VMZ7TluuelcGGkwxdTsy0uN64M9Ga9SoXH8E/UIqnoY=\",\"text\":\"109Creating the Acme Device\\r\\nListing 6.7 demonstrates creating a directory for the Acme One device and registering all three \\r\\npossible build types. Listing 6.7 Registering the Acme One Device\\r\\nmkdir –p device/acme/one\\r\\ncat > device/acme/one/ AndroidProducts.mk\\r\\nCOMMON_LUNCH_CHOICES := \\\\\\r\\n acme_one-eng \\\\\\r\\n acme_one-userdebug \\\\\\r\\n acme_one-user\\r\\nPRODUCT_MAKEFILES := \\\\\\r\\n $(LOCAL_DIR)/acme_one.mk\\r\\n^D\\r\\nThe Acme One device is now registered. After you re-run setenv.sh, it is visible in the Lunch \\r\\nmenu. Listing 6.8 Acme Lunch\\r\\n. build/envsetup.sh\\r\\nincluding device/acme/one/vendorsetup.sh\\r\\nincluding device/asus/fugu/vendorsetup.sh\\r\\n... > lunch\\r\\nYou're building on Linux\\r\\nLunch menu... pick a combo:\\r\\n     1. acme_one-eng\\r\\n     2. acme_one-user\\r\\n     3. acme_one-userdebug\\r\\n     4. aosp_arm-eng\\r\\n     5. aosp_arm64-eng\\r\\n     6. aosp_blueline-userdebug\\r\\n     7. aosp_bonito-userdebug\\r\\n... 45. uml-userdebug\\r\\nChoosing one of the Acme builds at this point will cause an error. Although the device has \\r\\nbeen registered, it has not yet been set up. 9780134096346_print.indb   10925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b6dc0fce-89f7-4be9-bbd5-cfe406486129":{"__data__":"{\"id_\":\"b6dc0fce-89f7-4be9-bbd5-cfe406486129\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"M3WxCpU3J5jjNRQ+8UGu9Kt47+QNMVKLOxZ4w9hEwLg=\"},\"NEXT\":{\"nodeId\":\"6e893aae-83b9-44e3-b729-a6b9ed7f6870\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uNVAb/v5M+4t1nflXli3U2y29KXf4QF26lGlH0xUkiU=\"}},\"hash\":\"Dysb2Eh8UEKJ9d4diA4nCiYyL98Z6p4ebXlNYJaFGKc=\",\"text\":\"110Chapter 6  System Startup: Installing and Booting the System\\r\\nRepo Again\\r\\nThe new device is now registered with the build system. It is not yet, however, registered in the \\r\\nrepo manifest. The new directories and their contents cannot yet be downloaded or managed \\r\\nusing the repo tool (as can the rest of the source tree). Let’s fix that. Chapter 2 described the organization of a hypothetical git service for the Acme project, located \\r\\nat https:/acme.net/acme/source. It is time to add several new repositories to that service. (Note that this is the hypothetical project source. The code from this book can be found online \\r\\nat https://github.com/InsideAndroidOS/)\\r\\nFigure 2.2 (in Chapter 2) showed the manifest for the first fork of the AOSP code. That fork did \\r\\nnot actually create space for any Acme-specific code at all; it just made room for the non-AOSP \\r\\ncode for the HiKey960 device and for the new kernel created in Chapter 4. Listing 6.9 shows \\r\\nthe fragment of the new manifest with additional repos for Acme-specific code. Listing 6.9 The Acme One Manifest\\r\\n<!-- Acme Specific Projects -->\\r\\n  \\r\\n  <project path=\\\"device/acme/one/acme_one\\\"\\r\\n           name=\\\"platform_device_acme_one_acme_one\\\" remote=\\\"acme\\\" >\\r\\n    <linkfile src=\\\"acme_one.mk\\\" dest=\\\"device/acme/one/acme_one.mk\\\" />\\r\\n    <linkfile src=\\\"AndroidProducts.makefile\\\"\\r\\n              dest=\\\"device/acme/one/AndroidProducts.mk\\\" />\\r\\n  </project>\\r\\n  <project path=”device/acme/one/proximity”\\r\\n           name=”platform_device_acme_one_proximity”\\r\\n           remote=”acme” />\\r\\n  <project path=”device/acme/one/app/simple_daemon”\\r\\n           name=”platform_device_acme_one_app_simple_daemon”\\r\\n           remote=”acme” />\\r\\n  <project path=\\\"vendor/acme/one/interfaces\\\" \\r\\n           name=\\\"platform_vendor_acme_one_interfaces\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/linaro/hikey\\\"\\r\\n           name=\\\"platform_device_linaro_hikey\\\"\\r\\n           remote=\\\"acme\\\"\\r\\n           revision=\\\"acme\\\"\\r\\n           groups=\\\"device,hikey,pdk\\\" />\\r\\nThe vendor repo contains the binderized HAL definition.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6e893aae-83b9-44e3-b729-a6b9ed7f6870":{"__data__":"{\"id_\":\"6e893aae-83b9-44e3-b729-a6b9ed7f6870\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"M3WxCpU3J5jjNRQ+8UGu9Kt47+QNMVKLOxZ4w9hEwLg=\"},\"PREVIOUS\":{\"nodeId\":\"b6dc0fce-89f7-4be9-bbd5-cfe406486129\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Dysb2Eh8UEKJ9d4diA4nCiYyL98Z6p4ebXlNYJaFGKc=\"}},\"hash\":\"uNVAb/v5M+4t1nflXli3U2y29KXf4QF26lGlH0xUkiU=\",\"text\":\"It is used along with the HiKey960 \\r\\nvendor tree, which is populated by a setup script in the HiKey device tree. The Acme device still \\r\\nrequires the non-AOSP device-specific vendor configuration. Perhaps surprisingly, even with the \\r\\naddition of the code for the new device, the manifest still forks the code for the HiKey device, \\r\\non which it is based. 9780134096346_print.indb   11025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2b022c03-a341-40fc-bf5b-93605c411640":{"__data__":"{\"id_\":\"2b022c03-a341-40fc-bf5b-93605c411640\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HCXKwDWoflwuTL2vpFrm+ZLO6uZht/8TumW3tKZtikk=\"},\"NEXT\":{\"nodeId\":\"faa97fcc-4401-4f4d-8af6-d95cbae1ded5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"apiNEws8NgJ2pM8q6lUybHxZaXurBc65jt0fniArrps=\"}},\"hash\":\"1jgMqvL2jp/Id4YX67xlo304RmIkOmhi3h6EeUNfYZU=\",\"text\":\"111Starting the Daemon\\r\\nThis is an unfortunate reality. Ideally, the Acme device would simply reference code in the \\r\\nHiKey device directory, on which it depends. Practically, because of idiosyncrasies in the build \\r\\nsystem, it is nearly inevitable that it will be necessary to modify the code for the device on \\r\\nwhich the Acme One is based—in this case, the HiKey960. Forking the dependency makes it \\r\\npossible to maintain control over updates. The Acme device will depend on the forked HiKey \\r\\ndevice and the stable, forked version of the HiKey code. This makes applying updates from the \\r\\nupstream authoritative source in a managed and predictable way possible. The first repository in the Acme-specific section of the manifest is the first new one: platform_\\r\\ndevice_acme_one_acme_one. This is the root of the Acme One device tree. A couple irritating \\r\\nconstraints govern it. The first is that it cannot be checked out as the actual root of the Acme device tree. Because of \\r\\nthe way repo works, it cannot be device/acme/one. Instead, following the pattern set at the \\r\\nroot of the AOSP tree, this repository gets checked out as device/acme/one/acme_one, and \\r\\nthen the files from it that must be cataloged in device/acme/one are linked by the tool into \\r\\nthe parent directory. The second constraint is imposed by the build system, which looks for files with names that \\r\\nfollow specific naming conventions. The files required at the root of the Acme One device tree \\r\\nmust be at the root—and they may not be anywhere else. The files in the one base repository \\r\\nmust have names that are sufficiently different from those that the build system recognizes so \\r\\nthat they do not confuse it. The other three new repositories are the implementation of the new daemon. Because the code \\r\\nthat accesses the new hardware (the proximity sensor) will eventually be used not only in this \\r\\ndaemon but also to plumb the new sensor into Android, it is implemented as a separate library. The library and the include file that describe its API comprise two of the three. The third is the \\r\\nimplementation of the actual daemon. Starting the Daemon\\r\\nAs described earlier in this chapter, starting the daemon code requires that a script be run by \\r\\nthe init process during system startup.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"faa97fcc-4401-4f4d-8af6-d95cbae1ded5":{"__data__":"{\"id_\":\"faa97fcc-4401-4f4d-8af6-d95cbae1ded5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HCXKwDWoflwuTL2vpFrm+ZLO6uZht/8TumW3tKZtikk=\"},\"PREVIOUS\":{\"nodeId\":\"2b022c03-a341-40fc-bf5b-93605c411640\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1jgMqvL2jp/Id4YX67xlo304RmIkOmhi3h6EeUNfYZU=\"}},\"hash\":\"apiNEws8NgJ2pM8q6lUybHxZaXurBc65jt0fniArrps=\",\"text\":\"The script is straightforward in its content: It defines a \\r\\n“service” that points to the daemon binary and applies certain attributes to it. The Acme One \\r\\nproximity sensor daemon should not run until the system is fully up, all file systems have been \\r\\nmounted, and its startup requires no special action. Because it is so nearly generic, the service \\r\\ncan be part of the main class: init will start it with all other services of this class during the \\r\\nmain phase. The service will execute as the system user and within the system group. Listing 6.10 shows the content of the init script. Listing 6.10 Acme One Proximity Sensor init Script\\r\\nservice acmesimpledaemon /vendor/bin/hw/acmesimpledaemon\\r\\n    class main\\r\\n    user system\\r\\n9780134096346_print.indb   11125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"028eae0c-fc43-42c4-8eae-32797f2cb712":{"__data__":"{\"id_\":\"028eae0c-fc43-42c4-8eae-32797f2cb712\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4fjhb/sVQK+I9G94MU4/836MBS8k2ulObZfxzi4r9VQ=\"}},\"hash\":\"oNE9yPrRmWchHR9gv6qxPwuDcdwRPsrC9RaqLQM91wk=\",\"text\":\"112Chapter 6  System Startup: Installing and Booting the System\\r\\n    group system\\r\\n    oneshot\\r\\nBecause the daemon is dependent on a specific USB device being plugged into the system, \\r\\nit is marked as a oneshot service. This means if the process exits, the init process will not \\r\\nattempt to restart it. Ideally, the daemon would be written so it would wait for the necessary \\r\\ndevice(s) or dependencies to be present before starting. Were it written that way, the oneshot \\r\\nproperty would be removed so that, if the daemon died or exited, init would automatically \\r\\nrestart it. This simple example does not wait for the device to appear, so oneshot is necessary. The script is located in the device/acme/one/app/simple_daemon directory, alongside the \\r\\ndaemon source. The Soong blueprint file used to build the daemon also specifies the init \\r\\nscript, as shown in Listing 6.11. Listing 6.11 Acme One Proximity Sensor Daemon Android.bp\\r\\ncc_binary {\\r\\n    name: \\\"acmesimpledaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmesimpledaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-simple-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nThe script in Listing 6.10 is processed by init, starting the daemon as part of the normal \\r\\nAcme One system startup. Unless the system SE policy information is updated to include \\r\\ndetails about the daemon, though, it will not run for very long! The daemon accesses the \\r\\n9780134096346_print.indb   11225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9563351e-dd0f-4c68-ad89-c82caa4fce79":{"__data__":"{\"id_\":\"9563351e-dd0f-4c68-ad89-c82caa4fce79\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"g2z/6QGBcXUWtcRWp+F1AYOr8PxNmthNwQ/4pXmYk7s=\"},\"NEXT\":{\"nodeId\":\"bde967c5-7f63-482a-b67c-250df4104972\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nII9GIi11IUPuwPl+c6ErCcW6P9ks4eZOGr5/RGTyaE=\"}},\"hash\":\"GXPDsWUfmclVRJh2bb5eUkZwNMgN810z9DodgHcy2w8=\",\"text\":\"113Starting the Daemon\\r\\nproximity sensor via USB serial device interface, which normal processes cannot access. Recall \\r\\nfrom Chapter 5 that the SE’s default behavior is to deny permissions and access to every-\\r\\nthing. This includes executing a binary, loading special files, and so on. Because the daemon \\r\\naccesses a device, it requires an SE policy that permits file operations and access to USB serial \\r\\ninterface device files. Note\\r\\nThe simple daemon described here demonstrates how a custom daemon for a platform can be \\r\\ncreated and added to the platform, including access to device interface files. Not all custom \\r\\nplatform daemons will require device access, but they will still require a customized SE policy. The device file in use here is /dev/ttyUSB0, but this could be anything exposed by the kernel. It is critical that any custom AOSP-based device limits a daemon’s access to hardware inter-\\r\\nfaces for security purposes and also to pass CTS/VTS. Even though the daemon executes as the system user/group, allowing it to have full access to \\r\\neverything in the system_app domain is dangerously insecure. The SE policy file for all Acme \\r\\nproximity daemons (more will be created in the HAL chapters), shown in Listing 6.12, defines a \\r\\nnew application domain as well as an execution domain for the binary and grants for access to \\r\\nthe components it needs to do its work. Listing 6.12 Acme One Proximity Sensor Daemon SE Policy\\r\\ninit_daemon_domain(proximityd)\\r\\ntype proximityd, domain;\\r\\ntype proximityd_exec, vendor_file_type, exec_type, file_type;\\r\\nallow proximityd serial_device:chr_file rw_file_perms;\\r\\nA key detail in this SE policy file is the use of the init_daemon_domain macro. This sets up the \\r\\nproximityd domain as an init started daemon. What exactly does that mean? It means that \\r\\nit sets up the SE process domain as the domain to which the process initiated by proximityd_\\r\\nexec automatically transfers. Without this, the daemon would fail to start because the SE rules \\r\\nfor init do not allow it to execute another binary unless the new process changes domains! The SE file for the proximity daemon is located in device/acme/one/sepolicy/proximityd.te. In addition to the proximityd domain and execution type, the SE policy file also contains an \\r\\nallow rule that grants the daemon access to serial devices for reading/writing.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bde967c5-7f63-482a-b67c-250df4104972":{"__data__":"{\"id_\":\"bde967c5-7f63-482a-b67c-250df4104972\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"g2z/6QGBcXUWtcRWp+F1AYOr8PxNmthNwQ/4pXmYk7s=\"},\"PREVIOUS\":{\"nodeId\":\"9563351e-dd0f-4c68-ad89-c82caa4fce79\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"GXPDsWUfmclVRJh2bb5eUkZwNMgN810z9DodgHcy2w8=\"}},\"hash\":\"nII9GIi11IUPuwPl+c6ErCcW6P9ks4eZOGr5/RGTyaE=\",\"text\":\"This is necessary \\r\\nto allow the daemon to access the proximity sensor (which, as mentioned earlier, is connected \\r\\nvia USB serial device). This is still not quite enough, though, because the default AOSP SE policies do not label the \\r\\nUSB serial device interfaces as serial_device. Now that a SE domain and context have been \\r\\ndefined, they need to be applied to the daemon binary; otherwise, it will not be available \\r\\n9780134096346_print.indb   11325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8daf6de3-24c6-4055-b5fb-567a21b08be6":{"__data__":"{\"id_\":\"8daf6de3-24c6-4055-b5fb-567a21b08be6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ewVuCXBx2YFcnBDvxOysgbvhb3XXZCS5werm462fqqM=\"}},\"hash\":\"VwXaB1Ev6RyPbr+1ikO2JV1XY3kcKtNUXOj5QfFD2E4=\",\"text\":\"114Chapter 6  System Startup: Installing and Booting the System\\r\\nfor execution by init. The two file context changes require adding two lines to the SE file \\r\\ncontext details for the platform. Recall this is accomplished using a union of the SE file, file_\\r\\ncontexts. This file is located at device/acme/one/sepolicy/file_contexts, shown in \\r\\nListing 6.13. Listing 6.13 Acme One SE Context Labels\\r\\n# Acme One Specific Changes\\r\\n/dev/ttyUSB[0-9]*                 u:object_r:serial_device:s0\\r\\n/vendor/bin/hw/acmesimpledaemon   u:object_r:proximityd_exec:s0\\r\\nWith all of these SE policy changes and additions in place, the Acme One build for the \\r\\nHiKey960 starts acmesimpledaemon during system startup. Summary\\r\\nThis chapter outlines the process of booting Linux in an Android system and describes creating \\r\\na new, pure Linux daemon. It outlines the behavior of the root of the process tree, init, and \\r\\ndemonstrates using init to start the daemon process. It also outlines the somewhat arduous \\r\\ntask of configuring SE Linux to accommodate starting a new hardware-based daemon. 9780134096346_print.indb   11425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"938476aa-3631-4142-bd77-6589fd5b641c":{"__data__":"{\"id_\":\"938476aa-3631-4142-bd77-6589fd5b641c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"I70GWz6pQhO4BG4xsHJWkYrKqFUQoX7DxuWDaJW5Qug=\"},\"NEXT\":{\"nodeId\":\"41383054-bd48-4e50-93ac-2d8961468764\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kYHD7iN7UIoxmTeFTc1t/tA4myIt5+56nQkQSf1fOQ8=\"}},\"hash\":\"qKMGcBiRzsWI1uc/PgAnCMUF7ZIrcdN+Ssho2eQUuRQ=\",\"text\":\"7\\r\\nAndroid Startup:  \\r\\nDalvik and Zygote\\r\\nChapter 6 reviewed the process of booting the Linux system. This chapter investigates the \\r\\nstartup of Android’s subsystems. The processes are quite analogous. Figure 2.1 depicted an Android system as a layer cake; each \\r\\nnew layer depending on services provided by the underlying layer. The Linux kernel provides \\r\\na “container,” an environment that abstracts hardware into standard resources and facilities in \\r\\nwhich programs run. Similarly, Android is a container. It provides abstract services to applications that run “inside” it. Thinking of the Linux kernel as a container is a useful exercise because Android is a container \\r\\nin exactly the sense usually reserved, for instance, for web servers. Android applications are not \\r\\nassociated with the processes that power them in the way that most applications are. A typical desktop application owns its process: It is application code that gets control when \\r\\nthe application starts up. Although it may include code from third-party libraries, invoke code \\r\\nin memory shared with other applications, use services from other processes either local or \\r\\nthrough network connections, it is application code that is at the bottom of the call stack. The \\r\\napplication code may temporarily delegate control elsewhere but it always gets it back. At the \\r\\nextreme, it is the application that makes the call that terminates its process. This is not the case for Android applications. An Android application, even one that has been \\r\\ncompletely compiled to native code, is not in control of its process. Instead, exactly as is the \\r\\ncase with many web service containers, it is the container that controls an Android application \\r\\nprocess. In Android, that container is a program called Zygote. To start a new Android application, the Android system creates a new process (using the clone \\r\\nsystem call) that is a copy of the already-running Zygote. The new instance of Zygote loads \\r\\nthe components for the target application and invokes them as appropriate. In contrast to the \\r\\ntypical desktop application, then, Zygote may temporarily delegate control to the application, \\r\\nbut it is Zygote that always gets control back. Perhaps even more interesting, even Zygote does not get control over when an application \\r\\nstops.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"41383054-bd48-4e50-93ac-2d8961468764":{"__data__":"{\"id_\":\"41383054-bd48-4e50-93ac-2d8961468764\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"I70GWz6pQhO4BG4xsHJWkYrKqFUQoX7DxuWDaJW5Qug=\"},\"PREVIOUS\":{\"nodeId\":\"938476aa-3631-4142-bd77-6589fd5b641c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"qKMGcBiRzsWI1uc/PgAnCMUF7ZIrcdN+Ssho2eQUuRQ=\"}},\"hash\":\"kYHD7iN7UIoxmTeFTc1t/tA4myIt5+56nQkQSf1fOQ8=\",\"text\":\"Perhaps even more interesting, even Zygote does not get control over when an application \\r\\nstops. As described in Chapter 4, the most common way for an Android application to be \\r\\nM07_Meike_C07_p115-132.indd   11525/06/21   8:43 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ff45564a-82eb-4433-a139-074b4d2bc411":{"__data__":"{\"id_\":\"ff45564a-82eb-4433-a139-074b4d2bc411\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hBmguVG9aLq3ON2ebPBu/cMneglJrVmLi4b1b6UhUXw=\"},\"NEXT\":{\"nodeId\":\"878c25ff-2c41-478d-bcd7-391f1ac1f63b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dQlg0Vv/JYdhSer2pjgXrjkGEMWZIVozr1MrQ1K2+fw=\"}},\"hash\":\"1r+9GcXjzlI463BEDGogvraGi9Zv+8hyA1kUtotfHLk=\",\"text\":\"116Chapter 7  Android Startup: Dalvik and Zygote \\r\\nterminated is that the operating system terminates it with a kill -9 when it needs memory \\r\\nfor other applications. Exactly as with a web server, the Android system creates a process for an \\r\\napplication only when its services are required and terminates the process when its resources \\r\\nare required for some other application. Zygote will be discussed in detail in the second half of \\r\\nthis chapter. Another important service that Android provides is the interpreter. A single Android appli-\\r\\ncation can run on a wide variety of hardware platforms: Intel, multiple ARM architectures, \\r\\nand even (dramatically less common) MIPS. This feat is accomplished through the use of an \\r\\n intermediate language (IL). Intermediate languages, popularized by the Java language, are machine languages for virtual \\r\\ncomputers. The idea is that code written in a computer language such as Java, designed to be \\r\\nread and written by human beings, is compiled to the intermediate language. The intermediate \\r\\nlanguage is a machine language for a virtual computer: hardware that probably doesn’t actu-\\r\\nally exist. Running applications written in the intermediate language on a given real computer \\r\\nrequires an application—a compiled binary that uses the native instructions of the target \\r\\ncomputer—that interprets successive instructions in the virtual machine language, translates \\r\\neach into one or more native instructions, and executes those native instructions. This program \\r\\nis called the interpreter or virtual machine (VM). Clearly, a virtual machine has a cost in efficiency. If it takes three native instructions to execute \\r\\na single instruction from the intermediate language, and if that intermediate language instruc-\\r\\ntion is not significantly more powerful than a single native instruction, then it will take three \\r\\ntimes as long to run a program that is compiled to the intermediate language (and then run in \\r\\nthe virtual machine) as it would to run exactly the same program compiled to native instruc-\\r\\ntions and run directly. The benefit of a virtual machine, however, is portability. Instead of having multiple binary \\r\\nversions of an application—one for each target computer architecture—there is a single inter-\\r\\nmediate language “binary. ” It is only the virtual machine that interprets the intermediate \\r\\nlanguage that must be built separately for each architecture. An intermediate language binary \\r\\ncan be run on any architecture that has an implementation of the virtual machine.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"878c25ff-2c41-478d-bcd7-391f1ac1f63b":{"__data__":"{\"id_\":\"878c25ff-2c41-478d-bcd7-391f1ac1f63b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hBmguVG9aLq3ON2ebPBu/cMneglJrVmLi4b1b6UhUXw=\"},\"PREVIOUS\":{\"nodeId\":\"ff45564a-82eb-4433-a139-074b4d2bc411\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1r+9GcXjzlI463BEDGogvraGi9Zv+8hyA1kUtotfHLk=\"}},\"hash\":\"dQlg0Vv/JYdhSer2pjgXrjkGEMWZIVozr1MrQ1K2+fw=\",\"text\":\"An intermediate language binary \\r\\ncan be run on any architecture that has an implementation of the virtual machine. Portability is essential to the Android model and, therefore, most Android code is compiled to \\r\\nan intermediate language, DEX, the IL used by the original Android virtual machine, Dalvik. Dalvik\\r\\nDalvik, the DVM (Dalvik Virtual Machine), was the original virtual machine for Android. ART, \\r\\nthe Android Runtime, succeeded it in Lollipop, API 21. Although Dalvik is gone, a brief discus-\\r\\nsion of its design will introduce its successor. Though it may seem obvious, the most important thing to note about Dalvik is that it has \\r\\nalmost nothing at all to do with Java. It is not a JVM. It isn’t designed like a JVM, and it doesn’t \\r\\n9780134096346_print.indb   11625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4b6e037d-f021-4ef7-9747-5fda03b722cb":{"__data__":"{\"id_\":\"4b6e037d-f021-4ef7-9747-5fda03b722cb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7y781OH20l5LMcdIf7zXo9E8jO+bSJCApn64ZZieeos=\"},\"NEXT\":{\"nodeId\":\"5843c362-f69f-454d-973f-b36524d3050d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AooEmZa2eL4/BY/54NNRYUX7LCdm/DCutY2sF/SF/9E=\"}},\"hash\":\"jbkSV+vQpIq06O7ri1hJjIzuj8b891G6Zg4MOZ91ZFI=\",\"text\":\"117Dalvik\\r\\nact like a JVM. It cannot execute Java bytecode, and the constraints that drove its architecture \\r\\nare very different from those that drove the design of the JVM. Efficiency means a very different thing on a mobile device; especially the small, underpowered \\r\\n(both in CPU and battery) devices that were the targets for the original Android OS. On a rack-\\r\\nmounted machine, efficiency means 100 percent usage: memory full and CPU running at full \\r\\nspeed. If the machine has spare cycles, using those cycles to pre-compute values that might be \\r\\nuseful in the future makes sense. Even if those values have only a 30 percent chance of being used, \\r\\ncomputing them in advance will make the machine appear, on average, to run 30 percent faster. For a mobile device, the situation is dramatically different. By far the most valuable resource \\r\\non a mobile device is the battery. Parsimony with power was an essential goal in the design of \\r\\nDalvik. Note\\r\\nI, Blake, experimented with Java and Linux on early smartphones. Even after making all the \\r\\nobvious optimizations, the batteries on the fairly typical devices with which I experimented \\r\\nlasted between 20 and 40 minutes under normal usage. Another of the central goals in the design of Java’s virtual machine was portability. It is a stack-\\r\\nbased machine: Most op-codes operate on operands that have been pushed onto a system stack \\r\\nby previous operations. Although nearly all real hardware is register based, the JVM makes \\r\\nabsolutely no assumptions about the host’s architecture. One artifact of Java’s focus on portability is the API through which it interacts with the host \\r\\noperating system. All Java developers are familiar with the fairly elegant API (the various \\r\\njava.* packages) that their programs import and use and through which they interact with \\r\\nthe Java runtime environment. A second API, the one through which the Java runtime environ-\\r\\nment interacts with the host operating system, is an abstraction that is much less familiar but \\r\\nat least as elegant. It is a clever and extensible API that makes porting Java to a new OS straight-\\r\\nforward, if not quite trivial. Portability was not even in the running as a goal for Dalvik. Although Dalvik has been ported to \\r\\na few hardware architectures, most of those architectures are versions of ARM.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5843c362-f69f-454d-973f-b36524d3050d":{"__data__":"{\"id_\":\"5843c362-f69f-454d-973f-b36524d3050d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7y781OH20l5LMcdIf7zXo9E8jO+bSJCApn64ZZieeos=\"},\"PREVIOUS\":{\"nodeId\":\"4b6e037d-f021-4ef7-9747-5fda03b722cb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jbkSV+vQpIq06O7ri1hJjIzuj8b891G6Zg4MOZ91ZFI=\"}},\"hash\":\"AooEmZa2eL4/BY/54NNRYUX7LCdm/DCutY2sF/SF/9E=\",\"text\":\"In addition, Dalvik \\r\\nruns on only one operating system, Android/Linux. The abstractions that make it a relatively \\r\\nsimple task to port Java to a new OS would be completely pointless for Dalvik and do not exist. Because a register-based virtual architecture more closely matches the architectures of their \\r\\ntarget hardware, compilers that target a register-based VM may be able to do a better job of \\r\\npreparing their output so that it can be pre-optimized for the target hardware. This makes power \\r\\nconsuming just-in-time (JIT) optimization—essential for a high-performance JVM—less impor-\\r\\ntant for the DVM. In fact, in the early versions of Android, Dalvik had no JIT optimizer at all. This is the biggest difference between the Dalvik VM and the Java VM. To squeeze the last drop \\r\\nof performance out of the underpowered CPUs for which it was designed, Dalvik is register \\r\\nbased, not stack based. M07_Meike_C07_p115-132.indd   11725/06/21   8:45 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"44e15f0b-6871-472d-a910-9e4a39f2fb08":{"__data__":"{\"id_\":\"44e15f0b-6871-472d-a910-9e4a39f2fb08\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"qa02zsYp4FtMRkckPIXwbL0N/q8N5nt1cNzTGM6y57Y=\"}},\"hash\":\"moqrrwg4R/ga0wdkz0wreFtr4esTgUkFqusmKxYSRlc=\",\"text\":\"118Chapter 7  Android Startup: Dalvik and Zygote \\r\\nAlthough still a subject of debate, many academic studies (for example, [Davis, 2003]) seem to \\r\\nagree that a given program can be represented with fewer instructions in a register-based interme-\\r\\ndiate language than in a stack-based VM: The stack-based VM must move each operand onto its \\r\\nstack before it can use it. On the other hand, individual instructions in a register-based intermedi-\\r\\nate language are likely to be bigger (more bits) than their stack-based counterparts. In the register-\\r\\nbased IL, each instruction must allocate bits used to specify the locations of each of its operands. In a stack-based language, however, the location of the operands is implicit: on the stack. According to the research, these two opposing influences on the size of the IL binary do not \\r\\nbalance out. The studies suggest that the representation of a program in a register-based IL, \\r\\nalthough it contains fewer instructions, is likely to be overall larger than the same program \\r\\nrepresented in a stack-based IL. To counteract this bloat, Dalvik has some clever tricks up its \\r\\nsleeve to reduce the size of its binaries. The dex compiler translates Java .class files into .dex files. Unlike the Java compiler, \\r\\nhowever, which creates a separate .class file for each Java class, the dex compiler produces a \\r\\nsingle .dex file for an entire application. This provides the opportunity for its most important \\r\\nspace-saving trick. The dex compiler tries very hard never to say the same thing twice. DEX format is thoroughly documented on the Android Source website (https://source.android. com/devices/tech/dalvik/dex-format). Generally, it is structured as shown in Figure 7.1. Header\\r\\nString Constants\\r\\nType Constant\\r\\nPrototype Constants\\r\\nField Constants\\r\\nMethod Constants\\r\\nClass Definitions\\r\\nCode\\r\\nLink Data\\r\\nFigure 7.1 DEX File Structure\\r\\n9780134096346_print.indb   11825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f543b89c-5a9d-4951-a7e4-cae83a3fb8e6":{"__data__":"{\"id_\":\"f543b89c-5a9d-4951-a7e4-cae83a3fb8e6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OKIBHK5llL2Fvev98+4pCC4FFIQzHouYDYLrndNJeaU=\"},\"NEXT\":{\"nodeId\":\"54a44230-6bd6-4b01-93fa-1265f5b8b6f5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uP0xwG2144sC34QOuqmSCyIXyWLHARMwYtUJCUZ97Z4=\"}},\"hash\":\"dOQ/MbJDX6YuRqa0F0RTLz+EfS/KRSNyLVvTPWoGb+Y=\",\"text\":\"119Dalvik\\r\\nDex structure has two key differences from the structure of Java’s package for an application’s \\r\\nbytecode, the Java Archive or .jar file. The most significant difference is that, in a .jar file, the structure shown in Figure 7.1 is \\r\\nrepeated for each class in the source code. Because the jar contains multiple files, there are \\r\\nseveral string constant pools, several code definition blocks, several method signature defi-\\r\\nnition pools, and so on. The .dex file contains the entire program. There is only one of \\r\\neach of the blocks. The global structure of the .dex file provides the first opportunity for optimization. In this \\r\\nformat, every object is represented in the file exactly once. A reference to an object is simply its \\r\\noffset into the block in which the object is defined. For instance, if two different classes each contain a method whose signature is View \\r\\nfindViewById(int) (different classes may contain methods with exactly the same name), \\r\\nthose two method definitions will be represented in the respective class definitions by offsets \\r\\ninto the methods constants section for the definitions of the method. Those two definitions, \\r\\nthough they point to different code, will contain references to exactly the same constants in \\r\\nthe strings constants section that define the method name and to exactly the same constants in \\r\\nthe types constants section, where the method signature is defined. This extensive use of refer-\\r\\nences dramatically reduces the size of the .dex file. As a further example, consider the definitions for two dissimilar methods:\\r\\nvoid setWallpaper(android.graphics.Bitmap arg)\\r\\nand\\r\\nvoid setWallpaper(java.io.InputStream arg)\\r\\nIn a .dex file, these two definitions are nearly identical and take exactly the same amount of \\r\\nspace. The only difference is that the reference to the type of the parameter in one (a reference \\r\\nto the type java.io.InputStream) is different than the reference to the type of the param-\\r\\neter in the other (a reference to the type android.graphics.Bitmap). There are two function \\r\\nprototype definitions, but each uses all but one element from the other: a considerable savings \\r\\nin space. Dalvik, for all its good points, leaves significant room for improvement. The most important \\r\\nproblem is that, because it is a virtual machine, it does the work of translating each intermedi-\\r\\nate language instruction every time an application is run.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"54a44230-6bd6-4b01-93fa-1265f5b8b6f5":{"__data__":"{\"id_\":\"54a44230-6bd6-4b01-93fa-1265f5b8b6f5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OKIBHK5llL2Fvev98+4pCC4FFIQzHouYDYLrndNJeaU=\"},\"PREVIOUS\":{\"nodeId\":\"f543b89c-5a9d-4951-a7e4-cae83a3fb8e6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dOQ/MbJDX6YuRqa0F0RTLz+EfS/KRSNyLVvTPWoGb+Y=\"}},\"hash\":\"uP0xwG2144sC34QOuqmSCyIXyWLHARMwYtUJCUZ97Z4=\",\"text\":\"Similarly, a just-in-time optimizer, \\r\\nthe state of the art for virtual machines, is a wasteful choice when power use is a crucial \\r\\nconsideration. The Dalvik JIT does store optimizer information across runs of a given application. Although \\r\\neffective, storing state information for just-in-time optimization is a bit of a kludge. There is \\r\\nnothing “just in time” about the stored information. If stored optimization is the goal, why not \\r\\njust build a system from the start that is organized around optimizing only once? The Android engineers agree! That system is ART. M07_Meike_C07_p115-132.indd   11925/06/21   8:51 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ae4b8ed0-b01a-4673-bf7f-1c14b87f8bcc":{"__data__":"{\"id_\":\"ae4b8ed0-b01a-4673-bf7f-1c14b87f8bcc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Qt6r5QdPHIvAfWT43T+d1LKjM2J9gALUMcJhiCEDOgk=\"},\"NEXT\":{\"nodeId\":\"1e585908-6d57-4ad6-bca9-e39c2bcd78ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jvXcN6txgegPNFwWexXO3dnuvFFRrLwLW0BvfFRNd40=\"}},\"hash\":\"JVmj5G1q4iXtzYjn3w1Nbq/Tb52rXh0/7WVTVfQsckc=\",\"text\":\"120Chapter 7  Android Startup: Dalvik and Zygote \\r\\nART\\r\\nART, the Android Runtime, was introduced as an experimental runtime environment in \\r\\nAndroid KitKat, 4.4, API 19. It replaced Dalvik in Android Lollipop, 5.0, API 21. The ART system uses the same intermediate language that Dalvik used: DEX. Most programs \\r\\nthat were compiled before ART existed and that ran on Dalvik will run in the ART environment \\r\\nwith no change. ART’s strategy for optimizing and executing a program, however, is signifi-\\r\\ncantly different. Google coined the term ahead-of-time (AOT) optimization to distinguish it \\r\\nfrom Dalvik’s JIT strategy. “Ahead of time” means that an application, compiled to the DEX intermediate language, is \\r\\ntranslated to native code, only once, using a tool named dex2oat, at some point after its instal-\\r\\nlation on a device. This strategy preserves the essential goal of an intermediate language: porta-\\r\\nbility. Each Android device has installed as part of the operating system a version of dex2oat \\r\\nthat, analogous to a virtual machine, targets its specific hardware platform. When a new appli-\\r\\ncation is installed, dex2oat translates the application intermediate language to a native binary. When the application is run, it is executing code that is native to its platform. No further trans-\\r\\nlation is necessary, and no waste occurs due to repeated translations of the same instructions. Actually, ART’s strategy has evolved over time. Note\\r\\nTo determine whether a system is using Dalvik or ART, find the value of the system property \\r\\npersist.sys.dalvik.vm.lib.1:\\r\\n> getprop persist.sys.dalvik.vm.lib.1\\r\\nOn a system running Dalvik, the property will have the value libdvm.so. If it is using ART, the \\r\\nvalue will be libart.so. ART Basics\\r\\nThe ART system does far more than simply compile code and run it in a garbage-collected \\r\\nenvironment. A closer description might be that it compiles, links, and even starts running the \\r\\napplication, and then stores the running image. The most common invocation of the compiler occurs when a new application is installed on \\r\\nthe system.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1e585908-6d57-4ad6-bca9-e39c2bcd78ec":{"__data__":"{\"id_\":\"1e585908-6d57-4ad6-bca9-e39c2bcd78ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Qt6r5QdPHIvAfWT43T+d1LKjM2J9gALUMcJhiCEDOgk=\"},\"PREVIOUS\":{\"nodeId\":\"ae4b8ed0-b01a-4673-bf7f-1c14b87f8bcc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JVmj5G1q4iXtzYjn3w1Nbq/Tb52rXh0/7WVTVfQsckc=\"}},\"hash\":\"jvXcN6txgegPNFwWexXO3dnuvFFRrLwLW0BvfFRNd40=\",\"text\":\"The most common invocation of the compiler occurs when a new application is installed on \\r\\nthe system. As part of the application installation process, the Android system runs dex2oat, \\r\\nover the DEX code, newly downloaded and installed in the applications directory /data/\\r\\napp/<application package name>. The verified, optimized native code is stored in the  \\r\\ndirectory /data/dalvik-cache as data@<application package name>-<n>.apk@classes. dex. Despite the .dex suffix, the file is an OAT file. The format of the OAT file is complex and not well documented. Although at the time of \\r\\nthis writing it appears that the format is still in flux, some things are stable. The file is an ELF \\r\\nfile, a standard format for Unix binaries. It contains both the compiled native code and also \\r\\nM07_Meike_C07_p115-132.indd   12025/06/21   10:46 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e3b8f920-9d9e-43cf-890b-e3d7696537f5":{"__data__":"{\"id_\":\"e3b8f920-9d9e-43cf-890b-e3d7696537f5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wHMFTj48o4EtP2yObAdIXDENPXE/rU1AznA4aZ3/KJM=\"}},\"hash\":\"nuTeCFVdG+cnFBUhIl7/TdULbSpllBnUtDzsjv6wVzI=\",\"text\":\"121ART\\r\\nthe entire pre-compilation DEX format “source. ” Figure 7.2 is a rough outline of the OAT file \\r\\nformat. (The format is described in the file $AOSP/art/dex2oat/linker/oat_writer.h). ELF Header\\r\\nDex File Header\\r\\nDex File Header\\r\\nDex File\\r\\nDex File\\r\\nOAT Class\\r\\nOAT Class\\r\\nCode\\r\\nFigure 7.2 OAT File Structure\\r\\nThe point of embedding the complete, uncompiled DEX code in the OAT file is that doing \\r\\nso allows incremental compilation. Bits in the file header indicate which methods have been \\r\\ncompiled and which have not. The ART runtime is not only compiled to native code but, in the normal uses of the term, it is \\r\\nlinked. The dex2oat compiler refers, during the process of compiling a .dex file, to the output \\r\\nof the previously compiled Android system libraries and compiles references to symbols defined \\r\\nin those libraries to their absolute locations. In other words, the compiled OAT file must be \\r\\nloaded into memory at exactly the location for which it was compiled and depends on having \\r\\nan image of the compiled libraries at exactly the locations at which they were found during the \\r\\ncompilation process. The process of loading independently compiled binaries into memory and resolving the refer-\\r\\nences from one to the other is normally called linking. Linking can be an expensive process. Even the earliest versions of Android pre-linked many portions of the system libraries as an \\r\\noptimization: doing it once to save the cost of doing it each time it was necessary. 9780134096346_print.indb   12125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1c9751c6-4c46-4c6b-aef2-f9a4dfd5b94e":{"__data__":"{\"id_\":\"1c9751c6-4c46-4c6b-aef2-f9a4dfd5b94e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6HD6VZatQbRZfsos41G9i5ECUzM84DMqgsvpx0xbRQ8=\"},\"NEXT\":{\"nodeId\":\"77783bbf-7f9d-4db1-baaf-ea5b137e1914\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1uuLvBukxF4uD1fwSz5aX67I1T0YIOs23h4PJqrjBIk=\"}},\"hash\":\"0z76I4GIhTfNFqYaDsaVT3Dz4Sot2GOfioCe0RRZ+/Q=\",\"text\":\"122Chapter 7  Android Startup: Dalvik and Zygote \\r\\nOf course, the consequence of pre-linking binary libraries is that those libraries cannot, once \\r\\nlinked, be versioned independently. For instance, after a symbolic reference to the code that \\r\\nactivates the haptic feedback device is linked as a reference to a specific location in memory, \\r\\nupdating the haptic feedback library and changing its location would be disastrous. On current mobile devices, however, this is not a significant issue. System libraries are never \\r\\nupdated individually. Updates to the system software always involve updating the entire system \\r\\nas a unit, and all affected components are updated together. In the Android system, building the pre-compiled, pre-linked image of the ART runtime is \\r\\npart of building the system image. The directory /system/framework contains the .jar files \\r\\nproduced by compiling the Android libraries. In the Dalvik era, these .jar files were loaded \\r\\ninto an application image and the code within them executed by the DVM. For ART, those libraries are recompiled with dex2oat into a new subdirectory named for the \\r\\ndevice architecture (for example, arm). The two most significant files in this directory are  \\r\\nboot.art and boot.oat. These two files—the first an image of initialized classes and objects, \\r\\nthe second the ELF file containing the code and linking information—are loaded into memory: \\r\\n.art first, and immediately below it, .oat. Together, they comprise the pre-linked, pre-initial-\\r\\nized system library image. These two files are soft-linked into /data/dalvik-cache along with \\r\\nthe .art and .oat files for installed applications. And this brings us at last to the second, less common use of dex2oat. A system update will \\r\\nalmost certainly mean a new boot.art and boot.oat. These new files cannot be used with \\r\\nthe pre-linked .oat files that dex2oat created previously when it compiled new applications as \\r\\nthey were installed. A system update requires the recompilation of every single application on \\r\\nthe device. This recompilation is the source of the often seemingly interminable “Android Is Optimizing \\r\\nApplications” dialog that followed system updates on KitKat devices. It was not a great experi-\\r\\nence; more recent versions of ART do better. Hybrid ART\\r\\nRecent versions of ART are smarter and lazier.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"77783bbf-7f9d-4db1-baaf-ea5b137e1914":{"__data__":"{\"id_\":\"77783bbf-7f9d-4db1-baaf-ea5b137e1914\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6HD6VZatQbRZfsos41G9i5ECUzM84DMqgsvpx0xbRQ8=\"},\"PREVIOUS\":{\"nodeId\":\"1c9751c6-4c46-4c6b-aef2-f9a4dfd5b94e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"0z76I4GIhTfNFqYaDsaVT3Dz4Sot2GOfioCe0RRZ+/Q=\"}},\"hash\":\"1uuLvBukxF4uD1fwSz5aX67I1T0YIOs23h4PJqrjBIk=\",\"text\":\"Hybrid ART\\r\\nRecent versions of ART are smarter and lazier. Why take the time and energy to compile code \\r\\nthat might never be used? In what might at first seem like a step backwards, the new hybrid \\r\\nART contains a Dalvik-like interpreter complete with a JIT. Most applications are executed at first in the interpreted environment. Although interpreted, \\r\\nthis environment is not Dalvik. The interpreted ART environment, for instance, uses the same \\r\\nhighly tuned garbage collection system that was introduced with ART in KitKat. The interpreter collects profile information on the code it executes. It stores the data it collects, \\r\\nper application, in files in the directory /data/dalvik-cache/profiles/. A new system \\r\\ndaemon, the BackgroundDexOptService, parses these files occasionally and uses dex2oat.to \\r\\ncompile the “hot” methods—methods that are 90 percent of the calls in the application. It also \\r\\nrecompiles a program if the list of methods that comprise 90 percent of the calls changes by \\r\\nmore than 10 percent. 9780134096346_print.indb   12225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6748ec9a-0e5e-4c66-8063-00371988107f":{"__data__":"{\"id_\":\"6748ec9a-0e5e-4c66-8063-00371988107f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"i1UqA/dsRByL3S0OlYiyppspUnWWDF/pZMztakqfaFk=\"},\"NEXT\":{\"nodeId\":\"f5397d58-d7ec-4ee5-95d4-0298c122761b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Uw+lIMKAPtHETVmp7xzYA7WGNVf0YZUZh2U3SkmBoqk=\"}},\"hash\":\"RKo++HaOZe/y/rWh/OPyaTjZhMcZHkq5NGQNJEIsW6Y=\",\"text\":\"123Zygote\\r\\nThe most immediate effect of this new, hybrid ART is that a system update no longer requires \\r\\nrecompilations of every application known to the system and the attending several-minute \\r\\nwait. In addition, though, hybrid ART saves the substantial cost of running dex2oat on appli-\\r\\ncations or parts of applications that are never used. Zygote\\r\\nBefore any code that has been compiled to the DEX intermediate language (and that includes about \\r\\nhalf of the Android framework) can run, the system must initialize the runtime: Dalvik or ART. The simplest way to run Java code is to run the java program, the virtual machine, and tell it \\r\\nwhich code to execute:\\r\\njava –cp MyApplication.jar net.callmeike.MyApplication\\r\\nThe java program initializes a VM and uses it to execute the intermediate language instruc-\\r\\ntions for the class net.callmeike.MyApplication in the file MyApplication.jar. Similarly, the Android system, as part of startup, must create virtual machines and the runtime \\r\\nenvironment for all the system services that are compiled to the DEX IL. It must also provide \\r\\na way to start and initialize new runtime environments for new applications as they start. The \\r\\nAndroid solution for this necessity is a clever program called Zygote. Zygote Memory Management\\r\\nZygote is the solution to one of the oldest problems with Java desktop applications: startup \\r\\ntime. Starting a Java desktop application requires each of the following steps:\\r\\n ■The OS resources. The system must find resources for a new, large program. On any machine that has been running for a while, finding those resources might well require \\r\\nswapping some other running program to disk. ■Start the JVM. The JVM, normally a program called java, is a moderately large and complex C++ program. Although it starts fairly quickly, getting it fully initialized does take time. ■Load basic Java libraries. Java loads its libraries lazily from a very large file called rt.jar. Finding and loading the classes required for minimal functionality, though heavily \\r\\noptimized, does take time. ■Initialize the basic libraries. Java classes quite frequently require some initialization (assignments to static variables or static initializer blocks). As each class is loaded, its \\r\\ninitialization code must be executed.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f5397d58-d7ec-4ee5-95d4-0298c122761b":{"__data__":"{\"id_\":\"f5397d58-d7ec-4ee5-95d4-0298c122761b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"i1UqA/dsRByL3S0OlYiyppspUnWWDF/pZMztakqfaFk=\"},\"PREVIOUS\":{\"nodeId\":\"6748ec9a-0e5e-4c66-8063-00371988107f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"RKo++HaOZe/y/rWh/OPyaTjZhMcZHkq5NGQNJEIsW6Y=\"}},\"hash\":\"Uw+lIMKAPtHETVmp7xzYA7WGNVf0YZUZh2U3SkmBoqk=\",\"text\":\"As each class is loaded, its \\r\\ninitialization code must be executed. At this point, on a typical laptop computer, even \\r\\nfor a completely trivial application, it may now be several tenths of a second since the \\r\\nuser started the application. ■Load the application. This is the first step toward executing the application that the user actually requested. Application classes are, most likely, in another .jar file from which \\r\\nthey are, again, loaded lazily. To start executing the program, however, the VM must \\r\\n9780134096346_print.indb   12325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d1a6ffbf-adec-4010-a9ea-4cd1c8f18f45":{"__data__":"{\"id_\":\"d1a6ffbf-adec-4010-a9ea-4cd1c8f18f45\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9vPfyOLmNF2kNJDLGnST0wi2Of/hJTJgqk/9BJpZlNg=\"},\"NEXT\":{\"nodeId\":\"af351923-49b5-4fc1-a6df-fdc1a2b79edc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1EjMrKWsmV0ZJK9vqbSGQMIjAgl25/mnuPLEADwIa08=\"}},\"hash\":\"6TYgDVPDz2hl63qCj0xwdWCh8W8UA30CfT1meAiA3Zw=\",\"text\":\"124Chapter 7  Android Startup: Dalvik and Zygote \\r\\nload the closure of references from the main class: all the things to which it refers; all \\r\\nthe things to which any of the referents refer; all the things to which they refer, and so \\r\\non, until no unresolved references exist. Note, first of all, that this recursive resolution of \\r\\nreferences may very well require loading many Java system libraries as well as application \\r\\ncode. Also note that it does not, by any means, imply the loading of all of them either. ■Initialize the newly loaded classes. Again, some or all of the newly loaded classes may require initialization. Any initialization code in any of the newly loaded classes must be executed. ■At this point, it is entirely possible that the initialization process has used enough memory so that a minor garbage collection (GC) is necessary. Although minor GCs are \\r\\nfast, they do take time. ■After all necessary classes have been loaded and initialized, the VM can begin to execute the application’s main method. For a moderately complex application, it is entirely \\r\\npossible that it has been nearly a minute since the user-initiated startup. Although this delay is definitely annoying on a laptop computer, it would be devastating on a \\r\\nbattery powered mobile device. Wading through the preceding list of initialization procedures each \\r\\ntime a new application started would drain a battery in no time. Add to that the idea of waiting \\r\\nfor a full minute for a phone application to start up so that you could answer an incoming call. The Android OS had to address this problem to be viable. The answer is the Zygote application. As mentioned earlier, Zygote is to Android what init is to Linux: the parent of all applications. init starts Zygote as part of bringing up the system. Zygote initializes itself by pre-loading the \\r\\nentire Android framework. Unlike desktop Java, it does not load the libraries lazily. It loads all \\r\\nof them as part of system startup. When completely initialized, it enters a tight loop, waiting \\r\\nfor connections to a socket.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"af351923-49b5-4fc1-a6df-fdc1a2b79edc":{"__data__":"{\"id_\":\"af351923-49b5-4fc1-a6df-fdc1a2b79edc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9vPfyOLmNF2kNJDLGnST0wi2Of/hJTJgqk/9BJpZlNg=\"},\"PREVIOUS\":{\"nodeId\":\"d1a6ffbf-adec-4010-a9ea-4cd1c8f18f45\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6TYgDVPDz2hl63qCj0xwdWCh8W8UA30CfT1meAiA3Zw=\"}},\"hash\":\"1EjMrKWsmV0ZJK9vqbSGQMIjAgl25/mnuPLEADwIa08=\",\"text\":\"When completely initialized, it enters a tight loop, waiting \\r\\nfor connections to a socket. Physical\\r\\nMemory\\r\\nMemory Page\\r\\nMemory Page\\r\\nMemory Page\\r\\nMemory Page\\r\\nPage\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nPage Table Entry\\r\\nTable\\r\\ngy\\r\\nPTblEt\\r\\nP\\r\\nP\\r\\nP\\r\\nP\\r\\nP\\r\\nZygote\\r\\nFigure 7.3 Zygote\\r\\n9780134096346_print.indb   12425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6d97d59d-407b-4cd1-a9f4-75d28b7784b5":{"__data__":"{\"id_\":\"6d97d59d-407b-4cd1-a9f4-75d28b7784b5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oehGxcNqm1wvLFm1uTafxdbKqlCMFoj8FmgVmGC2H3E=\"}},\"hash\":\"vCMzpVNweanRz8SuSMOIezoI4m66B0x9wtUI1WDDgbE=\",\"text\":\"125Zygote\\r\\nZygote makes use of an important feature of the Linux OS, copy-on-write paging, to eliminate \\r\\nnearly all the items in the Java initialization list. Figure 7.3 is a simplified illustration of how \\r\\nthe operating system lays out virtual memory for applications; in this case, Zygote. Memory is \\r\\norganized into uniformly sized pages. When the application refers to memory at a particular \\r\\naddress, the device hardware reinterprets the address as an index into a page table and an \\r\\noffset into the associated page to which the index points. It is entirely possible, as shown in \\r\\nFigure 7.3, that an address that points at the top of an application’s virtual memory space refers \\r\\nto a location that is actually near the bottom of physical memory. When the system needs to create a new application, it connects to the Zygote socket and \\r\\nsends a small packet describing the application to be started. Zygote clones itself, creating a \\r\\nnew kernel-level process. Figure 7.4 illustrates the memory layout of a new application cloned \\r\\nfrom Zygote. The new application has its own page table. Most of the new page table is simply \\r\\na copy of Zygote’s page table. It points to the exact same pages of physical memory. Only the \\r\\npages the new application uses for its own purposes are not shared. The new process is interesting in that it shares memory with Zygote, its parent, in a mode \\r\\ncalled copy-on-write. Because the two processes are using exactly the same memory, starting the \\r\\nchild process is nearly instantaneous. The kernel does not need to allocate much memory for \\r\\nthe new process, nor does it need to load the Android framework libraries. Zygote has already \\r\\nloaded everything. Physical\\r\\nMemory\\r\\nPage\\r\\nTable\\r\\nPage\\r\\nTableZygote\\r\\nNew\\r\\nApp\\r\\nFigure 7.4 Zygote Clone\\r\\n9780134096346_print.indb   12525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dc13287c-3760-4cb4-a541-cc5e912c6372":{"__data__":"{\"id_\":\"dc13287c-3760-4cb4-a541-cc5e912c6372\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"0NlMTuoQtqwCSr6c1YWxg0DWDo4G0LyHkjpC+48EoUU=\"}},\"hash\":\"LfukeWExHBUvYS1OhektgNPsmM93szPUr/AGoFpmKmg=\",\"text\":\"126Chapter 7  Android Startup: Dalvik and Zygote \\r\\nBecause both processes have mapped exactly the same physical memory into their virtual \\r\\naddress spaces, if either changed the contents of the memory by writing to it, the other would \\r\\nbe affected. That would be very bad. To avoid the problem, the system copies pages on write. The hardware notifies the kernel when \\r\\neither process attempts to write to a shared page. Instead of allowing the write, the kernel allo-\\r\\ncates a new page of memory and copies the contents of the original page—the page to which \\r\\na process is writing—into it. After the two processes have separate copies of the page, each can \\r\\nfreely modify its own copy. Figure 7.5 represents the state of memory after a new application \\r\\nspawned from Zygote attempts to write to a shared page. Copy on write is a tremendous savings. In addition to the fast startup, there is only one \\r\\ncopy for all processes of any pages that are unaltered by any process (all the library code, for \\r\\ninstance). Even if some child process were to write on every single memory page (something \\r\\nthat quite literally never happens), the cost of allocating the new memory is amortized over the \\r\\nlife of the process. It is not incurred at initialization. Physical\\r\\nMemory\\r\\nPage\\r\\nTable\\r\\nPage\\r\\nTable\\r\\ncopywrite! ZygoteNewApp\\r\\nFigure 7.5 Zygote Copy on Write\\r\\n9780134096346_print.indb   12625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dd605920-6eb6-4a85-b8f0-715c6061e417":{"__data__":"{\"id_\":\"dd605920-6eb6-4a85-b8f0-715c6061e417\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"LxVk1pcscPRwRCB6UjbR7oJcK4RrMDkZFePmFpEyR0E=\"}},\"hash\":\"ZZumZhSF6EAIB+fkEa7RRa7Db+m9k6zuaWjauNGNrIQ=\",\"text\":\"127Zygote\\r\\nZygote Startup\\r\\nAs mentioned, Zygote is started by init. Recent Androids typically start multiple copies of \\r\\nZygote. Depending on the chipset architecture or OEM preference, platform developers use \\r\\nthe system variable, ro.zygote, set at platform at build time, to control which of four types \\r\\nof Zygotes are started and which one is “primary. ” Most modern Android devices start two \\r\\nzygotes—one for 32-bit applications and one for 64-bit apps—and default to 64-bit version. Note\\r\\nAt the time of this writing, Zygote startup is still accurately described at https://elinux.org/\\r\\nAndroid_Zygote_Startup. The base init script, init.rc, described in Chapter 6, includes the script that starts Zygote:\\r\\nimport /init.${ro.zygote}.rc\\r\\nThe sources for the startup scripts are found in the directory: \\r\\n$AOSP/system/core/rootdir\\r\\nListing 7.1 shows init.zygote32_64.rc for an older system, on which 32-bit apps were the \\r\\ndefault. It provides an opportunity to revisit the init scripting language. Note that the service \\r\\nlines have been wrapped to fit the page. They cannot be wrapped this way in the actual script. Listing 7.1 Zygote init for 32-bit Default Applications\\r\\nservice zygote /system/bin/app_process32 \\\\\\r\\n        -Xzygote /system/bin --zygote --start-system-server --socket-name=zygote\\r\\n    class main\\r\\n    priority -20\\r\\n    user root\\r\\n    group root readproc\\r\\n    socket zygote stream 660 root system\\r\\n    onrestart write /sys/android_power/request_state wake\\r\\n    onrestart write /sys/power/state on\\r\\n    onrestart restart audioserver\\r\\n    onrestart restart cameraserver\\r\\n    onrestart restart media\\r\\n    onrestart restart netd\\r\\n    onrestart restart wificond\\r\\n    writepid /dev/cpuset/foreground/tasks\\r\\nservice zygote_secondary /system/bin/app_process64 \\\\\\r\\n        -Xzygote /system/bin --zygote --socket-name=zygote_secondary\\r\\n    class main\\r\\n    priority -20\\r\\n    user root\\r\\n    group root readproc\\r\\n9780134096346_print.indb   12725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"21ad7398-7190-417e-910d-b0b99848233d":{"__data__":"{\"id_\":\"21ad7398-7190-417e-910d-b0b99848233d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OwfXp+n34Gn1ldADsgNUc34ZpK6m4GLXUF/lm7938vU=\"},\"NEXT\":{\"nodeId\":\"47fdfa52-3790-42ce-ad82-5afd8c4edcd9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"GcXaQIT7Ilo9JC+kfGyBh9L9Z3yox8Nhz/6LBNGdsr8=\"}},\"hash\":\"ptvpbP+y9MXjaxJVuGrr3BV9/JLHVTBIrySDIDRJKgs=\",\"text\":\"128Chapter 7  Android Startup: Dalvik and Zygote \\r\\n    socket zygote_secondary stream 660 root system\\r\\n    onrestart restart zygote\\r\\n    writepid /dev/cpuset/foreground/tasks\\r\\nConsider the definition of the zygote_secondary service, the 64-bit zygote. The actual appli-\\r\\ncation that is started as user root at the very highest priority by init is /system/bin/app_\\r\\nprocess64. The script requests that init create a stream socket for the process and catalog it \\r\\nas /dev/socket/zygote_secondary: This is the socket that the system will use to start new \\r\\nAndroid applications. The script also contains an onrestart directive that will restart the \\r\\nprimary Zygote if the secondary zygote fails. The definition of the primary Zygote service, zygote, is nearly identical. It uses a different \\r\\nsocket and has a much longer list of other servers that will be restarted if it fails. Note, of \\r\\ncourse, that if zygote_secondary fails, all of these servers will be restarted as well. Runtime Initialization\\r\\nZygote’s first order of business when it is started is to initialize the ART runtime environment. While reading this, keep in mind that it happens only once; that is, Zygote is started only once, \\r\\nduring system startup. Subsequent application startup simply clones the running Zygote. The applications that init starts, app_process64 and app_process32, are just small applica-\\r\\ntions (source in $AOSP/frameworks/base/cmds/app_process) that parse their command line \\r\\nand then run either Zygote or the class whose name has been passed as an argument. These \\r\\nare the programs used to start all programs (not applications! ) compiled to DEX: anything that \\r\\nrequires either Dalvik or ART. They serve a purpose very similar to that served by the “java” \\r\\ncommand, which starts the Java runtime. The app_process creates an instance of AppRuntime, a subclass of AndroidRuntime. It does \\r\\na lot of bookkeeping, setting up any runtime parameters (runtime.addOption(...)), the name \\r\\nfor the process (runtime.setArgv0(...)), and the name of the class to run (used only when \\r\\nnot running Zygote: runtime.setClassNameAndArgs(...)), and then calls AndroidRuntime. start() to invoke the runtime.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"47fdfa52-3790-42ce-ad82-5afd8c4edcd9":{"__data__":"{\"id_\":\"47fdfa52-3790-42ce-ad82-5afd8c4edcd9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OwfXp+n34Gn1ldADsgNUc34ZpK6m4GLXUF/lm7938vU=\"},\"PREVIOUS\":{\"nodeId\":\"21ad7398-7190-417e-910d-b0b99848233d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ptvpbP+y9MXjaxJVuGrr3BV9/JLHVTBIrySDIDRJKgs=\"}},\"hash\":\"GcXaQIT7Ilo9JC+kfGyBh9L9Z3yox8Nhz/6LBNGdsr8=\",\"text\":\"start() to invoke the runtime. The start method (source in $AOSP/frameworks/base/core/jni/AndroidRuntime.cpp) \\r\\neventually invokes startVM. startVM again is mostly setup. Starting the runtime has gotten significantly more complex since the advent of ART. It is espe-\\r\\ncially difficult to read the code because nearly all the variables that contain “dalvik” in their \\r\\nnames actually apply to ART. Nonetheless, a review of the VM configuration options controlled \\r\\nby this code can prove extremely helpful to a developer. Among the more interesting are  \\r\\n–verbose:gc and the compiler option –generate-debug-info. The former logs information \\r\\nabout system garbage collection, and the latter causes dex2oat to add debugging information \\r\\nto the system image it builds after a system update. After processing the options, startVM invokes JNI_CreateJavaVM. Again, the name is confus-\\r\\ning: The runtime environment that is about to be initialized has almost nothing to do with \\r\\n9780134096346_print.indb   12825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"35924aac-1ce9-4db0-8f12-261755508822":{"__data__":"{\"id_\":\"35924aac-1ce9-4db0-8f12-261755508822\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"a3vOBRNG1xLmGgvzdYVAP8my2a7Yovyj5ojb9BVxxAs=\"},\"NEXT\":{\"nodeId\":\"e759b9b9-c9c1-4b88-8920-e8a4c8c9aebf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DJpBrUejkJy6aIv4klcx5Istwl0GusDiFC1NQwvB4kg=\"}},\"hash\":\"3LJyiDwT8ptDll1lrF+ScrzRoPPTbZEVY961178FrJs=\",\"text\":\"129Zygote\\r\\nJava. To be compatible with code written for Java, though—and that includes the Java JNI \\r\\nAPI, discussed in the next chapter—this method inherits its name from its JNI counterpart. It \\r\\nis, though, almost certainly not the case that an application that uses the JNI API to start an \\r\\ninstance of the Java VM on, say, a desktop Linux system, could successfully initialize the ART \\r\\nruntime on Android without further modification. The JNI_CreateJavaVM method is defined in art/runtime/jni/java_vm_ext.cc. It, in turn, \\r\\ncalls Runtime::Create, defined in art/runtime/runtime.cc. Finally, Runtime::Create \\r\\ninitializes the ART runtime, loading the system OAT files and the libraries they contain. The Android VM is now ready to roll. The argument that app_process passed in its calls to \\r\\nstart was \\\"com.android.internal.os.Zygote.Init\\\". Its source is in $AOSP/frameworks/\\r\\nbase/core/java/com/android/internal/os/ZygoteInit.java. System Service Startup\\r\\nMost of the code in ZygoteInit’s main method (the method the runtime calls, once initial-\\r\\nized) is wrapped in a Java try/catch block. The obvious reason is to allow Zygote to attempt \\r\\nto clean up after a failure. There is a second, very clever purpose to which we will return in a \\r\\nmoment. Zygote has three major tasks, on startup:\\r\\n ■Register the socket to which the system will connect to start new applications\\r\\n ■Preload Android resources and libraries, if necessary\\r\\n ■Start the Android System Server\\r\\nAfter it has completed these three tasks, it enters a loop, waiting for connections to the socket. The first of the tasks, opening the socket, is handled in the registerServerSocket method. The method creates the socket using the name passed in the parameters, probably from the \\r\\ninit script originally. The second task is accomplished with a call to the preload method. Historically, Zygote was \\r\\ninitialized aggressively. Modern Androids, however, support a minimal system that postpones \\r\\nthe cost of preloading the framework until the first application is spawned. The preload method loads everything it can think of: classes, libraries, resources, and even a \\r\\nvery special case, the WebView (a web browser view that can be embedded in an Android appli-\\r\\ncation).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e759b9b9-c9c1-4b88-8920-e8a4c8c9aebf":{"__data__":"{\"id_\":\"e759b9b9-c9c1-4b88-8920-e8a4c8c9aebf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"a3vOBRNG1xLmGgvzdYVAP8my2a7Yovyj5ojb9BVxxAs=\"},\"PREVIOUS\":{\"nodeId\":\"35924aac-1ce9-4db0-8f12-261755508822\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3LJyiDwT8ptDll1lrF+ScrzRoPPTbZEVY961178FrJs=\"}},\"hash\":\"DJpBrUejkJy6aIv4klcx5Istwl0GusDiFC1NQwvB4kg=\",\"text\":\"Note that, when using the ART runtime, many of the preloads are already in memory \\r\\nbecause they are in the system OAT file. At the completion of the preload method, Zygote is fully initialized and ready to clone new \\r\\napplications very quickly, sharing most of its virtual memory with them. The last of the tasks, starting the System Server, is accomplished in the startSystemServer \\r\\nmethod. The SystemServer is the first application cloned from Zygote. Following the process \\r\\nis instructive. 9780134096346_print.indb   12925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1fc9ab6d-e03e-4540-9184-c82e114a8c70":{"__data__":"{\"id_\":\"1fc9ab6d-e03e-4540-9184-c82e114a8c70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Js07EKe95RqNQQ6oRorD/KM6A01BO+e7ey43JHbSSvE=\"},\"NEXT\":{\"nodeId\":\"49d9fc2b-169e-4285-bcf0-3e8e2e57ab70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"+tAitZq5NVsWYY/iDQWLaeonixuB/TKhO3K6yNiKdaA=\"}},\"hash\":\"V8hlC5ghMNcszeM7cLKm9O3VOYcpmsimeHbjAPMpRDs=\",\"text\":\"130Chapter 7  Android Startup: Dalvik and Zygote \\r\\nThe startSystemServer method fakes a connection to the Zygote socket (for subsequent \\r\\napplication startup, the connection will be real). It creates a new ZygoteConnection object \\r\\nwith the hard-coded content that it would have received over the canonical socket connection \\r\\nwere the system trying to start the server. It passes the contents of the connection object to \\r\\nZygote.forkSystemServer which, in turn, wraps a native method, com_android_internal_\\r\\nos_nativeForkSystemServer (source in $AOSP/frameworks/base/core/jni/com_android_\\r\\ninternal_os_Zygote.cpp). The native method first calls ForkAndSpecializeCommon, which \\r\\ndoes the actual fork system call. There are now two execution paths, one for Zygote, in which \\r\\nthe fork system call returned the process id (pid) of the new child process, and one for the \\r\\nnewly spawned child process, in which fork returned a pid of 0. In the parent process (pid > 0) control returns, eventually to ZygoteInit and immediately \\r\\nenters the ZygoteServer method runSelectLoop. This is the endless loop that processes \\r\\nincoming connections with almost the same code that just started the System Server. The \\r\\ncall to ZygoteConnection.runOnce eventually calls forkAndSpecialize, the analog of \\r\\n forkSystemServer for the masses. Perhaps of more interest is what happens to the child process (pid == 0), the process that will \\r\\nbecome the System Server. First, the method SpecializeCommon is called with a flag indicat-\\r\\ning that this process will become the System Server. SpecializeCommon in turn calls a series of \\r\\nadditional setup methods that set the correct SE Linux context and process capabilities. After the child process has been set up with the correct process options, it calls Zygote. callPostForkSystemServerHooks and Zygote.callPostForkChildHooks to load the \\r\\nspecialized System Server class libraries and to start its application code. Both of these calls \\r\\ntrigger calls to the ART runtime native code located in art/runtime/native/dalvik_system_\\r\\nZygoteHooks.cc.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"49d9fc2b-169e-4285-bcf0-3e8e2e57ab70":{"__data__":"{\"id_\":\"49d9fc2b-169e-4285-bcf0-3e8e2e57ab70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Js07EKe95RqNQQ6oRorD/KM6A01BO+e7ey43JHbSSvE=\"},\"PREVIOUS\":{\"nodeId\":\"1fc9ab6d-e03e-4540-9184-c82e114a8c70\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"V8hlC5ghMNcszeM7cLKm9O3VOYcpmsimeHbjAPMpRDs=\"}},\"hash\":\"+tAitZq5NVsWYY/iDQWLaeonixuB/TKhO3K6yNiKdaA=\",\"text\":\"Next, the child process calls the handleSystemServerProcess method, which, in turn, calls \\r\\nZygoteInit.zygoteInit, RuntimeInit.applicationInit (source $AOSP/ frameworks/\\r\\nbase/core/java/com/android/internal/os.RuntimeInit.java), and, finally, \\r\\n invokeStaticMain, which is where the magic happens. The invokeStaticMain method finds the class whose name was given in the data transferred \\r\\nto Zygote through the socket (or, in the case of the System Server, faked in hard-coded data), \\r\\nand then obtains a reference to the public static void main method on that class. The \\r\\nvery last thing it does is to create a new exception holding the method reference and throw it. This clever trick is the second reason for wrapping the top-level ZygoteInit code in a try/\\r\\ncatch block. This throw, from within invokeStaticMain, clears the entire Java stack back to \\r\\nits very top. At this point, the new instance of Zygote has closed all unneeded file descriptors; \\r\\nset its permissions, group, and user IDs correctly; has the entire Android framework loaded \\r\\nand warmed up; and now has an empty stack. The exception’s run method, called in the catch \\r\\nblock, runs the new application’s main method in this fully initialized environment with an \\r\\nempty stack. 9780134096346_print.indb   13025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"514611f2-8c87-495c-a7da-fab3e6422188":{"__data__":"{\"id_\":\"514611f2-8c87-495c-a7da-fab3e6422188\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PEfRKfkeZgJSBsrD+cC+Bk9mK5gQeYR0H1dJ+TrqF8E=\"}},\"hash\":\"cXs7T/lSRS7LuNwoUXFsNKdoSU/Nqw+VawXCuAtDzWc=\",\"text\":\"131Citations\\r\\nWhen Zygote starts the System Server, it is the class com.android.server.SystemServer \\r\\n(source in $AOSP/frameworks/base/services/java/com/android/server/SystemServer. java) whose main method is run. It is here that all the familiar Android services are started:  \\r\\nthe PackageManagerService, the ActivityManagerService, the PowerManagerService, \\r\\nand so on. Summary\\r\\nThis chapter traces the initialization of the main component of the Android system—its \\r\\nruntime, ART, and its root program, Zygote—from its initialization from Linux init through \\r\\nthe start of the System Server and the initialization of the standard Android managers. Citations\\r\\nDavis, B., A. Beatty, K. Casey, D. Gregg, and J. Waldron. “The case for virtual register \\r\\nmachines. ” In Interpreters, Virtual Machines and Emulators (IVME ’03), pages 41–49, 2003. 9780134096346_print.indb   13125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2616df8c-b6f0-411a-a381-766d4dcb6b05":{"__data__":"{\"id_\":\"2616df8c-b6f0-411a-a381-766d4dcb6b05\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rpZcLjxxG5vod0h2O2uOHYIh35CJ5xqEkDAFyi3M9AI=\"}},\"hash\":\"92l75jmNQW6sW+ViKVIdlQDJ/Iwx5vRofzlfBTa/FHs=\",\"text\":\"8\\r\\nGetting to Android: The HAL\\r\\nThe Android’s Hardware Abstraction Layer (HAL) is just an interface. It is a layer of abstraction \\r\\nthat separates components by disconnecting the definition of the component’s behavior from \\r\\nits implementation. As is always the case, introducing an abstraction layer comes with a cost. So why use the HAL? There are several reasons. Why a HAL? The HAL is Android’s interface to hardware. On most Linux systems, the interface to the hard-\\r\\nware is a device driver. Device drivers, however, are usually device specific and sometimes \\r\\nproprietary. Consider: The Android system will be installed on diverse hardware with, for instance, a wide \\r\\nvariety of Wi-Fi chips. Although each Wi-Fi chip has its own kernel driver, at some point, they \\r\\nall provide a Wi-Fi service used by Android code. It would be very convenient if above some \\r\\npoint in the stack, the Android code for all the different Wi-Fi hardware/driver combinations \\r\\nwere the same. The HAL is the lingua franca for a class of devices. A single set of C header files describes the \\r\\nfunctionality that a HAL provides to the Android system. HAL code for a particular device is \\r\\nthe implementation of the API defined by those header files. The HAL code shims the hard-\\r\\nware device driver behavior so that it looks to Android like a generic device of some particular \\r\\ntype: Wi-Fi, Bluetooth, and so on. Adapting Android to use, for instance, an entirely new Wi-Fi \\r\\ndevice consists of writing the native code that implements the Android Wi-Fi HAL (as defined \\r\\nby the .h files) for the new device. The HAL layer means that no code above the HAL—most of \\r\\nit written in Java—needs to be changed to port Android to use the new device. Another reason for the HAL is that one of the original goals for Android (a goal that it has \\r\\nclearly achieved) was to make putting it on a new device as frictionless as possible from both \\r\\nengineering and legal points of view. From the legal point of view, that meant navigating a thin \\r\\nline between the GPL (GNU Public License) and proprietary code. 9780134096346_print.indb   13325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fdaba380-1b41-4e01-b32e-6c3e452bcf52":{"__data__":"{\"id_\":\"fdaba380-1b41-4e01-b32e-6c3e452bcf52\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PLrHIfTm903jJEqJqzezaP81X//QygtJV+2N7BgTyTU=\"},\"NEXT\":{\"nodeId\":\"d43b6952-2bd1-4013-b95c-60ead99ec042\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"e9AVkze2eGtdBuSbbqheF44spp4NNzpNPNQCx75tdj0=\"}},\"hash\":\"LxiHmG6zPIiZ1RPpAqR7b5++QDXv4xAoZrOG4ocjQ7k=\",\"text\":\"134Chapter 8  Getting to Android: The HAL\\r\\nThe Android system is based on the Linux kernel, which is licensed under the notoriously viral \\r\\nGPL. The Android platform, on the other hand, is intended to support hardware manufacturers \\r\\nwith devices that are strictly proprietary, right down to their APIs. The HAL provides an elegant \\r\\nway of keeping proprietary code away from the GPL. Hardware developers who are concerned about getting their proprietary code anywhere near \\r\\nan open source, or, worse yet, GPLed codebase, can keep all of their proprietary code in the \\r\\nHAL. To do this, they first create a trivial device driver. It can be open source or even GPLed \\r\\nif there is any reason to do so. The driver does essentially nothing: It simply passes data to \\r\\nand from the hardware. The developer next creates a HAL. The HAL code runs in user space \\r\\n(as a library linked into the application) and may be completely proprietary. It does not run \\r\\nas part of the kernel and is not a device driver under the normal definition of that term. It is, \\r\\nhowever, the actual driver for the device. Because it is linked into the application as a library, \\r\\nthere is no requirement of any kind that this code be public. It need never be available except \\r\\nin a binary form. A third application for the HAL has arisen more recently. An additional problem that Google \\r\\nencountered as Android came of age was that it could not get vendors to update devices with \\r\\nthe latest versions of Android. In early Android, hardware vendors built the system images that they deployed to their devices. They got the base system source from Google, modified it as necessary, adding their proprietary \\r\\nsoftware and extensions, built an image, and deployed it to their devices. When a new version \\r\\nof Android came along, they did it again—sometimes. From a vendor’s point of view, a new \\r\\nversion of Android is something to be sold: a reason for end users to buy a new device. It is not \\r\\nat all surprising that they tended to drag their feet releasing updates. Google, on the other hand, is constantly increasing the number of pies into which it has a \\r\\nfinger. It does not want to have to wait for a recalcitrant vendor or an entirely new genera-\\r\\ntion of hardware to reap the benefits of some new feature.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d43b6952-2bd1-4013-b95c-60ead99ec042":{"__data__":"{\"id_\":\"d43b6952-2bd1-4013-b95c-60ead99ec042\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PLrHIfTm903jJEqJqzezaP81X//QygtJV+2N7BgTyTU=\"},\"PREVIOUS\":{\"nodeId\":\"fdaba380-1b41-4e01-b32e-6c3e452bcf52\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"LxiHmG6zPIiZ1RPpAqR7b5++QDXv4xAoZrOG4ocjQ7k=\"}},\"hash\":\"e9AVkze2eGtdBuSbbqheF44spp4NNzpNPNQCx75tdj0=\",\"text\":\"Google needed a way to completely \\r\\nremove the device update mechanism from the clutches of the vendors. To do this, Google created Project Treble. Treble specifies and requires that HAL modules use \\r\\nBinder, Android’s interprocess communication (IPC) system, to communicate with the Android \\r\\nstack. HAL modules are no longer binary libraries that are linked into the Android runtime. Instead, they are separate binaries that are stored on completely separate hardware volumes \\r\\nfrom the ones that hold the Android core and user applications. The new HALs are not called \\r\\ndirectly from Android but are, instead, invoked using highly optimized IPC calls. Since Project Treble went live, an over-the-air (OTA) update can completely rewrite the file \\r\\nsystem containing the Android OS without disturbing the vendor’s HAL. There is no longer any \\r\\nneed for Google to wait for a vendor to build a new, hardware-specific version of its Android \\r\\nsystem. Google can update the Android OS on any device at pretty much any time, according \\r\\nto its own schedule. As long as they don’t violate the HAL IPC contract, the HAL that worked \\r\\nwith the old version of the OS will work with the new version. 9780134096346_print.indb   13425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7ce326f6-25fa-4acd-a652-4674d661aeeb":{"__data__":"{\"id_\":\"7ce326f6-25fa-4acd-a652-4674d661aeeb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yDW0MtJxiDjSQx1P3psab7LzQ2McHdO7VKVeR17hsGY=\"},\"NEXT\":{\"nodeId\":\"0970194a-f14f-4b9c-a796-423f2f30be0d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"FQUwkCghzGyYu0OnRomn0nBfY1z2sp5LR7SCpJWCH8k=\"}},\"hash\":\"wd9K1buIH118NHiYwtspHkn/mCzGe2jFkQ0UuB3NvBI=\",\"text\":\"135Is a HAL Necessary? Is a HAL Necessary? A HAL is necessary only for products that need the Android label or want automatic updates. Developers creating a custom Android for an OEM device may not need a complicated HAL. As \\r\\ndescribed in the preceding section, the HAL has exactly three purposes:\\r\\n ■It is the native code layer that shims Android onto specific hardware. At the very least, this means bridging code written in Java to native code, usually written in C or C++. ■It is an abstraction for the functionality provided by a class of devices, for example, Bluetooth, Wi-Fi, graphics, and so on. It makes it possible for Android to abstract away \\r\\nthe differences between, for example, Broadcom and Qualcomm Wi-Fi chipsets. ■It is an abstraction that permits OTA updates that do not require linking a new version of Android to vendor-specific binaries. Although the first of these purposes is obviously necessary, the second two may not be. A devel-\\r\\noper building a custom Android targeting a specific hardware device might just dive right in \\r\\nand modify core Android code, as necessary, to adapt it to the device. One might even make the \\r\\nargument that the Java code is easier to modify than the native code in the HAL. So why not? Actually, there are some fairly strong arguments for keeping platform customizations in the \\r\\nHAL. One good reason, of course, is updates. Even if your business plan does not depend on \\r\\nupdates, not having some kind of firmware update plan for an embedded device would be \\r\\nirresponsible. No matter what version of Android you choose, either security issues are already known or \\r\\nsecurity issues will be known. One need only look back to the massive DDOS attack on Dyn, \\r\\nInc. in 2016. The attack was launched predominantly from IoT devices, many of which were \\r\\nmanufactured by a single company, XiongMai Technologies. It is a cautionary tale that should \\r\\nconvince anyone that releasing a programmable device with software that cannot be updated is \\r\\ncareless and dangerous. No one wants to be the trampoline for the next cyberattack and, even \\r\\nworse, be unable to fix a security breach when it occurs. One of the easiest ways to patch bugs, of course, is to take updates from the official AOSP code-\\r\\nbase.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0970194a-f14f-4b9c-a796-423f2f30be0d":{"__data__":"{\"id_\":\"0970194a-f14f-4b9c-a796-423f2f30be0d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yDW0MtJxiDjSQx1P3psab7LzQ2McHdO7VKVeR17hsGY=\"},\"PREVIOUS\":{\"nodeId\":\"7ce326f6-25fa-4acd-a652-4674d661aeeb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wd9K1buIH118NHiYwtspHkn/mCzGe2jFkQ0UuB3NvBI=\"}},\"hash\":\"FQUwkCghzGyYu0OnRomn0nBfY1z2sp5LR7SCpJWCH8k=\",\"text\":\"If a customized fork of AOSP code has been modified to adapt it to a specific device, the \\r\\nfork of AOSP will be much more difficult to merge with the official sources. Allowing your device to be updated automatically by Google might even be worth considering. Doing so might take the entire issue of security and liability off your plate. To do that, though, \\r\\nyour custom Android must at a minimum comply with the Project Treble standards. Another reason for using the HAL is that an implementation for a new device may already \\r\\nexist. If the hardware that your project uses is something that other Android developers have \\r\\nused—say, a motion or a temperature sensor—it is entirely possible that a complete HAL may \\r\\nalready exist. If it does not, it is possible that a HAL exists that supports a similar device and \\r\\nthat you can adapt that HAL to the new device with minimal effort. 9780134096346_print.indb   13525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7fd2e358-4499-4899-8f93-f5ec3bb7f9f4":{"__data__":"{\"id_\":\"7fd2e358-4499-4899-8f93-f5ec3bb7f9f4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JgHB2dBj0k9RMbDnRjuGU48RbCMMRw2dyLimF2y2w50=\"},\"NEXT\":{\"nodeId\":\"7bd4f4f6-acdd-4e7e-83ce-052e95148c06\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"i7vBIktFo691bNQuUGQ88fX/+6k0+4qFd8lllFuQgtE=\"}},\"hash\":\"XsPZM3/H6dGwIL5JnsxmOaiZks5jZQjssSwhkDZxzZc=\",\"text\":\"136Chapter 8  Getting to Android: The HAL\\r\\nDesigning the HAL\\r\\nThe initial discussion of the Acme project introduced a simple hardware proximity sensor. Preceding chapters sketched the process of building a device driver for it. The next step up the \\r\\nAndroid layer cake is creating code that uses the driver to interact with the sensor. By design, the Acme proximity sensor HAL is not only simple but includes a stub for the device \\r\\ndriver. The focus here is on defining the HAL API and publishing it into Java; not the vagaries \\r\\nof the Linux USB system. Even though part of the actual code is a stub, the functionality that it \\r\\nrepresents is intended to be entirely realistic. Recall that a HAL is an abstraction for a group of devices. A device driver is also an abstraction \\r\\nfor the device. On the hardware side, device drivers are typically very specific: a particular driver \\r\\nprobably works only with very specific hardware. (A USB driver is a bit of an exception; an inter-\\r\\nmediate layer for devices that support the USB interface. ) From the application side, a device \\r\\ndriver is very general. They abstract devices into one of only two groups: character and block. HALs are more general on the bottom and more specific on the top. On top, there are quite \\r\\na few HAL abstractions, each of which is the interface for a narrower category of devices: \\r\\ncameras, Wi-Fi, Bluetooth, and so on. On the bottom a HAL provides access to multiple hard-\\r\\nware implementations, all of which have a specific, common purpose. The possibility even \\r\\nexists that a single HAL abstraction could integrate multiple hardware devices (and their \\r\\ndrivers), exposing the combination of several hardware components as a single service. When designing a HAL, understanding how the services provided by the hardware will be \\r\\nexposed to an application is absolutely essential. Although this book has generally approached \\r\\nthe Android system as a series of layers, each built on the previous layer, designing a HAL \\r\\nrequires looking far ahead and trying to predict the future. Even when you build a simple, propri-\\r\\netary device that doesn’t need a real HAL, this boundary is a good place to pause for a moment of \\r\\nreflection. Because the HAL is Android’s abstraction layer, it is a great place to hedge your bets. First, consider the constraints from below (nearer the hardware).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7bd4f4f6-acdd-4e7e-83ce-052e95148c06":{"__data__":"{\"id_\":\"7bd4f4f6-acdd-4e7e-83ce-052e95148c06\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JgHB2dBj0k9RMbDnRjuGU48RbCMMRw2dyLimF2y2w50=\"},\"PREVIOUS\":{\"nodeId\":\"7fd2e358-4499-4899-8f93-f5ec3bb7f9f4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XsPZM3/H6dGwIL5JnsxmOaiZks5jZQjssSwhkDZxzZc=\"}},\"hash\":\"i7vBIktFo691bNQuUGQ88fX/+6k0+4qFd8lllFuQgtE=\",\"text\":\"First, consider the constraints from below (nearer the hardware). In a project in which the \\r\\ncreation of a hardware device (or its driver) is part of a project, the kernel device driver and  \\r\\nthe API (its .h file) that it publishes are also part of the project. Project developers can modify \\r\\nthe driver API as necessary to sensibly divide functionality across code modules. That is not the typical case, however. The likelihood is higher that a hardware device manu-\\r\\nfacturer that provides a device will also provide its driver. When a third party—the device \\r\\n manufacturer—provides the device driver, its API is not under project control. That is a \\r\\nconstraint. To be concrete, if the Acme team created an entirely new type of proximity sensor, wrote a \\r\\ndevice driver for it, and that device was the secret sauce for a new product, then the Acme team \\r\\nwould choose the API for the sensor device driver and adjust it to suit their needs. If, on the \\r\\nother hand (the more typical case), the Acme team’s plan was a clever new use of the ability to \\r\\nsense proximity, and they sourced a sensor during a trip to Shenzhen, then the device driver \\r\\nfor the sensor would most likely be provided by the third-party hardware engineers: possibly as \\r\\nsource, possibly not. 9780134096346_print.indb   13625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"427e4d99-c00f-4bc7-aade-28738b45269a":{"__data__":"{\"id_\":\"427e4d99-c00f-4bc7-aade-28738b45269a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wLfw+OACengnkjnTPr0y9ub8WUyIgf1WgEvrppl/38g=\"},\"NEXT\":{\"nodeId\":\"a532ee6a-53f9-4dce-86b7-8d7ca5232c77\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xF/XN5j8zhsqUFVwtsgfqdtwMWULvQ+HtkJ0WYgDM+c=\"}},\"hash\":\"6NTodgwTN3rhZpnNqjOyO6yTPwKdKqc0Oom8vqbc4Wc=\",\"text\":\"137Building a HAL\\r\\nIn either case, the API of the device driver is the constraint for the bottom of the HAL. In the \\r\\nformer case, that API is more malleable than it is in the latter. Next, consider the requirements from above (nearer application code). The HAL is the first step \\r\\ntoward building a service that will expose the hardware to an application. Now would be a \\r\\ngreat time for an app developer (preferably not the same person as the one who will write the \\r\\nHAL! ) to write one of those applications. What feels like a natural interface in the application? Are the edge cases—initialization, configuration, application failure, and access control—all \\r\\nhandled? When a new sensor with new capabilities comes along, will the API accommodate the \\r\\nchanges with backward compatibility? After application requirements are more or less clear, converting the application API into a set \\r\\nof operations required of the hardware should be a relatively straightforward task. Remember, \\r\\nof course, that most of the heavy lifting will be done by a Java service that actually exposes the \\r\\nhardware to the application. The HAL layer doesn’t have to provide the service API that the \\r\\napplication uses. It merely has to provide a clean, minimal set of hardware operations on which \\r\\nthe service can be built. The HAL for the Acme proximity sensor is sleek to avoid obscuring the process of building a \\r\\nHAL. Its design is simple. As is often the case, power is an important concern. A sensor may \\r\\nuse power when it is running and pointlessly load the battery unless it can be turned off. The \\r\\ndesign of the HAL for the Acme proximity sensor assumes that it is exactly such a power hog: \\r\\nthere are calls to turn it on and off. The call that turns the sensor on takes one argument—an out parameter struct—that the \\r\\ndriver will populate with the min and max values acceptable in the precision argument passed \\r\\nto the HAL when polling it. Similarly, it contains the max and min values that the device will \\r\\nreturn for the proximity data it will return when it is polled. After the sensor is turned on, it can be polled for proximity values. The polling call takes a \\r\\nsingle argument: the desired precision for the proximity value it will return. The precision argu-\\r\\nment restricts the resources (perhaps time or battery) that the sensor will expend in obtaining \\r\\nthe returned value.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a532ee6a-53f9-4dce-86b7-8d7ca5232c77":{"__data__":"{\"id_\":\"a532ee6a-53f9-4dce-86b7-8d7ca5232c77\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wLfw+OACengnkjnTPr0y9ub8WUyIgf1WgEvrppl/38g=\"},\"PREVIOUS\":{\"nodeId\":\"427e4d99-c00f-4bc7-aade-28738b45269a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"6NTodgwTN3rhZpnNqjOyO6yTPwKdKqc0Oom8vqbc4Wc=\"}},\"hash\":\"xF/XN5j8zhsqUFVwtsgfqdtwMWULvQ+HtkJ0WYgDM+c=\",\"text\":\"The poll returns a current value from the sensor. When all client applications are done using the sensor, it can be turned off to save battery. Building a HAL\\r\\nThis chapter and the next show how to create the code that connects native code into the \\r\\nAndroid framework in four steps:\\r\\n1. Define the HAL: create the .h files that specify the API for the proximity service\\r\\n2. Implement the HAL for the Acme proximity service: create layers of code that shim the \\r\\ndevice driver API for the proximity service to its HAL API\\r\\n3. Create a native (C language) daemon that uses the HAL to access the proximity device\\r\\n4. Create the JNI interface that publishes the new HAL into the Java language\\r\\n9780134096346_print.indb   13725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ab91d245-58aa-48b6-a57f-fb4ad8429a92":{"__data__":"{\"id_\":\"ab91d245-58aa-48b6-a57f-fb4ad8429a92\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"2z4iPkZwOXAVD9IdFWC5bLGYkumaQ2mnDvEldiJov3g=\"}},\"hash\":\"H169jkmpdMRFppXsOCxEwbW4K6iEDQ8Poa4Mbror3k8=\",\"text\":\"138Chapter 8  Getting to Android: The HAL\\r\\nNote\\r\\nIn pre-SE Linux versions of Android, it was possible to create and run a standalone Java dae-\\r\\nmon, a translation of the C-language daemon created in step 3. Although it may still be pos-\\r\\nsible, we abandoned the effort to create one after many hours of trying. Caveat developer. Code Structure\\r\\nThe code in these next two chapters will implement both the HAL for the proximity device and \\r\\na simple daemon that uses the device through the HAL code. This simple daemon could replace \\r\\nthe one introduced as a startup service in Chapter 6. Figure 8.1 illustrates the components and their relationships. proximity_hal.cpp\\r\\napplication space\\r\\nproximity_daemon.cpp\\r\\njava\\r\\nsystem\\r\\nservice\\r\\nacme_one_proximity_hal\\r\\n_ProximitySensor.h\\r\\nkernel space\\r\\ndaemon\\r\\nhal\\r\\nshim\\r\\ndriver\\r\\nhardware\\r\\nproximity_sensor.h\\r\\nproximity_hal.h\\r\\nproximity_sensor.cpp\\r\\nproximity\\r\\ndevice\\r\\nacme_\\r\\none_\\r\\ndriver\\r\\nacme_one_proximity\\r\\n_sensor.h\\r\\nFigure 8.1 HAL Layer Structure\\r\\n9780134096346_print.indb   13825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6a125127-6d40-403d-95df-ff758ea4b38b":{"__data__":"{\"id_\":\"6a125127-6d40-403d-95df-ff758ea4b38b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KmFNBmGBufY0Ggn5H6CmQurQcApOcKUenIUAwmeza8Y=\"}},\"hash\":\"+fYMTP/ao9eRkDwpR2wReeQLWTPMsZXJINCO4BkuF88=\",\"text\":\"139Building a HAL\\r\\nNote that all the code discussed in these chapters runs as part of an application (user space) and \\r\\nnot as part of the kernel (kernel space). This is all just normal application code. The code consists of four functional components, as shown in Figure 8.1:\\r\\n1. HAL code (dotted boxes): This is the abstraction that separates the capabilities of \\r\\nhardware from its specific implementations. The .h file defines the HAL interface. The \\r\\nimplementation (.cpp file) specializes the Android HAL API for the target hardware. 2. Shim code (dashed boxes): This is the glue code that connects the HAL to a specific \\r\\ndevice hardware/driver. This code adapts the Android HAL API to the device driver for \\r\\nthe hardware. 3. Daemon (blue/solid gray): This is the stand-alone application that interacts with the \\r\\nhardware through the HAL. 4. Java System Service (white): This is the System Service that Android applications will \\r\\nuse to access the custom hardware. To build these components into the Acme One device, you must place their code in the Acme \\r\\nOne device folder, as introduced in previous chapters. The new directories are organized as \\r\\nshown in Figure 8.2. one\\r\\napp\\r\\nnative_daemon\\r\\njava_daemon\\r\\nproximity\\r\\ninclude\\r\\ndev\\r\\ndev\\r\\nhal\\r\\njni\\r\\n... ... ... ... ... ... ... ... Figure 8.2 HAL Directory Structure\\r\\n9780134096346_print.indb   13925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"96d387ea-7544-4b01-84f7-0f96208aec33":{"__data__":"{\"id_\":\"96d387ea-7544-4b01-84f7-0f96208aec33\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ndPPyrnvOV8MRA3dsXfymzwl2JAx+JOrnaif+CYgEZ8=\"},\"NEXT\":{\"nodeId\":\"928496ee-57c0-41f9-bf34-8fcb85572b0b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PRJQFBc4AWGutUnybrh8EZEDt8689ZPdjIrKztKPxxU=\"}},\"hash\":\"aa39nbqx6xGnIRVFNmD1Gz++hz1iod/3Z6kYYRRLOz4=\",\"text\":\"140Chapter 8  Getting to Android: The HAL\\r\\nAll the code implementing the HAL for the proximity sensor goes into a new subdirectory,  \\r\\nproximity. If the Acme device had several HALs for several different devices, they might be \\r\\nfurther organized into an intermediate directory, perhaps hal, that contained separate subdirec-\\r\\ntories for each of the different device HALs. The Acme project contains only a single HAL so it \\r\\nis located directly in the project root directory. Note that to be useful as a real HAL, the abstract definition of the interface—specifically the \\r\\ndefinition of the proximity HAL, proximity/include/proximity_hal.h—would have to be \\r\\npromoted from its current location inside the directory specifically for the One device, up into \\r\\nthe Android source tree to a location that would make it visible to other code that needed to \\r\\nuse it. If shared only by generations of Acme devices, it might be put into a subdirectory of \\r\\nthe Acme device directory. If visible across devices from multiple vendors, it might even be \\r\\npromoted into the device directory itself. Figure 8.2 also shows the locations in the source tree of the two daemons to be implemented \\r\\nin the next chapter. Although this organization is appropriate during the build process, it is \\r\\nentirely likely that applications—native daemons and system services—will be developed inde-\\r\\npendently from the libraries on which they depend (the HAL); perhaps even by different devel-\\r\\nopers. Facilitate this by separating the code bases into distinct git repositories and using the \\r\\nmanifest to place them in the build tree in their required locations, as shown in Listing 8.1.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"928496ee-57c0-41f9-bf34-8fcb85572b0b":{"__data__":"{\"id_\":\"928496ee-57c0-41f9-bf34-8fcb85572b0b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ndPPyrnvOV8MRA3dsXfymzwl2JAx+JOrnaif+CYgEZ8=\"},\"PREVIOUS\":{\"nodeId\":\"96d387ea-7544-4b01-84f7-0f96208aec33\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"aa39nbqx6xGnIRVFNmD1Gz++hz1iod/3Z6kYYRRLOz4=\"}},\"hash\":\"PRJQFBc4AWGutUnybrh8EZEDt8689ZPdjIrKztKPxxU=\",\"text\":\"Listing 8.1 Manifest Additions for the Acme HAL\\r\\n<!-- Acme Specific Projects -->\\r\\n  <project path=\\\"device/acme/one-kernel\\\" name=\\\"one-kernel\\\" remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/proximity\\\"\\r\\n           name=\\\"platform_device_acme_one_proximity\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/app/native_daemon\\\"\\r\\n           name=\\\"platform_device_acme_one_app_native_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\n  <project path=\\\"device/acme/one/app/java_daemon\\\"\\r\\n           name=\\\"platform_device_acme_one_app_java_daemon\\\"\\r\\n           remote=\\\"acme\\\" />\\r\\nImplementing the HAL\\r\\nThe HAL is a line between two endpoints. The first of those two endpoints is the device driver. As noted previously, it is quite likely that the device driver interface for a specific piece of \\r\\nhardware is a given: that its API is not under project control. The device driver and its API are \\r\\ndefined by a third-party hardware provider and whatever driver they supply with it. Given the ubiquity of the universal serial bus (USB), it is also very likely that any new device will \\r\\ncommunicate with the processor via USB. Even a newly created device may not have its own \\r\\ndriver. It may simply appear in the USB device tree and be accessed with generic USB commands. If it does have a distinct driver, that driver is likely to be a specialization of the USB interface. 9780134096346_print.indb   14025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"34a96388-919e-4a0e-932d-c31b47cf142f":{"__data__":"{\"id_\":\"34a96388-919e-4a0e-932d-c31b47cf142f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"fiOT+Mibp+fBiM5ZgcLa5g7PqENr3jMTxxD2Atvmhdo=\"},\"NEXT\":{\"nodeId\":\"7b5c8a97-f8b0-4ae2-a3dd-bcfb4c31f16e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xYTyWZ9eWcLILYky39yxGNkMynkOb7ZTI3rGd4yq6ck=\"}},\"hash\":\"3xy6kuN78MZcBF+8SL+W948u9pG4KZQsPTCa7tZHi80=\",\"text\":\"141Building a HAL\\r\\nNote\\r\\nContrary to the implications evoked by its name, USB is not really a bus. Instead, it is a tree \\r\\ncontaining a master device that polls one or more slaves. Masters and slaves behave quite dif-\\r\\nferently and require very different implementations. Linux USB core supports both modes, referring to the drivers for the master end as USB device \\r\\ndrivers and those for the slave end as USB gadget drivers. Although not discussed here, it is entirely possible that a small Android device will not be the \\r\\nbus master but, instead, a slave that is occasionally connected to a master. One can imagine, \\r\\nfor instance, a tablet acting as master for the sensors plugged into it for data collection in the \\r\\nfield. At night, though, when plugged into some kind of data aggregator, it would act as a gadget. In its full generality, a USB device can be a very complex thing. Communicating with a single \\r\\nphysical device, for instance, may require interacting with multiple virtual devices. A USB loud-\\r\\nspeaker, for example, presents as both a keyboard—its controls—and a separate interface for the \\r\\nbulk transfer of sound data. Entire books are available on the construction of USB drivers and the code that interacts with \\r\\nthem. Those topics are well outside the scope of this book. Instead of accessing an actual USB \\r\\ninterface (boxes with slanted lines in Figure 8.1) the shim code in this example (boxes with \\r\\ndashed lines in Figure 8.1) will be a stub. The “bottom” end of this example HAL does not actu-\\r\\nally connect to a device driver. In an actual HAL, the shim code would include the .h files for \\r\\none or more device drivers. It would make read, write, and ioctl calls on the drivers they defined. Even though this example uses a stub, recall that Chapter 6 described the SE additions necessary \\r\\nto allow executables (applications) access to USB serial devices labeled as proximityd_exec. The \\r\\nSE additions in Chapter 6 illustrated creating the device-specific SE policy that is necessary to \\r\\ngrant applications access to kernel-exposed interfaces. Several resources can be quite helpful in building the HAL for a USB device. Most obviously, the \\r\\nLinux kernel contains an entire subsystem, USB Core, that does most of the heavy lifting. Another important resource is libusb (https://libusb.info).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7b5c8a97-f8b0-4ae2-a3dd-bcfb4c31f16e":{"__data__":"{\"id_\":\"7b5c8a97-f8b0-4ae2-a3dd-bcfb4c31f16e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"fiOT+Mibp+fBiM5ZgcLa5g7PqENr3jMTxxD2Atvmhdo=\"},\"PREVIOUS\":{\"nodeId\":\"34a96388-919e-4a0e-932d-c31b47cf142f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3xy6kuN78MZcBF+8SL+W948u9pG4KZQsPTCa7tZHi80=\"}},\"hash\":\"xYTyWZ9eWcLILYky39yxGNkMynkOb7ZTI3rGd4yq6ck=\",\"text\":\"Another important resource is libusb (https://libusb.info). Libusb is a portable, user-mode, and \\r\\nUSB-version agnostic library for using USB devices. It supports Android. Even if the library is \\r\\nexcessive and overly general for use in some specific applications, the code provides several \\r\\nexcellent examples of how to use USB devices from application code. HAL Declaration\\r\\nThe second of the two HAL endpoints is the definition of the HAL API. Visiting it next is another \\r\\ndeviation from the strict bottom-to-top order in which we’ve been visiting components of the \\r\\nstack so far. It is, however, entirely realistic and appropriate. After the two endpoints are defined, \\r\\nwriting the HAL is the straightforward (if not simple) task of drawing the line between them. As noted earlier, the HAL definition should be more than just the simple reiteration of a hard-\\r\\nware interface. A good HAL API will be flexible enough to support multiple related devices and \\r\\nfriendly to the applications that use it. It is entirely prudent to define the interface as part of \\r\\nsystem and even application design, and then to do whatever is necessary to implement it. 9780134096346_print.indb   14125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"487e1fb8-b853-45ab-9c75-3e80df0e94ee":{"__data__":"{\"id_\":\"487e1fb8-b853-45ab-9c75-3e80df0e94ee\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nY3MG9DkKQcFZvwLs13xZw3A7/9TutuifR5u1Idrn5Q=\"}},\"hash\":\"WvpkRCONgu3G8kHNBcbSUydnJd7vO3LO7CxYO07hYlE=\",\"text\":\"142Chapter 8  Getting to Android: The HAL\\r\\nAs described previously, the HAL .h file is, in most senses, the HAL. It is the interface through \\r\\nwhich client code will interact with the device it represents. The HAL for the proximity device is proximity/include/dev/proximity_hal.h. It is shown \\r\\nin Listing 8.2. Listing 8.2 Proximity HAL\\r\\n#ifndef PROXIMITY_HAL_H\\r\\n#define PROXIMITY_HAL_H\\r\\n#include <hardware/hardware.h>\\r\\n#define ACME_PROXIMITY_SENSOR_MODULE \\\"libproximityhal\\\"\\r\\ntypedef struct proximity_sensor_device proximity_sensor_device_t;\\r\\nstruct value_range {\\r\\n    int min;\\r\\n    int range;\\r\\n};\\r\\ntypedef struct proximity_params {\\r\\n    struct value_range precision;\\r\\n    struct value_range proximity;\\r\\n} proximity_params_t;\\r\\nstruct proximity_sensor_device {\\r\\n    hw_device_t common;\\r\\n    int fd;\\r\\n    proximity_params_t params;\\r\\n    int (*poll_sensor)(proximity_sensor_device_t *dev, int precision);\\r\\n};\\r\\n#endif // PROXIMITY_HAL_H\\r\\nListing 8.2 first defines the constant ACME_PROXIMITY_SENSOR_MODULE. This is a unique string \\r\\nand the name that client code will use to find the proximity sensor’s HAL. Next, the code declares a struct that is best understood in the terms of object-oriented (O-O) \\r\\ndesign. Think of the proximity_sensor_device struct as the definition of a new O-O class. The first member of the struct, common, in O-O terms is its super class: it contains data and \\r\\nbehaviors that are common to all HALs for all types of devices. This use of the term “super \\r\\n9780134096346_print.indb   14225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2e206e6a-40f5-48b9-adba-38469e007cc0":{"__data__":"{\"id_\":\"2e206e6a-40f5-48b9-adba-38469e007cc0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8lUL8ghwXvtVAiYd9S5RlGezkvj5DZVZOUcuFpp3iu0=\"},\"NEXT\":{\"nodeId\":\"b5f8f0bf-f94d-4e09-932e-09057eb435b6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"j9v37bVCLKuusclPhrzq+TfTxYWYLeRuJPuotcBqyuQ=\"}},\"hash\":\"7Tz6aptCwf1+XyZfEq1Xnt+wT/rCsrxtPk6PLeGIF2I=\",\"text\":\"143Building a HAL\\r\\nclass” and the function of the common struct member will become clearer in the examination of \\r\\nthe HAL implementation. Note\\r\\nThe definitions of the device in hardware.h, hw_module_methods_t, really is a kind of raw \\r\\nversion of inheritance. The HAL structs that represent device instances are hw_module_ \\r\\nmethods_ts. That means that the open method, for instance, is at the same offset relative \\r\\nto the pointer to the HAL struct for every HAL for any device: hw_module_methods_t.open. Individual HALs, however, “subclass” the hw_module_methods_t struct by defining a new \\r\\nstruct whose first element is an hw_module_methods_t but which allocate extra space at the \\r\\nend of that struct, containing pointers to methods with device-specific functionality. The result-\\r\\ning struct can be cast as the “super class” struct, an hw_module_methods_t, because the \\r\\npointer to the subclass struct is also a pointer to the super class struct. It can also be cast as \\r\\nthe device-specific struct by code that needs the device-specific functionality. Next in Listing 8.2 are more of the struct’s members. To continue the object-orientation \\r\\nanalogy, these are the class’s data members (fields). The first is the file descriptor for the open \\r\\ndevice driver that the HAL will hold. Next are the four values that all proximity sensor devices \\r\\nwill provide: min and max for precision and proximity. Each individual hardware device and its \\r\\ndriver will populate these fields with information about the behavior of that particular device. The last member of the struct is a pointer to a function, poll, which takes the struct itself as its \\r\\nfirst argument. This is the O-O idiom for a method call. Note\\r\\nObject-oriented languages bundle data (fields) with the operations that may be performed on \\r\\nthat data (methods). The standard way of implementing this is that an operation on a particular \\r\\ndata type takes, as an implicit first argument, a reference to an instance of the data on which it \\r\\nwill operate. Each call to the operation mutates only the specific instance passed in the call. Note that nothing in the declaration of the HAL refers in any way to the actual hardware or \\r\\ndriver to which the HAL provides access. In particular, the HAL definition file does not refer to \\r\\nthe driver or even the shim code’s .h file (see Listing 8.9).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b5f8f0bf-f94d-4e09-932e-09057eb435b6":{"__data__":"{\"id_\":\"b5f8f0bf-f94d-4e09-932e-09057eb435b6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8lUL8ghwXvtVAiYd9S5RlGezkvj5DZVZOUcuFpp3iu0=\"},\"PREVIOUS\":{\"nodeId\":\"2e206e6a-40f5-48b9-adba-38469e007cc0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"7Tz6aptCwf1+XyZfEq1Xnt+wT/rCsrxtPk6PLeGIF2I=\"}},\"hash\":\"j9v37bVCLKuusclPhrzq+TfTxYWYLeRuJPuotcBqyuQ=\",\"text\":\"The isolation is complete. This HAL, now completely described, defines what it is to be a proximity device. This is the \\r\\nbottleneck through which all information must pass, moving up or down the stack between \\r\\nany proximity device driver and Android Java code. With the definition of the top and bottom \\r\\nendpoints, the implementation should be simply a matter of programming. HAL Definition\\r\\nAt last, we arrive at the definition of the HAL: its implementation. The implementation of the \\r\\nproximity HAL for the Acme proximity device is in proximity/hal/proximity_hal.cpp. 9780134096346_print.indb   14325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3331107f-8898-472f-956d-dc58a655e4cc":{"__data__":"{\"id_\":\"3331107f-8898-472f-956d-dc58a655e4cc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mEUElg57w6JjjwowwZclpWTeVRT6ZCANCAIllUj/s1c=\"},\"NEXT\":{\"nodeId\":\"a307f2f6-94c0-442d-be9e-43285b8d4596\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"IpPL+GuukEMYIQvNKzGq2jZiwtk0zRH1vb6WPlOL4Vk=\"}},\"hash\":\"OzR9eKdINWsMChSEkmSaxdi+aNmiDGfssIE8c+68sYM=\",\"text\":\"144Chapter 8  Getting to Android: The HAL\\r\\nThe most important resource for implementing a HAL is the AOSP source file hardware/\\r\\nlibhardware/include/hardware/hardware.h. It defines the types needed to implement \\r\\na HAL and, in its comments, describes how a HAL is implemented. It largely determines the \\r\\nstructure of the code in proximity_hal.cpp. The documentation in hardware.h outlines a three-step process for creating a HAL. The first \\r\\nstep in the process consists of defining a HAL module. The HAL module contains metadata \\r\\nabout a device and is also the factory for instances of the HAL. Listing 8.3 shows the module \\r\\ndefinition for the Acme One Proximity Sensor. Listing 8.3 Proximity HAL Module Definition\\r\\n// ... hw_module_t HAL_MODULE_INFO_SYM = {\\r\\n        .tag = HARDWARE_MODULE_TAG,\\r\\n        .module_api_version = HARDWARE_HAL_API_VERSION,\\r\\n        .hal_api_version = 0,\\r\\n        .id = ACME_PROXIMITY_SENSOR_MODULE,\\r\\n        .name = \\\"Acme Proximity Sensor\\\",\\r\\n        .author = \\\"Acme Team\\\",\\r\\n        .methods = &proximity_sensor_methods\\r\\n};\\r\\nSeveral of these fields, tag, module_api_version and hal_api_version, are required and \\r\\nmust be bound to the values specified for them in hardware.h. After the required fields \\r\\nare several fields that identify a specific HAL. The value of the field .id, for instance, is the \\r\\nconstant defined back in this HAL’s .h file. The most interesting of the fields is .methods. The .methods field must hold a reference to \\r\\nan hw_module_methods_t. Listing 8.4 quotes—again from hardware.h—the declaration of \\r\\nhw_module_methods_t. Listing 8.4 HAL Methods Definition\\r\\ntypedef struct hw_module_methods_t {\\r\\n    /** Open a specific device */\\r\\n    int (*open)(const struct hw_module_t* module,\\r\\n                const char* id,\\r\\n                struct hw_device_t** device);\\r\\n} hw_module_methods_t;\\r\\nIn other words, the hw_module_methods_t is a struct that contains a pointer to a function \\r\\nthat all HAL implementations have but that each will implement differently. In object-oriented \\r\\nterms, it is an abstract method in the HAL class, the super class for all HALs (including the \\r\\nproximity sensor HAL).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a307f2f6-94c0-442d-be9e-43285b8d4596":{"__data__":"{\"id_\":\"a307f2f6-94c0-442d-be9e-43285b8d4596\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mEUElg57w6JjjwowwZclpWTeVRT6ZCANCAIllUj/s1c=\"},\"PREVIOUS\":{\"nodeId\":\"3331107f-8898-472f-956d-dc58a655e4cc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"OzR9eKdINWsMChSEkmSaxdi+aNmiDGfssIE8c+68sYM=\"}},\"hash\":\"IpPL+GuukEMYIQvNKzGq2jZiwtk0zRH1vb6WPlOL4Vk=\",\"text\":\"9780134096346_print.indb   14425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7205750c-a709-4ec8-b891-1bfbd45fa2ee":{"__data__":"{\"id_\":\"7205750c-a709-4ec8-b891-1bfbd45fa2ee\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4ML8Nsumz5Zjxp9QZSzZdPYfGWoiSJeSD9ERQ2yVRRc=\"},\"NEXT\":{\"nodeId\":\"1505ac46-6860-4b22-9542-6ca41a2785c0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JIAzoXSmIPaYgUVlHM0mamrdsJzzvuhGQ6ab+ra9zzw=\"}},\"hash\":\"icfQPobDaw0/7SiZHmWp+hzOk4dDcpeW/ifULidyKtU=\",\"text\":\"145Building a HAL\\r\\nWhat method will all HAL implementations have but that each HAL will implement differ-\\r\\nently? Well, in O-O terms, it is the class’s constructor, of course! In the realm of the HAL, the \\r\\nconstructor is named .open. The .open method takes a reference to the HAL module struct itself as its first parameter. As \\r\\nnoted earlier, this is the O-O design idiom for a method call. As its second argument, it takes the device ID. This allows the code for a single open method to \\r\\nspecialize its behavior for several similar devices: a single implementation might have slightly \\r\\ndifferent behaviors for each of several devices with different IDs. This is the mechanism that \\r\\nallows a single HAL to support multiple implementations. Finally, down to business: It is the job of each HAL’s implementation of the abstract .open \\r\\nmethod to allocate and initialize the hw_device_t object returned in the third parameter of \\r\\nthe call. Listing 8.5 shows the hw_module_method_t implementation for the proximity sensor. Listing 8.5 Methods Definition for the Proximity HAL\\r\\n// ... static hw_module_methods_t proximity_sensor_methods = {\\r\\n        .open = &open_proximity_sensor_module\\r\\n};\\r\\n// ... The hw_module_t struct for the proximity sensor is now complete. Its .methods.open field \\r\\ncontains a reference to a method that opens the underlying device for use: open_proximity_\\r\\nsensor_module. That method will be defined in a moment. Although there is now a way (incompletely implemented) to create an instance of the proxim-\\r\\nity sensor HAL, as yet, there is no way use it. There is no way to poll it or to close it when it \\r\\nis no longer needed. This is the purpose of the struct created, initialized, and returned by the \\r\\n.open method, the hw_device_t. In O-O terms, it is roughly the equivalent of an instance of \\r\\nthe HAL. The Acme proximity sensor device needs an extension of hw_device_t that declares \\r\\nthe two needed methods, poll and close. Note\\r\\nBe careful not to confuse hw_module_t and hw_device_t. The hw_module_t is the HAL’s \\r\\ndescription and factory. It has an open method that returns instances of extensions of  \\r\\nhw_device_t that define the behavior of a class of devices.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1505ac46-6860-4b22-9542-6ca41a2785c0":{"__data__":"{\"id_\":\"1505ac46-6860-4b22-9542-6ca41a2785c0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4ML8Nsumz5Zjxp9QZSzZdPYfGWoiSJeSD9ERQ2yVRRc=\"},\"PREVIOUS\":{\"nodeId\":\"7205750c-a709-4ec8-b891-1bfbd45fa2ee\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"icfQPobDaw0/7SiZHmWp+hzOk4dDcpeW/ifULidyKtU=\"}},\"hash\":\"JIAzoXSmIPaYgUVlHM0mamrdsJzzvuhGQ6ab+ra9zzw=\",\"text\":\"Finally, Listing 8.6 is the complete definition of the HAL (located at device/acme/one/proximity/ \\r\\nhal/proximity_hal.cpp). As one would expect in an O-O architecture, the subclass instance \\r\\ncontains references to subclass methods. 9780134096346_print.indb   14525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"887e1e5c-40f6-47f1-a69c-91e71f608065":{"__data__":"{\"id_\":\"887e1e5c-40f6-47f1-a69c-91e71f608065\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"RbYofYtfm09uekoCsOtxGgTLumwx5OtnX1pfUuVQWc8=\"}},\"hash\":\"O43e6nLVNQtUz+B3e9GOzlzJR+Xkvo8uDL/Eo9hfPBk=\",\"text\":\"146Chapter 8  Getting to Android: The HAL\\r\\nListing 8.6 Proximity HAL Implementation\\r\\n#include <errno.h>\\r\\n#include <string.h>\\r\\n#include <malloc.h>\\r\\n#include <log/log_system.h>\\r\\n#include \\\"proximity_hal.h\\\"\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n#define LOG_TAG \\\"PROX\\\"\\r\\nstatic int poll_proximity_sensor(proximity_sensor_device_t *dev, int precision) {\\r\\n    SLOGV(\\\"Polling proximity sensor\\\");\\r\\n    if (!dev)\\r\\n        return -1;\\r\\n    return poll_sensor(dev->fd, precision);\\r\\n}\\r\\nstatic int close_proximity_sensor(proximity_sensor_device_t *dev) {\\r\\n    SLOGV(\\\"Closing proximity sensor\\\");\\r\\n    if (!dev)\\r\\n        return 0;\\r\\n    close_sensor(dev->fd);\\r\\n    free(dev);\\r\\n    return 0;\\r\\n}\\r\\nstatic int open_proximity_sensor_module(\\r\\n        const struct hw_module_t *module,\\r\\n        char const *name,\\r\\n        struct hw_device_t **device) {\\r\\n    SLOGV(\\\"Opening proximity sensor\\\");\\r\\n    auto *dev = static_cast<proximity_sensor_device_t*>\\r\\n      (malloc(sizeof(proximity_sensor_device_t)));\\r\\n    if (!dev)\\r\\n        return -ENOMEM;\\r\\n    memset(dev, 0, sizeof(*dev));\\r\\n    int fd = open_sensor(dev->params);\\r\\n    if (fd < 0) {\\r\\n9780134096346_print.indb   14625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"89af273e-afc9-4505-969a-890a6246c3c7":{"__data__":"{\"id_\":\"89af273e-afc9-4505-969a-890a6246c3c7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"F7aku6nFumCWQmeWvYP/dVB+LQSuog/iF6//Cjlq2wQ=\"}},\"hash\":\"E+uwWPegwc/VsEvZmxkyAfhdNBFBsMI71raOEuQNcrk=\",\"text\":\"147Building a HAL\\r\\n        SLOGE(\\\"Failed to open proximity sensor: %s\\\", strerror(errno));\\r\\n        free(dev);\\r\\n        return -1;\\r\\n    }\\r\\n    dev->fd = fd;\\r\\n    dev->common.tag = HARDWARE_DEVICE_TAG;\\r\\n    dev->common.version = 0;\\r\\n    dev->common.module = (struct hw_module_t *) module;\\r\\n    dev->common.close = (int (*)(struct hw_device_t *)) close_proximity_sensor;\\r\\n    dev->poll_sensor = poll_proximity_sensor;\\r\\n    *device = reinterpret_cast<hw_device_t *>(dev);\\r\\n    return 0;\\r\\n}\\r\\nstatic hw_module_methods_t proximity_sensor_methods = {\\r\\n        .open = open_proximity_sensor_module\\r\\n};\\r\\nhw_module_t HAL_MODULE_INFO_SYM = {\\r\\n        .tag = HARDWARE_MODULE_TAG,\\r\\n        .module_api_version = HARDWARE_HAL_API_VERSION,\\r\\n        .hal_api_version = 0,\\r\\n        .id = ACME_PROXIMITY_SENSOR_MODULE,\\r\\n        .name = \\\"Acme Proximity Sensor\\\",\\r\\n        .author = \\\"Acme Team\\\",\\r\\n        .methods = &proximity_sensor_methods\\r\\n};\\r\\nNote that, so far, this HAL implementation is completely device agnostic. This same code could \\r\\nbe used for nearly any proximity sensor device, depending on the definitions of three methods: \\r\\nopen_sensor, close_sensor, and poll_sensor. There are a few ways of specializing this generic implementation for a specific device. A HAL \\r\\nimplementation might be specialized at compile/bind time by statically assigning the reference \\r\\nto a method implementation appropriate for the specific device to each of those three symbols. In fact, that is how this example will work: That is what we do here. There will be a single shim \\r\\nthat will define those three functions. The choice could also be runtime, though. Multiple definitions of hw_module_t might all use \\r\\na HAL implementation very similar to this one. An extension of the implementation might use \\r\\nthe value of  hw_module_t.id to choose among several device-specific function implementa-\\r\\ntions to be assigned to the proximity_sensor_device_t’s .common.close and poll_sensor \\r\\nmethods. 9780134096346_print.indb   14725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8c074c0c-b9b7-4ee5-8fb6-b38502f7b7ae":{"__data__":"{\"id_\":\"8c074c0c-b9b7-4ee5-8fb6-b38502f7b7ae\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"+rbngJ4bQsEf6OH8OfQmiRNrZokMnzCKWuGbSegVAls=\"}},\"hash\":\"DOO3lscn7WSGGna1dQk2Y/p2mGnYUNVljkTuezRXcIM=\",\"text\":\"148Chapter 8  Getting to Android: The HAL\\r\\nThe HAL must be added to the build system. The build file is shown in Listing 8.7 and is \\r\\nlocated at device/acme/one/proximity/Android.bp. The HAL is a shared library named \\r\\n“libacmehal” and is built from the source “proximity_hal.cpp. ” That source file, of course, \\r\\nincludes the file “proximity_hal.h,” which defines the HAL and which was shown in \\r\\nListing 8.2. Listing 8.7 Acme HAL Build Blueprint File\\r\\ncc_defaults {\\r\\n    name: \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    cflags: [\\r\\n        \\\"-g\\\",\\r\\n        \\\"-O0\\\",\\r\\n        \\\"-Wall\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n}\\r\\ncc_library_shared {\\r\\n    name: \\\"proximityhal.default\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"hal/proximity_hal.cpp\\\"\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"liblog_headers\\\",\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    local_include_dirs: [\\r\\n        \\\"include\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libhardware\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ]\\r\\n}\\r\\n9780134096346_print.indb   14825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"97ed85cd-b622-44d7-a66d-3e2c608b2fc7":{"__data__":"{\"id_\":\"97ed85cd-b622-44d7-a66d-3e2c608b2fc7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eAVvCpwlO574tjfV3x/8uoPoJ38ibvbufRq6mtee1s8=\"},\"NEXT\":{\"nodeId\":\"e9bb9dbb-1e0d-408e-b7b5-3bd79a5cf243\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"COntgrulvrX4tENj/KStfet6PvF15seBdORlo9HAQHk=\"}},\"hash\":\"5A8UgL/kmyj7G1BYThVpUOW9IfZMFHh9SGSHGtyxW8A=\",\"text\":\"149Building a HAL\\r\\nUnderstanding the Shim\\r\\nThe final step in connecting the proximity driver to its HAL is the shim that actually imple-\\r\\nments the three device methods, open_sensor, close_sensor, and poll_sensor, for the \\r\\nAcme Proximity Sensor device. The definition of the shim interface is in the file proximity/\\r\\ninclude/dev/proximity_sensor.h. This is the “bottom” of the HAL. It is the API for the \\r\\nproxy to which the HAL code will delegate calls for one, specific type of proximity sensor \\r\\ndevice to which the proximity HAL provides access. Because this example is quite simple and the HAL is responsible for only one actual hardware \\r\\ndevice, these multiple layers of abstraction may seem excessive. Indeed, in this specific context, \\r\\nthey may be. Consider, though, that in this specific pedagogical exercise, the whole notion of a \\r\\nHAL may be excessive. The shim API is not part of the HAL. It is not included by proximity_hal.h, the definition \\r\\nof a proximity sensor’s HAL. The implementations of the device HAL (there may be more than \\r\\none) is probably the only code in the entire system that uses it. It completely encapsulates the \\r\\ndetails of a specific device and should certainly never be needed by code that uses the HAL. Listing 8.8 shows the shim API. Listing 8.8 Proximity Sensor Shim API\\r\\n#ifndef ACME_PROXIMITY_SENSOR_H\\r\\n#define ACME_PROXIMITY_SENSOR_H\\r\\n#include \\\"proximity_hal.h\\\"\\r\\nint open_sensor(proximity_params_t &params);\\r\\nint poll_sensor(int fd, int precision);\\r\\nint close_sensor(int fd);\\r\\n#endif //ACME_PROXIMITY_SENSOR_H\\r\\nNo surprises here. These are exactly the services described earlier and used by the HAL: The \\r\\nsensor can be turned on and off to optimize battery use; while it is on, it can be polled. A poll \\r\\ntakes as arguments the device file descriptor, a requested precision (a number between  \\r\\nprecision.min and precision.max), and returns a proximity value that is between  \\r\\nproximity.min and proximity.max. These bounds are populated in the params struct passed \\r\\nto the shim when turning the sensor on. It is worth restating that although the device driver for a given device may run at least partially \\r\\nas part of the kernel, none of the HAL code does. All the code in this chapter runs in user \\r\\nspace.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e9bb9dbb-1e0d-408e-b7b5-3bd79a5cf243":{"__data__":"{\"id_\":\"e9bb9dbb-1e0d-408e-b7b5-3bd79a5cf243\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eAVvCpwlO574tjfV3x/8uoPoJ38ibvbufRq6mtee1s8=\"},\"PREVIOUS\":{\"nodeId\":\"97ed85cd-b622-44d7-a66d-3e2c608b2fc7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5A8UgL/kmyj7G1BYThVpUOW9IfZMFHh9SGSHGtyxW8A=\"}},\"hash\":\"COntgrulvrX4tENj/KStfet6PvF15seBdORlo9HAQHk=\",\"text\":\"All the code in this chapter runs in user \\r\\nspace. Although its use may be restricted to privileged applications, HAL code runs exclusively \\r\\nas part of some application. 9780134096346_print.indb   14925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"84190798-f296-4a5a-9959-55d8bf2b52b1":{"__data__":"{\"id_\":\"84190798-f296-4a5a-9959-55d8bf2b52b1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"99U6OZXneivjApbvthQtXR+J6nT+JBfrXKfVPb2jYzk=\"}},\"hash\":\"q3k0LSsWyU6iWg/P5waEHa71zJIrd5NFbwBOVt4ay7g=\",\"text\":\"150Chapter 8  Getting to Android: The HAL\\r\\nImplementing the Shim \\r\\nFinally, Listing 8.9 shows the actual implementation of the shim that connects the HAL to the \\r\\ndevice driver. It is in the file proximity/dev/proximity_sensor.cpp. In this example, it is \\r\\njust a stub. It just mocks the code that would actually talk to a device driver. Instead of the \\r\\nhardwired values returned here, a real proxy would interface with the hardware device, prob-\\r\\nably through its USB driver, to perform the actions required by the HAL. Listing 8.9 Proximity Sensor Glue Code Stub\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n// This is stub, mocking actual glue code. // If this were a real thing, it would talk to a device driver,\\r\\n// presumably for a USB device\\r\\nint open_sensor(proximity_params_t &params) {\\r\\n    params.precision_min = 0;\\r\\n    params.precision_range = 100;\\r\\n    params.proximity_min = 0;\\r\\n    params.proximity_range = 100;\\r\\n    return 0; // a completely fake fd\\r\\n}\\r\\nint poll_sensor(int fd, int precision) {\\r\\n    if (precision < 0) {\\r\\n        return -1;\\r\\n    } else if (precision < 70) {\\r\\n        return 60;\\r\\n    } else if (precision < 100) {\\r\\n        return 63;\\r\\n    } else {\\r\\n        return -1;\\r\\n    }\\r\\n}\\r\\nint close_sensor(int fd) {\\r\\n    return 0;\\r\\n}\\r\\nNow that the shim is defined, it must also be added to the build. Because it is used by the HAL \\r\\nas well as the simple daemon and the binderized HAL covered in Chapter 12, it is built as a \\r\\nlibrary. The extension of the Android.bp shown in Listing 8.10 shows the additions necessary \\r\\nto build the library as well as expose its headers to other components of the system. 9780134096346_print.indb   15025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"babd6cc2-bbc6-4d23-9594-a94b6c4d95a2":{"__data__":"{\"id_\":\"babd6cc2-bbc6-4d23-9594-a94b6c4d95a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"u3mIpNmucWXVYSCJnLeMebRDI6gt9eSlzOnJbdfdwig=\"}},\"hash\":\"8Os+/cl1xVE50e9ux7U00kNKbSuSweD9kpe8jOKzSzE=\",\"text\":\"151Summary\\r\\nListing 8.10 Proximity Sensor Shim Additions to Android.bp\\r\\ncc_library {\\r\\n    name: \\\"libacmeproximityshim\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"dev/proximity_sensor.cpp\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    local_include_dirs: [\\r\\n        \\\"include\\\",\\r\\n    ],\\r\\n}\\r\\ncc_library_headers {\\r\\n    name: \\\"libacmeproximityshim_headers\\\",\\r\\n    defaults: [\\r\\n        \\\"vendor.acme.one.proximity.defaults\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    export_header_lib_headers: [\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    export_include_dirs: [\\\"include\\\"],\\r\\n}\\r\\nSummary\\r\\nThis chapter introduced the Android HAL. A HAL is the interface between Android and a class \\r\\nof similar hardware devices: cameras, audio, sensors, and so on. The primary purpose of a HAL \\r\\nis to provide a single API for all devices that provide a similar service. A HAL abstracts device \\r\\nspecifics so that Android code that uses the device need not change to accommodate a specific \\r\\ndevice. Because they are both abstractions and APIs, designing HALs requires careful thought and \\r\\na pretty good crystal ball. Especially when a team does not have a lot of experience with \\r\\neither Android or a new device, designing a HAL may bog down development and not prove \\r\\n9780134096346_print.indb   15125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4f6da2e8-8b37-4b34-a2b1-d524304c8617":{"__data__":"{\"id_\":\"4f6da2e8-8b37-4b34-a2b1-d524304c8617\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XWUKpQZPIJkVK6yqJlkOFIthoLEsRX9luNPow4pfwHs=\"}},\"hash\":\"63ZXMw05D88VQ38LXYL35LmUTbKj1X3iRQatX1FccDU=\",\"text\":\"152Chapter 8  Getting to Android: The HAL\\r\\nfuture-proof anyway. Good reasons exist for creating a HAL. Good reasons also exist for plan-\\r\\nning to throw one away. It is even possible to make an argument for C glue code that is extremely simple and hoist-\\r\\ning any complexity up into Android Java. If the project scope already includes modification of \\r\\nthe Android code, a Java device shim may be the most effective plan. On the other hand, for \\r\\ndevices that will get OS updates—especially if those updates will come from an external source \\r\\nor that will need to adapt to multiple hardware implementations—a HAL is just the thing. The implementation of the Acme Proximity sensor HAL in this chapter is a representative basic \\r\\nHAL: It is realistic, complete, and it compiled and ran at the time of this writing. It is, however, \\r\\na stub. It does not actually use a USB driver to communicate with a physical device as it almost \\r\\ncertainly would were it more than pedagogical. The next chapter demonstrates using this HAL in a daemon written in C. Chapter 11 demon-\\r\\nstrates converting this legacy HAL to a Binderized (Treble) HAL. 9780134096346_print.indb   15225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4d1f9e00-e399-49b8-a2c5-6ab2038947e8":{"__data__":"{\"id_\":\"4d1f9e00-e399-49b8-a2c5-6ab2038947e8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PWN9lB1Y1rSMFr/OAh/6FFGPmS+eYCGqaubLWhYMjJE=\"}},\"hash\":\"j8/ugoDPcNBGCbn29lJnbiW+sMj/qbshkBpxH02m17w=\",\"text\":\"9\\r\\nGetting to Java: The JNI\\r\\nThe previous chapter detailed the process of creating a HAL, an abstract interface between the \\r\\nAndroid framework and a novel bit of hardware. That is only halfway there. Although a HAL is the canonical way of plumbing hardware into \\r\\nAndroid, it is not sufficient to make the device useful from Android Java programs. To do that, \\r\\nwe need the Java’s Native Interface, the JNI. The goal for this chapter is to cross the boundary into Android’s implementation language, \\r\\nJava. We’ll cross that boundary by coding a Java language application that connects to the \\r\\nproximity sensor using its HAL and that logs its status once every minute or so. We’ll achieve \\r\\nthat goal in three steps:\\r\\n1. We’ll create a simple native application that talks directly to the proximity sensor. This \\r\\napplication is a simple extension of the one discussed at the end of Chapter 6. 2. We’ll refactor that application to use the HAL we built in the last chapter. A native \\r\\napplication that uses the HAL is a useful artifact: The only significant distinction \\r\\nbetween a native application and the corresponding Java application is, exactly, \\r\\nthe implementation language. The choice of environments depends entirely on the \\r\\npreferences of the team that will build and support it. 3. We’ll implement an application in Java using Java’s Native Interface (the JNI) that uses \\r\\nthe native HAL from code running inside the Android’s bytecode interpreter. Note\\r\\nIt was our intention to run the last example, the Java application, also as a daemon. Unfortunately, we were unable to construct SE rules that allowed it to run in ART under init. Instead, the Java application shown here must be run as a system service started by Zygote \\r\\n(as described in Chapter 7). 9780134096346_print.indb   15325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f2e80ae2-3821-4808-a910-a3ab3148b6ba":{"__data__":"{\"id_\":\"f2e80ae2-3821-4808-a910-a3ab3148b6ba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"t/Mb8HbG02yXDiHvkbJ3HzzQMTqgj/6RzwgQ+iGQruA=\"}},\"hash\":\"0BakzlZabqeN5gfQWp+MzgsiYd0aCVn0DZJXyS9pnS4=\",\"text\":\"154Chapter 9  Getting to Java: The JNI\\r\\nCode Structure\\r\\nThe applications described in this chapter are complete and freestanding. Therefore, each goes \\r\\ninto its own subdirectory of “app” directory in the Acme One source structure. Figure 9.1 shows \\r\\nthe structure (with the code from the previous chapters elided). one\\r\\napp\\r\\nnative_daemon\\r\\nsimple_daemon\\r\\njava_daemon\\r\\ncpp\\r\\njava\\r\\nproximity\\r\\n... ... ... ... ... ... Figure 9.1 Application Code Layout\\r\\nAlthough the code for each of the applications is nested inside the “app” folder in the Acme \\r\\nOne device file structure, there is no need for all the code to be a fixed part of the Acme One \\r\\nsource code repository. As usual, creating a new git repo for each separate application and using \\r\\nrepo to add them at checkout time to the workspace makes sense. It is possible to do even better, though. Notice that, as described, each of the applications has \\r\\nexactly the same function: periodically logging proximity data to the console. There is no \\r\\nreason ever to build all three for a single given device. All three implementations might exist—\\r\\nperhaps as legacy implementations or specialized versions required for some specific device—\\r\\nbut having all three in the workspace at once would be useless, at best. The repo tool not only supports this scenario—three different versions of the same applica-\\r\\ntion—but a nifty feature called groups (first described in Chapter 2) makes it very convenient. Listing 9.1 shows the additions to the manifest. 9780134096346_print.indb   15425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d3636e9f-6dc9-4d49-807e-470d5c3ba1ef":{"__data__":"{\"id_\":\"d3636e9f-6dc9-4d49-807e-470d5c3ba1ef\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Oj03wNwG4FHIfyNTtChp5R1g4OgN2iBvN/UFhTvvcMQ=\"}},\"hash\":\"aOgjJs1BbnZyZmkSDQuxpYNBipXPeXEwtPXJX/1AB8Q=\",\"text\":\"155Using the Device\\r\\nListing 9.1 Manifest Additions for the Proximity Applications\\r\\n<!-- Acme Applications -->\\r\\n  <project path=\\\"app/simple_daemon\\\"\\r\\n           name=\\\"simple_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\n  <project path=app/native_daemon\\r\\n           name=\\\"native_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\n  <project path=app/java_daemon\\r\\n           name=\\\"java_daemon\\\" remote=\\\"acme\\\"\\r\\n           groups=\\\"nodefault\\\" />\\r\\nListing 9.1 demonstrates the use of this new workspace customization feature, the groups attri-\\r\\nbute. Annotating a project in the manifest with the group “nodefault” indicates to the repo \\r\\ntool that the annotated repository should not be downloaded as it normally would be when \\r\\nthe workspace is synched. To pull the code for one (or more) of the applications into the work-\\r\\nspace, use the repo tool -g flag to specify a group that includes the desired implementation. One simple way to select a particular project is by its name. Every project belongs to a group \\r\\nwhose name is “name:” followed by the value of the project’s name attribute. For example, \\r\\nwhen used with the manifest shown in part in Listing 9.1, the following command will create a \\r\\nworkspace that contains the simple-daemon application:\\r\\nrepo init –g name:simple_daemon ... Using the Device\\r\\nThe code for the first version of the application is almost trivial. It simply opens the device \\r\\ndirectly (no HAL), polls at a fixed interval, and logs the result. This is the trivial extension of \\r\\nthe daemon from Chapter 6. Listing 9.2 shows the code for it. Listing 9.2 Simple Native Proximity Application\\r\\n#include <unistd.h>\\r\\n#include <stdio.h>\\r\\n#include <android/log.h>\\r\\n#include \\\"dev/proximity_sensor.h\\\"\\r\\n#define DELAY_SECS 60\\r\\n#define ALOG(msg) __android_log_write(ANDROID_LOG_DEBUG, \\\"PROXIMITY\\\", msg)\\r\\nint main(int argc, char *argv[]) {\\r\\n    struct proximity_params_t config;\\r\\n    char message[128];\\r\\n    int fd = open_sensor(config);\\r\\n9780134096346_print.indb   15525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8dca0a45-c049-4672-89c6-717824cde823":{"__data__":"{\"id_\":\"8dca0a45-c049-4672-89c6-717824cde823\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9vVBy175YCkSfouthm1dNef5owtGpc7cfBWahIyayeg=\"}},\"hash\":\"oA9siYdD1xpu/+KYbf8AR9+I+Js/xkm239AJ0jXdt1U=\",\"text\":\"156Chapter 9  Getting to Java: The JNI\\r\\n    if (fd < 0)\\r\\n        return -1;\\r\\n    int n = 0;\\r\\n    int precision;\\r\\n    while (true) {\\r\\n        sleep(DELAY_SECS);\\r\\n        n++;\\r\\n        if (n < 10) {\\r\\n            precision = 40;\\r\\n        } else {\\r\\n            n = 0;\\r\\n            precision = 80;\\r\\n        }\\r\\n        int proximity = poll_sensor(fd, precision);\\r\\n        if ((proximity < config.proximity_min)) {\\r\\n            close_sensor(fd);\\r\\n            return 0;\\r\\n        }\\r\\n        snprintf (message,\\r\\n                 sizeof(message),\\r\\n                 \\\"proximity @%2d: %4.2f\\\",\\r\\n                  precision,\\r\\n                 (100.0 * (proximity - config.proximity_min))\\r\\n                          / config.proximity_range);\\r\\n        ALOG(message);\\r\\n    }\\r\\n}\\r\\nThis code polls the sensor once every minute with a precision of 40 and once every 10 minutes \\r\\nwith a precision of 80. It logs the result to the console. Listing 9.3 shows the blueprint file used to build the application. It appeared previously in \\r\\nChapter 6 as Listing 6.11. Listing 9.3 Building the Simple Native Application\\r\\ncc_binary {\\r\\n    name: \\\"acmesimpledaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmesimpledaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n9780134096346_print.indb   15625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"00d0bebb-2b8a-4447-95bf-4ffc00468879":{"__data__":"{\"id_\":\"00d0bebb-2b8a-4447-95bf-4ffc00468879\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UGpr1wQFcW/MhvvNVIjLTF4aphP5Pl6WsudXAOBKLC4=\"}},\"hash\":\"dua/yo+zG153Qf/dcwtZtmvmoH2ZrWZEydTQnH+8iBk=\",\"text\":\"157Using the HAL\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-simple-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nUsing the HAL\\r\\nThe second version of the application is only slightly different from the first. The functional \\r\\npart of the code, the loop that logs proximity readings, is identical. The only differences \\r\\nbetween this code and that of the preceding application are that, instead of opening the device \\r\\ndirectly, it requests the device HAL by name from the OS and then uses the returned reference \\r\\nto invoke sensor methods through the HAL. Listing 9.4 shows the code for the second version of the application (located at device/acme/\\r\\none/app/native_daemon/acme-native-daemon.cpp). Listing 9.4 HAL Native Proximity Application\\r\\n#include <unistd.h>\\r\\n#include <stdio.h>\\r\\n#include <android/log.h>\\r\\n#include <hardware/hardware.h>\\r\\n#include \\\"dev/proximity_hal.h\\\"\\r\\n#define DELAY_SECS 60\\r\\n#define ALOG(msg) __android_log_write(ANDROID_LOG_DEBUG, \\\"PROXIMITYD\\\", msg)\\r\\nint main(int argc, char *argv[]) {\\r\\n    const hw_module_t* module\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module) {\\r\\n        ALOG(\\\"Failed to load Acme proximity HAL module\\\");\\r\\n        return -1;\\r\\n    }\\r\\n        \\r\\n9780134096346_print.indb   15725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"832a4700-4e13-460f-adf4-e1d4067423c0":{"__data__":"{\"id_\":\"832a4700-4e13-460f-adf4-e1d4067423c0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NPcB/R4ht8apsSM52ezAiXpCFCplhZNjvI/xxXWoitA=\"}},\"hash\":\"QpQmjuWdXoY1+dn5PHshaZFnOT/CU6tocoYOKIMnQv8=\",\"text\":\"158Chapter 9  Getting to Java: The JNI\\r\\n    proximity_sensor_device_t* device;\\r\\n    if (module->methods->open(\\r\\n        module,\\r\\n        nullptr,\\r\\n        reinterpret_cast<struct hw_device_t**>(& device))) {\\r\\n        ALOG(\\\"Failed to open Acme proximity HAL\\\");\\r\\n     return -1;\\r\\n    }\\r\\n    proximity_params_t config = device->params;\\r\\n    char message[128];\\r\\n    int n = 0;\\r\\n    int precision;\\r\\n    while (true) {\\r\\n        sleep(DELAY_SECS);\\r\\n        n++;\\r\\n        if (n < 10) {\\r\\n            precision = 40;\\r\\n        } else {\\r\\n            n = 0;\\r\\n            precision = 80;\\r\\n        }\\r\\n        int proximity = device->poll_sensor(device, precision);\\r\\n        if ((proximity < config.proximity.min)) {\\r\\n            device->common.close(reinterpret_cast<hw_device_t *>(device));\\r\\n            return 0;\\r\\n        }\\r\\n        snprintf(message, sizeof(message), \\\"proximity @%2d: %4.2f\\\", precision,\\r\\n            (100.0 * (proximity - config.proximity.min)) / config.proximity.range);\\r\\n        ALOG(message);\\r\\n    } \\r\\n}\\r\\nThe only thing worthy of particular notice, here, is that the second argument to the open \\r\\nmethod is null. It could have been used by the HAL to do runtime specialization. The simple \\r\\nAcme Proximity HAL described in the last chapter, however, ignores the parameter completely. The build script for this second application is also nearly identical to that for the first native \\r\\napplication. The acmenativedaemon must have the same SE label as that used for the simple \\r\\nversion. That label allows it access to USB serial devices and to be started by init. The label is \\r\\napplied in file_contexts within the SE policy folder. Because these things are so similar, they \\r\\n9780134096346_print.indb   15825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8334e940-e466-4c77-b188-db831b9da067":{"__data__":"{\"id_\":\"8334e940-e466-4c77-b188-db831b9da067\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"89RViNTE1up2zNTPbcmdzsAAtt3s1qT+S8w1de5I3ZE=\"}},\"hash\":\"1vAjktMRwDxIJcRMCdlJBy9GQFwsX//on5UKOVztZwg=\",\"text\":\"159Using the Java Native Interface\\r\\nare not included here. The only differences are the application name and the libraries it uses, as \\r\\nshown in Listing 9.5. Listing 9.5 HAL Native Proximity Application Build File\\r\\ncc_binary {\\r\\n    name: \\\"acmenativedaemon\\\",\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    init_rc: [\\\"vendor.acmenativedaemon.acme.one.rc\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n        \\\"liblog_headers\\\",\\r\\n        \\\"libhardware_headers\\\",\\r\\n    ],\\r\\n    srcs: [\\r\\n        \\\"acme-native-daemon.cpp\\\"\\r\\n    ],\\r\\n    shared_libs: [\\r\\n        \\\"liblog\\\",\\r\\n        \\\"libcutils\\\",\\r\\n        \\\"libhardware\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\nUsing the Java Native Interface\\r\\nMost Android applications are written in interpreted languages. The source code for these \\r\\napplications—probably Kotlin or Java—is compiled to bytecodes. Bytecodes are not instruc-\\r\\ntions that can be executed by any actual hardware. Instead, as discussed in Chapter 7, they are \\r\\nnative instructions for a virtual machine. The virtual machine is an application that runs on the \\r\\ntarget device, interprets each of the bytecodes in the compiled app, and executes a set of native \\r\\ninstructions necessary to perform the action described by the bytecode. Most Android code, then, is executed as interpreted bytecodes. Clearly, the execution of those \\r\\nbytecodes can do only things that the virtual machine that interprets those bytecodes was built \\r\\nto do. In particular, because no virtual machine has compiled into it the ability to talk to the \\r\\nAcme proximity sensor, there is no way that interpreted code can use the sensor. Fortunately, interpreted virtual machine instructions are not a running program’s only inter-\\r\\nface to native instructions and the operating system. Since its creation, the Java language has \\r\\ndefined a mechanism that allows an application to execute arbitrary native code uninterpreted \\r\\nand outside the virtual machine. The mechanism is as old as Java itself and is called the Java \\r\\nNative Interface (JNI). The Android virtual machines implement this mechanism. 9780134096346_print.indb   15925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"183e48ce-91af-46f6-85e0-ba97ddeefe8c":{"__data__":"{\"id_\":\"183e48ce-91af-46f6-85e0-ba97ddeefe8c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BMC7hYbnvBAKMhDOfWNBPtKLGAcEtuMTmPBx1DgFOfU=\"},\"NEXT\":{\"nodeId\":\"d13bf743-0c3b-4bd9-8c87-1e12e76e2396\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ZWTJoDYrJnx6ZoVp3fc/R7fvKg0wZHNlxFqCEdf9O8g=\"}},\"hash\":\"goDKXsfPXAqSxFBA2Voypb5GQFIM1szx0TjGlFYU7FY=\",\"text\":\"160Chapter 9  Getting to Java: The JNI\\r\\nNote\\r\\nAlthough the JNI allows the execution of machine instructions that are not part of the virtual \\r\\nmachine, JNI code is executed as part of the same process that is running the virtual machine. JNI \\r\\ncode executes “outside the virtual machine” only in the sense that it is not executing instructions \\r\\nthat virtual machine designers provided. It is still virtual machine methods that are below the JNI \\r\\ncode in the call stack and to which control will return when the execution of the JNI code completes. Executing Native Code\\r\\nFigure 9.2 illustrates the ways in which native code can be used in an Android application. Application code, as discussed earlier, is typically written in an interpreted language. It is repre-\\r\\nsented in Figure 9.2 by the largest box at the top of the figure. Android application code depends on a library of standard functions and classes in the java.* \\r\\nand android.* packages. The java packages have an API that is very similar to the Java 8 \\r\\nJRE. The android library defines the Android runtime environment. Both of these libraries are \\r\\nimplemented largely in Java and, therefore, most of the code in each compiles into bytecodes \\r\\nthat are executed by the virtual machine. Beneath the interpreted code and shown in the center of Figure 9.2 is the virtual machine. It is, \\r\\nof course, written in a language (probably C and C++) that is compiled into machine instruc-\\r\\ntions that are native to the target device. To the left and right of the virtual machine in Figure 9.2 are two more pieces of code that are \\r\\ncompiled directly (again, usually from C or C++) into instructions native to the target device. Although run as part of the application, these pieces of code are not compiled to bytecodes and \\r\\nare not interpreted by the virtual machine. Nearly all Android programs make use of the native code represented by the block on the \\r\\nbottom right of the figure when they use the runtime libraries. Although, as mentioned earlier, \\r\\nmuch of the runtime environment code is implemented in Java, the implementations of \\r\\ncertain functions that do specialized things—like interfacing with the kernel, file and network \\r\\nI/O or performing highly optimized functions like encryption and decryption—are all native \\r\\n(non-interpreted) code called from the Java.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d13bf743-0c3b-4bd9-8c87-1e12e76e2396":{"__data__":"{\"id_\":\"d13bf743-0c3b-4bd9-8c87-1e12e76e2396\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BMC7hYbnvBAKMhDOfWNBPtKLGAcEtuMTmPBx1DgFOfU=\"},\"PREVIOUS\":{\"nodeId\":\"183e48ce-91af-46f6-85e0-ba97ddeefe8c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"goDKXsfPXAqSxFBA2Voypb5GQFIM1szx0TjGlFYU7FY=\"}},\"hash\":\"ZWTJoDYrJnx6ZoVp3fc/R7fvKg0wZHNlxFqCEdf9O8g=\",\"text\":\"Application Code\\r\\nJava Library Code\\r\\nVirtual MachineNativeApplicationCodeNative LibraryCode\\r\\nInterpreted Code\\r\\nNative Code\\r\\nFigure 9.2 Inter          preted and Native Code\\r\\n9780134096346_print.indb   16025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"81984f19-980a-4dd1-9b7e-0dd77969c178":{"__data__":"{\"id_\":\"81984f19-980a-4dd1-9b7e-0dd77969c178\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"+WEiUTwSKb1xHE56EBykGl1crrNsae/LyslOfAglRv4=\"}},\"hash\":\"eDR+COiswqtrGDqvptJxLzaFRVMv9kNgXqbAJBRBejg=\",\"text\":\"161Using the Java Native Interface\\r\\nThe Java Native Interface (JNI) is the mechanism by which the interpreted runtime library code \\r\\ncalls the device native code. It is also a well-defined, public API; is implemented by the Android \\r\\nvirtual machine; and can be used directly by application code, just as it is used by the Java and \\r\\nAndroid runtime libraries. Any application can use the JNI to execute native code: While it is \\r\\nrunning, it can load an arbitrary native library and execute the code in it. Note\\r\\nA previous Java-based smartphone standard, J2ME, enforced security and controlled applica-\\r\\ntion access to hardware by preventing the use of native code. Applications could only execute \\r\\ninstructions that were compiled into the virtual machine; access to instructions deemed “dan-\\r\\ngerous” was carefully controlled. Android has a much different security model and no such restriction. Applications can and do \\r\\nexecute their own native code. JNI: The Java Side\\r\\nOne more time, let’s interrupt our strict up-the-stack journey through the Android landscape \\r\\nand look at the JNI starting from above, in code written in Java. The Java side of the JNI is straightforward and quite simple. It consists of the keyword “native” \\r\\nand the system method, System.loadLibrary. A method with the keyword native in its declaration—a native function—is similar to \\r\\nthe declaration of a function in a Java interface: It declares the function prototype but not its \\r\\nimplementation. Methods declared in an interface must be defined in the classes that imple-\\r\\nment the interface. Methods declared “native,” to the contrary, are not defined in Java at all. Instead, the virtual machine expects to find their definitions as canonically named symbols in \\r\\na library loaded with the load (or loadLibrary) method. Note\\r\\nKotlin uses the keyword “external” to accomplish the same thing: declaring a function whose \\r\\ndefinition is elsewhere. Listing 9.6 shows the declaration of the three methods that Java code will need to interact with \\r\\nthe proximity device. Listing 9.6 Native Method Declarations\\r\\npackage com.acme.device.proximity;\\r\\n// ... public class AcmeProximitySensor {\\r\\n   // ... 9780134096346_print.indb   16125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cd473bb0-b02e-49be-b9fe-0e7ce7e7f3c3":{"__data__":"{\"id_\":\"cd473bb0-b02e-49be-b9fe-0e7ce7e7f3c3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"MDu/gfyJvhZVZS70Xk6DHxd0gY2ZX6Uky2klWfIZoys=\"},\"NEXT\":{\"nodeId\":\"5fdbf467-ae4b-4a32-9597-365289978e55\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kDBra96fxDLbIV0i8q7WQz0Vh9YhlpeXU1StGavP7p0=\"}},\"hash\":\"i9y/zFceB0LiCqlTDoynILrhG0hJtfwmKt2Ej/THUqE=\",\"text\":\"162Chapter 9  Getting to Java: The JNI\\r\\n    private static native long open();\\r\\n    private static native int poll(long hdl, int precision);\\r\\n    private static native void close(long hdl);\\r\\n}\\r\\nJNI: The Native Side\\r\\nThese three methods must now be defined in a linkable library. In this example, the library will \\r\\nbe written in C. The Android virtual machine will translate calls to these native methods into calls to canoni-\\r\\ncally named functions in a native library. The definitions for the corresponding functions must \\r\\nhave exactly the names that the runtime expects them to have. Fortunately, there is tool that is \\r\\npart of the Java Development Kit that will generate the C prototypes for the native definitions \\r\\nautomatically: javah. Note\\r\\njavah has been deprecated as of Java 9. Even in Java 8, its functionality can be duplicated \\r\\nwith the –h flag for the java compiler, javac. Javah need not be part of the build process. Running it is necessary only when new native \\r\\nmethods are introduced or when one of the signatures of an existing native methods changes: \\r\\nwhen the headers it generates will be different from the headers it generated last time it was \\r\\nrun. Some shops decide to create the headers once and then check them in to source control \\r\\nlike any other source file. Because the process of generating the native prototypes can be automated, some shops do \\r\\nprefer to make it part of the build. When there are a lot of native methods and they are chang-\\r\\ning frequently, this is a very reasonable approach. Note, though, that javah only generates the \\r\\nheader files and the function prototypes! If the corresponding function definitions (presumably \\r\\nin a .c file) do not match, the build will fail with native compiler errors. Running javah by hand is quite simple. It takes as arguments:\\r\\n ■The classpath identifying the directory (or jar) that is the top of the package tree containing the compiled Java .class files. The classpath is specified using the –cp \\r\\ncommand line option. ■Either a –d or –o argument indicating the directory or file (respectively) into which the tool should put the generated output. ■The fully qualified name of the class containing native declarations for which headers are to be generated.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5fdbf467-ae4b-4a32-9597-365289978e55":{"__data__":"{\"id_\":\"5fdbf467-ae4b-4a32-9597-365289978e55\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"MDu/gfyJvhZVZS70Xk6DHxd0gY2ZX6Uky2klWfIZoys=\"},\"PREVIOUS\":{\"nodeId\":\"cd473bb0-b02e-49be-b9fe-0e7ce7e7f3c3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"i9y/zFceB0LiCqlTDoynILrhG0hJtfwmKt2Ej/THUqE=\"}},\"hash\":\"kDBra96fxDLbIV0i8q7WQz0Vh9YhlpeXU1StGavP7p0=\",\"text\":\"■The fully qualified name of the class containing native declarations for which headers are to be generated. For instance, run from the root of the Java application package (device/acme/one/app/java_\\r\\ndaemon), the following command will create a .h file from the binary generated by compiling \\r\\nthe code in Listing 9.6:\\r\\n9780134096346_print.indb   16225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cd0a5739-8795-44bb-aa87-dba6e2bd006a":{"__data__":"{\"id_\":\"cd0a5739-8795-44bb-aa87-dba6e2bd006a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"8Kifch7VjbzT/z+geMnbdDoU7r4wjr20Nlvd6JovZPk=\"}},\"hash\":\"XLoBX+9RgJ0SPzy/cp0o2Zc1/WAHF15f4KVIhetsP+A=\",\"text\":\"163Using the Java Native Interface\\r\\njavah –cp java \\\\\\r\\n –o cpp/com_acme_device_proximity_AcmeProximitySensor.h \\\\\\r\\n  com.acme.device.proximity.AcmeProximitySensor\\r\\nJavah will search the directory “java” for the class file containing the class com.acme. device.proximity.AcmeProximitySensor, (probably java/com/acme/device/ \\r\\nproximity/AndroidProximitySensor.class) and create C prototypes for any native \\r\\nmethods it finds there. The prototypes will be written to the file cpp/com_acme_device_ \\r\\nproximity_AcmeProximitySensor.h. Listing 9.7 shows the generated file. Listing 9.7 Proximity HAL JNI Function Prototypes\\r\\n/* DO NOT EDIT THIS FILE - it is machine generated */\\r\\n#include <jni.h>\\r\\n/* Header for class com_acme_device_proximity_AcmeProximitySensor */\\r\\n#ifndef _Included_com_acme_device_proximity_AcmeProximitySensor\\r\\n#define _Included_com_acme_device_proximity_AcmeProximitySensor\\r\\n#ifdef __cplusplus\\r\\nextern \\\"C\\\" {\\r\\n#endif\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    open\\r\\n * Signature: ()J\\r\\n */\\r\\nJNIEXPORT jlong\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n  (JNIEnv *, jclass);\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    poll\\r\\n * Signature: (JI)I\\r\\n */\\r\\nJNIEXPORT jint\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_poll\\r\\n  (JNIEnv *, jclass, jlong, jint);\\r\\n/*\\r\\n * Class:     com_acme_device_proximity_AcmeProximitySensor\\r\\n * Method:    close\\r\\n * Signature: (J)V\\r\\n */\\r\\nJNIEXPORT void\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_close\\r\\n  (JNIEnv *, jclass, jlong);\\r\\n9780134096346_print.indb   16325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"38828114-fd5a-4134-877a-2f9a0311da60":{"__data__":"{\"id_\":\"38828114-fd5a-4134-877a-2f9a0311da60\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mlHlBTzMMoaI6/da6umPMRYPxkMlqqtwJouuGLDRKDk=\"}},\"hash\":\"kG+cstuq4Rl91YUUc6yPZdwVwGlmfXWQga/OHkwNiX8=\",\"text\":\"164Chapter 9  Getting to Java: The JNI\\r\\n#ifdef __cplusplus\\r\\n}\\r\\n#endif\\r\\n#endif\\r\\nNote, especially, the extern \\\"C\\\" { ... } directive. It is essential! It prevents a C++ compiler \\r\\nfrom mangling the names of the functions and making their definitions unrecognizable as the \\r\\ndefinitions for the corresponding Java native declaration. Note\\r\\nCanonically named methods are not the only way to link the native implementation of a method \\r\\nto its Java declaration. The RegisterNatives JNI function takes, as an argument, an array of \\r\\nJNINativeMethod, each of which identifies a Java method (by fully qualified signature) and \\r\\nincludes a pointer to the native implementation. Used in the JNI_OnLoad method (called by \\r\\nthe VM when it loads a native library), JNINativeMethod provides an alternative way of con-\\r\\nnecting Java and native methods. Note also that these native definitions depend on the header file jni.h. The jni.h header file \\r\\ncontains the definitions for the native type abstractions for Java’s base types—int, long, [] \\r\\n(array), and so on—some macros (JNIEXPORT, JNICALL, and so on), but most importantly the \\r\\ndefinition of the JNI environment, a structure of opaque pointers to standard JNI functions. These functions allow native code to work with Java objects. This chapter will conclude with a slightly deeper discussion of the JNI native environment. For the moment, though, let’s just assume (as it is usually safe to do), that a jint is an int, a \\r\\njlong is a long, and so on. The next step is implementing the functions in native code. Stealing code from Listing 9.4 \\r\\nmakes this a trivial task. Listing 9.8 shows the result. Listing 9.8 Proximity HAL JNI Implementation\\r\\n#include <jni.h>\\r\\n#include <string>\\r\\n#include <hardware/hardware.h>\\r\\n#include \\\"dev/proximity_hal.h\\\"\\r\\nJNIEXPORT jlong JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n  (JNIEnv * env, jclass clazz) {\\r\\n    const hw_module_t *module;\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module))\\r\\n        return -1;\\r\\n9780134096346_print.indb   16425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"542a7092-adfe-4125-8247-3ae829b91ed4":{"__data__":"{\"id_\":\"542a7092-adfe-4125-8247-3ae829b91ed4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iOrsZXVxgTFCfrPuMz/VR7TmUfsr2KKeFA8oHxkxYbs=\"}},\"hash\":\"/MuA5t7/YNCK9HF5q9idMf1XxBsRmJ40VLPJb9Hv9QE=\",\"text\":\"165Using the Java Native Interface\\r\\n    long device;\\r\\n    if (module->methods->open(\\r\\n            module,\\r\\n            nullptr,\\r\\n            reinterpret_cast<struct hw_device_t **>(&device)))\\r\\n        return -1;\\r\\n    return (jlong) device;\\r\\n}\\r\\nJNIEXPORT jint JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_poll\\r\\n  (JNIEnv *env, jclass clazz, jlong handle, jint precision);\\r\\n    auto *device = reinterpret_cast<proximity_sensor_device_t *>(handle);\\r\\n    return device->poll_sensor(device, precision);\\r\\n}\\r\\nJNIEXPORT jint JNICALL Java_com_acme_device_proximity_AcmeProximitySensor_close\\r\\n  (JNIEnv * env, jclass clazz, jlong handle);\\r\\n    auto device = reinterpret_cast<proximity_sensor_device_t *>(handle);\\r\\n    return device->common.close(reinterpret_cast<hw_device_t *>(device));\\r\\n}\\r\\nThis is a calculated and extremely simple example. Once again, though, the reader is cautioned! The JNI is extensive, complex, and easy to break. Entire books exist about this topic alone. The alert reader will notice that the reference to the sensor, returned by the HAL, is cast as a \\r\\njlong in both the open and the close methods. This is the introduction to a common and \\r\\npowerful JNI technique. Its purpose will become obvious when the corresponding methods are \\r\\nimplemented in Java. A Java Proximity Application\\r\\nHaving plumbed a path from Java code through the HAL and into the Acme Proximity Sensor, \\r\\nwe can now implement an analog for the applications shown in Listings 9.2 and 9.4 that is \\r\\nwritten in Java. The Native Shim\\r\\nThe first step will be to complete the AcmeProximitySensor class, shown in part in Listing 9.6. It is the shim that connects the Java environment to the native environment. It is very much best practice that the shim code abstract away even the faintest whiff of native-\\r\\nness. The API for the shim should follow all the best practices standard for any Java API. In \\r\\nparticular, declaring the API in a mockable Java interface is a great way to make it possible to \\r\\ntest client code without requiring access to any specific hardware. Listing 9.9 shows a complete implementation of the AcmeProximitySensor class. 9780134096346_print.indb   16525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0bdb5241-980f-4812-b12b-060c5a798863":{"__data__":"{\"id_\":\"0bdb5241-980f-4812-b12b-060c5a798863\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"voZSMuRt7JWh2jHAoCJjC7PO+52H+0UDU6+lB/Lhb+Y=\"}},\"hash\":\"DbTFvhyWLcuh7Qx7IDLV4PhfVbQ3h1Rvk/O8/aE6gAQ=\",\"text\":\"166Chapter 9  Getting to Java: The JNI\\r\\nListing 9.9 Proximity HAL Java Implementation\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    static { System.loadLibrary(“acmeproximityjni”); }\\r\\n    private long peer;\\r\\n    public void init() throws IOException {\\r\\n        synchronized (this) {\\r\\n            if (peer != 0L) { return; }\\r\\n            peer = open();\\r\\n            if (peer == 0L) {\\r\\n                throw new IOException(“Failed to open proximity sensor”);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    public int poll(int precision) throws IOException {\\r\\n        synchronized (this) {\\r\\n            if (peer == 0L) { throw new IOException(“Device not open”); }\\r\\n            return poll(peer, precision);\\r\\n        }\\r\\n    }\\r\\n    @Override\\r\\n    public void close() throws IOException {\\r\\n        final long hdl;\\r\\n        synchronized (this) {\\r\\n            hdl = peer;\\r\\n            peer = 0L;\\r\\n        }\\r\\n        if (hdl == 0L) { return; }\\r\\n        if (close(hdl) < 0) {\\r\\n            throw new IOException(“Failed closing proximity sensor”);\\r\\n        }\\r\\n    }\\r\\n    @Override\\r\\n    protected void finalize() throws Throwable {\\r\\n        try { close(); }\\r\\n        finally { super.finalize(); }\\r\\n    }\\r\\n    private static native long open();\\r\\n9780134096346_print.indb   16625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"60318c43-37b0-4480-a2b4-68f143b1e988":{"__data__":"{\"id_\":\"60318c43-37b0-4480-a2b4-68f143b1e988\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3LNEPqjiIp9XkIgOF2qg1/V1C+XTm4j+wGWOkUEfAYE=\"},\"NEXT\":{\"nodeId\":\"f9aaf97f-ac08-4a2a-bb84-463d7e41165f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JBGwYsgD2Bvt5qQ0msk0MxSP9gkdELRx6ux5VwXe808=\"}},\"hash\":\"Am+W7K+Cm1pmo7+3VmSOcQnemlYWK2Y3lkLePEYhIH4=\",\"text\":\"167Using the Java Native Interface\\r\\n    private static native int poll(long handle, int precision);\\r\\n    private static native int close(long handle);\\r\\n}\\r\\nThere are several things to note in this code. The first is the use of the previously discussed System.loadLibrary method. It is called, as is \\r\\nfrequently the case, from a static initializer that will be invoked when the class is loaded. This \\r\\nis a common strategy because the library must be loaded before any of the methods in the class \\r\\ncan be used. There are other strategies, though. A system that requires several native libraries may load them \\r\\nall at once, perhaps using some kind of registration system, as part of startup. Another possibil-\\r\\nity, especially in systems that require additional initialization, is loading necessary native librar-\\r\\nies in an initialization method that client code must call explicitly before making any other use \\r\\nof the library. Note, also, that System.loadLibrary loads the library named in its actual parameter in \\r\\na system-dependent way. It modifies the name to conform to the platform library naming \\r\\nconventions and then attempts to load it from the library path. When run on a Linux OS, \\r\\nfor example, the code in Listing 9.9 will load the libacmeproximityjni.so library. On a \\r\\nWindows system, though, it would load the acmeproximityjni.dll library. The library path can be specified at JVM startup using the system parameter java.library. path or, on Android Linux, by setting the environment variable LD_LIBRARY_PATH. A second \\r\\nmethod, System.load, mentioned previously, will load a library from a specific file named in \\r\\nthe fully qualified path passed as its argument. Next, observe the use of the variable peer. In this code, the Java long variable peer contains \\r\\nthe native reference to the HAL object as described in the discussion of Listing 9.8. Unlike C, \\r\\nin which a reference can be made opaque by declaring it void*, making a reference opaque in \\r\\nJava is fairly difficult. Nonetheless, it is crucial that the contents of a variable used in this way \\r\\nbe treated as opaque. Any mutation of any kind by the Java code is almost certainly an error \\r\\nand probably a disastrous one. As usual, in situations like this, minimizing visibility and muta-\\r\\nbility is a useful strategy.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f9aaf97f-ac08-4a2a-bb84-463d7e41165f":{"__data__":"{\"id_\":\"f9aaf97f-ac08-4a2a-bb84-463d7e41165f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3LNEPqjiIp9XkIgOF2qg1/V1C+XTm4j+wGWOkUEfAYE=\"},\"PREVIOUS\":{\"nodeId\":\"60318c43-37b0-4480-a2b4-68f143b1e988\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Am+W7K+Cm1pmo7+3VmSOcQnemlYWK2Y3lkLePEYhIH4=\"}},\"hash\":\"JBGwYsgD2Bvt5qQ0msk0MxSP9gkdELRx6ux5VwXe808=\",\"text\":\"Together, Listings 9.8 and 9.9 illustrate the simplest form of a very common pattern. The \\r\\nresponsibility for managing the Java use of specialized hardware is handled through the coordi-\\r\\nnation of two objects, one Java and one native. The two objects are the two ends of a bridge—\\r\\none end in the native code and the other in the Java code—through which all interactions take \\r\\nplace. Client code instantiates the Java object and the Java object manages the native object, \\r\\nfrequently called a native peer, or a companion object. The Java code holds a reference to the \\r\\nnative object. The native code’s awareness of the Java code is kept minimal. 9780134096346_print.indb   16725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6ecd5469-f1c8-4334-96f6-826e7ad06683":{"__data__":"{\"id_\":\"6ecd5469-f1c8-4334-96f6-826e7ad06683\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"S9kGpu04dC+GPr8vPQqYcQisSxWfEsVPQeQNg4PdEVY=\"}},\"hash\":\"s6G6J5lHYkPAIiX8KXhpJCuFTn1Xeod42H/AxsPlxVI=\",\"text\":\"168Chapter 9  Getting to Java: The JNI\\r\\nThe Native Shim: Opaque Peer\\r\\nAnother example of this pattern attempts to enforce the opacity of the native reference in the \\r\\nJava variable by using reflection in the native code to set the value of the reference held in the \\r\\nJava variable. Listings 9.10 and 9.11 illustrate this technique. Listing 9.10 Opaque Peer: Native\\r\\nJNIEXPORT int\\r\\nJNICALL Java_com_acme_device_proximity_AcmeProximitySensor_open\\r\\n    (JNIEnv *env, jclass klass, jobject instance) {\\r\\n    if (hw_get_module(ACME_PROXIMITY_SENSOR_MODULE, &module))\\r\\n        return -1;\\r\\n    hw_device_t *device;\\r\\n    if (module->methods->open(module, nullptr, &device)))\\r\\n        return -2;\\r\\n    jfieldID peer = env->GetFieldID(klass, \\\"peer\\\", \\\"J\\\");\\r\\n    if (!peer)\\r\\n        return -3;\\r\\n    env->SetLongField(instance, peer, reinterpret_cast<jlong>(mem));\\r\\n    \\r\\n    return 0;\\r\\n}\\r\\nListing 9.11 Opaque Peer: Java\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    /... private long peer;\\r\\n    /... public void init() throws IOException {\\r\\n        synchronized (this) {\\r\\n            int status = open(this);\\r\\n            if (status != 0) {\\r\\n                throw new IOException(\\r\\n                    \\\"Failed to open proximity sensor: \\\" + status);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n9780134096346_print.indb   16825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d7b0c74b-0fb5-417b-9b72-5b1db2978f2e":{"__data__":"{\"id_\":\"d7b0c74b-0fb5-417b-9b72-5b1db2978f2e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nrDPqxMsXBp4QFKA+BnHG0S0Rj0MUc87LJe/iVHH818=\"},\"NEXT\":{\"nodeId\":\"1ca74c22-5cdc-4adb-a5f7-4b20e422fb14\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"F5RL7GQ2y4AeJUyfOttAr2Idb35gu37+mRZQKnKzZSw=\"}},\"hash\":\"nlOBYUMaKSgdu+k3CWh8sffB6Vc+maojTbyjGws0eGs=\",\"text\":\"169Using the Java Native Interface\\r\\n    /... private static native int open(AcmeProximitySensor instance);\\r\\n    \\r\\n    /... }\\r\\nTwo new JNI methods are used here without introduction: GetFieldID and SetLongField. Their names, though, are fairly self-explanatory (they return a reference to a Java field and \\r\\nassign the field value, respectively) so that the concept the listing introduces should be clear. The open method in Listing 9.11 could, as easily, be an instance method instead of a static \\r\\nmethod. In JNI, the difference between the implementations of a static and an instance method \\r\\nis the second argument to the method. The second argument to a static native function is \\r\\na reference to the class to which the function belongs. The second argument to an instance \\r\\nnative function is a reference to the instance to which the function belongs. Holding a refer-\\r\\nence to the instance means that the native code can access the instance’s fields, exactly as the \\r\\nexample code does. In this case, however, we also need a reference to the object’s class (for the call to GetFieldID). Because both are needed, using a static method (which provides the reference to the class \\r\\nobject) will work just as well. We pass the instance reference (this in the call to open, in  \\r\\nListing 9.11) explicitly. The native implementation then has both of the references that it needs. Although somewhat more complex, the strategy illustrated in Listings 9.10 and 9.11 has \\r\\nadvantages. In this implementation, any Java use of the variable peer is now clearly an error. Distinguishing between appropriate and inappropriate use of the stored pointer is not necessary: \\r\\nAny use is an error. Another advantage is that the open method’s return value is now, unambig-\\r\\nuously, a status code. No need exists to partition returns into legal values and illegal values. The Native Shim: Finalization\\r\\nReturning to Listing 9.9, one more issue is worthy of note: the management of the lifecycle of \\r\\nthe companion object. Although the garbage collector manages Java’s memory, native memory usually must be allo-\\r\\ncated and deallocated explicitly. An AcmeProximitySensor object allocates its companion in \\r\\nits “open” method. So how does it free it? There are several possible answers to that question.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1ca74c22-5cdc-4adb-a5f7-4b20e422fb14":{"__data__":"{\"id_\":\"1ca74c22-5cdc-4adb-a5f7-4b20e422fb14\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nrDPqxMsXBp4QFKA+BnHG0S0Rj0MUc87LJe/iVHH818=\"},\"PREVIOUS\":{\"nodeId\":\"d7b0c74b-0fb5-417b-9b72-5b1db2978f2e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nlOBYUMaKSgdu+k3CWh8sffB6Vc+maojTbyjGws0eGs=\"}},\"hash\":\"F5RL7GQ2y4AeJUyfOttAr2Idb35gu37+mRZQKnKzZSw=\",\"text\":\"So how does it free it? There are several possible answers to that question. The first and best is “explicitly. ” For reasons that will be discussed momentarily, the most effec-\\r\\ntive way to handle explicitly managed memory is explicitly. Ideally, an object with a native \\r\\npeer that must be freed explicitly would be marked somehow so that clients would know that \\r\\nthey should explicitly free it. That is exactly the purpose of Java’s Closeable interface. An object that implements \\r\\nCloseable is hinting to its user that it needs to be closed explicitly when the user is through \\r\\nwith it. The AcmeProximitySensor implements Closeable’s sub-interface AutoCloseable \\r\\nand uses it to free its companion. 9780134096346_print.indb   16925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"45a335cb-6157-45e2-9fa8-f11fa59a4674":{"__data__":"{\"id_\":\"45a335cb-6157-45e2-9fa8-f11fa59a4674\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cQhn8G7RHU/jXXbvOSUL5svGdEPeJSdsIUyIxbDhHTM=\"},\"NEXT\":{\"nodeId\":\"00d4bea5-e48a-4c92-8b96-e686edf9b207\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Gy9c1975qaNLlZE9bVnnOiWcupLr6k3JPcBHgXDq0RA=\"}},\"hash\":\"gWEBh5N89BKV4kUXyr69EIiIMvCSElgNMYBU5QoquIc=\",\"text\":\"170Chapter 9  Getting to Java: The JNI\\r\\nNote\\r\\nThe AutoCloseable interface, introduced in Java 7, extends Closeable: Prefer it, where \\r\\npossible. Most significantly, instances of a class that implements AutoCloseable can be \\r\\nused with the try-with-resources statement. They can also throw exceptions, other than an \\r\\nIOException, as appropriate to their specific failure modes. The contract for the AutoCloseable’s  close method is also different: idempotency is not a \\r\\nrequirement. Rather, developers are strongly encouraged to mark closed instances and to pre-\\r\\nvent their use after closing. A second strategy is a finalizer. A Java finalizer is a method with the specific signature, \\r\\nprotected void finalize() throws Throwable. If an object has a method with that signa-\\r\\nture, it is called by the Java runtime just before the garbage collector frees the object’s memory. This seems perfect: with one small method, when the AcmeProximitySensor goes away, so \\r\\ndoes its companion. Unfortunately, however, there’s no such thing as a free lunch. Finalizers are quite difficult to \\r\\nget right and, even when correct, have problems. Correctness first. There is no guarantee about the order in which objects are finalized after they become eligible \\r\\nfor garbage collection. The example code in Listing 9.12 has several problems, not the least of \\r\\nwhich is that it may get a NullPointerException in its finalizer. There is no guarantee that \\r\\nthe list referenced by objects has itself not already been finalized when the finalizer for an \\r\\ninstance of BrokenFinalizer is run. Its contents might well have been finalized first! Listing 9.12 Broken Finalizer: Don’t Do This! public class BrokenFinalizer implements Closeable {\\r\\n    @NonNull\\r\\n    private final List<NativeObject> objects\\r\\n    // ... @Override\\r\\n    protected void finalize() throws Throwable {\\r\\n        for (NativeObject obj: objects) { obj.close(); }\\r\\n    }\\r\\n}\\r\\nIn addition to being brittle and very difficult to code, finalizers have two other problems. The \\r\\nfirst is that they impose a considerable inefficiency on the garbage collector.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"00d4bea5-e48a-4c92-8b96-e686edf9b207":{"__data__":"{\"id_\":\"00d4bea5-e48a-4c92-8b96-e686edf9b207\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cQhn8G7RHU/jXXbvOSUL5svGdEPeJSdsIUyIxbDhHTM=\"},\"PREVIOUS\":{\"nodeId\":\"45a335cb-6157-45e2-9fa8-f11fa59a4674\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"gWEBh5N89BKV4kUXyr69EIiIMvCSElgNMYBU5QoquIc=\"}},\"hash\":\"Gy9c1975qaNLlZE9bVnnOiWcupLr6k3JPcBHgXDq0RA=\",\"text\":\"The \\r\\nfirst is that they impose a considerable inefficiency on the garbage collector. Because a final-\\r\\nizer can do all kinds of weird stuff (including “resurrect” the object being garbage collected by \\r\\nstoring a reference to it somewhere!), the garbage collector has to do checks that are not neces-\\r\\nsary for an object that does not have a finalizer. These checks slow the collector down, cause it \\r\\nto place a heavier burden on the application, and mean that the lag between last use and deal-\\r\\nlocation gets longer. 9780134096346_print.indb   17025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5505da06-2729-4367-ac40-738eb00fcf80":{"__data__":"{\"id_\":\"5505da06-2729-4367-ac40-738eb00fcf80\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"W27hI69JlQkbkfKgR9wC8d27XhrN125IYVbiLr63EmM=\"},\"NEXT\":{\"nodeId\":\"aef0e372-6e25-4565-9238-eeb36a1969af\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Ic2C61k23D/yKqFJmM/HcY69eYJiUZwM7Np3vD8M7Fc=\"}},\"hash\":\"tjXkpRaD0TME9PY3pGwZP/uDsrA5wS3rE1PZXn/U9qU=\",\"text\":\"171Using the Java Native Interface\\r\\nThe second problem, though, hinted at in the last sentence, is even worse. Although Java \\r\\npromises that it will run the garbage collector before it runs out of memory, there is no way \\r\\nto predict how long an object that is eligible for collection will sit around in memory before \\r\\nJava needs space and schedules it for collection. Furthermore, Java cannot guarantee that all \\r\\nfinalizers will be run before an application runs out of memory. Finalizers are run in a platform-\\r\\ndependent way: almost universally on a single Java thread. If an application allocates and then \\r\\nfrees a hundred large objects every second, each of those objects is scheduled for finalization, \\r\\nand each finalization takes a half a second to complete, the application is doomed. An applica-\\r\\ntion with native companion objects can build up a considerable backlog of dead objects before \\r\\na garbage collection takes place. Instead of being freed incrementally, all of those objects are \\r\\nput on the finalization queue suddenly and all at once. Despite these problems, finalizers can be a reasonable part of a “belt and suspenders” policy, \\r\\nas shown in Listing 9.9. An AcmeProximitySensor is Closeable: Client code is expected to \\r\\nexplicitly close each instance when it is done with it. If the client code fails to do so, however, \\r\\nthe finalizer will prevent a native memory leak. The Native Shim: Reference Queues\\r\\nThe last and most complex way of managing native object lifecycles are reference queues. In return for somewhat more complicated code, reference queues remove many of the prob-\\r\\nlems that finalizers have. They do not interfere with garbage collection, and they allow ordered \\r\\nfreeing of objects. As of Java 9, finalizers have officially been deprecated in favor of Cleaners. As part of Java 9, \\r\\nCleaners are not available in Android. There is good news, though: PhantomReferences and \\r\\nReferenceQueues, the technologies underlying Java 9’s Cleaner, are available in Android. The \\r\\nmessage to Android developers should be clear, even if Cleaners themselves are not available \\r\\nin the Android runtime environment. The combination of a reference queue and a phantom reference works like this:  The construc-\\r\\ntor for an instance of the PhantomReference class (or one of its subclasses) takes two argu-\\r\\nments: an object and a reference queue.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"aef0e372-6e25-4565-9238-eeb36a1969af":{"__data__":"{\"id_\":\"aef0e372-6e25-4565-9238-eeb36a1969af\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"W27hI69JlQkbkfKgR9wC8d27XhrN125IYVbiLr63EmM=\"},\"PREVIOUS\":{\"nodeId\":\"5505da06-2729-4367-ac40-738eb00fcf80\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"tjXkpRaD0TME9PY3pGwZP/uDsrA5wS3rE1PZXn/U9qU=\"}},\"hash\":\"Ic2C61k23D/yKqFJmM/HcY69eYJiUZwM7Np3vD8M7Fc=\",\"text\":\"When the object whose reference is the first parameter \\r\\nto the constructor becomes eligible for garbage collection, the phantom reference (itself) is \\r\\nenqueued on the reference queue that was the second parameter to the constructor. Calls to PhantomReference.get always return null: The referenced object itself is unreachable \\r\\nvia the phantom reference and the existence of the reference cannot affect its reachability. What the reference can do, though, is provide a way to remember that there is unfinished busi-\\r\\nness, when the object to which it is a reference no longer exists. The implementation of a reference queue solution is somewhat difficult. Let’s take \\r\\nit in four parts. First, Listing 9.13 is the machinery that manages the lifecycle of an \\r\\nAcmeProximitySensor object and its peer. 9780134096346_print.indb   17125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dec6f4a1-aea4-4886-b21f-a9340116eb9b":{"__data__":"{\"id_\":\"dec6f4a1-aea4-4886-b21f-a9340116eb9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"69I900LdE/4dU9aXE/vwGGYAkfid5yzxq44Ecsra/fg=\"}},\"hash\":\"mLAWgGb6L5sIljg414ptil6Tf4cV+odGWjkGaTGe+Zw=\",\"text\":\"172Chapter 9  Getting to Java: The JNI\\r\\nListing 9.13 Reference Queue: Native Companion and Its Lifecycle\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    // ... static final Map<AtomicLong, Reference<?>> CLEANERS = new HashMap<>();\\r\\n    static { System.loadLibrary(\\\"acmeproximityjni\\\"); }\\r\\n    // ... @NonNull\\r\\n    public static AcmeProximitySensor getSensor() {\\r\\n        synchronized (CLEANERS) {\\r\\n            final AtomicLong peerRef = new AtomicLong(open());\\r\\n            final AcmeProximitySensor sensor = new AcmeProximitySensor(peerRef);\\r\\n            CLEANERS.put(peerRef, new SensorCleaner(peerRef, sensor));\\r\\n            return sensor;\\r\\n        }\\r\\n    }\\r\\n    static void cleanup(AtomicLong peerRef) {\\r\\n        final long peer = peerRef.getAndSet(0);\\r\\n        if (peer == 0) { return; }\\r\\n        synchronized (CLEANERS) {\\r\\n            CLEANERS.remove(peerRef);\\r\\n            close(peer);\\r\\n        }\\r\\n    }\\r\\n    // ... @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native void close(long handle);\\r\\n    @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native long open();\\r\\n    @GuardedBy(\\\"CLEANERS\\\")\\r\\n    private static native int poll(long handle, int precision);\\r\\n}\\r\\nThe static method getSensor is the factory method for instances of the class \\r\\nAcmeProximitySensor. Client code will call this method instead of the class constructor to \\r\\ncreate new instances. The class constructor is private, ensuring that this is the only way to \\r\\ncreate new instances: All new instances come from this method. 9780134096346_print.indb   17225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"da6fd213-0164-4f27-89df-caf6f2d89d55":{"__data__":"{\"id_\":\"da6fd213-0164-4f27-89df-caf6f2d89d55\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rYGVsNoUaraB/XL+nMNRiqnj4pyAyd5lYKrKYHyUupo=\"},\"NEXT\":{\"nodeId\":\"2810d80b-4359-4921-a2e8-a3a9de4351d3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"h697iUsRPITZI5Cxna9cysgnSzOZ5VE38dp/sdupWdo=\"}},\"hash\":\"A58EckOJ+OpUgvmIClZpjGedQvtOhpWrsBZk6hvFvKY=\",\"text\":\"173Using the Java Native Interface\\r\\nThe method does four things:\\r\\n1. It creates the native companion object and stashes the reference to it in an AtomicLong. 2. It creates the Java instance, passing the peer reference. The Java object now has access to \\r\\nits native peer. 3. It creates a SensorCleaner. This is the object that will be responsible for cleaning up the \\r\\nnative peer if the user fails to do so. 4. It stores the SensorCleaner in a map. The last step is important and yet easy to forget. Like any other Java object, the \\r\\nSensorCleaner is eligible for garbage collection as soon as there are no more references to \\r\\nit. Unless something, somewhere, remembers it, it will be garbage collected and will not be \\r\\naround to clean up after the AcmeProximitySensor instance with which it is associated. The static method cleanup(AtomicLong) is the bottleneck at the end of the lifecycle of every \\r\\nAcmeProximitySensor instance. It simply undoes what the getSensor method did: It frees \\r\\nthe native companion object and removes the SensorCleaner from the map so that it can be \\r\\ngarbage collected. It also ensures that the native close method will not be called more than once. The \\r\\n getAndSet in its first line ensures that the rest of the method will be executed no more than \\r\\nonce for a given native peer, no matter how often it is called. The method is idempotent. These two methods are the bookends for the AcmeProximitySensor lifecycle. The \\r\\ngetSensor method is the only way to get one. All we have to do is make sure that the \\r\\ncleanup(AtomicLong) method is called at least once for every native companion. As mentioned earlier, the best way to do this is explicitly. Listing 9.14 shows the imple-\\r\\nmentation of the AcmeProximitySensor and, in particular, its implementation of the \\r\\nAutoCloseable interface. Listing 9.14 Reference Queue: Explicit Close\\r\\npublic class AcmeProximitySensor implements AutoCloseable {\\r\\n    // ...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2810d80b-4359-4921-a2e8-a3a9de4351d3":{"__data__":"{\"id_\":\"2810d80b-4359-4921-a2e8-a3a9de4351d3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"rYGVsNoUaraB/XL+nMNRiqnj4pyAyd5lYKrKYHyUupo=\"},\"PREVIOUS\":{\"nodeId\":\"da6fd213-0164-4f27-89df-caf6f2d89d55\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"A58EckOJ+OpUgvmIClZpjGedQvtOhpWrsBZk6hvFvKY=\"}},\"hash\":\"h697iUsRPITZI5Cxna9cysgnSzOZ5VE38dp/sdupWdo=\",\"text\":\"private final AtomicLong peerRef;\\r\\n    private AcmeProximitySensor(AtomicLong peerRef) { this.peerRef = peerRef; }\\r\\n    public int poll(int precision) throws IOException {\\r\\n        synchronized (CLEANERS) {\\r\\n            final long peer = peerRef.get();\\r\\n            if (peer == 0) { throw new IOException(\\\"Device not open\\\"); }\\r\\n            return poll(peer, precision);\\r\\n        }\\r\\n    }\\r\\n9780134096346_print.indb   17325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"104683a2-1e80-4ad7-ab2f-e6b9a6e04294":{"__data__":"{\"id_\":\"104683a2-1e80-4ad7-ab2f-e6b9a6e04294\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yHM604Yd6SsJ4HCvrZuEauIGFUzPN/mCS/PCcwURNCM=\"}},\"hash\":\"VD2cONwZE5GJsoBnSfhOvKTk5A/J2ioQkNlb3uU5E/s=\",\"text\":\"174Chapter 9  Getting to Java: The JNI\\r\\n    @Override\\r\\n    public void close() { cleanup(peerRef); }\\r\\n    // ... }\\r\\nThis code is similar to the equivalent code in Listing 9.9. The only significant difference, \\r\\nreally, is that it delegates the call to close, required by the AutoCloseable interface, to \\r\\ncleanup(AtomicLong). Well-behaved client code will fulfill the outstanding condition: at least \\r\\none call to cleanup(AtomicLong) via AcmeProximitySensor.close. What happens, though, when client code is not well behaved? Listing 9.15 shows the backstop. Listing 9.15 Reference Queue: Service Task\\r\\npublic class AcmeProximitySensor implements Closeable {\\r\\n    private static final class SensorCleaner\\r\\n        extends PhantomReference<AcmeProximitySensor> {\\r\\n        private final AtomicLong peerRef;\\r\\n        SensorCleaner(AtomicLong peerRef, AcmeProximitySensor sensor) {\\r\\n            super(sensor, REF_QUEUE);\\r\\n            this.peerRef = peerRef;\\r\\n        }\\r\\n        void cleanup() { AcmeProximitySensor.cleanup(peerRef); }\\r\\n    }\\r\\n    static final ReferenceQueue<AcmeProximitySensor> REF_QUEUE\\r\\n        = new ReferenceQueue<>();\\r\\n    @NonNull\\r\\n    public static ScheduledTask getScheduledTask() {\\r\\n        return new ScheduledTask(AcmeProximitySensor::cleanup, 100);\\r\\n    }\\r\\n    private static void cleanup() {\\r\\n        Reference<? extends AcmeProximitySensor> ref;\\r\\n        while ((ref = REF_QUEUE.poll()) instanceof SensorCleaner) {\\r\\n              ((SensorCleaner) ref).cleanup();\\r\\n        }\\r\\n    }\\r\\n    // ... }\\r\\n9780134096346_print.indb   17425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"db9b6242-711b-4310-afac-056dfc67a4ba":{"__data__":"{\"id_\":\"db9b6242-711b-4310-afac-056dfc67a4ba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3THZYfdzF4olOduWUCpKdauTg/kevZrIvrbpfTMdZZQ=\"},\"NEXT\":{\"nodeId\":\"2bee2348-1517-4ab9-82e9-e84598bf5163\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nzlcbkAhoyOqvwH+O+0BTbMzbh3NcRiHmNy35ruStH0=\"}},\"hash\":\"//ghT8ESoQYrQp0jVy6pwMDTw7B+xQq/WnigKazw5Rk=\",\"text\":\"175Using the Java Native Interface\\r\\nThe two functions in Listing 9.15, getScheduledTask and cleanup(), manage the native \\r\\ncompanions objects left behind by ill-behaved clients. They also illustrate the biggest downside \\r\\nof using reference queues: scheduling cleanup. Typically, finalizers are run on a special thread, maintained by the runtime, whose sole purpose \\r\\nis running finalizers. The finalizer thread receives notification for objects that need finalization \\r\\nand schedules their finalizer methods. When using reference queues, however, scheduling object cleanup is not handled by the \\r\\nruntime. The application must poll the reference queue occasionally and schedule any work \\r\\nthat it finds there. There are good and bad aspects of this requirement. The bad parts are probably obvious: An \\r\\napplication that uses reference queues must be able to schedule a job to service the reference \\r\\nqueue, and it must be able to schedule any work that the job finds on a robust execution \\r\\nservice. If the execution service fails for any reason, managed objects will no longer be freed \\r\\ncorrectly. That is likely to be disastrous. Note, by the way, that reference queues do not change the indeterminate scheduling of object \\r\\ncleanup. Objects are only enqueued for cleanup when the garbage collector needs space and \\r\\nonly processed when the application program gets around to scheduling a cleanup task. The good aspects may be a little less apparent. Consider: Finalizers are problematic because it is \\r\\npossible to overwhelm the finalizer thread. As noted previously, freeing hundreds of finalizable \\r\\nobjects quickly might very well add those objects to the finalizer’s queue faster than it can take \\r\\nthem off for processing. Because the finalizer’s queue is difficult to access programmatically, \\r\\nlittle opportunity exists for an application to gauge whether or not its doom is impending. Using a reference queue, however, the application controls the cleanup mechanism; it can scale \\r\\nthe object recovery process to the need. A multi-threaded, high-priority execution service might \\r\\nbe able to stay ahead of object allocation. Better yet, though, suppose that the same thread processes both the application-specific tasks \\r\\nthat cause memory allocation and the reference queue that cleans them up. If the thread is \\r\\nbusy managing the reference queue, it cannot allocate new objects. Allocation is naturally \\r\\nlimited to creating no more than it can free. Governing the object allocation rate in this way \\r\\nmakes for extremely robust apps.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2bee2348-1517-4ab9-82e9-e84598bf5163":{"__data__":"{\"id_\":\"2bee2348-1517-4ab9-82e9-e84598bf5163\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3THZYfdzF4olOduWUCpKdauTg/kevZrIvrbpfTMdZZQ=\"},\"PREVIOUS\":{\"nodeId\":\"db9b6242-711b-4310-afac-056dfc67a4ba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"//ghT8ESoQYrQp0jVy6pwMDTw7B+xQq/WnigKazw5Rk=\"}},\"hash\":\"nzlcbkAhoyOqvwH+O+0BTbMzbh3NcRiHmNy35ruStH0=\",\"text\":\"Governing the object allocation rate in this way \\r\\nmakes for extremely robust apps. Listing 9.15 posits a scheduling mechanism elsewhere in the system that registers new periodic \\r\\ntasks by calling a class’s getScheduledTask method. The method returns the task to be run \\r\\nand the interval (in milliseconds) between runs. Surely, many other ways exist for accomplish-\\r\\ning something similar: This particular implementation simply illustrates that the method \\r\\ncleanup() must be called periodically. The cleanup() method polls the reference queue and calls the cleanup(AtomicLong) for each \\r\\ninstance of the SensorCleaner object (whose associated AcmeProximitySensor has now been \\r\\ngarbage collected) that it finds there. Recall from Listing 9.13 that each AcmeProximitySensor \\r\\nhad a SensorCleaner associated with it in the factory method getSensor. This is the \\r\\n9780134096346_print.indb   17525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f7ee7519-6f46-435d-b346-d2a97e4dbe89":{"__data__":"{\"id_\":\"f7ee7519-6f46-435d-b346-d2a97e4dbe89\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wP7jAMhyED3zI+7CxPhl7j2sT4gzRePGpHFQ9RJTgkw=\"},\"NEXT\":{\"nodeId\":\"f7f7a2d6-1f05-4b22-ad42-b906a1dd246c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dOmx6F3lSYw6hBBwc3A/WX7A5yglYcAdYhyWzLyZ184=\"}},\"hash\":\"ep84u2Sdoh6+q/Hk3ciBWrgQrWMnK656yXqxvICGc5I=\",\"text\":\"176Chapter 9  Getting to Java: The JNI\\r\\nguarantee that, even if client code fails to close the sensor object, the cleanup(AtomicLong) \\r\\nwill be called to free the native companion object. There are a couple subtleties to be aware of. First, note that it is important that there are \\r\\nseveral references to the AtomicLong that contain the handle to the native peer. If the \\r\\nAcmeProximitySensor held the only reference, then when it became unreachable, the \\r\\nAtomicLong might be freed even before the sensor object itself. The SensorCleaner cannot \\r\\ndepend on being able to find the native object unless it itself keeps a reference. Second, notice that when a well-behaved client explicitly closes a sensor object, its \\r\\nSensorCleaner is removed from the map! That means the cleaner object is now unreachable \\r\\nand that the AcmeProximitySensor object holds the only reachable reference to the peer \\r\\nhandle. It is entirely possible that the cleaner will be garbage collected first; thus, it will never \\r\\nbe queued or scheduled. That’s perfectly okay because there’s nothing left for it to do. Because the AtomicLong that is the reference to the native peer is in the map, a \\r\\nSensorCleaner is guaranteed that it will have access to it when the cleaner runs and that \\r\\neither it is the first attempt to free the native companion or that it will not try to do so. JNI: Some Hints\\r\\nAs discussed earlier, entire books exist on the subject of writing JNI code. A comprehensive \\r\\ndiscussion is well outside the scope of this one. However, in our experience, some practices can \\r\\nmake your code more robust and easier to maintain. Here are a few of them. Don’t Break the Rules\\r\\nIt is entirely possible to break Java’s rules using native code. For instance, using native code, it \\r\\nis relatively easy to change the content of String or, indeed, any immutable object. Although \\r\\nJNI methods make some attempt to enforce visibility (public versus private) and mutability \\r\\n(final) constraints, sidestepping nearly any of them is quite possible. Java developers are used \\r\\nto being able to make assumptions about the environment in which their code runs. Changing \\r\\nthe rules is asking for trouble. Clearly and Without Exception, Document Native References to Java Code\\r\\nAlways and without exception, document any native use of Java code.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f7f7a2d6-1f05-4b22-ad42-b906a1dd246c":{"__data__":"{\"id_\":\"f7f7a2d6-1f05-4b22-ad42-b906a1dd246c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"wP7jAMhyED3zI+7CxPhl7j2sT4gzRePGpHFQ9RJTgkw=\"},\"PREVIOUS\":{\"nodeId\":\"f7ee7519-6f46-435d-b346-d2a97e4dbe89\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ep84u2Sdoh6+q/Hk3ciBWrgQrWMnK656yXqxvICGc5I=\"}},\"hash\":\"dOmx6F3lSYw6hBBwc3A/WX7A5yglYcAdYhyWzLyZ184=\",\"text\":\"If a native method refers \\r\\nto a class member by name, document that reference in a comment on the field. If native code \\r\\ncalls a Java method, be certain that the Java method has a comment that indicates the fact. The \\r\\nsame goes for native code that creates new instances of some Java class or other. As a related \\r\\nsuggestion, be sure that any code that looks up Java identifiers—fields, classes, or methods—\\r\\nfails immediately and clearly if it cannot find its target. Failure to do these things will lead to \\r\\nbizarre crashes when some well-meaning developer does some small refactor. 9780134096346_print.indb   17625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f772b783-95f0-4961-9ca2-6e6e96b37544":{"__data__":"{\"id_\":\"f772b783-95f0-4961-9ca2-6e6e96b37544\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Wf4WxFbwC+Z1jpwjVQp1abFfM1U3wtzoxVthO/DL52U=\"},\"NEXT\":{\"nodeId\":\"9b28fa33-65f8-4b1b-b6a4-7ffe08db6654\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jkHi29/Q5fgamcf3drmHrtPeZWOHnjFIP6M4L4AFbqo=\"}},\"hash\":\"Cs4DNfR40JKAclrIPT4PdF6Daag3Xe7SItLxId19U1k=\",\"text\":\"177Using the Java Native Interface\\r\\nPass Simple Types to Native Code\\r\\nThe rest of the hints in this chapter have a single theme: When possible, don’t put the burden \\r\\nof dealing with Java constructs on native code. Whenever possible, Java code should deal with \\r\\nJava data structures and should communicate with native code using only primitive types, \\r\\nStrings and arrays of those types. This may mean violating other general rules. For instance, \\r\\npassing the information in a complex data structure to its native companion as primitive types \\r\\nmay mean that the native method has an uncomfortably large number of arguments. That is \\r\\nthe lesser evil. Somewhere, code will have to extract the information. Keep that code on the \\r\\nJava side. Make Native Methods Static, When Convenient\\r\\nThis tip is more a corollary to the previous hint than a new suggestion. Native instance \\r\\nmethods are passed references to the calling Java instance. Cases surely exist in which that may \\r\\nbe useful. In general, though, avoiding it is best. Pass the data that the native method requires \\r\\nand pass it to a static method instead of passing the whole object to an instance method. Beware the Garbage Collector\\r\\nThis is probably the most important and most easily forgotten of the hints. Remember that \\r\\nas your native code runs, the garbage collector daemon is also running. It may move data to \\r\\nwhich you have a native pointer. Worse yet, it might deallocate it. To keep the garbage collector from freeing an object, the object must appear to the collec-\\r\\ntor as “reachable”:  There must be some way that running Java code can obtain a reference \\r\\nto it. Consider, however, a Java object that is created by native code. There are no references \\r\\nanywhere in the Java environment to this new object. Because there are no references, it is \\r\\neligible for immediate garbage collection! The JNI provides two solutions to this problem: the \\r\\nLocalRef and the GlobalRef. A LocalRef behaves as if a reference to an object had been put into the call stack of the nearest \\r\\n(in the stack) calling Java method. It creates a reference to the object that is visible to the \\r\\ngarbage collector, making it reachable and thus ineligible for deallocation. Many JNI methods that return references to Java objects also create a LocalRef to the returned \\r\\nobject (be sure to verify this for specific calls).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9b28fa33-65f8-4b1b-b6a4-7ffe08db6654":{"__data__":"{\"id_\":\"9b28fa33-65f8-4b1b-b6a4-7ffe08db6654\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Wf4WxFbwC+Z1jpwjVQp1abFfM1U3wtzoxVthO/DL52U=\"},\"PREVIOUS\":{\"nodeId\":\"f772b783-95f0-4961-9ca2-6e6e96b37544\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Cs4DNfR40JKAclrIPT4PdF6Daag3Xe7SItLxId19U1k=\"}},\"hash\":\"jkHi29/Q5fgamcf3drmHrtPeZWOHnjFIP6M4L4AFbqo=\",\"text\":\"In general, if there is the potential for an object \\r\\nto disappear while native code is using it, a JNI call that returns a reference will create a \\r\\nLocalRef for it. Parameters to JNI method calls have LocalRefs as well. There is no danger \\r\\nthat an object passed to a native method through the JNI will suddenly vanish. LocalRefs are managed. They are automatically deleted (popped off the stack) when a native \\r\\nmethod returns to its Java language caller. Unfortunately, however, implementations of the \\r\\nJNI support only a limited number of LocalRefs: typically a few hundred but perhaps only a \\r\\nhandful. As a rule of thumb, immediately deleting a LocalRef when it is no longer needed is \\r\\nbest practice. In fact, several circumstances exist under which deleting them explicitly is absolutely essential. Consider the example in Listing 9.16: native code that creates new objects of some kind and \\r\\nthen adds them to a Java array. 9780134096346_print.indb   17725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a15aa0c3-c3aa-44d9-98e2-f9d7e77e7d08":{"__data__":"{\"id_\":\"a15aa0c3-c3aa-44d9-98e2-f9d7e77e7d08\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AuPAxvGEB3wvVNc/3ZWpzKYz82TBgwe3bUqK/GVLkzo=\"},\"NEXT\":{\"nodeId\":\"d1d80bd8-80fe-4d1f-a7b6-c7df284c0b09\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3NJw3FP2VuxmwCeNFY4EukseiStm5q6Ybv2qwxcPMo8=\"}},\"hash\":\"1Y5if6GUM46joCwBdLg3NpqZFZ+hvfnjx0LBXhdMXK0=\",\"text\":\"178Chapter 9  Getting to Java: The JNI\\r\\nListing 9.16 Filling an Array\\r\\njobjectArray ds = env->NewObjectArray(arraySize, klass_MyObject, nullptr);\\r\\nfor (int i = 0; i < arraySize; i++) {\\r\\n    jobject d = createNewObject(env, array[i]);\\r\\n    env->SetObjectArrayElement(ds, i, d);\\r\\n    env->DeleteLocalRef(d);\\r\\n }\\r\\nThe JNI creates a LocalRef for the array created in the first line of the code. It also creates \\r\\na LocalRef for each new object to be inserted into the array. After a new object is inserted \\r\\ninto the array, it is reachable via the array. The individual LocalRefs for the new objects can \\r\\n(and should) be deleted. If the array is large, it is entirely possible that failing to delete the \\r\\nLocalRefs will exhaust the local ref pool. Another, somewhat trickier condition is one in which the calling code never returns to a Java \\r\\nmethod. This can happen when a native thread, for instance, calls into Java code. Imagine, for \\r\\nexample, a native thread—perhaps a thread servicing network connections—that uses a Java \\r\\nlogger. The native code might create a Java String, log it, and then go back about its business. The LocalRef to the String will never be released because the calling code never returns to a \\r\\nJava caller. The second kind of reference in the JNI toolbox is a GlobalRef. GlobalRefs are the way that \\r\\nnative code holds a reference to a Java object across call boundaries. A GlobalRef behaves as if \\r\\na reference to the object to which it refers had been added to a permanent static array. The ref \\r\\nprevents the garbage collector from recovering the referenced object’s memory until the refer-\\r\\nence is deleted explicitly. Native developers, who are used to explicit memory management, \\r\\nwill find this completely normal. A common example of the need of a GlobalRef is native creation of a Java object, as shown in \\r\\nListing 9.17.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d1d80bd8-80fe-4d1f-a7b6-c7df284c0b09":{"__data__":"{\"id_\":\"d1d80bd8-80fe-4d1f-a7b6-c7df284c0b09\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AuPAxvGEB3wvVNc/3ZWpzKYz82TBgwe3bUqK/GVLkzo=\"},\"PREVIOUS\":{\"nodeId\":\"a15aa0c3-c3aa-44d9-98e2-f9d7e77e7d08\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1Y5if6GUM46joCwBdLg3NpqZFZ+hvfnjx0LBXhdMXK0=\"}},\"hash\":\"3NJw3FP2VuxmwCeNFY4EukseiStm5q6Ybv2qwxcPMo8=\",\"text\":\"Listing 9.17 Native Object Creation\\r\\njclass klass_MyObject = env->FindClass(“my/project/MyObject”);\\r\\nif (!localClass)\\r\\n    return nullptr;\\r\\nmethod_MyObject_ctor = env->GetMethodID(\\r\\n    klass_MyObject,\\r\\n    “<init>”,\\r\\n    “(I)V”);\\r\\nif (!method_MyObject_ctor)\\r\\n    return nullptr;\\r\\nreturn env->NewObject(klass_MyObject, method_MyObject_ctor, (jint) param1);\\r\\n9780134096346_print.indb   17825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b36c200c-3f93-43ed-b95a-3ca8eff37fcd":{"__data__":"{\"id_\":\"b36c200c-3f93-43ed-b95a-3ca8eff37fcd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ewIxpuQyFc0G+I5Tmc7I/ius/UFk70whLserWx7oSBw=\"},\"NEXT\":{\"nodeId\":\"d92626cb-eec7-43f0-b8b3-361c487b538d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"lxBlOKCmshVBxKrvLp/jXkDsBum/dOKQYdJ5Bh2nW2g=\"}},\"hash\":\"NEliUiaLnheWE3sPAOlV0OgrqlytlvAEn0Ywi01UxCk=\",\"text\":\"179Using the Java Native Interface\\r\\nIf this call is used frequently, optimizing it might be possible. Both klass_MyObject and \\r\\nmethod_MyObject_ctor are references to Java objects: the class named “MyObject” and a \\r\\nconstructor in that class with a single integer parameter, respectively. Using JNI methods to \\r\\nlook up those references for every call to this code will take a substantial proportion of its \\r\\nexecution time. To optimize it, an initialization method might be to look up the two references \\r\\nonce and then hold them. Such an optimization requires a GlobalRef for each. Use GlobalRefs with care. Although the limit on the number available (typically 65535) is \\r\\nusually much larger than the limit on the number of LocalRefs, they are memory leaks. Treat \\r\\nthem as you would any other unmanaged memory. Note that neither a LocalRef nor GlobalRef affects the garbage collector’s ability to move an \\r\\nobject in memory. Although such movement is completely invisible from Java code, a native \\r\\nreference can become a pointer to garbage, quite literally, in the middle of a line of code. This is not a tolerable situation and JNI calls have two strategies for handling it: copying and \\r\\npinning. When using JNI methods that allow access the contents of a Java object—as with \\r\\nmethods that created implicit LocalRefs—be sure to verify which of these two strategies a \\r\\nspecific call uses. Copying is just what it sounds like: An atomic JNI call copies the contents of a Java object into \\r\\nnative-managed memory. The native code is free to do anything it likes with the copy, includ-\\r\\ning, at some point, atomically copying it back into the Java object. When an object is pinned, on the other hand, the garbage collector is not allowed to move \\r\\nit. Native code can access the contents of the pinned object directly, perhaps without the \\r\\noverhead of the copy. Pinning an object, however, means that memory in the Java heap is no \\r\\nlonger under the control of the garbage collector. This can easily lead to fragmentation and \\r\\npremature out-of-memory errors. Best practice is to pin objects only if necessary, and then for \\r\\nas short a time as possible.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d92626cb-eec7-43f0-b8b3-361c487b538d":{"__data__":"{\"id_\":\"d92626cb-eec7-43f0-b8b3-361c487b538d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"ewIxpuQyFc0G+I5Tmc7I/ius/UFk70whLserWx7oSBw=\"},\"PREVIOUS\":{\"nodeId\":\"b36c200c-3f93-43ed-b95a-3ca8eff37fcd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NEliUiaLnheWE3sPAOlV0OgrqlytlvAEn0Ywi01UxCk=\"}},\"hash\":\"lxBlOKCmshVBxKrvLp/jXkDsBum/dOKQYdJ5Bh2nW2g=\",\"text\":\"Use Weak Refs When Native Code Must Hold a Reference to a Java Object\\r\\nA significant portion of this chapter is devoted to the discussion of how a Java object can hold \\r\\na reference to a native companion object. What happens, though, when a native object needs \\r\\nto be able to find a particular Java object? Consider, for instance, a native network management library. Suppose that client code creates a \\r\\nnew Java Connection object for each of several network connections. The Connection object \\r\\nin turn creates a native companion object that actually handles socket connections. Finally, \\r\\nsuppose that the native object calls back into Java code for each of the various events in the \\r\\nconnection lifecycle. Clearly, the callbacks from the native companion object must be calls to the specific Java \\r\\nConnection instance that created it and not to any other instance. The native code must, \\r\\ntherefore, hold a reference to its Java companion. 9780134096346_print.indb   17925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"514ea394-b563-4da4-b7da-5167e0014c13":{"__data__":"{\"id_\":\"514ea394-b563-4da4-b7da-5167e0014c13\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1atcUvo6UpuCbEIeL5xnGB515ltXycr7r7HBTxU5OGY=\"},\"NEXT\":{\"nodeId\":\"b7b42ce6-27dc-435e-b82c-9ebed0001cbf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hoVLFLDWdz6FKj2BHafml3hoCAck9qsSpWwcLdBHlDw=\"}},\"hash\":\"k2asBx4SkMJdq47RBIjSmteyE99IdqTynlJ10ZB9cn8=\",\"text\":\"180Chapter 9  Getting to Java: The JNI\\r\\nThis is, certainly, possible. As we’ve just seen, the native companion object might hold a \\r\\nGlobalRef to its Java companion: the Java code now has a reference to the native object and \\r\\nthe native object has a reference to the Java object. The problem with this, of course, is that a GlobalRef to the Java object will make it ineligible \\r\\nfor garbage collection. Unless there is some explicit means of freeing it (and that explicit mech-\\r\\nanism is carefully used for every instance), its referent will never be freed, will never be finalized \\r\\n(or added to a reference queue), and will never free its native companion. The belt still works \\r\\nbut the suspenders are gone. Unless a clear architectural reason exists for doing the aforemen-\\r\\ntioned, a good practice is to leave the management of native objects to their Java companions, \\r\\nnot vice versa. There are two ways around this issue. The first is a special global reference, a WeakGlobalRef. A WeakGlobalRef is similar to a GlobalRef, except that (like a Java WeakReference) it does \\r\\nnot prevent the garbage collection of the Java object to which it refers. It is different from a raw \\r\\nnative reference in that it will never point at garbage: It will always either point at the intended \\r\\nobject or be null. It is important to note that the referent in a WeakGlobalRef can disappear at any time, even \\r\\nbetween two native instructions, causing intermittent failures. Listing 9.18 illustrates such a \\r\\nscenario: a snippet in which a native instance stores a reference to its Java companion. Listing 9.18 Incorrect Use of a WeakRef: Don’t Do This! mCompanion = reinterpret_cast<jobject>(env->NewWeakGlobalRef(javaObj));\\r\\nif (env->isSameObject(mCompanion, NULL) \\r\\n    return;\\r\\njclass klass = env->getObjectClass(mCompanion) // mCompanion may be NULL! // ... Fortunately, a WeakGlobalRef can be used as the argument to LocalRef (or a GlobalRef). Local and global refs protect their referents from garbage collection. Listing 9.19 illustrates a \\r\\ncorrected version of Listing 9.18.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b7b42ce6-27dc-435e-b82c-9ebed0001cbf":{"__data__":"{\"id_\":\"b7b42ce6-27dc-435e-b82c-9ebed0001cbf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1atcUvo6UpuCbEIeL5xnGB515ltXycr7r7HBTxU5OGY=\"},\"PREVIOUS\":{\"nodeId\":\"514ea394-b563-4da4-b7da-5167e0014c13\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"k2asBx4SkMJdq47RBIjSmteyE99IdqTynlJ10ZB9cn8=\"}},\"hash\":\"hoVLFLDWdz6FKj2BHafml3hoCAck9qsSpWwcLdBHlDw=\",\"text\":\"Listing 9.19 illustrates a \\r\\ncorrected version of Listing 9.18. Listing 9.19 Obtain a LocalRef from a WeakGlobalRef\\r\\nmCompanion = reinterpret_cast<jobject>(env->NewWeakGlobalRef(javaObj));\\r\\ncompanion = reinterpret_cast<jobject>(env->NewLocalRef(mCompanion));\\r\\nif (env->isSameObject(companion, NULL) \\r\\n    return;\\r\\njclass klass = env->getObjectClass(companion) // safe! // ... There is one other way of managing native handles in Java objects. In this architecture, refer-\\r\\nences to Java objects are never passed to native code at all. Instead, they are kept as weak refer-\\r\\nences in a map at the Java/native boundary. Think of it as a “hat check”: Java hands native \\r\\n9780134096346_print.indb   18025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c0b1261-78f4-48e0-96fe-fe52b4516950":{"__data__":"{\"id_\":\"2c0b1261-78f4-48e0-96fe-fe52b4516950\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dYxJvja5mzM/J1Xi/W0l3/N0G60n88DWAZdhYb/elr0=\"}},\"hash\":\"efn1tx9wcthiMCQiHGaHgRkzfuvbiVvYkrHvhsBpHK0=\",\"text\":\"181Using the Java Native Interface\\r\\ncode a token, which can be redeemed for a Java object. The token, however, is completely \\r\\nopaque to the native code. Listing 9.20 shows a sample implementation. Listing 9.20 Native Reference “Hat Check”\\r\\npublic class NativeRef<T> {\\r\\n    @NonNull\\r\\n    @GuardedBy(\\\"this\\\")\\r\\n    private final Random rnd = new Random();\\r\\n    @NonNull\\r\\n    @GuardedBy(\\\"this\\\")\\r\\n    private final Map<Integer, WeakReference<T>> refs = new HashMap<>();\\r\\n    public synchronized int bind(@NonNull T obj) {\\r\\n        int ref;\\r\\n        do { ref = rnd.nextInt(Integer.MAX_VALUE); }\\r\\n        while (refs.containsKey(ref));\\r\\n        refs.put(ref, new WeakReference<>(obj));\\r\\n        return ref;\\r\\n    }\\r\\n    public synchronized void unbind(int key) { refs.remove(key); }\\r\\n    @Nullable\\r\\n    public synchronized T getObjFromContext(long lref) {\\r\\n        if ((lref < 0) || (lref > Integer.MAX_VALUE)) {\\r\\n            throw new IllegalArgumentException(\\\"Ref out of bounds: \\\" + lref);\\r\\n        }\\r\\n        final Integer key = (int) lref;\\r\\n        final WeakReference<T> ref = refs.get(key);\\r\\n        if (ref == null) { return null; }\\r\\n        final T obj = ref.get();\\r\\n        if (obj == null) { refs.remove(key); }\\r\\n        return obj;\\r\\n    }\\r\\n}\\r\\nThis architecture has many of the same features that made WeakGlobalReferences attrac-\\r\\ntive. Because the reference map holds weak references, native objects cannot force their Java \\r\\ncompanions to stay in memory. Perhaps an advantage, this architecture does not use the size-\\r\\nlimited LocalRef pool. 9780134096346_print.indb   18125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7c36a6da-8e6a-43a6-b599-c233615141ba":{"__data__":"{\"id_\":\"7c36a6da-8e6a-43a6-b599-c233615141ba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"4sGqwp98kn58/t6sWwEqx0XmMEDO71GpSUhzuaUKB2c=\"}},\"hash\":\"tjXZq7x9wXmFLRaJNRVnewJnWnPmZJ2fRiGrcJLZkT4=\",\"text\":\"182Chapter 9  Getting to Java: The JNI\\r\\nNote that the implementation uses only positive integers for tokens. For most applications, this \\r\\nprovides plenty of space and avoids problems that arise from sign extension. Summary\\r\\nThis chapter, at last, brings us to Android’s implementation language, Java. In it, we meet and \\r\\nuse Java’s JNI, the API through which Java language code invokes native code. The chapter uses the Proximity Sensor project introduced in previous chapters to show three \\r\\ndifferent implementations of a long-running daemon that logs proximity:\\r\\n1. A naïve native implementation\\r\\n2. A native implementation using the HAL (introduced in Chapter 7)\\r\\n3. A Java app, also using the HAL\\r\\nThe third implementation, the Java application, provides the basis for a discussion of one of \\r\\nthe key issues for code at the Java/native interface: lifecycle management and how to handle \\r\\nunmanaged native memory in Java’s garbage-collected environment. We recommend a “belt and suspenders” approach: Java objects with native companions should \\r\\nimplement Java’s Autoclosable interface. This makes it clear that client code should explicitly \\r\\ninform the object that it is ready for disposal. In addition, we recommend the use of a finalizer or reference queue to guarantee the proper \\r\\nhandling of objects that evade explicit release. 9780134096346_print.indb   18225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c9a0495e-03c2-45dc-b249-a8ff5c2edb42":{"__data__":"{\"id_\":\"c9a0495e-03c2-45dc-b249-a8ff5c2edb42\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"MHYgzzESCEl6dGt0WwtF04qGE0x39WRApUwzmiKYkAw=\"}},\"hash\":\"otykmWG+n9cPC+Khje9q8GFvKTvdyWJRK2LQI8LeSUk=\",\"text\":\"10\\r\\nProject Treble:  \\r\\nBinderized HAL\\r\\nThe Android system and its use of the HAL received a major overhaul starting with Android 8.0. Internally, this was called Project Treble and its goal was not only to provide a standard abstrac-\\r\\ntion to the underlying hardware, but to do it in a way that allowed vendors to upgrade the core \\r\\nOS without requiring a rebuild of HAL libraries and the system image. This means Google can \\r\\nroll out OS updates without requiring modifications to the vendor proprietary components. Binderized HALs must be used for Android 8.0 and newer. This new, extremely flexible, and \\r\\nforward-looking approach to the HAL requires some knowledge of Android’s Binder subsystem. The platform vendor–supplied HAL is no longer a set of shared libraries following a specific \\r\\nnaming convention and binary API. Instead, the vendor exposes a set of binder interfaces to \\r\\nthe system and one or more backing services that host the HAL implementation. The HAL \\r\\ninterfaces are defined using HIDL (pronounced “hide-l”), a language similar to the AIDL, used \\r\\nto define binder service interfaces. This chapter explores the architecture of the binderized HAL and examines how Android uses \\r\\nit. We’ll dig into an existing binderized HAL definition from the platform and explain how the \\r\\npieces fit together. Note\\r\\nUnless otherwise noted, the remainder of this chapter uses HIDL when referring to the \\r\\n binderized HAL architecture, not just the interface definition language. HIDL Architecture\\r\\nThe HIDL-based system is built upon the same concepts as Android’s system services model. Each HAL implementation is backed by a service, running in user-space, that exposes a HIDL-\\r\\ndefined interface. The HIDL services, usually native processes, are started at system startup and \\r\\nregister with the system. Each HIDL interface is versioned so the system understands what is \\r\\navailable at runtime. This allows the platform to support one or more interface versions for a \\r\\n9780134096346_print.indb   18325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"166119bb-1890-490e-b2c0-a9596bdbe07c":{"__data__":"{\"id_\":\"166119bb-1890-490e-b2c0-a9596bdbe07c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"z7yfm/K8nesjepl6/Xa+YxCfXT/QhuIT6tupHPYyGvQ=\"}},\"hash\":\"kRX8XrrZQzYncwXwjOr0HKg2z1Lrn7B6VvKhrDyA5QU=\",\"text\":\"184Chapter 10  Project Treble: Binderized HAL \\r\\nspecific hardware component, which is important for devices being upgraded to new versions \\r\\nof the OS. The key feature of this architecture is that the vendor-provided HIDL components are sepa-\\r\\nrated from the core Android system, allowing the core OS to be updated without requiring the \\r\\nvendor to provide new custom libraries. The end result is a robust system that allows vendors \\r\\nto adopt new releases of Android for existing hardware with minimal friction. Just like the Android system service architecture, the HIDL framework includes a hardware \\r\\nservice manager, appropriately named hwservicemanager. This system daemon acts as the \\r\\nregistrar of all HIDL-based HALs in the system. It can be thought of as the name server for \\r\\nHIDL-defined interfaces in the system. Each HIDL component initializes and registers its \\r\\nBinder-based interface(s) with hwservicemanager, making them available to other compo-\\r\\nnents in the system. Other processes in the system find the HIDL binders by making requests to \\r\\nhwservicemanager for a specific HIDL. Figure 10.1 shows the overall architecture. hwservicemanagerandroid.hardware.bluetooth@1.0-serviceandroid.hardware.bluetooth@\\r\\n1.0.so\\r\\nUser space\\r\\nKernel space\\r\\nJNI\\r\\nJava/Kotlin Code\\r\\nBluetooth DriverBinder Driver\\r\\n3\\r\\n4\\r\\n1\\r\\n2\\r\\n5\\r\\nFigure 10.1 HIDL High-Level Architecture\\r\\nIn Figure 10.1, the numbered components are defined as follows:\\r\\n(1) hwservicemanager, the central registrar of HIDL services in the system\\r\\n(2) The Linux kernel with the Android Binder IPC driver and other hardware drivers within it\\r\\n(3) The HIDL services in the system, providing the HAL implementation(s) for their \\r\\nrespective hardware components\\r\\n9780134096346_print.indb   18425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ad9ff015-bf6a-4f8e-b864-0a3ea3f21b7d":{"__data__":"{\"id_\":\"ad9ff015-bf6a-4f8e-b864-0a3ea3f21b7d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dIQc2iIWpNXj9PWnTcssheHjlUuPAoD4wNZFUa62qpg=\"},\"NEXT\":{\"nodeId\":\"2c0deab9-40df-4eb9-b0c0-7574f53436f6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XrhQsnmoRZ5DGLOf+xd3NMcpSbG3XElZUPw/t+NeF8A=\"}},\"hash\":\"42MIvMWVDckxd4RR/gJWAUrlk2u39aNa6qtSGQiP8gM=\",\"text\":\"185HIDL Architecture\\r\\n(4) The client application process that utilizes the Binder-exposed HIDL services\\r\\n(5) The binder that connects the client and backing HIDL service processes\\r\\nAlthough Android 8.0 and newer requires the use of HIDL, a small handful of exceptions exist: \\r\\nsome HALs are provided in what is called “passthrough” mode or are specialized same-process \\r\\nHALs (SP-HALs). The passthrough HALs are effectively HIDL wrappers around legacy or conven-\\r\\ntional HAL libraries that allow those libraries to be used in the same process. Other SP-HALs \\r\\nmay not even expose HIDL-defined interfaces. Note\\r\\nGoogle strictly controls which HALs are SP-HALs, and there are no exceptions for new devices \\r\\nrolling out Android 8.0 or newer. This includes vendor extension HALs. Devices that are upgrades \\r\\nto Android 8.0 are given some leniency with vendor extensions. Otherwise, all other Android-\\r\\ndefined binderized HALs must be binderized for Android 8 or newer running on the platform. You can find more details about the HIDL architecture at https://source.android.com/devices/\\r\\narchitecture/hidl. hwservicemanager\\r\\nAs previously stated, hwservicemanager is a central component of the HIDL architecture. Similar to the system services Binder subsystem’s registrar, servicemanager, this compo-\\r\\nnent keeps a registry of active HIDL components in the system by HIDL interface, version, \\r\\nan optional name, and the backing binder interface/object exposed by the component. This \\r\\nbinder object can then be found and requested by clients for making IPC calls into the HIDL \\r\\ncomponent. hwservicemanager leverages SE policies and the SE Linux kernel to ensure only components in \\r\\nthe system that are assigned the proper SE context can register as a HIDL-defined HAL or ask to \\r\\nuse one. HIDL Services\\r\\nHIDL services expose a binder to the system, which implements a HIDL-defined interface. This \\r\\nacts as the glue between the HIDL-defined contract and the hardware it is intended to control. Note\\r\\n“Hardware” in this context may or may not be actual underlying hardware. The interface being \\r\\nexposed may have its implementation entirely in software.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c0deab9-40df-4eb9-b0c0-7574f53436f6":{"__data__":"{\"id_\":\"2c0deab9-40df-4eb9-b0c0-7574f53436f6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dIQc2iIWpNXj9PWnTcssheHjlUuPAoD4wNZFUa62qpg=\"},\"PREVIOUS\":{\"nodeId\":\"ad9ff015-bf6a-4f8e-b864-0a3ea3f21b7d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"42MIvMWVDckxd4RR/gJWAUrlk2u39aNa6qtSGQiP8gM=\"}},\"hash\":\"XrhQsnmoRZ5DGLOf+xd3NMcpSbG3XElZUPw/t+NeF8A=\",\"text\":\"The interface being \\r\\nexposed may have its implementation entirely in software. For example, it may be possible to \\r\\nhave a coarse-level location device using nothing more than geolocation information retrieved \\r\\nfrom a public Internet server. 9780134096346_print.indb   18525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"72973ca0-5ff8-43c8-bc2a-18baefc4c7e5":{"__data__":"{\"id_\":\"72973ca0-5ff8-43c8-bc2a-18baefc4c7e5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/oZYW50CoAuRohiVjpmIFzDQXUPmg608XmZcxYcz2Lk=\"},\"NEXT\":{\"nodeId\":\"92742760-d425-4f99-8977-b3510119cd7a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9ZmkUQTWjmmj2Vi7M2LtJCYc2XvkiWV0u4Z4oMg6cPk=\"}},\"hash\":\"Ymp8NCKlDIk42jPGtsMb9Pe61+4Nw0uRWSMTjGx+aQk=\",\"text\":\"186Chapter 10  Project Treble: Binderized HAL \\r\\nHIDL Client Applications\\r\\nAs has already been discussed with the traditional Android HAL, the processes using the HIDL-\\r\\nbased HAL are not typical Android applications. These are typically core system framework \\r\\ncomponents, native processes/daemons, or vendor-specific add-ons that support the specific \\r\\nhardware. Hardware Interface Definition Language (HIDL)\\r\\nEach of the binderized HAL interfaces is defined using definition files written in HIDL, just \\r\\nas AIDL is used to define Binder-based service interfaces. HIDL syntax is somewhat differ-\\r\\nent, though, adapting the features available from the underlying Binder subsystem to make it \\r\\nextremely efficient. This is important for low-latency communication with hardware. HIDL is a mix of C/C++ and Java syntaxes, including support for Javadoc style comments and \\r\\nJava-like annotations. Like other Binder-based interfaces, HIDL interfaces are defined and imple-\\r\\nmented in a way that allows two separately compiled codebases to communicate with each other. HIDL definitions are stored in .hal files and are located in specific directories within the plat-\\r\\nform source tree. Each HIDL defines an interface as part of a module within a package and is \\r\\nversioned. This combination of namespace and strict versioning is required because the HIDL \\r\\npackage needs to remain compatible with both current and future software that may use the \\r\\ninterface. For example, at the time of this writing, the latest HIDL interface for utilizing a \\r\\nfingerprint reader is android.hardware.biometrics.fingerprint@2.1. Generally speaking, HIDL package namespaces fall into one of two categories:\\r\\n ■android.hardware: The core HIDL packages defined by Android\\r\\n ■vendor.VENDOR.hardware: OEM/ODM-defined HIDL packages\\r\\nAndroid does define some additional package namespaces for other internal interfaces, but \\r\\nthese are the two primary namespaces when dealing with hardware-related features. In the \\r\\nfingerprint HIDL shown in the preceding paragraph, the HIDL package is part of the android. hardware package, the biometrics module, and the fingerprint submodule. It is version 2.1 \\r\\nof the interface. The hierarchical nature of the package naming is also relevant when building \\r\\nthe HIDL, as we will see in Chapter 11 when building a custom HIDL for Acme. Like other source file types, HIDL files can import other interfaces as well as their types.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"92742760-d425-4f99-8977-b3510119cd7a":{"__data__":"{\"id_\":\"92742760-d425-4f99-8977-b3510119cd7a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/oZYW50CoAuRohiVjpmIFzDQXUPmg608XmZcxYcz2Lk=\"},\"PREVIOUS\":{\"nodeId\":\"72973ca0-5ff8-43c8-bc2a-18baefc4c7e5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Ymp8NCKlDIk42jPGtsMb9Pe61+4Nw0uRWSMTjGx+aQk=\"}},\"hash\":\"9ZmkUQTWjmmj2Vi7M2LtJCYc2XvkiWV0u4Z4oMg6cPk=\",\"text\":\"Like other source file types, HIDL files can import other interfaces as well as their types. Interfaces define one or more methods exposed by the HAL. Recall that HIDL is Binder-based, \\r\\nmeaning that the client and backing HIDL service will almost always be in two separate \\r\\nprocesses. Thus, each HIDL method call is an interprocess communication (IPC) call, which \\r\\ninvolves transferring data and control between the processes. By default, methods are synchro-\\r\\nnous: The caller will block until the IPC call returns. For efficiency and clarity, data is always \\r\\npassed to the called method and is not copied back. This is the equivalent of the in keyword \\r\\nfor arguments in AIDL-defined interfaces. In other words, any input arguments to a HIDL API \\r\\ncall are passed by value. 9780134096346_print.indb   18625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6cafb0cd-49bf-436c-a34b-0ce3555f272c":{"__data__":"{\"id_\":\"6cafb0cd-49bf-436c-a34b-0ce3555f272c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x5F/3FFfnDONiqp4s9pC0j8dKLqBvGIwESdEzyjo8vo=\"},\"NEXT\":{\"nodeId\":\"7d509185-1186-4b8d-ba60-58f08b06d8a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"5kli4Cu7CODM2Cg1fR+p01E4V8ocLg3JPE9lh7f9XtA=\"}},\"hash\":\"vr+WDEuZUR6J2MocwfwwXs1cUHDmxrgco0GzQs8idUg=\",\"text\":\"187Hardware Interface Definition Language (HIDL)\\r\\nYou can find the HIDL grammar definition on the AOSP source site: https://source.android.com/ \\r\\ndevices/architecture/hidl#grammar. Rather than drill down into every aspect of the HIDL language definition, walking through an \\r\\nexample will illustrate the basics. For this example, let’s look at the sensors HIDL definition, \\r\\nandroid.hardware.sensors@2.0. You can find the HAL in the source tree at hardware/\\r\\ninterfaces/sensors/2.0. There are several files in this directory, as shown in Listing 10.1. Listing 10.1 Sensors 2.0 HIDL Files\\r\\n$ ls -l hardware/interfaces/sensors/2.0\\r\\ntotal 56\\r\\n-rw-r--r--  1 aosp  staff    404 Oct 13 09:31 Android.bp\\r\\n-rw-r--r--  1 aosp  staff  12946 Oct 13 09:31 ISensors.hal\\r\\n-rw-r--r--  1 aosp  staff   1778 Oct 13 09:31 ISensorsCallback.hal\\r\\ndrwxr-xr-x  2 aosp  staff    374 Oct 13 09:31 default\\r\\n-rw-r--r--  1 aosp  staff   1596 Oct 13 09:31 types.hal\\r\\ndrwxr-xr-x  3 aosp  staff    102 Oct 13 09:31 vts\\r\\n$\\r\\n ■Android.bp: This is the Android build blueprint file. ■ISensors.hal: This is the primary HIDL interface definition for the sensors binderized HAL. ■ISensorsCallback.hal: This is an additional HIDL-defined interface, provided by clients to the sensors binderized HAL and will be called when data is available. ■default: This subdirectory contains a default implementation of the binderized HIDL service. ■types.hal: This file is used to define any data structures that may be needed by the HIDL-defined interface. Unlike AIDL, there is no mechanism to declare a structure/object \\r\\n“parcelable” so it may be used across the binder interface. Instead, HIDL requires the \\r\\ntypes to be declared in a .hal file for use by the HIDL interface. The complete sensors 2.0 interface illustrates the HIDL syntax and capabilities well.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7d509185-1186-4b8d-ba60-58f08b06d8a0":{"__data__":"{\"id_\":\"7d509185-1186-4b8d-ba60-58f08b06d8a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"x5F/3FFfnDONiqp4s9pC0j8dKLqBvGIwESdEzyjo8vo=\"},\"PREVIOUS\":{\"nodeId\":\"6cafb0cd-49bf-436c-a34b-0ce3555f272c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vr+WDEuZUR6J2MocwfwwXs1cUHDmxrgco0GzQs8idUg=\"}},\"hash\":\"5kli4Cu7CODM2Cg1fR+p01E4V8ocLg3JPE9lh7f9XtA=\",\"text\":\"The complete sensors 2.0 interface illustrates the HIDL syntax and capabilities well. Let’s walk \\r\\nthrough the ISensors.hal in pieces, starting with Listing 10.2. Listing 10.2 Sensors 2.0 Interface Definition, Part 1\\r\\npackage android.hardware.sensors@2.0;\\r\\nimport @1.0::Event;\\r\\nimport @1.0::OperationMode;\\r\\nimport @1.0::RateLevel;\\r\\nimport @1.0::Result;\\r\\nimport @1.0::SensorInfo;\\r\\nimport @1.0::SharedMemInfo;\\r\\nimport @2.0::ISensorsCallback;\\r\\n9780134096346_print.indb   18725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b23ed2ac-2365-49f2-9c91-ddd49399fa58":{"__data__":"{\"id_\":\"b23ed2ac-2365-49f2-9c91-ddd49399fa58\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BslqBbHdyvAVsPwGTH2qJm74mQN4Rb04rjo7gdUydZM=\"},\"NEXT\":{\"nodeId\":\"dffb0b09-100a-48b9-9c43-e9c72e847b2f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"e1Y8v2jb+7dxTGO22iADKhTsrxvfX1Yenhm4ve2kaRQ=\"}},\"hash\":\"kMIznz6GjSGswY+fQOtSflmnkMJ1cXlPFMQLsVg3bik=\",\"text\":\"188Chapter 10  Project Treble: Binderized HAL \\r\\nThe start of ISensors.hal, as shown in Listing 10.2, will look somewhat familiar to Java devel-\\r\\nopers. Each HIDL-defined interface is defined as a package and is versioned using the @major. minor syntax. HIDL interfaces are defined to be part of packages that follow a hierarchical \\r\\nnamespace like in Java or C++. Android defines several internal packages for HAL and frame-\\r\\nwork interfaces, as shown in Table 10.1. Table 10.1 Android-Defined HIDL Packages\\r\\nPackage PrefixLocationInterface Type\\r\\nandroid.hardware.*   hardware/interfacesHAL\\r\\nandroid.frameworks.* frameworks/hardware/interfaces/*Android Framework Related\\r\\nandroid.system.*     system/hardware/interfaces/*Android System Related\\r\\nandroid.hidl.*       system/libhidl/transport/*Core HIDL\\r\\nvendor.VENDOR. interfaces.*\\r\\nvendor/VENDOR/interfaces/*Vendor (OEM/ODM) Defined\\r\\nAs illustrated, vendors (ODMs/OEMs) may define their own HIDL interfaces. These may be \\r\\ncompletely custom HIDL interfaces or extensions to existing interface definitions. All interfaces \\r\\nare always versioned using a major and minor number. After a HIDL interface is “published” (for example, in use on a platform) at a specific version, \\r\\nthe interface is locked down and may not change for that specific version. This is enforced at \\r\\nbuild time using a hash of the HIDL interface definition at a specific version. Once the interface \\r\\nhas been “published,” any attempt to change the definition without changing the version will \\r\\nresult in a build error. After the package declaration, note the series of import statements. Just like Java or Kotlin, \\r\\nthese statements are used to pull in other HIDL-defined interfaces or types. However, like AIDL \\r\\ndefinitions, types or other interfaces must be imported, even if they are defined in the same \\r\\npackage, as shown with @2.0::ISensosCallback here. The type of import depends on the file in which the import statement is located. In this \\r\\nexample, the import statements are in the ISensors.hal file, making them interface-level \\r\\nimports. If, instead, these import statements were in the types.hal file for sensors, they would \\r\\nbe package-level imports. The difference between the two is subtle, but important to under-\\r\\nstand.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dffb0b09-100a-48b9-9c43-e9c72e847b2f":{"__data__":"{\"id_\":\"dffb0b09-100a-48b9-9c43-e9c72e847b2f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"BslqBbHdyvAVsPwGTH2qJm74mQN4Rb04rjo7gdUydZM=\"},\"PREVIOUS\":{\"nodeId\":\"b23ed2ac-2365-49f2-9c91-ddd49399fa58\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kMIznz6GjSGswY+fQOtSflmnkMJ1cXlPFMQLsVg3bik=\"}},\"hash\":\"e1Y8v2jb+7dxTGO22iADKhTsrxvfX1Yenhm4ve2kaRQ=\",\"text\":\"The difference between the two is subtle, but important to under-\\r\\nstand. An interface-level import is an import statement located within a specific interface .hal \\r\\nfile, making the import available to only that HIDL interface. On the other hand, a package-\\r\\nlevel import is an import statement located in a types.hal file for a given package/module/\\r\\nsubmodule hierarchy. The net effect of this type of import is that the imported type(s) are avail-\\r\\nable to all interfaces within the package/module/submodule. Note how each of the import statements in Listing 10.2 starts with the version declaration. This means the imports are types or interfaces that are defined within the current package, \\r\\nandroid.hardware.sensors. The sensors HIDL clearly shows how one interface version can \\r\\n9780134096346_print.indb   18825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ee56f081-1108-46b4-b78d-416698f341dd":{"__data__":"{\"id_\":\"ee56f081-1108-46b4-b78d-416698f341dd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"IPRzlLepi8+TvlOIM+2vsV+4ynyUMGh5qwL8f54macw=\"}},\"hash\":\"xT1/OwwKZLE19lcXWvtPWv9XsT5y3xHWAPm2VFA+XyU=\",\"text\":\"189Hardware Interface Definition Language (HIDL)\\r\\nbuild upon a previous version. In this case, the sensors HIDL version 2.0 builds upon the 1.0 \\r\\ndefinition by leveraging types/interfaces defined in both. Three other forms of import state-\\r\\nments can also be used, all of which start with the fully qualified package name (FQPN) of the \\r\\nimport, before the version specifier, as shown in Listing 10.3. Listing 10.3 Additional HIDL Import Syntax\\r\\nimport FQPN@MAJOR.MINOR\\r\\nimport FQPN@MAJOR.MINOR::INTERFACE\\r\\nimport FQPN@MAJOR.MINOR::types\\r\\nThe first form would include all interfaces and types from the specified package version. The \\r\\nsecond form imports a specific interface and all types from a package. The third form is used to \\r\\nimport just the types from another package, but none of the interfaces. Continuing further into the sensors HAL example, the interface declaration comes next, a \\r\\nportion of which is shown in Listing 10.4. Listing 10.4 Sensors 2.0 Interface Definition, Part 2\\r\\ninterface ISensors {\\r\\n    /**\\r\\n     * Enumerate all available (static) sensors. *\\r\\n     * The SensorInfo for each sensor returned by getSensorsList must be stable\\r\\n     * from the initial call to getSensorsList after a device boot until the\\r\\n     * entire system restarts. The SensorInfo for each sensor must not change\\r\\n     * between subsequent calls to getSensorsList, even across restarts of the\\r\\n     * HAL and its dependencies (for example, the sensor handle for a given\\r\\n     * sensor must not change across HAL restarts). */\\r\\n    getSensorsList() generates (vec<SensorInfo> list);\\r\\n    /**\\r\\n     * Place the module in a specific mode. The following modes are defined\\r\\n     *\\r\\n     *  SENSOR_HAL_NORMAL_MODE - Normal operation. Default state of the module. *\\r\\n     *  SENSOR_HAL_DATA_INJECTION_MODE - Loopback mode. *    Data is injected for the supported sensors by the sensor service in\\r\\n     *    this mode. *\\r\\n     * @return OK on success\\r\\n     *     BAD_VALUE if requested mode is not supported\\r\\n     *     PERMISSION_DENIED if operation is not allowed\\r\\n     */\\r\\n9780134096346_print.indb   18925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1c304d1f-bde9-4f38-9dcc-d5c470632545":{"__data__":"{\"id_\":\"1c304d1f-bde9-4f38-9dcc-d5c470632545\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"TQSulElvWaekzYp1rLt/9B6r6WYiwcjUbNKksj2QyZ0=\"},\"NEXT\":{\"nodeId\":\"98b4ab87-9c6e-410d-b860-c8480b72d757\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"09CJggjs/t53UhO/5KP9nNui6k5P1N4Ri93iq9yFosM=\"}},\"hash\":\"qGY0x6a/03nfZWbvz+72UBt9k9WyAQ4dSpK4BIVQSvQ=\",\"text\":\"190Chapter 10  Project Treble: Binderized HAL \\r\\n    setOperationMode(OperationMode mode) generates (Result result);\\r\\n    ... @entry\\r\\n    @callflow(next = {\\\"getSensorsList\\\"})\\r\\n    initialize(fmq_sync<Event> eventQueueDescriptor,\\r\\n               fmq_sync<uint32_t> wakeLockDescriptor,\\r\\n               ISensorsCallback sensorsCallback)\\r\\n        generates\\r\\n              (Result result);\\r\\n    ... registerDirectChannel(SharedMemInfo mem)\\r\\n               generates (Result,\\r\\n                          int32_t channelHandle);\\r\\nThe code in Listing 10.4 defines the interface android.hardware.sensors@2.0::ISensors \\r\\nand the methods it exposes. Each HIDL file contains a single interface definition and may also contain types the interface \\r\\nrequires. Interfaces may also inherit from other interfaces using the extends keyword, similar \\r\\nto the way Java interfaces are inherited. However, just like Java, HIDL does not support multiple \\r\\ninheritance. Interfaces that do not explicitly extend another interface implicitly extend from \\r\\nandroid.hdl.base@1.0::IBase. The methods shown in Listing 10.4 illustrate standard types, custom types, and return  \\r\\nvalues. Methods may return nothing, a primitive, a custom type, or multiple values. All the \\r\\ninterface methods shown in Listing 10.4 show return values that include custom types. The \\r\\nregisterDirectChannel method returns multiple values. The syntax for returned data looks different than in Java or C/C++. Return data is specified \\r\\nwith the generates keyword. When a primitive value is returned, the returned data is simply \\r\\nreturned from the method. If the returned value is not primitive, however, the HIDL framework \\r\\ngenerates a synchronous callback function that the server side calls to return data. The prototypes for the HIDL methods are exactly the same for client and server side, so the \\r\\nclient must handle the return data via callback when the return type is non-primitive. In this \\r\\ncase, the HIDL method call on the client blocks until the server side returns, but the return data \\r\\nis sent back to the client via the server invoking the provided callback, which runs in the client \\r\\nbefore the original method call returns. This makes for an interesting mix of error-handling \\r\\ncode. Even methods that have no return value still return a Return object defined by HIDL.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"98b4ab87-9c6e-410d-b860-c8480b72d757":{"__data__":"{\"id_\":\"98b4ab87-9c6e-410d-b860-c8480b72d757\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"TQSulElvWaekzYp1rLt/9B6r6WYiwcjUbNKksj2QyZ0=\"},\"PREVIOUS\":{\"nodeId\":\"1c304d1f-bde9-4f38-9dcc-d5c470632545\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"qGY0x6a/03nfZWbvz+72UBt9k9WyAQ4dSpK4BIVQSvQ=\"}},\"hash\":\"09CJggjs/t53UhO/5KP9nNui6k5P1N4Ri93iq9yFosM=\",\"text\":\"Even methods that have no return value still return a Return object defined by HIDL. Using this, the client can check to see whether a low-level error of some kind occurred while \\r\\nmaking the method call. From the client perspective, the interface methods are blocking methods by default. This is \\r\\ntrue, even if the method does not return any data. Just like AIDL-defined interfaces, HIDL \\r\\n9780134096346_print.indb   19025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5dc200f8-16a1-4618-b963-2cd9ea30a518":{"__data__":"{\"id_\":\"5dc200f8-16a1-4618-b963-2cd9ea30a518\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xnzAUcBRocv8u/Z0taZkwJ/55WYgYnDmvwrXrch282k=\"}},\"hash\":\"knoNMwL5bxXoeGqlwFuz7ypNmW6FJOKG9LIS4GGMNZU=\",\"text\":\"191Hardware Interface Definition Language (HIDL)\\r\\ninterface methods may be declared as asynchronous using the oneway keyword. Unlike AIDL \\r\\ninterfaces, though, all data is owned by the caller. This is akin to an AIDL interface where input \\r\\narguments for a method are declared using the in keyword. Note\\r\\nAlthough HIDL does not enforce a strict per-transaction (for example, method call) data limit, \\r\\nkeeping the size of the data less than 4KB per transaction is considered a best practice. Remember, there may be multiple transactions from multiple processes in flight to a given HIDL \\r\\nsimultaneously. If an interface’s method(s) use more than this in a single transaction, the inter-\\r\\nface should be re-architected. Just like AIDL-defined interfaces, HIDL is built on top of Android’s Binder framework, which \\r\\nhas a 1MB limit for all concurrent transactions. Exceeding this limit will result in hard-to-\\r\\ndebug failed transactions that are not directly related to the specific method throwing a \\r\\nTransactionException. HIDL Types\\r\\nData types in HIDL look similar to Java and C++, with some subtle differences. In fact, the \\r\\nsyntax used is a mix of both Java and C++:\\r\\n ■struct and union declarations follow C++ syntax and must be named. ■typedef is allowed and follows C++ syntax. ■C++-style comments may be used and are copied to generated header files. ■Package namespaces follow Java style syntax. Generated C++ headers convert the namespace to C++ style. For example, android.hardware.sensors in HIDL becomes \\r\\nandroid::hardware::sensors in C++. ■Comments may include documentation via Javadoc format. ■Java-style annotations may be added to type declarations. ■Forward declarations are not allowed. Structures may not refer to themselves. ■The concept of a pointer does not exist in HIDL. ■Arrays follow Java-style array usage, as shown in Listing 10.5. Listing 10.5 HIDL Array Syntax\\r\\nstruct Point {\\r\\n    int32_t x;\\r\\n    int32_t y;\\r\\n};\\r\\nPoint[3] triangle;\\r\\n9780134096346_print.indb   19125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"21f0f3ee-8db9-4448-8e9f-033a51a1cbdc":{"__data__":"{\"id_\":\"21f0f3ee-8db9-4448-8e9f-033a51a1cbdc\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"hPAUP2Kp2MTrZtKvvzrTGNXr2M2Eduq8bYNNBln7Or0=\"}},\"hash\":\"O6rAy16gAoHa+dGxf2N/mNifce37hR+Uc8/YKLHi8U4=\",\"text\":\"192Chapter 10  Project Treble: Binderized HAL \\r\\nHIDL includes a number of pre-defined types, some of which are only available in C++ code. This is in large part because HALs generally deal with underlying hardware and need to be \\r\\nextremely fast and efficient. Although HIDL servers can be implemented in Java (for most \\r\\nthings), implementing hardware driver HIDL servers in Java is not recommended. Table 10.2 \\r\\nprovides a high-level view of HIDL types and their equivalent in C++ and Java. Table 10.2 HIDL-defined Types\\r\\nHIDL TypeC++ TypeJava Type\\r\\nenumenum classfinal Class (with static constant \\r\\nfields)\\r\\nuint8_t..uint64_t   uint8_t..uint64_t     int..long†\\r\\nint8_t..int64_t     int8_t..int64_t       int..long\\r\\nfloatfloatfloat\\r\\ndoubledoubledouble\\r\\nvec<T>hidl_vec<T>ArrayList<T>††\\r\\nT[S1][S2]..[Sn]     T[S1][S2]..[Sn]       T[S1][S2]..[Sn]\\r\\nstringhidl_stringString†††\\r\\nhandlehidl_handleN/A\\r\\nsafe_union(custom)struct        N/A††††\\r\\nstructstructJava Class\\r\\nunionunionN/A††††\\r\\nfmq_syncMQDescriptorSync      N/A\\r\\nfmq_unsyncMQDescriptorUnsync    N/A\\r\\nmemoryhidl_memoryN/A\\r\\nbitfield<T>Bitwise OR of \\r\\n underlying type\\r\\nN/A\\r\\n† Java does not have unsigned integer types. The unsigned data is placed into signed integer types, \\r\\nwithout conversion. Any Java code using this must treat the signed data as if it were unsigned. †† Java primitives are converted to the wrapped type (for example, vec<int> becomes \\r\\nArrayList<Integer>). ††† Java String is converted to UTF-8 as the common HIDL type during transport and may never \\r\\nbe null when passed into HIDL. Note that character set translation from Java’s default UTF-16 to \\r\\nUTF-8 can result in different encodings. †††† Available starting with Android 11. 9780134096346_print.indb   19225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ee62a491-3bd5-4382-92c0-ded1560ffc63":{"__data__":"{\"id_\":\"ee62a491-3bd5-4382-92c0-ded1560ffc63\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"vyYBx2eVBydmlmuyYZnX2/lnU6WRxr7pUMbCcs90tBA=\"}},\"hash\":\"TB/hpK/3tVWucYACPdeEW06jLBzxtbqjfI6XbNZnvdk=\",\"text\":\"193Hardware Interface Definition Language (HIDL)\\r\\nYou can find more details on HIDL data types as well as how they are used in C++ and Java on \\r\\nthese pages:\\r\\nhttps://source.android.com/devices/architecture/hidl/types\\r\\nhttps://source.android.com/devices/architecture/hidl-cpp/types\\r\\nhttps://source.android.com/devices/architecture/hidl-java/types\\r\\nEach HIDL package may define types that are relevant to it. This is accomplished via the file \\r\\ntypes.hal in the package module directory. Looking at the android.hardware.sensors@2.0 \\r\\npackage again, the types.hal file is small because the 2.0 interface builds upon the 1.0 inter-\\r\\nface (see Listing 10.6). Listing 10.6 Sensors 2.0 types.hal\\r\\npackage android.hardware.sensors@2.0;\\r\\nenum SensorTimeout : int32_t {\\r\\n    /**\\r\\n     * The maximum number of seconds to wait for a message on the Wake Lock FMQ\\r\\n     * before automatically releasing any wake_lock held for a WAKE_UP event. */\\r\\n    WAKE_LOCK_SECONDS = 1,\\r\\n};\\r\\nenum EventQueueFlagBits : uint32_t {\\r\\n    /**\\r\\n     * Used to notify the Event FMQ that events should be read and processed. */\\r\\n    READ_AND_PROCESS = 1 << 0,\\r\\n    /**\\r\\n     * Used by the framework to signal to the HAL when events have been\\r\\n     * successfully read from the Event FMQ. *\\r\\n     * If the MessageQueue::writeBlocking function is being used to write sensor\\r\\n     * events to the Event FMQ, then the readNotification parameter must be set\\r\\n     * to EVENTS_READ. */\\r\\n     EVENTS_READ = 1 << 1,\\r\\n};\\r\\nenum WakeLockQueueFlagBits : uint32_t {\\r\\n    /**\\r\\n     * Used to notify the HAL that the framework has written data to the Wake\\r\\n     * Lock FMQ. */\\r\\n     DATA_WRITTEN = 1 << 0,\\r\\n};\\r\\n9780134096346_print.indb   19325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8d16253c-9163-4334-8236-b83d4c38209e":{"__data__":"{\"id_\":\"8d16253c-9163-4334-8236-b83d4c38209e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"k4TBOD0mYkXfZFGVClpZvQ3odJ5hOVZ6Ii/aCnUE0qw=\"},\"NEXT\":{\"nodeId\":\"b9520915-4220-45b7-87b9-4d7161dae506\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UGVn84EAC7ReEi91RWV1YD6SrVfcQ3KuKO5ot/Z5mWg=\"}},\"hash\":\"h/5qiMknB4W3+JP/pHywLHkdRsZMiqposN5oc71UGQI=\",\"text\":\"194Chapter 10  Project Treble: Binderized HAL \\r\\nNote how the types.hal file uses the same package declaration as the interface files(s) for the \\r\\npackage. Custom structures (classes) may be defined in the types.hal file as well as custom \\r\\nenums, typedefs, and so on. HIDL Services\\r\\nHIDL Services provide the implementation of a specific HAL definition. Although HIDL Services \\r\\nmay be implemented in C++ or Java, the framework is geared more toward C++-based imple-\\r\\nmentations. A handful of Java-based HIDL service implementations are in the Android frame-\\r\\nwork, but they are more the exception than the rule. Because of this, the remainder of this \\r\\nsection will only cover C++ implementations. HIDL services, like their Android Binder service counterparts, run in standalone processes. These processes are started by the init daemon at startup, like other native processes. The \\r\\nHIDL service implements the HIDL-defined interface, communicating with whatever hardware \\r\\nor other component necessary to implement the defined interface. To make itself available to HIDL client processes, each service is responsible for registering itself \\r\\nwith the Android HIDL system and processing requests as they arrive. Listing 10.7 contains the main entry point for the default sensor service implementation. This \\r\\nis found at hardware/interfaces/sensors/2.0/default/service.cpp. Note how this main \\r\\nis short and simple: It configures the thread pool, creates an instance of the Sensors class, and \\r\\njoins the thread pool. Each of these steps is important and ties the whole thing together.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b9520915-4220-45b7-87b9-4d7161dae506":{"__data__":"{\"id_\":\"b9520915-4220-45b7-87b9-4d7161dae506\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"k4TBOD0mYkXfZFGVClpZvQ3odJ5hOVZ6Ii/aCnUE0qw=\"},\"PREVIOUS\":{\"nodeId\":\"8d16253c-9163-4334-8236-b83d4c38209e\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"h/5qiMknB4W3+JP/pHywLHkdRsZMiqposN5oc71UGQI=\"}},\"hash\":\"UGVn84EAC7ReEi91RWV1YD6SrVfcQ3KuKO5ot/Z5mWg=\",\"text\":\"Each of these steps is important and ties the whole thing together. Listing 10.7 Default Sensors 2.0 Service Entry Point\\r\\nusing android::hardware::configureRpcThreadpool;\\r\\nusing android::hardware::joinRpcThreadpool;\\r\\nusing android::hardware::sensors::V2_0::ISensors;\\r\\nusing android::hardware::sensors::V2_0::implementation::Sensors;\\r\\nint main(int /* argc */, char** /* argv */) {\\r\\n    configureRpcThreadpool(1, true);\\r\\n    android::sp<ISensors> sensors = new Sensors();\\r\\n    if (sensors->registerAsService() != ::android::OK) {\\r\\n        ALOGE(\\\"Failed to register Sensors HAL instance\\\");\\r\\n        return -1;\\r\\n    }\\r\\n    joinRpcThreadpool();\\r\\n    return 1;  // joinRpcThreadpool shouldn't exit}\\r\\nThe HIDL support library allows HIDL services to configure the number of threads used to \\r\\nhandle requests via the configureRpcThreadpool method. In this case, the default sensor \\r\\nservice implementation limits requests to being handled by a single thread. This is setting up \\r\\n9780134096346_print.indb   19425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"06a733f4-0eff-4936-8661-4913f6c4e9db":{"__data__":"{\"id_\":\"06a733f4-0eff-4936-8661-4913f6c4e9db\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Gs/+8Pr16v8DvIUBzNrCfVeD8q34RKvpMNF2A8k9WHY=\"},\"NEXT\":{\"nodeId\":\"c970f46d-4279-47bc-8682-53d4dddba83d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Bqv+tTTy/yE5IQWg+p8ZiVQ0f+8pzsWT1o0VHxUH3Mk=\"}},\"hash\":\"jYP36IUsWw3okOBvA2xtafmunvEc4+EaeHnbYvWBOp0=\",\"text\":\"195HIDL Services\\r\\nthe internal thread pool to be managed and used by the underlying Binder framework, similar \\r\\nto what is done for Android services. The implementation of the sensors 2.0 HIDL is provided by the Sensors class, located in the \\r\\nsame directory as the service code from Listing 10.7. The HIDL build tools automatically create \\r\\nthe registerAsService method, called in the code in Listing 10.7. This method registers the \\r\\nbacking binder object, exposed through the kernel, for the ISensors interface with the  \\r\\nhwservicemanager process. Finally, the joinRpcThreadpool method is called, making the main thread of this process \\r\\none of the threads in the thread pool from which services requests. This results in the process \\r\\nservicing incoming requests forever. This method should never exit, as shown from the \\r\\ncomment in the code. When a client calls a specific API method defined in ISensors.hal, the Binder and HIDL \\r\\nframework calls the matching method in the instance of the Sensors class. The method will \\r\\nperform its required action, returning a primitive result or executing a callback. Listing 10.8 shows a portion of the C++ prototypes for the ISensors interface that were shown \\r\\nin Listing 10.4. As previously mentioned, this file is autogenerated by the build system, which \\r\\ncan make it a little difficult to track down! In the AOSP build tree for Android 10, the soong \\r\\nbuild system places the generated files into an intermediates directory tree based on the type \\r\\nof generated file. Because this is an AOSP-defined hardware interface, the base of the generated \\r\\nfiles is ./out/soong/.intermediates/hardware/interfaces; we’ll call it HW_IFS for brevity. The resultant directory hierarchy is still quite lengthy, even with this substitution: \\r\\nHW_IFS/sensors/2.0/android.hardware/sensors@2.0_genc++headers/gen/android/  \\r\\n➥ hardware/sensors/2.0/ISensors.h. Note\\r\\nSometimes a line of code will be too long to fit on one line in this book. The code continuation \\r\\nsymbol (➥) indicates that the line continues from the previous line. Listing 10.8 ISensors C++ Definition\\r\\nstruct ISensors : public ::android::hidl::base::V1_0::IBase {\\r\\n    ...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c970f46d-4279-47bc-8682-53d4dddba83d":{"__data__":"{\"id_\":\"c970f46d-4279-47bc-8682-53d4dddba83d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Gs/+8Pr16v8DvIUBzNrCfVeD8q34RKvpMNF2A8k9WHY=\"},\"PREVIOUS\":{\"nodeId\":\"06a733f4-0eff-4936-8661-4913f6c4e9db\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jYP36IUsWw3okOBvA2xtafmunvEc4+EaeHnbYvWBOp0=\"}},\"hash\":\"Bqv+tTTy/yE5IQWg+p8ZiVQ0f+8pzsWT1o0VHxUH3Mk=\",\"text\":\"using getSensorsList_cb = std::function<void(const ::android::hardware::hidl_vec ➥ <::android::hardware::sensors::V1_0::SensorInfo>& list)>;\\r\\n    ... virtual ::android::hardware::Return<void> getSensorsList(getSensorsList_cb  ➥ hidl_cb) = 0;\\r\\n    ... virtual ::android::hardware::Return<::android::hardware::sensors::V1_0::Result>  ➥ setOperationMode(::android::hardware::sensors::V1_0::OperationMode mode) = 0;\\r\\n    ... 9780134096346_print.indb   19525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4e7b7c94-9dbe-441c-923b-42c446a798bf":{"__data__":"{\"id_\":\"4e7b7c94-9dbe-441c-923b-42c446a798bf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Sb22uIRayguojXjzVbIaZubvg2+S4MvsynwELOw9AZg=\"}},\"hash\":\"CAbupJmMT3y+oKGRuinc7eDBEwSmeFzSV1FsDhhb1Rc=\",\"text\":\"196Chapter 10  Project Treble: Binderized HAL \\r\\n    virtual ::android::hardware::Return<::android::hardware::sensors::V1_0::Result>  ➥ initialize(const ::android::hardware::MQDescriptorSync \\r\\n➥ <::android::hardware::sensors::V1_0::Event>& eventQueueDescriptor,  ➥ const ::android::hardware::MQDescriptorSync<uint32_t>& wakeLockDescriptor,  \\r\\n➥ const ::android::sp<::android::hardware::sensors::V2_0 ➥::ISensorsCallback>& sensorsCallback) = 0;\\r\\n    ... virtual ::android::hardware::Return<void> registerDirectChannel(const  ➥::android::hardware::sensors::V1_0::SharedMemInfo& mem,  \\r\\n➥ registerDirectChannel_cb_hidl_cb) = 0;\\r\\n    ... }\\r\\nWow, that is tough to read! However, stripping down the namespaces a bit makes them easier \\r\\nto understand. For example, the extremely long method definition for initialize is shown in \\r\\nListing 10.9 when using the namespaces in the C++ code. This is what the default implementa-\\r\\ntion of the 2.0 sensors HAL does. Listing 10.9 ISensors C++ Service Implementation\\r\\nusing ::android::hardware::sensors::V1_0::Event;\\r\\nusing ::android::hardware::sensors::V1_0::OperationMode;\\r\\nusing ::android::hardware::sensors::V1_0::RateLevel;\\r\\nusing ::android::hardware::sensors::V1_0::Result;\\r\\nusing ::android::hardware::sensors::V1_0::SharedMemInfo;\\r\\nusing ::android::hardware::sensors::V2_0::SensorTimeout;\\r\\nusing ::android::hardware::sensors::V2_0::WakeLockQueueFlagBits;\\r\\n... Return<void> Sensors::getSensorsList(getSensorsList_cb _hidl_cb) {\\r\\n    std::vector<SensorInfo> sensors;\\r\\n    for (const auto& sensor : mSensors) {\\r\\n        sensors.push_back(sensor.second->getSensorInfo());\\r\\n    }\\r\\n    // Call the HIDL callback with the SensorInfo\\r\\n    _hidl_cb(sensors);\\r\\n    return Void();\\r\\n}\\r\\n... 9780134096346_print.indb   19625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d94515d7-12f5-4571-bacc-6f936baefba2":{"__data__":"{\"id_\":\"d94515d7-12f5-4571-bacc-6f936baefba2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HCVpgfhxw5PBB/XinNhKTcohdE/V7QLIdmduqYzLXuU=\"},\"NEXT\":{\"nodeId\":\"a2e9d125-ffda-4f91-914e-429c1f8b275c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"99VttM8/CLLhISEEbMnQawLN4IqVPZm+gXh3Le0wH5Y=\"}},\"hash\":\"j15YBGHXKZPBG6MfHyb2aKtrlIf5e5yIeDULiMgzrhM=\",\"text\":\"197HIDL Clients\\r\\nReturn<Result> Sensors::setOperationMode(OperationMode mode) {\\r\\n    ... return Result::OK;\\r\\n}\\r\\nReturn<Result> Sensors::initialize(\\r\\n    const ::android::hardware::MQDescriptorSync<Event>& eventQueueDescriptor,\\r\\n    const ::android::hardware::MQDescriptorSync<uint32_t>& wakeLockDescriptor,\\r\\n    const sp<ISensorsCallback>& sensorsCallback) {\\r\\n    ... }\\r\\nThat is much better! Previously, in the HIDL definition of each method, the generates \\r\\nkeyword declared the data to be returned. Note how depending on the return data, it may actu-\\r\\nally be returned directly or via an embedded callback. The getSensorsList method returns \\r\\ndata (a list of SensorInfo) by executing the provided callback with the data. Both  \\r\\nsetOperationMode and initialize return Result, which is defined to be an int32_t  \\r\\nso it can be returned directly. HIDL Clients\\r\\nHIDL clients utilize the interface exposed by the underlying service implementation. Unlike the \\r\\nAndroid Binder-based clients used at the system/framework level, the HIDL client code does \\r\\nnot have to look up the binder for the backing service directly. The necessary functionality is \\r\\nbuilt into the code generated when the HIDL interface is compiled. Each interface implementa-\\r\\ntion has a getService method that returns an instance of the interface or a proxy to it. For \\r\\nexample, Listing 10.10 shows the prototype for version 2.0 of the ISensors implementation. Listing 10.10 ISensors Prototype for getService()\\r\\nstatic ::android::sp<ISensors> getService( \\r\\n  const std::string &serviceName=\\\"default\\\",    bool getStub=false \\r\\n);\\r\\nThe getService method communicates with hwservicemanager to retrieve the backing \\r\\nbinder from the HIDL service implementation. The interface type (for example, ISensors) \\r\\nand service name are used to look up the HIDL service that was registered with the system. The client leveraging this method uses the smart pointer to the interface (for example, \\r\\n::android::sp<ISensors>), as defined by the prototype in Listing 10.10. However, behind \\r\\nthe scenes, this may be direct access to the backing service implementation (for example, pass-\\r\\nthrough), or it may be a binder proxy instance. The calling semantics are exactly the same: The \\r\\nmethods of the interface are called via the smart pointer.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a2e9d125-ffda-4f91-914e-429c1f8b275c":{"__data__":"{\"id_\":\"a2e9d125-ffda-4f91-914e-429c1f8b275c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HCVpgfhxw5PBB/XinNhKTcohdE/V7QLIdmduqYzLXuU=\"},\"PREVIOUS\":{\"nodeId\":\"d94515d7-12f5-4571-bacc-6f936baefba2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"j15YBGHXKZPBG6MfHyb2aKtrlIf5e5yIeDULiMgzrhM=\"}},\"hash\":\"99VttM8/CLLhISEEbMnQawLN4IqVPZm+gXh3Le0wH5Y=\",\"text\":\"9780134096346_print.indb   19725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c6ff9337-2ff6-4408-afb7-5168bf2b78b3":{"__data__":"{\"id_\":\"c6ff9337-2ff6-4408-afb7-5168bf2b78b3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DxhxO/Q8dkmt/If1P4Neou8T3bg/LWRo0TUh4UX5zfk=\"},\"NEXT\":{\"nodeId\":\"28a0b424-6fed-4df8-be65-d397f05538fe\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"n6JFgcR4EzxPIlUmjB6fTcY2jo4coF3RDNGniwROnEU=\"}},\"hash\":\"3kXomifzxXkv772URd2TDvrnnIpMYpaIovEbHx/eRHI=\",\"text\":\"198Chapter 10  Project Treble: Binderized HAL \\r\\nAn example of this is shown in Listing 10.11, taken from SensorsWrapperBase used \\r\\nwithin the AOSP framework (see frameworks/native/services/sensorservice/\\r\\nSensorWrapper.h). Listing 10.11 Calling the ISensors Interface\\r\\nReturn<void> getSensorsList(ISensors::getSensorsList_cb _hidl_cb) override \\r\\n    return mSensors->getSensorsList(_hidl_cb);\\r\\n}\\r\\nIt is worth reiterating that HIDL interfaces that return non-primitive data accomplish it \\r\\nvia callback to the client. In the implementation shown in Listing 10.11, the caller of this \\r\\nwrapper method must provide the callback function defined by the HIDL, an instance of \\r\\nISensors::getSensorList_cb. In Listing 10.4 where this HIDL method was defined, the \\r\\nmethod does not return data, but generates it. Closing the loop, the code in Listing 10.8 defines \\r\\nISensors::getSensorsList_cb to be a function that receives a vector of SensorInfo \\r\\nobjects—the type that the HIDL interface generates. Summary\\r\\nThis chapter examined the revised hardware abstraction layer architecture introduced in \\r\\nAndroid 8: binderized HAL using HIDL. Internally called Project Treble, the binderized HAL is a \\r\\ncomplete overhaul of the HAL concept. Prior to Android 8, vendor/OEM HALs were provided as \\r\\na set of shared libraries customized for the specific target that were built into the system image. With HIDL, the HAL is now based on Android’s IPC mechanism, Binder. The primary goals of \\r\\nsuch a radical change were isolation of vendor-specific components so the AOSP framework \\r\\n(system) can be updated without requiring a rebuild of the vendor components; better interop-\\r\\nerability between components; better data movement efficiency; and more intuitive calling \\r\\nsemantics with respect to memory usage/ownership. Similar to the traditional Android HAL, the platform defines the abstractions to be imple-\\r\\nmented by the platform components or the vendor/OEM. Unlike the traditional HAL, though, \\r\\nthe abstractions are now defined via HIDL .hal files, which are cousins to the AIDL file used \\r\\nin Binder-based services. Although HIDL and AIDL files have some things in common, they \\r\\nare different in their syntax with HIDL placing stricter syntax rules and form into place.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"28a0b424-6fed-4df8-be65-d397f05538fe":{"__data__":"{\"id_\":\"28a0b424-6fed-4df8-be65-d397f05538fe\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DxhxO/Q8dkmt/If1P4Neou8T3bg/LWRo0TUh4UX5zfk=\"},\"PREVIOUS\":{\"nodeId\":\"c6ff9337-2ff6-4408-afb7-5168bf2b78b3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3kXomifzxXkv772URd2TDvrnnIpMYpaIovEbHx/eRHI=\"}},\"hash\":\"n6JFgcR4EzxPIlUmjB6fTcY2jo4coF3RDNGniwROnEU=\",\"text\":\"This \\r\\nallows for much of the server and client “boilerplate” code to be autogenerated or provided via \\r\\nhelper library—leaving the vendor/OEM to focus on the functionality of the HIDL implementa-\\r\\ntion rather than the nuts and bolts of the underlying HIDL/Binder interactions. 9780134096346_print.indb   19825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0964e824-d044-42e2-bfe5-6af8e3d2f92b":{"__data__":"{\"id_\":\"0964e824-d044-42e2-bfe5-6af8e3d2f92b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"NxPhNS4HBmiPxoxSF7Q4O3XfiM5DhNBbzqpmo8fF0YA=\"}},\"hash\":\"88fBEcd/33m9e9WjnX5lR8R7r/tDHOiKBHp7YKt7qCY=\",\"text\":\"11\\r\\nCreating a Custom \\r\\nBinderized HAL\\r\\nIn Chapter 10, we introduced Project Treble, or the new binderized HAL architecture rolled \\r\\nout with Android 8.0. The new binderized HAL, or HIDL, is required for all devices running \\r\\nAndroid 8.0 and newer. Now it is time to apply the HIDL concepts on a custom platform, \\r\\nmaking it clear how a new HIDL-based HAL can be created and utilized. This chapter demonstrates replacing the legacy HAL for Acme’s custom proximity device, \\r\\nmaking it HIDL based. We’ll see how the system can be customized to pick up new, custom \\r\\nhardware for unique devices like those used in the IoT space. Acme Custom HIDL\\r\\nAs mentioned in Chapter 10, vendors are free to define their own HIDLs as well as vendor-\\r\\nspecific customizations of AOSP/Google-defined HIDLs. Unlike traditional HAL shared libraries, \\r\\nthese components will live within the vendor area of the platform: the /vendor or /odm filesys-\\r\\ntems. This clean separation allows the core Android system to be updated without requiring the \\r\\nOEM’s involvement; this is one of the primary goals of the HIDL architecture. To illustrate this, let’s define a new HIDL for the Acme One, building upon our previous \\r\\nwork in Chapter 8 with a custom proximity HAL. Because this proximity support is custom \\r\\nand is not part of the standard AOSP sensors API, our custom HIDL is needed and is called \\r\\n aproximity. To keep things simple, the HIDL implementation will not require modifications \\r\\nto the kernel—it will leverage the same shim library used in Chapter 8 to access the underlying \\r\\ndevice. The HIDL will illustrate both simple as well as more complex return data. Note\\r\\nThis chapter utilizes a tool from the AOSP build results, hidl-gen. This tool is built at the same \\r\\ntime as a given target. If you have not previously built a platform, this tool will not be found in your \\r\\nbuild tree. Please see Chapter 2 for building the platform. Alternatively, if the build system is set \\r\\nup and lunch has been run, the tool may also be built by executing the command m hidl-gen. 9780134096346_print.indb   19925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"076da3f8-85d4-4ae2-aeb3-653214b9b9f4":{"__data__":"{\"id_\":\"076da3f8-85d4-4ae2-aeb3-653214b9b9f4\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"y469xtZ2r41657HOTU7TbYHkR9DErHBkGbR8h3PxBcc=\"}},\"hash\":\"VTl4u8z6BJaDH3fTOFiD869PXBUhd9aENe5+XzkbY48=\",\"text\":\"200Chapter 11  Creating a Custom Binderized HAL\\r\\nHIDL Definition\\r\\nThe aproximity HIDL definition is similar to the traditional HAL API covered in Chapter 8. In \\r\\naddition to the poll API, you can use a couple of new APIs to retrieve the proximity details for \\r\\nthe underlying sensor as well as some details about the HIDL’s usage. Listing 11.1 and Listing 11.2 \\r\\ndefine the IAproximity HIDL (IAproximity.hal) and its corresponding types (types.hal), \\r\\nrespectively. Listing 11.1 IAproximity HIDL Definition\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\n/**\\r\\n * The Acme specialized proximity support, providing simple APIs to\\r\\n * illustrate vendor custom HIDL. */\\r\\ninterface IAproximity {\\r\\n    /**\\r\\n     * Retrieve the latest proximity value for the specified precision\\r\\n     * value. *\\r\\n     * @param precision contains the precision requested by the caller. *    Valid values may be retrieved using the get_details method. * @return the proximity value returned by the sensor\\r\\n     */\\r\\n    poll(int32_t precision) generates (int32_t proximity);\\r\\n    /**\\r\\n     * Get the details about the underlying sensor. *\\r\\n     * @return the details for the underlying sensor, containing the\\r\\n     *    supported precision values and the range of proximity values. */\\r\\n    get_details() generates (ProximityDetails details);\\r\\n    /**\\r\\n     * Retrieve usage summary information about the backing HIDL service. *\\r\\n     * @return a summary of usage information for the HIDL service. */\\r\\n    summarize() generates (ProximitySummary summary);\\r\\n};\\r\\n9780134096346_print.indb   20025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4b4d5ab5-2cce-4942-87e4-28460bcbba9b":{"__data__":"{\"id_\":\"4b4d5ab5-2cce-4942-87e4-28460bcbba9b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"G1Gi7PiFjfGBKGr/EX9291QxUrrY0Uj0wPhTCMecauM=\"}},\"hash\":\"D9fDdIKA0mIcFCEXomiDsn6MExJTVqnW26/hsDpK0I4=\",\"text\":\"201Acme Custom HIDL\\r\\nListing 11.2 aproximity HIDL types.hal Definition\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\nstruct ValueRange {\\r\\n    int32_t  min;\\r\\n    int32_t  max;\\r\\n};\\r\\nstruct ProximityDetails {\\r\\n    ValueRange  precision;\\r\\n    ValueRange  proximity;\\r\\n};\\r\\nstruct ProximitySummary {\\r\\n    uint64_t  pollCallCount;\\r\\n    int64_t   lastPollCalledMs;\\r\\n};\\r\\nCreate these files in the location vendor/acme/one/interfaces/aproximity/1.0 within the \\r\\nAOSP source tree. The AOSP build contains a tool to help generate build files and boilerplate \\r\\ncode to get started with a service implementation. After the preceding files have been created \\r\\nin the tree, execute the following command in the AOSP build shell to generate an Android.bp \\r\\nfile for building the HIDL (see Listing 11.3). Listing 11.3 Create the HIDL Android.bp File\\r\\nhidl-gen -L androidbp \\\\\\r\\n    -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n    vendor.acme.one.aproximity@1.0\\r\\nThe new Android.bp file will be located alongside the .hal files. This file instructs the build \\r\\nsystem to generate interface headers and boilerplate code needed for the implementation and \\r\\nclient(s). Listing 11.4 shows the generated content. Listing 11.4 Android.bp for the aproximity HIDL\\r\\n// This file is autogenerated by hidl-gen -Landroidbp. hidl_interface {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0\\\",\\r\\n    root: \\\"vendor.acme.one\\\",\\r\\n    product_specific: true,\\r\\n    srcs: [\\r\\n        \\\"types.hal\\\",\\r\\n        \\\"IAproximity.hal\\\",\\r\\n9780134096346_print.indb   20125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b615930e-2a93-4de8-ba8e-0ab8fb84cbce":{"__data__":"{\"id_\":\"b615930e-2a93-4de8-ba8e-0ab8fb84cbce\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jRUHlLREgNAsvJwLSaVEUuDCAkUm4uOEiIxgxlN9tC4=\"},\"NEXT\":{\"nodeId\":\"2144f510-6a13-44ef-8e19-654e6f60ba90\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"V0ZATMot5/D3mAd8Usd9E4sM8BlbZ3TCSR4LFPerAbE=\"}},\"hash\":\"/njJCJuoGwiL/V0rigBzH0WbL222c6vjFkxc43AQXVU=\",\"text\":\"202Chapter 11  Creating a Custom Binderized HAL\\r\\n    ],\\r\\n    interfaces: [\\r\\n        \\\"android.hidl.base@1.0\\\",\\r\\n    ],\\r\\n    gen_java: true,\\r\\n}\\r\\nBefore the AOSP build system will recognize the new HIDL, the top-level interfaces directory \\r\\nwithin the vendor tree for the device needs an Android.bp file. This informs the build system \\r\\nthat the directory is the root location for HIDL packages. Create a new file, vendor/acme/one/\\r\\ninterfaces/Android.bp, with the content of Listing 11.5. Listing 11.5 Android.bp for the Acme One HIDL Interfaces\\r\\nhidl_package_root {\\r\\n    name: \\\"vendor.acme.one\\\",\\r\\n}\\r\\nHIDL Service Implementation\\r\\nNow that the aproximity HIDL is defined, the platform needs the actual implementation. As previously mentioned, this is typically handled by a separate service process, particularly \\r\\nfor HIDLs that are “drivers” for hardware. Because aproximity is an example of such a HIDL \\r\\nimplementation, a native (for example, C++) implementation is needed. Fortunately, hidl-gen  \\r\\ncomes to the rescue here and can generate boilerplate code as a starting point. Listing 11.6 \\r\\nshows the commands to execute at the top level of the build tree to generate the boilerplate \\r\\ncode for a C++ implementation of the HIDL. Listing 11.6 Create aproximity Service Boilerplate\\r\\nmkdir –p device/acme/one/hidl/aproximity\\r\\nhidl-gen –L c++-impl –o device/acme/one/hidl/aproximity \\r\\n  –r vendor.acme.one:vendor/acme/one/interfaces vendor.acme.one.aproximity@1.0\\r\\nYou can find the resultant files, Aproximity.cpp and Aproximity.h, in device/acme/one/\\r\\nhidl/aproximity. Similar to the way the javah or javac -h tools are used to help create JNI \\r\\nboilerplate code, hidl-gen is invaluable for creating a starting point for the service implemen-\\r\\ntation. These two files will be built into a library that is then used by the service process to host \\r\\nthe HIDL. First things first: The files need to be modified to remove unnecessary boilerplate \\r\\ncode and provide the implementation for Acme One. The details of the methods and the special \\r\\nReturn type will be covered shortly while working through the implementation.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2144f510-6a13-44ef-8e19-654e6f60ba90":{"__data__":"{\"id_\":\"2144f510-6a13-44ef-8e19-654e6f60ba90\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jRUHlLREgNAsvJwLSaVEUuDCAkUm4uOEiIxgxlN9tC4=\"},\"PREVIOUS\":{\"nodeId\":\"b615930e-2a93-4de8-ba8e-0ab8fb84cbce\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/njJCJuoGwiL/V0rigBzH0WbL222c6vjFkxc43AQXVU=\"}},\"hash\":\"V0ZATMot5/D3mAd8Usd9E4sM8BlbZ3TCSR4LFPerAbE=\",\"text\":\"Listing 11.7  \\r\\nshows the updated header file. 9780134096346_print.indb   20225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9b48335b-946c-4a5f-8f94-05d25abc83b1":{"__data__":"{\"id_\":\"9b48335b-946c-4a5f-8f94-05d25abc83b1\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"khGWb6o2DkKAsw0QU48+aFLeWGUZ0x084EZslolKvhM=\"}},\"hash\":\"NgtfJEKklstfbKgwg+ghtB2OIKBBgzlalidgdINdBaM=\",\"text\":\"203Acme Custom HIDL\\r\\nListing 11.7 Aproximity.h Implementation\\r\\n#pragma once\\r\\n#include <vendor/acme/one/aproximity/1.0/IAproximity.h>\\r\\n#include <hidl/MQDescriptor.h>\\r\\n#include <hidl/Status.h>\\r\\nnamespace vendor {\\r\\nnamespace acme {\\r\\nnamespace one {\\r\\nnamespace aproximity {\\r\\nnamespace V1_0 {\\r\\nnamespace implementation {\\r\\nusing ::android::hardware::hidl_array;\\r\\nusing ::android::hardware::hidl_handle;\\r\\nusing ::android::hardware::hidl_memory;\\r\\nusing ::android::hardware::hidl_string;\\r\\nusing ::android::hardware::hidl_vec;\\r\\nusing ::android::hardware::Return;\\r\\nusing ::android::hardware::Void;\\r\\nusing ::android::sp;\\r\\nstruct Aproximity : public IAproximity {\\r\\n    Aproximity();\\r\\n    ~Aproximity();\\r\\n    // Methods from ::vendor::acme::one::aproximity::V1_0::IAproximity follow. Return<int32_t> poll(int32_t precision) override;\\r\\n    Return<void> get_details(get_details_cb _hidl_cb) override;\\r\\n    Return<void> summarize(summarize_cb _hidl_cb) override;\\r\\n    // Methods from ::android::hidl::base::V1_0::IBase follow. Return<void> debug(const hidl_handle &handle,\\r\\n                       const hidl_vec<hidl_string> &options) override;\\r\\nprivate:\\r\\n    uint64_t            pollCallCount;\\r\\n    int64_t             lastPollCalledMs;\\r\\n    int                 fd;\\r\\n    proximity_params_t  params;\\r\\n};\\r\\n}  // namespace implementation\\r\\n}  // namespace V1_0\\r\\n}  // namespace aproximity\\r\\n9780134096346_print.indb   20325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d4ca2a64-a530-4e37-942d-e96ff8dadd97":{"__data__":"{\"id_\":\"d4ca2a64-a530-4e37-942d-e96ff8dadd97\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nw6AJExGfBEx9VnXp0inPOzJUWkpXBp4dDwymqXf/i8=\"}},\"hash\":\"lfshXitTatAU+P3YthOXAJiqUXXOV4/XqOwssB3GYQQ=\",\"text\":\"204Chapter 11  Creating a Custom Binderized HAL\\r\\n}  // namespace one\\r\\n}  // namespace acme\\r\\n}  // namespace vendor\\r\\nNow for the actual implementation of the IAproximity methods for the HIDL. Remember that \\r\\nfor a hardware-based HIDL (for example, driver HIDL), this is where access to the kernel via a  \\r\\n/sys or /dev interface would be performed (or connected via a secondary library that performs \\r\\nthe actual kernel I/O). For our trivial HIDL implementation, we will leverage the shim library \\r\\nthat was created as part of the traditional HAL in Chapter 8, as shown in Listing 11.8. Listing 11.8 Aproximity.cpp Implementation\\r\\n#include <chrono>\\r\\n#include \\\"Aproximity.h\\\"\\r\\nusing namespace std::chrono;\\r\\nnamespace vendor {\\r\\nnamespace acme {\\r\\nnamespace one {\\r\\nnamespace aproximity {\\r\\nnamespace V1_0 {\\r\\nnamespace implementation {\\r\\nstatic int64_t now() {\\r\\n    time_point now = system_clock().now();\\r\\n    milliseconds nowMs =\\r\\n        duration_cast<milliseconds>(now.time_since_epoch());\\r\\n    return static_cast<int64_t>(nowMs.count());\\r\\n}\\r\\nAproximity::Aproximity() {\\r\\n    this->fd = open_sensor(this->params);\\r\\n    if (this->fd < 0) {\\r\\n        this->params.precision.min = -1;\\r\\n        this->params.precision.range = -1;\\r\\n        this->params.proximity.min = -1;\\r\\n        this->params.proximity.range = -1;\\r\\n    }\\r\\n}\\r\\nAproximity::~Aproximity() {\\r\\n    if (this->fd >= 0) {\\r\\n        close_sensor(this->fd);\\r\\n        this->fd = -1;\\r\\n    }\\r\\n9780134096346_print.indb   20425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"240f4c7f-5802-4aee-bb66-574700f27534":{"__data__":"{\"id_\":\"240f4c7f-5802-4aee-bb66-574700f27534\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"v0oROQ6B01vpmhdbj6MsuV4CwkeE7NPiMhvUBDfDrzg=\"}},\"hash\":\"sFprTdNWtp2aWzFN1tTzjd4OCz6Uwx/2d+lh6eLXULA=\",\"text\":\"205Acme Custom HIDL\\r\\n    this->pollCallCount = 0;\\r\\n    this->lastPollCalledMs = 0;\\r\\n}\\r\\n// Methods from ::vendor::acme::one::aproximity::V1_0::IAproximity follow. Return<int32_t> Aproximity::poll(int32_t precision) {\\r\\n    this->pollCallCount++;\\r\\n    this->lastPollCalledMs = now(); \\r\\n    if (this->fd < 0) {\\r\\n        return -1;\\r\\n    }\\r\\n    int shimPrecision = static_cast<int>(precision);\\r\\n    int32_t result =\\r\\n        static_cast<int32_t>(poll_sensor(this->fd, shimPrecision));\\r\\n    return result;\\r\\n}\\r\\nReturn<void> Aproximity::get_details(get_details_cb _hidl_cb) {\\r\\n    ProximityDetails  result;\\r\\n    result.precision.min = static_cast<int32_t>(this->params.precision.min);\\r\\n    result.precision.max = static_cast<int32_t>(this->params.precision.range);\\r\\n    result.proximity.min = static_cast<int32_t>(this->params.proximity.min);\\r\\n    result.proximity.max = static_cast<int32_t>(this->params.proximity.range);\\r\\n    _hidl_cb(result);\\r\\n    return Void();\\r\\n}\\r\\nReturn<void> Aproximity::summarize(summarize_cb _hidl_cb) {\\r\\n    ProximitySummary  result;\\r\\n    result.pollCallCount = this->pollCallCount;\\r\\n    result.lastPollCalledMs = this->lastPollCalledMs;\\r\\n    _hidl_cb(result);\\r\\n    return Void();\\r\\n}\\r\\nReturn<void> Aproximity::debug(const hidl_handle &handle,\\r\\n                               const hidl_vec<hidl_string> & /*options*/) {\\r\\n    if (handle == nullptr || handle->numFds < 1 || handle->data[0] < 0) {\\r\\n        return Void();\\r\\n    }\\r\\n9780134096346_print.indb   20525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8ce09345-dcf7-4383-a005-89d8500f8ef2":{"__data__":"{\"id_\":\"8ce09345-dcf7-4383-a005-89d8500f8ef2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"68pHoQnmbAmVY4WMNYdTUvT1Odj3UYe60TEal6CHGbc=\"},\"NEXT\":{\"nodeId\":\"830be76d-92bf-4964-98b6-2403d6608edd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"TPNviAxqueoD+lM+tGKrEZmJLQBUdqMLefFgfJL9OiY=\"}},\"hash\":\"uNaG4/O2IsfOoEdVe0qCCut42eFeu+7DN5QH08/LmtY=\",\"text\":\"206Chapter 11  Creating a Custom Binderized HAL\\r\\n    int fd = handle->data[0];\\r\\n    dprintf(fd, \\\"HIDL:\\\\n\\\");\\r\\n    dprintf(fd, \\\"  Poll call count: %lu\\\\n\\\", this->pollCallCount);\\r\\n    dprintf(fd, \\\"  Last poll call:  %ld\\\\n\\\", this->lastPollCalledMs);\\r\\n    fsync(fd);\\r\\n    return Void();\\r\\n}\\r\\n}  // namespace implementation\\r\\n}  // namespace V1_0\\r\\n}  // namespace aproximity\\r\\n}  // namespace one\\r\\n}  // namespace acme\\r\\n}  // namespace vendor\\r\\nNotice how the methods get_details and summarize each use a HIDL callback function \\r\\nprovided by the caller to return data. This must be done before the method returns: it is how \\r\\nthe service “generates” the non-primitive data returned to the client, which is waiting synchro-\\r\\nnously. What makes this particularly confusing is both methods do return something: an \\r\\ninstance of a special class, Void! If you look carefully at the generated C++ code, each of the \\r\\nHIDL methods returns a special Return class instance. The HIDL framework uses the Return \\r\\nclass along with the help of the backing Binder framework to determine that the HIDL call \\r\\nsucceeded or not. The aproximity clients, discussed in Chapter 12, will demonstrate how this \\r\\ncan be used. The remaining method defined for the IAproximity interface is the poll method, which \\r\\ngenerates an int32_t with the latest proximity value. However, unlike the other methods that \\r\\nreturn more complex data types, this return value is provided as part of the Return object \\r\\nrather than utilizing a synchronous callback method. Most HIDL service implementations will build the backing HIDL calls into a static library that \\r\\nis then linked with the service executable. The aproximity service is constructed in the same \\r\\nmanner, requiring a separate file containing the main service (daemon) entry point. The file \\r\\ndevice/acme/one/hidl/aproximity/service.cpp provides the entry point for the service. This is where the Aproximity class instance is created and registered as the HIDL service. It \\r\\nthen joins the RPC thread pool used by the HIDL subsystem. The RPC thread pool is utilized \\r\\nby the HIDL framework (really, the backing Binder subsystem) to process incoming requests.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"830be76d-92bf-4964-98b6-2403d6608edd":{"__data__":"{\"id_\":\"830be76d-92bf-4964-98b6-2403d6608edd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"68pHoQnmbAmVY4WMNYdTUvT1Odj3UYe60TEal6CHGbc=\"},\"PREVIOUS\":{\"nodeId\":\"8ce09345-dcf7-4383-a005-89d8500f8ef2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uNaG4/O2IsfOoEdVe0qCCut42eFeu+7DN5QH08/LmtY=\"}},\"hash\":\"TPNviAxqueoD+lM+tGKrEZmJLQBUdqMLefFgfJL9OiY=\",\"text\":\"By joining the thread pool, the main thread of this service is added to the pool and will not \\r\\nreturn—it will process incoming requests forever. The code for this is straightforward as shown \\r\\nin Listing 11.9. Listing 11.9 Aproximity Service Entry Point\\r\\n#include <hidl/HidlSupport.h>\\r\\n#include <hidl/HidlTransportSupport.h>\\r\\n#include <utils/Errors.h>\\r\\n9780134096346_print.indb   20625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"35b5eb63-e313-4402-b2cf-b6d0b6237a1b":{"__data__":"{\"id_\":\"35b5eb63-e313-4402-b2cf-b6d0b6237a1b\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"b9vrKQ1JPwLY0XvBddF7Nlh5JDOkNTNUDd7z6xJlgFo=\"}},\"hash\":\"hha9U1kLK4NgrOA+L0ssh7W4rTwJdMZDUNfFgEw10ck=\",\"text\":\"207Acme Custom HIDL\\r\\n#include <utils/StrongPointer.h>\\r\\n#include \\\"Aproximity.h\\\"\\r\\nusing android::hardware::configureRpcThreadpool;\\r\\nusing android::hardware::joinRpcThreadpool;\\r\\nusing vendor::acme::one::aproximity::V1_0::implementation::Aproximity;\\r\\nusing namespace android;\\r\\nint main() {\\r\\n    configureRpcThreadpool(1, true);\\r\\n    sp<Aproximity>  aproximity = new Aproximity();\\r\\n    status_t status = aproximity->registerAsService(\\\"default\\\");\\r\\n    if (status != OK) {\\r\\n        return status;\\r\\n    }\\r\\n    joinRpcThreadpool();\\r\\n}\\r\\nAfter the HIDL service is built and present on the platform, it needs to be started by the system \\r\\nso the service is available for clients. This is done using an init run command (or rc) file for \\r\\nthe service. Unlike other daemons in the system that require changes to a core platform script \\r\\n(such as init.hikey960.rc), the rc file for a HIDL service is kept alongside the service code \\r\\nand is pulled into the image based on build rules. Create the file device/acme/one/hidl/\\r\\naproximity/vendor.acme.one.aproximity@1.0-service.rc with the content shown in \\r\\nListing 11.10. Listing 11.10 The Aproximity Service rc File\\r\\nservice vendor.aproximity-1-0 /vendor/bin/hw/vendor.acme.one.aproximity@1.0-service\\r\\n    class hal\\r\\n    user system\\r\\n    group system\\r\\nThe rc file tells the (vendor) init process to start a service named vendor.aproximity-1-0 \\r\\nusing the executable found at /vendor/bin/hw as part of the class of daemons labeled hal, \\r\\nand it is to be executed as the user system and in the group system. The service code is ready! Time to pull it into the platform build. Create the file device/acme/\\r\\none/hidl/aproximity/Android.bp with the content in Listing 11.11. 9780134096346_print.indb   20725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"058dae20-cb74-42f4-9ce9-66c6efdd23a2":{"__data__":"{\"id_\":\"058dae20-cb74-42f4-9ce9-66c6efdd23a2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KuNL58I4ABWFHfsJjaAH1OfWYnUQH3cSgz5cNUAsRQw=\"}},\"hash\":\"HXG4F9JBvZciUJOWGTDpRBKbmotb9d7+weKVqUYpiZM=\",\"text\":\"208Chapter 11  Creating a Custom Binderized HAL\\r\\nListing 11.11 Aproximity Service Android.bp\\r\\ncc_defaults {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-defaults\\\",\\r\\n    defaults: [\\\"hidl_defaults\\\"],\\r\\n    relative_install_path: \\\"hw\\\",\\r\\n    shared_libs: [\\r\\n        \\\"libhidlbase\\\",\\r\\n        \\\"libhidltransport\\\",\\r\\n        \\\"libhwbinder\\\",\\r\\n        \\\"libutils\\\",\\r\\n        \\\"vendor.acme.one.aproximity@1.0\\\",\\r\\n    ],\\r\\n    vendor: true,\\r\\n    proprietary: true,\\r\\n}\\r\\ncc_library {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-impl\\\",\\r\\n    defaults: [\\\"vendor.acme.one.aproximity@1.0-defaults\\\"],\\r\\n    srcs: [\\r\\n        \\\"Aproximity.cpp\\\",\\r\\n    ],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n    ],\\r\\n    export_include_dirs: [\\\".\\\"],\\r\\n}\\r\\ncc_binary {\\r\\n    name: \\\"vendor.acme.one.aproximity@1.0-service\\\",\\r\\n    defaults: [\\\"vendor.acme.one.aproximity@1.0-defaults\\\"],\\r\\n    init_rc: [\\\"vendor.acme.one.aproximity@1.0-service.rc\\\"],\\r\\n    srcs: [\\\"service.cpp\\\"],\\r\\n    header_libs: [\\r\\n        \\\"libacmeproximityshim_headers\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"libacmeproximityshim\\\",\\r\\n        \\\"vendor.acme.one.aproximity@1.0-impl\\\",\\r\\n    ],\\r\\n    proprietary: true,\\r\\n    vendor: true,\\r\\n}\\r\\n9780134096346_print.indb   20825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e930ab16-5676-4535-a079-92f287486dba":{"__data__":"{\"id_\":\"e930ab16-5676-4535-a079-92f287486dba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zoveRzQi/Q5QawiEqAxgCpyO7sH/ZjlyEuNx8zpYTOU=\"},\"NEXT\":{\"nodeId\":\"df7ff2f6-808e-4184-9b42-bb3cc8346780\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oDbpgYWpPPmQJl0ztgeKtdkQW4Y9KEaD13f6NSIQpVI=\"}},\"hash\":\"m+cF03ypLTrN+RIXQoDcY77KBdRpbv92pcDAjkX5CVI=\",\"text\":\"209Acme Custom HIDL\\r\\nThis blueprint file for soong lays out three different pieces: a set of default build options for \\r\\nC++ code, a C++ library containing the Aproximity.cpp implementation, and a C++ binary \\r\\ncontaining the service entry point and linked with the service library implementation. The cc_defaults section builds on top of an existing hidl_defaults definition elsewhere \\r\\nin the platform and is named vendor.acme.one.aproximity@1.0-defaults. This type of \\r\\nsection in a blueprint file sets up common things that can be applied to other blocks, such as \\r\\nbuilding a library or executable binary. The defaults section in this file specifies the relative \\r\\ninstall path for any rule using these defaults as well as a set of shared libraries to be used. The \\r\\nHIDL library and service binary sections both apply these defaults. The net result is the service \\r\\nbinary will be located at /vendor/bin/hw on the target. The service helper library is static, so it is not installed on the running target. It is linked \\r\\ndirectly into the service binary along with the contents of the libacmeproximityshim library \\r\\nthat provides access to the underlying device. The final section pulls together the static libraries and the service entry point code to create \\r\\nan executable, vendor.acme.one.aproximity@1.0-service. This is what is executed by \\r\\ninit via the rc file in Listing 11.10. Remember: It is a native Linux binary, not a runtime (for \\r\\nexample, Java/Kotlin) Android application. SE Linux for Android Changes\\r\\nBefore the new HIDL can be used, you must put some security-related settings into place. As \\r\\ndiscussed in Chapter 5, Android’s use of SE Linux requires that binaries have the necessary \\r\\naccess controls enabled. In this case, the aproximity service executable will need to have SE \\r\\npolicies defined and applied to it before it will function. Even though Acme One is built upon the HiKey960 device support, the SE policy changes are \\r\\nmade in the overlay found in device/acme/one/acme_one/sepolicy. The changes are broken \\r\\ndown into three different files: the policy file for the HIDL and two context definition files that \\r\\nutilize the context labels defined in the policy.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"df7ff2f6-808e-4184-9b42-bb3cc8346780":{"__data__":"{\"id_\":\"df7ff2f6-808e-4184-9b42-bb3cc8346780\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"zoveRzQi/Q5QawiEqAxgCpyO7sH/ZjlyEuNx8zpYTOU=\"},\"PREVIOUS\":{\"nodeId\":\"e930ab16-5676-4535-a079-92f287486dba\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"m+cF03ypLTrN+RIXQoDcY77KBdRpbv92pcDAjkX5CVI=\"}},\"hash\":\"oDbpgYWpPPmQJl0ztgeKtdkQW4Y9KEaD13f6NSIQpVI=\",\"text\":\"The longest and most complex is the policy type \\r\\nenforcement file, because it defines several attributes and context labels needed for the HIDL \\r\\nservice. As discussed in Chapter 5, crafting an SE policy file is non-trivial and also sparsely \\r\\ndocumented within AOSP. Often, the best documentation is examining existing SE policy files \\r\\nbeneath system/sepolicy in the AOSP source tree. For example, the files system/sepolicy/\\r\\npublic/hal_sensors.te and system/policy/vendor/hal_sensors_default.te were used \\r\\nas guideposts when creating the policy file for aproximity. Listing 11.12 shows the policy file, \\r\\ndevice/acme/one/acme_one/sepolicy/hal_aproximity.te. Listing 11.12 hal_aproximity.te Type Enforcement File\\r\\nhal_attribute(aproximity)\\r\\ntype hal_aproximity_hwservice, hwservice_manager_type;\\r\\n9780134096346_print.indb   20925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7c0333a9-1879-4919-be20-0776c1626292":{"__data__":"{\"id_\":\"7c0333a9-1879-4919-be20-0776c1626292\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UKSFnfmP9+qzrCh0heQQyb64jZTXsSYQ6SqiH2vVCEE=\"},\"NEXT\":{\"nodeId\":\"9b210bca-e19e-455b-b391-8752eb856397\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"kGhZSjhjIpJ8l8g4dxC9/s9kwo2oa4fLd62OoowRasg=\"}},\"hash\":\"WQJJCyhPq+mRQx6Q452sVYFNmMmh9IuGDIhWV7zdNHE=\",\"text\":\"210Chapter 11  Creating a Custom Binderized HAL\\r\\n###\\r\\n# The HIDL aproximity attribute defines the _server and _client\\r\\n#\\r\\nbinder_call(hal_aproximity_client, hal_aproximity_server)\\r\\nbinder_call(hal_aproximity_server, hal_aproximity_client)\\r\\nhal_attribute_hwservice(hal_aproximity, hal_aproximity_hwservice)\\r\\n####\\r\\n# Create an execution domain for the service hosting the server side\\r\\n#\\r\\ntype hal_aproximity_default, domain;\\r\\nhal_server_domain(hal_aproximity_default, hal_aproximity)\\r\\ntype hal_aproximity_default_exec, exec_type, vendor_file_type, file_type;\\r\\ninit_daemon_domain(hal_aproximity_default)\\r\\nallow hal_aproximity_default hal_aproximity_hwservice:hwservice_manager find;\\r\\n# Allow the HIDL access to /dev/tty*, which would cover USB\\r\\n# serial devices at /dev/ttyUSB*\\r\\nallow hal_aproximity_default serial_device:chr_file rw_file_perms;\\r\\nThe file leverages a number of macros defined by the AOSP policy files, which makes the policy \\r\\nfile shorter and consistent with other HIDL definitions. But those macros also obfuscate some \\r\\nvery important details! Let’s walk through the file in chunks to make it easier to digest. The first chunk to look at is up through the hal_attribute_hw_service line. The hal_\\r\\nattribute macro at the start of the file does a number of things. First, it sets up new SE \\r\\nattributes hal_aproximity, hal_aproximity_client, and hal_aproximity_service. From there, it also declares some neverallow policies restricting processes that have these \\r\\nattributes from forking other processes. This lays the groundwork for definitions later in the \\r\\nfile. Similarly, the hal_aproximity_hwservice type is defined to be an hwservice_manager_\\r\\ntype. This ultimately allows the hwservicemanager to manage service interfaces labeled \\r\\nwith this type. The new hal_aproximity attribute and hal_aproximity_hwservice are tied \\r\\ntogether via the macro hal_attribute_hwservice. This macro sets up allow rules for hal_\\r\\naproximity_client to find interfaces labeled with hal_aproximity_hwservice via  \\r\\nhwservicemanager. The client label will be used later in Chapter 12 when we create HIDL \\r\\nclient apps.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9b210bca-e19e-455b-b391-8752eb856397":{"__data__":"{\"id_\":\"9b210bca-e19e-455b-b391-8752eb856397\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"UKSFnfmP9+qzrCh0heQQyb64jZTXsSYQ6SqiH2vVCEE=\"},\"PREVIOUS\":{\"nodeId\":\"7c0333a9-1879-4919-be20-0776c1626292\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"WQJJCyhPq+mRQx6Q452sVYFNmMmh9IuGDIhWV7zdNHE=\"}},\"hash\":\"kGhZSjhjIpJ8l8g4dxC9/s9kwo2oa4fLd62OoowRasg=\",\"text\":\"The client label will be used later in Chapter 12 when we create HIDL \\r\\nclient apps. The hal_attribute_hwservice macro also sets up components running as \\r\\nhal_aproximity_server so they can add themselves and perform find operations with the \\r\\nhwservicemanager and use the base HIDL functionality. Finally, the binder_call macros are \\r\\nused to link the hal_aproximity_client and hal_aproximity_service processes via Binder, \\r\\nallowing the client to call the server as well as transfer references and files between the two. That is a ton of setup for just five lines! The next chunk defines an execution domain for the HIDL service. Recall from Chapter 5 that \\r\\nAndroid SE policies require daemons to run in a well-defined execution domain. Further, the \\r\\n9780134096346_print.indb   21025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cd606310-60a2-4a63-82db-d8419cb37560":{"__data__":"{\"id_\":\"cd606310-60a2-4a63-82db-d8419cb37560\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"QG6VsXeWUDHBNMhO6FIOfrXnItiJIZJKpClGURs+CCA=\"},\"NEXT\":{\"nodeId\":\"10f1d26e-0741-4189-bddb-6974cbe73d36\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/u9C4r1xIt+BconMnFK86cl33mHvJg0ffzCZN65w0aA=\"}},\"hash\":\"0HYPCnAT7a3SLXN05GSb0xsOWdZ5mFE7qIQ6z8YEDZU=\",\"text\":\"211Acme Custom HIDL\\r\\ninit process handling of vendor services will not even try to start up the service defined in the \\r\\nrc file shown earlier in this chapter, if the SE domain is not set up correctly! The new domain, \\r\\nhal_aproximity_default, is first defined then passed to the macro hal_server_domain \\r\\nwith the previously defined attribute hal_aproximity as a type attribute of the domain. Additionally, the macro associates type attributes halserverdomain and hal_aproximity_ \\r\\nserver to the new domain. This effectively marks anything in the new domain as being an \\r\\naproximity server and also within the scope of the existing halserverdomain. From here, a \\r\\nnew type, hal_aproximity_default_exec, is used for describing files needed for the HIDL \\r\\nservice execution. This new execution domain will be used to label the HIDL service binary \\r\\nshortly, in another SE file. Now that the server side has an execution domain defined, the init process must be allowed \\r\\nto transition to it. This is a subtle, but critical nuance. After init has forked to create the new \\r\\nprocess for the service, it needs to be allowed to transition domains to the one defined for the \\r\\nHIDL service. This is accomplished via the init_daemon_domain macro. This macro sets up \\r\\nseveral allow policies for init to automatically transition to hal_aproximity_default when \\r\\nit forks and starts a process labeled as hal_aproximity_default_exec. Rounding out this \\r\\nchunk is an allow policy for processes within the hal_aproximity_default domain to find \\r\\nthe hal_aproximity_hwservice. The final allow rule specifies that any binary running in the hal_aproximity_default \\r\\ndomain is able to access serial devices exposed by the kernel. Because this HIDL leverages the \\r\\nsame shim library as the traditional HAL to access the underlying device interface(s), it needs \\r\\nthe same SE access to the backing USB serial interface that connects the custom proximity \\r\\ndevice to the system on a chip (SoC). This is the same type of allow rule that is applied to the \\r\\ndomain executing the daemon(s) leveraging the legacy HAL, discussed in Chapter 9. All the various types defined and allow rules established in hal_aproximity.te are great, but \\r\\nby themselves they do not accomplish anything.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"10f1d26e-0741-4189-bddb-6974cbe73d36":{"__data__":"{\"id_\":\"10f1d26e-0741-4189-bddb-6974cbe73d36\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"QG6VsXeWUDHBNMhO6FIOfrXnItiJIZJKpClGURs+CCA=\"},\"PREVIOUS\":{\"nodeId\":\"cd606310-60a2-4a63-82db-d8419cb37560\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"0HYPCnAT7a3SLXN05GSb0xsOWdZ5mFE7qIQ6z8YEDZU=\"}},\"hash\":\"/u9C4r1xIt+BconMnFK86cl33mHvJg0ffzCZN65w0aA=\",\"text\":\"Remember, with SE Linux, each process, file, \\r\\nsocket, and so on is given a context for the kernel to understand what access it has to features \\r\\nwithin the system. In the case of our custom HIDL, the two “top” level points of concern are \\r\\nthe HIDL service and the HIDL interface. The service is an executable binary that is stored on \\r\\nthe file system. To apply the SE policies to the specific file, add the lines in Listing 11.13 to the \\r\\nend of device/acme/one/acme_one/sepolicy/file_contexts. Listing 11.13 Aproximity Additions to file_contexts\\r\\n# Acme One Specific Changes\\r\\n/vendor/bin/hw/vendor\\\\.acme\\\\.one\\\\.aproximity@1\\\\.0-service   \\r\\n➥ u:object_r:hal_aproximity_default_exec:s0\\r\\nThe vendor.acme.one.aproximity@1.0-service executable is declared to be the hal_\\r\\naproximity_default_exec type. This also marks it as a vendor-executable file and also estab-\\r\\nlishes that it is a HIDL service for hal_aproximity_hwservice labeled interfaces. This leaves the HIDL interface (the binder interface) to be defined. Create the file device/acme/\\r\\none/acme_one/sepolicy/hwservice_contexts with the content shown in Listing 11.14. 9780134096346_print.indb   21125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"56600b2f-ce2b-4b69-bafb-9c9c5750eaf0":{"__data__":"{\"id_\":\"56600b2f-ce2b-4b69-bafb-9c9c5750eaf0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nM/d+MBXef0QEUM7abRZ5zD9TQrZcc8h7Sp/dTNIjSY=\"},\"NEXT\":{\"nodeId\":\"45aec5b0-1b1b-4e19-8295-8bc02d37158a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"DXgbm7U4tEL+92PdUYQcOi6XJBTyH7dxoi533b7cCGo=\"}},\"hash\":\"L6ff4nNYZ/EFBuzE9Xwe89FBXHCiPN1LPcHjnWgnexM=\",\"text\":\"212Chapter 11  Creating a Custom Binderized HAL\\r\\nListing 11.14 Aproximity-Specific hwservice_contexts \\r\\nvendor.acme.one.aproximity::IAproximity     u:object_r:hal_aproximity_hwservice:s0\\r\\nThis final piece brings all the SE policy definitions added for the HIDL together. The one inter-\\r\\nface the custom HIDL exposed, vendor.acme.one.aproximity::IAproximity, is declared to \\r\\nbe of type hal_aproximity_hwservice. Device Manifest\\r\\nNow that the HIDL is defined and SE policy has been associated with it, the system needs to \\r\\nknow that this HIDL exists and some of the details about it. The HIDL infrastructure requires \\r\\ndevices to declare via a manifest which HIDL components are present and the details about \\r\\nthem. Without the details in this file, hwservicemanager does not know how the HIDL can be \\r\\nregistered and used (for example, the transport). Using this information, hwservicemanager  \\r\\ncan verify/impose correct SE policy and support for the transport. The possible values for \\r\\ntransports are hwbinder and passthrough. Any other value, including a missing transport, is \\r\\nconsidered an error. Remember that any new devices running Android 8 or newer are allowed \\r\\na very limited set of passthrough type HIDLs. Create the file devices/acme/one/acme_one/\\r\\nmanifest.xml with  the content shown in Listing 11.15. Listing 11.15 Aproximity Additions to Device manifest.xml\\r\\n<manifest version=”1.0” type=”device”>\\r\\n    <hal format=\\\"hidl\\\">\\r\\n        <name>vendor.acme.one.aproximity</name>\\r\\n        <transport>hwbinder</transport>\\r\\n        <version>1.0</version>\\r\\n        <interface>\\r\\n            <name>IAproximity</name>\\r\\n            <instance>default</instance>\\r\\n        </interface>\\r\\n    </hal>\\r\\n</manifest>\\r\\nBecause Acme One is derived from the hikey960 device, the device manifest changes need \\r\\nto be picked up by the HiKey960 board configuration makefile. Edit the file device/linaro/\\r\\nhikey/hikey960/BoardConfig.mk, adding the content shown in Listing 11.16 immediately \\r\\nafter the BoardConfigCommon.mk file is included.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"45aec5b0-1b1b-4e19-8295-8bc02d37158a":{"__data__":"{\"id_\":\"45aec5b0-1b1b-4e19-8295-8bc02d37158a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nM/d+MBXef0QEUM7abRZ5zD9TQrZcc8h7Sp/dTNIjSY=\"},\"PREVIOUS\":{\"nodeId\":\"56600b2f-ce2b-4b69-bafb-9c9c5750eaf0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"L6ff4nNYZ/EFBuzE9Xwe89FBXHCiPN1LPcHjnWgnexM=\"}},\"hash\":\"DXgbm7U4tEL+92PdUYQcOi6XJBTyH7dxoi533b7cCGo=\",\"text\":\"Listing 11.16 Aproximity Additions to HiKey960 BoardConfig.mk\\r\\n# Extend the device manifest file (for Acme One HIDL)\\r\\nifeq (acme_one, $(TARGET_PRODUCT))\\r\\n$(warning Including Acme One HIDL manifest)\\r\\n9780134096346_print.indb   21225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4330931a-d821-42c6-908c-a0b560e8af51":{"__data__":"{\"id_\":\"4330931a-d821-42c6-908c-a0b560e8af51\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PTlXsRGnkDt7pDbgzAK/XEbi6E4UwZrxkdLKUZcJR84=\"},\"NEXT\":{\"nodeId\":\"b49bb85a-b701-41a5-a084-60d50bc74057\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"9hcSyVaBfEZfVwl8/Mkf3jeu9scEHiRNQ3wN/xrETXM=\"}},\"hash\":\"I6NekowNdHv+zUHXMKWEHptYqAscAlxNWsbKyNrWZig=\",\"text\":\"213Acme Custom HIDL\\r\\nDEVICE_MANIFEST_FILE += device/acme/one/manifest.xml\\r\\nendif\\r\\nBuild the HIDL into Acme\\r\\nJust like adding a custom app or other component, you must add the HIDL service to the Acme \\r\\nbuild. Edit the file device/acme/one/acme_one/acme_one.mk and add the line shown in \\r\\nListing 11.17. Listing 11.17 Acme One HIDL Updates to acme_one.mk \\r\\nPRODUCT_PACKAGES += vendor.acme.one.aproximity@1.0-service\\r\\nRe-running the build for the target will result in updates to system.img and vendor.img. After \\r\\nthese are flashed on to the HiKey960 board, the aproximity service will start at system startup, \\r\\nshown in bold in Listing 11.18. Listing 11.18 Running aproximity Service \\r\\n$ adb logcat –v time | grep –C 3 –i aproximity\\r\\n01-01 00:07:12.519 I/ServiceManagement( 2453): Removing namespace from process name android.hardware.configstore@1.1-service to configstore@1.1-service. 01-01 00:07:12.523 I/ServiceManagement( 2449): Registered  android.hardware.health@2.0::IHealth/backup (start delay of 70ms)\\r\\n01-01 00:07:12.523 I/health@2.0/( 2449): health@2.0/backup: Hal init done\\r\\n01-01 00:07:12.525 I/ServiceManagement( 2460): Registered  vendor.acme.one.aproximity@1.0::IAproximity/default (start delay of 56ms)\\r\\n01-01 00:07:12.525 I/ServiceManagement( 2460): Removing namespace from process name vendor.acme.one.aproximity@1.0-service to aproximity@1.0-service.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b49bb85a-b701-41a5-a084-60d50bc74057":{"__data__":"{\"id_\":\"b49bb85a-b701-41a5-a084-60d50bc74057\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PTlXsRGnkDt7pDbgzAK/XEbi6E4UwZrxkdLKUZcJR84=\"},\"PREVIOUS\":{\"nodeId\":\"4330931a-d821-42c6-908c-a0b560e8af51\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"I6NekowNdHv+zUHXMKWEHptYqAscAlxNWsbKyNrWZig=\"}},\"hash\":\"9hcSyVaBfEZfVwl8/Mkf3jeu9scEHiRNQ3wN/xrETXM=\",\"text\":\"00:07:12.532 I/netdClient( 2443): Skipping libnetd_client init since *we* are netd\\r\\n01-01 00:07:12.533 I/ServiceManagement( 2458): Registered  android.hardware.memtrack@1.0::IMemtrack/default (start delay of 65ms)\\r\\n01-01 00:07:12.534 I/ServiceManagement( 2458): Removing namespace from process name android.hardware.memtrack@1.0-service to memtrack@1.0-service. <CTRL-C>\\r\\n$ adb shell\\r\\nhikey960:/$ ps –A | grep –i aproximity\\r\\nsystem   2460   1   37068   4652 0      0 S vendor.acme.one.aproximity@1.0-service\\r\\n9780134096346_print.indb   21325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"450f323a-1a10-45a1-abb9-b0ad78ee8165":{"__data__":"{\"id_\":\"450f323a-1a10-45a1-abb9-b0ad78ee8165\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nsXECSpVwAFZFmvMKFwrdTf1ESE5E2wq+u1Qj8fGJJE=\"},\"NEXT\":{\"nodeId\":\"d623b610-89ad-47a8-88e9-f77b81e581c2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cQ+qFowYS+WrQ2tp6IHs7D/lX72QeUhcAbZ/H7Gt6Qc=\"}},\"hash\":\"y0zR/+rY+kEZW2qLnk1PXlrmniQD2hJyz7vQ0dWyjs8=\",\"text\":\"214Chapter 11  Creating a Custom Binderized HAL\\r\\nLocking Down the API\\r\\nJust like a publicly released SDK or library, defining a new, custom HIDL is a non-trivial effort. It \\r\\nrequires careful consideration of the API details. Creating an API just to turn around and change \\r\\nor remove it would be obnoxious as well as a nightmare to support. These public interfaces \\r\\nare not the same as internal codebase APIs, which may be constantly refactored. After they are \\r\\n“published,” HIDL-defined interfaces have to be considered frozen: “stable” and always avail-\\r\\nable. This ensures that clients using the HIDL will work on any target that provides the inter-\\r\\nface, and that future devices that expose the HIDL are also compatible. The AOSP framework \\r\\ndoes not enforce this requirement at runtime—it really can’t because it has no way of knowing \\r\\nwhat prior revisions of an API looked like. All is not lost, though. The AOSP build system has \\r\\na mechanism that ensures that an interface at a specific API does not change. Recall that each \\r\\nHIDL defined by the AOSP framework, as well as the custom HIDL in this section, has a version \\r\\nnumber associated with it. This combination makes the HIDL interface unique. After an inter-\\r\\nface has been defined and is ready to be “locked down,” a special hash is created for it. This \\r\\nhash is used both at build time and also when executing the Vendor Test Suite (VTS) to verify \\r\\nthe vendor’s device build is compliant. You can find more details about interface hashing at: \\r\\nhttps://source.android.com/devices/architecture/hidl/hashing\\r\\nAll HIDL interfaces, including the system-defined interfaces, must be locked down to pass VTS. For example, Listing 11.19 shows the first several lines of the AOSP HIDL interfaces for  \\r\\nAndroid 10. It has been abbreviated for space considerations. You can find the actual file at \\r\\nhardware/interfaces/current.txt. Listing 11.19 AOSP HIDL Hashes \\r\\n# Do not change this file except to add new interfaces.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d623b610-89ad-47a8-88e9-f77b81e581c2":{"__data__":"{\"id_\":\"d623b610-89ad-47a8-88e9-f77b81e581c2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"nsXECSpVwAFZFmvMKFwrdTf1ESE5E2wq+u1Qj8fGJJE=\"},\"PREVIOUS\":{\"nodeId\":\"450f323a-1a10-45a1-abb9-b0ad78ee8165\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"y0zR/+rY+kEZW2qLnk1PXlrmniQD2hJyz7vQ0dWyjs8=\"}},\"hash\":\"cQ+qFowYS+WrQ2tp6IHs7D/lX72QeUhcAbZ/H7Gt6Qc=\",\"text\":\"Changing\\r\\n# pre-existing interfaces will fail VTS and break framework-only OTAs\\r\\n# HALs released in Android O\\r\\nf219c3b5b8c...9ad090417a2 android.hardware.audio@2.0::IDevice\\r\\n4d579cae1cd...9de5c1c7362 android.hardware.audio@2.0::IDevicesFactory\\r\\n203e23f1801...624c2b0848a android.hardware.audio@2.0::IPrimaryDevice\\r\\naaf93123dee...ebe1ee86748 android.hardware.audio@2.0::IStream\\r\\n0468c5723b0...27b04b766df android.hardware.audio@2.0::IStreamIn\\r\\n7296f7064fd...178d063680a android.hardware.audio@2.0::IStreamOut\\r\\n19d241d71c3...25e9a98b6c2 android.hardware.audio@2.0::IStreamOutCallback\\r\\nc84da9f5860...774f8ea2648 android.hardware.audio@2.0::types\\r\\n1305786c06e...54752b8566b android.hardware.audio.common@2.0::types\\r\\n... The Acme One aproximity HIDL is now “locked down” and ready for use. Because this is a \\r\\nvendor-specific HIDL, the hash details for it go into the vendor-specific interfaces directory. Thankfully, there is no need to know the exact algorithm used to generate the hash, the exact \\r\\nhash type (SHA-256), or to manually calculate it. The hidl-gen tool provides support for \\r\\n9780134096346_print.indb   21425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"34a60fe0-26d6-4f9d-81f0-dd18aecd24c2":{"__data__":"{\"id_\":\"34a60fe0-26d6-4f9d-81f0-dd18aecd24c2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iIOhIK4Hu6KgkX3tLKNw4Qv7bphywFEUUZTKZdTYHTU=\"}},\"hash\":\"Vs7/eL8y72+hrsmD/tg2W1RaXuIyilBpdqaebxeswgw=\",\"text\":\"215Acme Custom HIDL\\r\\ngenerating interface hashes. Listing 11.20 shows how to generate the file vendor/acme/one/ \\r\\ninterfaces/current.txt, which will contain the locked-down hashes for the aproximity \\r\\nHIDL. Listing 11.20 Create Custom HIDL Hashes\\r\\nhidl-gen -L hash -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n  -r android.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0 \\\\\\r\\n  >> vendor/acme/one/interfaces/current.txt\\r\\nThe content of the file will look similar to the AOSP framework’s current.txt, shown in \\r\\nListing 11.19. However, only the custom HIDL interface and types are present in the file, an \\r\\nabbreviated version of which is shown in Listing 11.21. Listing 11.21 Acme One HIDL Hashes\\r\\n3b78d426c04...8b4b19ef250 vendor.acme.one.aproximity@1.0::types\\r\\ndff6991e375...976a938449f vendor.acme.one.aproximity@1.0::IAproximity\\r\\nTo demonstrate how changes to the HIDL are caught at build time, let’s change a small aspect \\r\\nof the HIDL definition. Edit the file IAproximity.hal and add a new API, reset, which can \\r\\nbe used to reset the underlying hardware (see Listing 11.22). Listing 11.22 Add the reset Method to IAProximity\\r\\npackage vendor.acme.one.aproximity@1.0;\\r\\ninterface IAproximity {\\r\\n... /**\\r\\n     * Reset the underlying hardware\\r\\n     */\\r\\n    reset();\\r\\n};\\r\\nThere is no need to provide an implementation of the new interface. Simply start a build and \\r\\nnotice how it fails. The hash for the interface does not match the hash for the same version of \\r\\nthe interface. An abbreviated output is shown in Listing 11.23, with the error set in bold. Listing 11.23 Failed Build After HIDL API Change\\r\\n$ m -j 1\\r\\n... 9780134096346_print.indb   21525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"240dc09f-0070-41d3-9483-488f1c67c82d":{"__data__":"{\"id_\":\"240dc09f-0070-41d3-9483-488f1c67c82d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Wuw/7kE210eDLGXjKyx1HvBU6l3L1vxTpQifcs4LoeU=\"},\"NEXT\":{\"nodeId\":\"04cc5ec8-d1c1-4a2a-b281-f2b6c2f09312\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"PmbNkcUf5Y+92RGjaLMtU8BA51Uw4YLvzCIJhPGMTp8=\"}},\"hash\":\"3tG5Mfpp0LVZD2IJQAzFwJOQq2et0Lz0Ih6V80wdRH8=\",\"text\":\"216Chapter 11  Creating a Custom Binderized HAL\\r\\n[ 19% 7/36] HIDL c++-sources: vendor/acme/one/interfaces/aproximity/1.0/types.hal  vendor/acme/one/interfaces/aproximity/1\\r\\nFAILED:  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. one.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/AproximityAll.cpp  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. one.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/types.cpp\\r\\nrm -rf  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. one.aproximity@1.0_genc++/gen && out/soong/host/linux-x86/bin/hidl-gen -R -p . -d  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. one.aproximity@1.0_genc++/gen/vendor/acme/one/aproximity/1.0/AproximityAll.cpp.d -o  out/soong/.intermediates/vendor/acme/one/interfaces/aproximity/1.0/vendor.acme. one.aproximity@1.0_genc++/gen -L c++-sources - rvendor.acme.one:vendor/acme/one/interfaces - \\r\\nrandroid.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0\\r\\nERROR: vendor.acme.one.aproximity@1.0::IAproximity has hash c270b98c7a304a5026ffd1c6e6cfb03bf01756efdcd45950758a87e604b108d7 which does not match \\r\\nhash on record. This interface has been frozen. Do not change it! ERROR: Could not parse vendor.acme.one.aproximity@1.0::types. Aborting.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"04cc5ec8-d1c1-4a2a-b281-f2b6c2f09312":{"__data__":"{\"id_\":\"04cc5ec8-d1c1-4a2a-b281-f2b6c2f09312\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Wuw/7kE210eDLGXjKyx1HvBU6l3L1vxTpQifcs4LoeU=\"},\"PREVIOUS\":{\"nodeId\":\"240dc09f-0070-41d3-9483-488f1c67c82d\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3tG5Mfpp0LVZD2IJQAzFwJOQq2et0Lz0Ih6V80wdRH8=\"}},\"hash\":\"PmbNkcUf5Y+92RGjaLMtU8BA51Uw4YLvzCIJhPGMTp8=\",\"text\":\"Aborting. 09:55:15 ninja failed with: exit status 1\\r\\n#### failed to build some targets (46 seconds) ####\\r\\nBecause we had locked down the HIDL interface (hashes were created), the build system will \\r\\nnot allow a new image to be created. There are three choices in this situation: do not modify \\r\\nthe API, bump the version number and provide the new API implementation, or provide the \\r\\nnew API implementation and re-generate the hash (safe because the HIDL API was not fully \\r\\nreleased). Bumping the version number would require a new HIDL implementation that derives \\r\\nfrom this 1.0 version and is beyond the scope of this book. See the AOSP sensors HIDL API \\r\\nfor an example of a multi-versioned HIDL API. To keep things simple, we will just add a no-op \\r\\nimplementation for the new API, regenerate the API hashes for our HIDL, and verify we can \\r\\nbuild, as shown in Listing 11.24. Listing 11.24 Regenerate Custom HIDL Hashes\\r\\n$ hidl-gen -L hash -r vendor.acme.one:vendor/acme/one/interfaces \\\\\\r\\n  -r android.hidl:system/libhidl/transport vendor.acme.one.aproximity@1.0 \\\\\\r\\n  > vendor/acme/one/interfaces/current.txt\\r\\n$ m –j 12\\r\\n... [100% 15/15] Target vendor fs image: out/target/product/hikey960/vendor.img\\r\\n#### build completed successfully (10 seconds) ####\\r\\n9780134096346_print.indb   21625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4e4b5308-adbf-41b9-8398-ba4496383d12":{"__data__":"{\"id_\":\"4e4b5308-adbf-41b9-8398-ba4496383d12\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"HHpmAXmdfdkjzC7Lht31OHpohEQpiNQtlF1u0rfemHA=\"}},\"hash\":\"L69oTQSgw1c8qVR/qRMfDMu4xm3ZNBDBDgRkCDXV6Tw=\",\"text\":\"217Summary\\r\\nSummary\\r\\nThis chapter defined a new HIDL-based HAL for the Acme platform: aproximity. This HAL \\r\\nreplaces the traditional HAL implementation defined in Chapter 8. The implementation lever-\\r\\nages the shim library that was built as part of the traditional HAL, but exposes the functionality \\r\\nvia Binder-based APIs. The binders are registered with the system by a simple service executable \\r\\nand processed by a service-side implementation of the IAproximity interface. Chapter 12 will \\r\\nround out the HIDL example by showing how to create client applications that can access the \\r\\naproximity HAL. 9780134096346_print.indb   21725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bc493aab-384c-4bfe-8c67-0005e0538bd2":{"__data__":"{\"id_\":\"bc493aab-384c-4bfe-8c67-0005e0538bd2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JAVbebnXVX31IlImARNWKH3ukfndHFS9mu1oiBxAnPM=\"}},\"hash\":\"dSpB8hIePAnWwhXLNhArhmaan25XNzqHoNh/G273FGk=\",\"text\":\"12\\r\\nClients for a Custom \\r\\nBinderized HAL\\r\\nAndroid’s newer binderized HAL, HIDL, is a fundamental shift in the way that OEMs and \\r\\nvendors provide platform-specific support for a device. Not only does this impact the OEM/\\r\\nvendor implementation of a custom HAL, the code that utilizes the backing HIDL is also differ-\\r\\nent than a traditional HAL. Client apps may be written in native C/C++ or Java code but no \\r\\nlonger require special vendor-provided libraries to be bundled with the system. Similarly, the \\r\\nplatform automatically builds Java-side support, removing the need for a custom JNI layer to \\r\\ntake advantage of the HAL implementation. HIDL client executables are similar in function to pre-Android 8 daemons or Android services \\r\\nthat leveraged traditional HAL libraries. Typically, daemons or services using a traditional \\r\\nHAL load the requisite HAL shared library and often expose functionality to other parts of the \\r\\nsystem that require the backing HAL library. This is central to the way Android manages access \\r\\nto scarce resources, such as hardware features. Exposing the HAL features is typically done via \\r\\na binder interface, or other IPC mechanism such as a POSIX socket. Depending on the exact \\r\\nfunction of the HIDL, the same techniques may be used to expose the HIDL functionality to \\r\\nthe rest of the system. This chapter demonstrates HIDL client implementation using both C++ and Java/Kotlin code, \\r\\ntapping into the Acme proximity HIDL created in Chapter 11. Exposing the HIDL functional-\\r\\nity to the rest of the system via daemon or service is device and feature specific, so it is beyond \\r\\nthe scope of this chapter. The main takeaway from this chapter will be how to tap into the \\r\\nnew custom HIDL via a client application that is built into the system. Remember, these are \\r\\nnot third-party applications that are released to the Google Play or any other app store. Only \\r\\nsystem- or vendor-provided executables/apps will have the necessary security access to directly \\r\\nleverage HIDL interfaces. Native C++ Aproximity Client\\r\\nConceptually, the HIDL client implementation is quite simple with regards to interfacing with \\r\\nthe backing HIDL service: get the backing service then call the appropriate method as needed. 9780134096346_print.indb   21925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0921754f-bfba-4de5-b528-f9f790c29c4f":{"__data__":"{\"id_\":\"0921754f-bfba-4de5-b528-f9f790c29c4f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"X1IvUndNX2Bq/Dndi68BktPRmldIO5rfu0QBV+7Gm+o=\"},\"NEXT\":{\"nodeId\":\"2e330c73-780f-48c8-911f-0b16edaec899\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"v6eY+HiJBHaxrlIh6DPy8612HIZdqK+yWkrRzz5VNQg=\"}},\"hash\":\"CQkMQT3uCyU2mhxSNYEq+Zy28SXkqHnu1sjcKpnF65k=\",\"text\":\"220Chapter 12  Clients for a Custom Binderized HAL\\r\\nIn fact, most of the C++ example code deals with input arguments and providing output to  \\r\\nthe caller! As discussed in Chapter 10, when a HIDL’s .hal file(s) are built with the platform, a shared \\r\\nlibrary is created for the HIDL along with the necessary headers for both service and client. This shared library provides all the functionality for the client to find the backing HIDL service, \\r\\nconnect with it, and call through to its methods. The Binder-specific bits are handled by the \\r\\ngenerated code, allowing the HIDL client developer to focus on the functionality being used. Listing 12.1 contains a simple C++ client for the custom HIDL. This is a command line applica-\\r\\ntion that can be run to exercise the different HIDL features of aproximity. This file is located \\r\\nat device/acme/one/app/aproximitycl in the platform tree. The key section of the code is \\r\\nthe portion near the end of main, which acquires a pointer to the backing service and calls the \\r\\nspecific HIDL method (shown in bold.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2e330c73-780f-48c8-911f-0b16edaec899":{"__data__":"{\"id_\":\"2e330c73-780f-48c8-911f-0b16edaec899\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"X1IvUndNX2Bq/Dndi68BktPRmldIO5rfu0QBV+7Gm+o=\"},\"PREVIOUS\":{\"nodeId\":\"0921754f-bfba-4de5-b528-f9f790c29c4f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"CQkMQT3uCyU2mhxSNYEq+Zy28SXkqHnu1sjcKpnF65k=\"}},\"hash\":\"v6eY+HiJBHaxrlIh6DPy8612HIZdqK+yWkrRzz5VNQg=\",\"text\":\")\\r\\nListing 12.1 Aproximity C++ HIDL Client\\r\\n#include <hidl/HidlSupport.h>\\r\\n#include <vendor/acme/one/aproximity/1.0/IAproximity.h>\\r\\n#include <vendor/acme/one/aproximity/1.0/types.h>\\r\\n#include <utils/StrongPointer.h>\\r\\n#include <getopt.h>\\r\\nusing vendor::acme::one::aproximity::V1_0::IAproximity;\\r\\nusing vendor::acme::one::aproximity::V1_0::ProximityDetails;\\r\\nusing vendor::acme::one::aproximity::V1_0::ProximitySummary;\\r\\nusing android::sp;\\r\\nusing namespace android::hardware;\\r\\nstatic void detailsCb(const ProximityDetails& details) {\\r\\n    printf(\\\"[details] precision min/max: %d/%d\\\\n\\\",\\r\\n           details.precision.min,\\r\\n           details.precision.max);\\r\\n    printf(\\\"[details] proximity min/max: %d/%d\\\\n\\\",\\r\\n           details.proximity.min,\\r\\n           details.proximity.max);\\r\\n}\\r\\nstatic void summaryCb(const ProximitySummary& summary) {\\r\\n    printf(\\\"[summary] poll call count: %lu, last poll call (ms): %ld\\\\n\\\",\\r\\n           summary.pollCallCount,\\r\\n           summary.lastPollCalledMs);\\r\\n}\\r\\nvoid printUsage(char *name) {\\r\\n    printf(\\\"Usage: %s [-ds] [-g input_precision]\\\\n\\\", name);\\r\\n9780134096346_print.indb   22025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b223e6bf-e803-4dc3-9814-2add93819723":{"__data__":"{\"id_\":\"b223e6bf-e803-4dc3-9814-2add93819723\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"se0hDBUnr27nQk1eaaPuTluYaYRSLa//z5OKPqA7pOI=\"}},\"hash\":\"a+CLH3UV760uf7+PzmcFVe1AVnuIXPau0T2Af4WKOyA=\",\"text\":\"221Native C++ Aproximity Client\\r\\n    printf(\\\"\\\\td:  Display the details of the sensor\\\\n\\\");\\r\\n    printf(\\\"\\\\tg:  Get the latest proximity reading at the precision\\\\n\\\");\\r\\n    printf(\\\"\\\\ts:  Print the summary details of the service\\\\n\\\");\\r\\n}\\r\\nint main(int argc, char* argv[]) {\\r\\n    if (argc < 2) {\\r\\n        printUsage(argv[0]);\\r\\n        return -1;\\r\\n    }\\r\\n    bool doDetails= false;\\r\\n    bool doProximity = false;\\r\\n    int precision = -1;\\r\\n    bool doSummary = false;\\r\\n    bool doDebug = false;\\r\\n    int  currentOpt;\\r\\n    //  Parse the command line options, determine what to do\\r\\n    while ((currentOpt = getopt(argc, argv, \\\"dg:s\\\")) != -1) {\\r\\n        switch (currentOpt) {\\r\\n            case 'd':\\r\\n                doDetails = true;\\r\\n                break;\\r\\n            case 'g':\\r\\n                doProximity = true;\\r\\n                precision = atoi(optarg);\\r\\n                break;\\r\\n            case 's':\\r\\n                doSummary = true;\\r\\n                break;\\r\\n            case '?':\\r\\n                if (isprint(optopt)) {\\r\\n                    fprintf(stderr,\\r\\n                            \\\"Unknown option: '%c'\\\\n\\\",\\r\\n                            optopt);\\r\\n                } else {\\r\\n                    fprintf(stderr,\\r\\n                            \\\"Unknown option character: '\\\\\\\\x%X'\\\\n\\\",\\r\\n                            optopt);\\r\\n                }\\r\\n                printUsage(argv[0]);\\r\\n                return -1;\\r\\n            default:\\r\\n                abort();\\r\\n9780134096346_print.indb   22125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"433de789-5490-4bd6-8131-ed9547de2cf3":{"__data__":"{\"id_\":\"433de789-5490-4bd6-8131-ed9547de2cf3\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"FFHdPVKNqHdc3EdYdZPFhXOtKmApkKSHaDzUeLEljA0=\"}},\"hash\":\"ctaGNBEc1grQgPc+w03ylYoR2LjGZSG58AAcUEKxWvc=\",\"text\":\"222Chapter 12  Clients for a Custom Binderized HAL\\r\\n        }\\r\\n    }\\r\\n    if (!doDetails && !doProximity && !doSummary) {\\r\\n        doDebug = true;\\r\\n    }\\r\\n    //  Get the HIDL to use (IAproximity)\\r\\n    sp<IAproximity>  client = IAproximity::getService();\\r\\n    if (client == nullptr) {\\r\\n        fprintf(stderr, \\\"Unable to get aproximity service interface\\\\n\\\");\\r\\n        return -2;\\r\\n    }\\r\\n    if (doDetails) {\\r\\n        Return<void> result = client->get_details(detailsCb);\\r\\n        if (!result.isOk()) {\\r\\n            fprintf(stderr,\\r\\n                    \\\"Unable to get proximity service details. Err: %s\\\\n\\\",\\r\\n                    result.description().c_str());\\r\\n            return -1;\\r\\n        }\\r\\n    }\\r\\n    if (doProximity) {\\r\\n        Return<int32_t> retProximity = client->poll(precision);\\r\\n        if (!retProximity.isOk()) {\\r\\n            fprintf(stderr,\\r\\n                    \\\"Unable to get proximity for precision (%d). Err: %s\\\\n\\\",\\r\\n                    precision,\\r\\n                    retProximity.description().c_str());\\r\\n            return -1;\\r\\n        }\\r\\n        printf(\\\"[proximity] %d\\\\n\\\", static_cast<int32_t>(retProximity));\\r\\n    }\\r\\n    if (doSummary) {\\r\\n        client->summarize(summaryCb);\\r\\n    }\\r\\n    return 0;\\r\\n}\\r\\n9780134096346_print.indb   22225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"67466221-6728-4db9-a30f-0847851c5895":{"__data__":"{\"id_\":\"67466221-6728-4db9-a30f-0847851c5895\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AybwmWvQn2CE2N7yMPflLKVtj1mCPG0EP449Dyax66U=\"},\"NEXT\":{\"nodeId\":\"9c77bb0b-f7d9-4cff-a928-ec2460bec4a5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"29MroDxHFFQouGaZn4CHQje7uuSLLY/Ff9RRcQHiWcs=\"}},\"hash\":\"3nxJi7/7I7EptEQ9NVd3QWM4OmCm2CO0bYF2PN/of1A=\",\"text\":\"223Native C++ Aproximity Client\\r\\nAfter acquiring a smart pointer to the IAproximity service, sp<IAproximity>, the client can \\r\\nsimply call the desired method. If the smart pointer is nullptr, it means the client could not \\r\\nconnect with the backing service. This typically happens if the HIDL service is not present or \\r\\nthere was a SE policy violation. Note\\r\\nJust like communicating with other binder-based services, if the HIDL framework is unable to \\r\\nstart/find the service that provides the HIDL implementation, the client may block indefinitely. Under normal circumstances this will not happen, but during development can be a major \\r\\nsource of confusion. If this happens to your client app, check the kernel logs (via dmesg) and \\r\\nlogcat output for errors relating to starting the backing HIDL service. One of the more confusing parts of HIDL interface APIs is the handling of returned values. Depending on the specific service method, the return results may be received in different ways. Primitive data (for example, int32_t, int64_t, boolean, and so on) are returned (almost) \\r\\ndirectly. However, as shown in the service-side code in Chapter 11, complex or multiple return \\r\\ntypes require the client side to provide a callback method to receive the return data. This can be \\r\\nseen in Listing 12.1 with the three different IAproximity methods. All the exposed service methods return a Return object, which contains information about \\r\\nthe service call and possibly some return data. The Return object contains status details for \\r\\nthe method call. The result of the Return.isOk() method  indicates whether the service call \\r\\nsucceeded or not. If it did not, the Return.description() method can be used to get a log-\\r\\nfriendly message. Primitive return type handling is demonstrated with the return handling for the poll method. When Return indicates the call is successful for a primitive return value, the Return object is \\r\\nsimply cast to the primitive type. In the case of the complex return values ProximityDetails and ProximitySummary, there \\r\\nis no direct return data. Instead, the client must provide callback methods, detailsCb and \\r\\nsummaryCb, to the HIDL get_details and summarize methods, as shown in Listing 12.1. These callback functions handle the different complex return values.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9c77bb0b-f7d9-4cff-a928-ec2460bec4a5":{"__data__":"{\"id_\":\"9c77bb0b-f7d9-4cff-a928-ec2460bec4a5\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"AybwmWvQn2CE2N7yMPflLKVtj1mCPG0EP449Dyax66U=\"},\"PREVIOUS\":{\"nodeId\":\"67466221-6728-4db9-a30f-0847851c5895\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"3nxJi7/7I7EptEQ9NVd3QWM4OmCm2CO0bYF2PN/of1A=\"}},\"hash\":\"29MroDxHFFQouGaZn4CHQje7uuSLLY/Ff9RRcQHiWcs=\",\"text\":\"These callback functions handle the different complex return values. Note that even though \\r\\ncallback methods are used, the actual HIDL service call blocks, so the results will be received via \\r\\nthe callback before the service call returns. Building the aproximitycl client executable requires a small blueprint file. Create the file \\r\\nAndroid.bp in device/acme/one/app/aproximitycl with the content shown in Listing 12.2. Listing 12.2 aproximitycl Blueprint File\\r\\ncc_binary {\\r\\n    name: \\\"aproximitycl\\\",\\r\\n    srcs: [\\\"aproximitycl.cpp\\\"],\\r\\n    vendor: true,\\r\\n    shared_libs: [\\r\\n9780134096346_print.indb   22325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"724e9f9f-c924-483e-b957-32ed2479e971":{"__data__":"{\"id_\":\"724e9f9f-c924-483e-b957-32ed2479e971\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1BY9xbnp2S7V5bQ41JMmHXPDCFkflqE+QdbRk3wD5oo=\"},\"NEXT\":{\"nodeId\":\"10e4a941-e34a-4b56-a7a9-22a2d37258b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Y5FAbP3pSojGyVEv5XzmTGPYnHJaFnWjKhhaOWbHAAo=\"}},\"hash\":\"U0VZkOCs+z9joXsl/UqylP7mJtUw8SK0NvWhKkdRt9M=\",\"text\":\"224Chapter 12  Clients for a Custom Binderized HAL\\r\\n        \\\"libhidlbase\\\",\\r\\n        \\\"libutils\\\",\\r\\n        vendor.acme.one.aproximitycl@1.0\\r\\n    ]\\r\\n}\\r\\nThe blueprint file instructs the build system to create a C++ binary based on the input file \\r\\naproximitycl.cpp using the necessary HIDL libraries. Because the vendor field is set to true, \\r\\nthe resultant executable will be in the vendor file system on the running device. Specifically, it \\r\\nwill be located at /vendor/bin/aproximitycl. Before the new executable can be used, some \\r\\nnew SE policy details must be added to the system. SE Linux for Android Changes for aproximitycl\\r\\nJust like when the HIDL service was added in Chapter 11, some new SE Linux policy changes \\r\\nare needed for aproximitycl to function. Because the Aproximity HIDL support has already \\r\\nbeen created, adding the client-side support is rather simple. Edit the file device/acme/one/\\r\\nacme_one/sepolicy/hal_aproximity.te, adding the content from Listing 12.3 to the end. Listing 12.3 Additions to the hal_aproximity.te Type Enforcement File\\r\\n###\\r\\n# Create an execution domain for aproximitycl which is able to access the service\\r\\n#\\r\\ntype aproximitycl, domain;\\r\\nhal_client_domain(aproximitycl, hal_aproximity)\\r\\ntype aproximitycl_exec, exec_type, vendor_file_type, file_type;\\r\\ndomain_auto_trans(shell, aproximitycl_exec, aproximitycl)\\r\\nallow shell aproximitycl_exec:file { getattr open read execute map };\\r\\n# Allow `adb shell /vendor/bin/aproximitycl` and also\\r\\n# `adb shell` then `/vendor/bin/aproximitycl`\\r\\nallow aproximitycl shell:fd use;\\r\\nallow aproximitycl adbd:fd use;\\r\\nallow aproximitycl adbd:process sigchld;\\r\\nallow aproximitycl adbd:unix_stream_socket { getattr ioctl read write };\\r\\nallow aproximitycl devpts:chr_file rw_file_perms;\\r\\nThis new content for the type enforcement file sets up a new domain and execution attri-\\r\\nbute for the HIDL client (aproximitycl). Because it builds upon the server setup described \\r\\nin Chapter 11, there is no reason to dig into each line. However, the end of this section is \\r\\nworth mentioning.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"10e4a941-e34a-4b56-a7a9-22a2d37258b7":{"__data__":"{\"id_\":\"10e4a941-e34a-4b56-a7a9-22a2d37258b7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1BY9xbnp2S7V5bQ41JMmHXPDCFkflqE+QdbRk3wD5oo=\"},\"PREVIOUS\":{\"nodeId\":\"724e9f9f-c924-483e-b957-32ed2479e971\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"U0VZkOCs+z9joXsl/UqylP7mJtUw8SK0NvWhKkdRt9M=\"}},\"hash\":\"Y5FAbP3pSojGyVEv5XzmTGPYnHJaFnWjKhhaOWbHAAo=\",\"text\":\"However, the end of this section is \\r\\nworth mentioning. Instead of init, the aproximitycl executable may only be run manually \\r\\nvia the shell. To allow this, the domain_auto_trans macro is used, which sets up a policy to \\r\\n9780134096346_print.indb   22425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5f5d4886-9542-43ce-a01a-4f717cfbb863":{"__data__":"{\"id_\":\"5f5d4886-9542-43ce-a01a-4f717cfbb863\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/GZ7KOJyiQTcFVQtsgP+dBlbtKcaj6OADDP/m9epGKM=\"},\"NEXT\":{\"nodeId\":\"99ee810e-398c-4b7d-8c6d-8193738433e7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"WwcFNsTO05/289baRCrtFP7h+lfHCCbmI04wFi9D2kU=\"}},\"hash\":\"q12MDkTFZ50hwW70+QubVCslM5NlPFN8hjtd5PUOqvE=\",\"text\":\"225Native C++ Aproximity Client\\r\\nautomatically transition anything in the shell domain to the new aproximitycl domain \\r\\nwhen the shell forks and executes a binary labeled with the aproximitycl_exec type. If that \\r\\nsounds familiar, it is because it is exactly what the service-side init_daemon_domain macro \\r\\nuses behind the scenes to allow auto-transition of init! The remaining lines of this policy file \\r\\nestablish several “allow” policies needed to permit actual use of aproximitycl. These policies \\r\\nallow the shell to execute binaries labeled as aproximitycl_exec and also allow the  \\r\\naproximitycl domain executables to use file descriptors, UNIX domain sockets, virtual termi-\\r\\nnals, and to send child signals. All of that is required so aproximitycl can use standard input/\\r\\noutput when run via the shell manually or via the adb shell command. The remaining SE change needed for the aproximitycl client is to set the label of the execut-\\r\\nable binary. Add the line in Listing 12.4 to the end of device/acme/one/acme_one/ \\r\\nsepolicy/file_contexts to place aproximitycl into the aproximitycl_exec domain. Listing 12.4 Addition to file_contexts for aproximitycl\\r\\n# Acme One Specific Changes\\r\\n... /vendor/bin/aproximitycl   u:object_r:aproximitycl_exec:s0\\r\\nBuild aproximitycl into Acme\\r\\nJust like when adding a vendor app or other component to the Android OS build, you must \\r\\nadd the HIDL client to the Acme build file. Edit the file device/acme/one/acme_one/ \\r\\nacme_one.mk  and add the line shown in Listing 12.5. Listing 12.5 Add aproxmitycl to acme_one.mk \\r\\nPRODUCT_PACKAGES += aproximitycl\\r\\nRe-running the build for the target will result in updates to system.img and vendor.img. After \\r\\nthese are flashed on to the HiKey960 board, the service will start at system startup and can be \\r\\nleveraged via the aproximitycl executable (see Listing 12.6).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"99ee810e-398c-4b7d-8c6d-8193738433e7":{"__data__":"{\"id_\":\"99ee810e-398c-4b7d-8c6d-8193738433e7\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/GZ7KOJyiQTcFVQtsgP+dBlbtKcaj6OADDP/m9epGKM=\"},\"PREVIOUS\":{\"nodeId\":\"5f5d4886-9542-43ce-a01a-4f717cfbb863\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"q12MDkTFZ50hwW70+QubVCslM5NlPFN8hjtd5PUOqvE=\"}},\"hash\":\"WwcFNsTO05/289baRCrtFP7h+lfHCCbmI04wFi9D2kU=\",\"text\":\"Listing 12.6 Running aproximitycl\\r\\n$ adb shell\\r\\nhikey960:/ $ aproximitycl\\r\\nUsage: aproximitycl [-ds] [-g input_precision]\\r\\n        d:  Display the details of the sensor\\r\\n        g:  Get the latest proximity reading at the precision\\r\\n        s:  Print the summary details of the service\\r\\n255|hikey960:/ $ aproximitycl -d \\r\\n[details] precision min/max: 0/100\\r\\n9780134096346_print.indb   22525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"16efbc4d-8a31-408b-8b3a-d9f963368406":{"__data__":"{\"id_\":\"16efbc4d-8a31-408b-8b3a-d9f963368406\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"75z7VwW3KNRSeVxgLLyTWo9YkLmgZqbzqp9ePaCy3Nc=\"},\"NEXT\":{\"nodeId\":\"95354c36-ae8e-40a0-a1a2-cdad7d9001ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cFuTrdqEsS4OkWoZT7kg4MKr4avq4TbqT+WPFo3CHJw=\"}},\"hash\":\"SBrZcWg0n45350YEQcG3H88dXcjoolWffDM9zhPPTjU=\",\"text\":\"226Chapter 12  Clients for a Custom Binderized HAL\\r\\n[details] proximity min/max: 0/100\\r\\nhikey960:/ $ aproximitycl -g -1 \\r\\n[proximity] -1\\r\\nhikey960:/ $ aproximitycl -g 50 \\r\\n[proximity] 60\\r\\nhikey960:/ $ aproximitycl -g 99 \\r\\n[proximity] 63\\r\\nhikey960:/ $ aproximitycl -s \\r\\n[summary] poll call count: 3, last poll call (ms): 1609601581478\\r\\nJava/Kotlin Aproximity Client\\r\\nUtilizing a HIDL directly in a Java (or Kotlin! ) package is substantially easier than legacy HAL \\r\\naccess. This is in part because HIDL leverages the power of Android’s Binder framework, but \\r\\nalso because the HIDL build support auto-generates Java libraries for use by Java-based compo-\\r\\nnents. In other words: No custom JNI code is required! That being said, it is important to \\r\\nremember that performance-critical features are generally better kept to native code rather than \\r\\nruntime-based code. To keep things simple, there is a complete Java/Kotlin-based client for IAproximity in the plat-\\r\\nform tree at device/acme/one/app/AproximityClient. This section will not walk through \\r\\nsetting up each file in that directory. The layout is a typical Android Studio project. Note, \\r\\nthough, that the AOSP build tree does not support Gradle-based builds. This example brings up a simple UI showing the details of the aproximity HIDL and allows \\r\\nthe user to request the latest proximity data via the user-provided precision value. The result is \\r\\nshown along with summary information. The code for MainActivity, written in Kotlin, can be \\r\\nseen in Listing 12.7 and has been trimmed here for brevity. Listing 12.7 AproximityClient MainActivity \\r\\npackage com.acme.one.aproximityclient\\r\\nimport ...\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"95354c36-ae8e-40a0-a1a2-cdad7d9001ec":{"__data__":"{\"id_\":\"95354c36-ae8e-40a0-a1a2-cdad7d9001ec\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"75z7VwW3KNRSeVxgLLyTWo9YkLmgZqbzqp9ePaCy3Nc=\"},\"PREVIOUS\":{\"nodeId\":\"16efbc4d-8a31-408b-8b3a-d9f963368406\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"SBrZcWg0n45350YEQcG3H88dXcjoolWffDM9zhPPTjU=\"}},\"hash\":\"cFuTrdqEsS4OkWoZT7kg4MKr4avq4TbqT+WPFo3CHJw=\",\"text\":\"import vendor.acme.one.aproximity.V1_0.IAproximity\\r\\nimport vendor.acme.one.aproximity.V1_0.ProximitySummary\\r\\nimport java.lang.NumberFormatException\\r\\nclass MainActivity : Activity() {\\r\\n    companion object {\\r\\n        const val TAG = \\\"MainActivity\\\"\\r\\n    }\\r\\n    private lateinit var proxDetails: TextView\\r\\n    private lateinit var proxSummary: TextView\\r\\n    private lateinit var proxPrecision: EditText\\r\\n    private lateinit var proxValue: TextView\\r\\n9780134096346_print.indb   22625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"24060caf-93fc-4060-8f35-246de1153287":{"__data__":"{\"id_\":\"24060caf-93fc-4060-8f35-246de1153287\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"jTIqfg6KPRQBmCAXEvpbdUYTHm0VLOib9qwS1aoAufo=\"}},\"hash\":\"WGyUzz7QmjyBehoYeLoEt3DRXfJz2KIEiELva6yGJn8=\",\"text\":\"227Java/Kotlin Aproximity Client\\r\\n    private lateinit var pollButton: Button\\r\\n    private lateinit var proxHidl: IAproximity\\r\\n    override fun onCreate(savedInstanceState: Bundle? ) {\\r\\n        super.onCreate(savedInstanceState)\\r\\n        setContentView(R.layout.activity_main)\\r\\n        setupHalAccess()\\r\\n        setupViews()\\r\\n    }\\r\\n    override fun onResume() {\\r\\n        super.onResume()\\r\\n        updateDetails()\\r\\n    }\\r\\n    @SuppressLint(\\\"SetTextI18n\\\")\\r\\n    private fun setupViews() {\\r\\n        ... pollButton = findViewById(R.id.get_proximity)\\r\\n        pollButton.setOnClickListener {\\r\\n            val precision = try {\\r\\n                proxPrecision.text.toString().toInt()\\r\\n            } catch (e: NumberFormatException) {\\r\\n                null\\r\\n            }\\r\\n            precision?.also {\\r\\n                val proximity: Int = proxHidl.poll(precision)\\r\\n                Log.d(TAG, \\\"Latest proximity: $proximity\\\")\\r\\n                proxValue.text = proximity.toString()\\r\\n                //  Also update summarize details\\r\\n                val summary = proxHidl.summarize()\\r\\n                val count = summary.pollCallCount\\r\\n                val timeStamp = summary.lastPollCalledMs\\r\\n                proxSummary.text =\\r\\n                    \\\"Poll called $count times, last at $timeStamp\\\"\\r\\n            } ?: run {\\r\\n                Toast.makeText(\\r\\n                    this,\\r\\n                    R.string.bad_precision,\\r\\n                    Toast.LENGTH_LONG\\r\\n                ).show()\\r\\n            }\\r\\n9780134096346_print.indb   22725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5f630e83-9acb-46fa-8783-b9634dc84030":{"__data__":"{\"id_\":\"5f630e83-9acb-46fa-8783-b9634dc84030\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VX9/xtX0nBzRSqF++RLqSa5uVOx7afJ4Nu+UQmKlx2Q=\"},\"NEXT\":{\"nodeId\":\"e7bf28b2-f8e0-40a9-8ea4-c44e1a78a8ea\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yw4UU6OtPqAcIofdMj6aFaaVW5KQrs2cxBfTT5utrh8=\"}},\"hash\":\"IaWq3gMhgr9eSvAphz9JyARIqRmbAhmimmBHMwQBKJ4=\",\"text\":\"228Chapter 12  Clients for a Custom Binderized HAL\\r\\n        }\\r\\n    }\\r\\n    private fun setupHalAccess() {\\r\\n        proxHidl = IAproximity.getService(true)\\r\\n    }\\r\\n    private fun updateDetails() {\\r\\n        val details = proxHidl.get_details()\\r\\n        val precMin = details.precision.min\\r\\n        val precMax = details.precision.max\\r\\n        val proxMin = details.proximity.min\\r\\n        val proxMax = details.proximity.max\\r\\n        val detailText =\\r\\n            \\\"Precision ($precMin / $precMax),\\\" +\\r\\n                    \\\"Proximity ($proxMin / $proxMax)\\\"\\r\\n        proxDetails.text = detailText\\r\\n    }\\r\\n}\\r\\nGaining access to the HIDL service is accomplished in a helper method, setupHalAccess(), \\r\\nwhich is called from onCreate(). This method calls the static method, IAproximity. getService(), which internally communicates with hwservicemanager to retrieve the \\r\\nbacking binder to the HIDL service and returns an IAproximity proxy instance. The proxy \\r\\ninstance is saved in the member field, proxHidl. The onResume() method calls another helper method, updateDetails(). This is the first time \\r\\nthe proxy class is used to call to the HIDL service. The get_details() HIDL method is called \\r\\nto retrieve a ProximityDetails object. The data from this object, the min and max for preci-\\r\\nsion and proximity values, are formatted and added to a text field onscreen. Finally, a simple OnClickListener closure is hooked into the button object, pollButton. When the user clicks the button, the precision value the user has selected is retrieved, and the \\r\\nproxy is once again called. This time both the poll()and summarize() methods are called. The results of both calls are then formatted and displayed onscreen. Acquiring access to the HIDL service and utilizing it is noticeably simpler here in the Java/\\r\\nKotlin side. There are no thread pools to configure and join, nor are there any callback \\r\\nmethods that need to be provided when calling through to the service. However, a couple of \\r\\npotential pitfalls exist that need to be mentioned because the example code is so simple. First, this code gets access to the HIDL and makes all calls to it directly in the main thread of \\r\\nthe app. For this simple example, that’s fine.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e7bf28b2-f8e0-40a9-8ea4-c44e1a78a8ea":{"__data__":"{\"id_\":\"e7bf28b2-f8e0-40a9-8ea4-c44e1a78a8ea\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VX9/xtX0nBzRSqF++RLqSa5uVOx7afJ4Nu+UQmKlx2Q=\"},\"PREVIOUS\":{\"nodeId\":\"5f630e83-9acb-46fa-8783-b9634dc84030\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"IaWq3gMhgr9eSvAphz9JyARIqRmbAhmimmBHMwQBKJ4=\"}},\"hash\":\"yw4UU6OtPqAcIofdMj6aFaaVW5KQrs2cxBfTT5utrh8=\",\"text\":\"For this simple example, that’s fine. However, each of these operations is an IPC call, \\r\\nwhich means the main thread is blocked waiting on another process to handle the request and \\r\\nreturn data. Second, the code has no error handling with respect to the HIDL service calls. Just \\r\\nlike binder-based services, anytime an IPC call is made, there is the possibility of encounter-\\r\\ning a RemoteException or SecurityException. These should be dealt with as appropriate \\r\\n9780134096346_print.indb   22825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"60195c81-ac7a-4e5b-bf50-27709a477af8":{"__data__":"{\"id_\":\"60195c81-ac7a-4e5b-bf50-27709a477af8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"O3Zf5iMcsryD09tQbDvaFKBqgVs7oERZ0TgXL5wfUv0=\"},\"NEXT\":{\"nodeId\":\"10011a19-a59b-494e-ba76-4612fad55235\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dss+Yq1sfY9b5DEeloYiEwcJPgv11eWap6C4Jklpz2U=\"}},\"hash\":\"q6/bw0/wtfZVXiWLQV5O2LEizKJ9yJlUt/sgI9tXIT0=\",\"text\":\"229\\r\\nfor the app when in production release code. Finally, it may not be obvious because this code \\r\\nlooks like run-of-the-mill Android app code, but this app must be a vendor- or platform-provided \\r\\npackage in order to access the HIDL interfaces. Typically, an app package like this or special \\r\\nsystem service would expose the HIDL functionality via a binder interface. A great example of this \\r\\nis the Secure Element application, located at packages/apps/SecureElement in the AOSP tree. SE Linux for Android Changes for AproximityClient\\r\\nFortunately, the necessary changes to allow AproximityClient to use the aproximity HIDL \\r\\nare very straightforward. This is, in part, because of the type of enforcement macros available in \\r\\nthe AOSP SE definitions, but also because this app needs to be a system app and will be built as \\r\\nsuch. Listing 12.8 shows the additions needed to the hal_aproximity.te file. Listing 12.8 Adding AproximityClient to the hal_aproximity.te Type Enforcement File\\r\\n###\\r\\n# Allow platform apps (AproximityClient) to find and use hal_aproximity\\r\\n#\\r\\nhal_client_domain(platform_app, hal_aproximity)\\r\\nBuild AproximityClient into Acme\\r\\nGetting the AproximityClient package built and installed on the Acme One platform is \\r\\nsimilar to other executables we have created. As previously mentioned, the full AOSP build \\r\\nsystem does not support Gradle-based builds. Dropping a typical Android Studio–based project \\r\\ninto the tree will not work. In fact, if we look at the bundled system packages in the AOSP \\r\\ntree (under packages/*), the projects that build APKs do not even follow the typical Android \\r\\nStudio source tree layout! This makes sense; these packages are not third-party packages to be \\r\\nbuilt against the public SDK and released for any Android device. These packages are intended \\r\\nto be built for a specific Android target. Instead, a soong blueprint file is needed to get AproximityClient built and included in the \\r\\nplatform. The blueprint rule for creating an Android app package includes support for specify-\\r\\ning the source, resources, and manifest location(s) as well as some other options. This allows a \\r\\nnew project to still utilize the Android Studio project layout.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"10011a19-a59b-494e-ba76-4612fad55235":{"__data__":"{\"id_\":\"10011a19-a59b-494e-ba76-4612fad55235\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"O3Zf5iMcsryD09tQbDvaFKBqgVs7oERZ0TgXL5wfUv0=\"},\"PREVIOUS\":{\"nodeId\":\"60195c81-ac7a-4e5b-bf50-27709a477af8\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"q6/bw0/wtfZVXiWLQV5O2LEizKJ9yJlUt/sgI9tXIT0=\"}},\"hash\":\"dss+Yq1sfY9b5DEeloYiEwcJPgv11eWap6C4Jklpz2U=\",\"text\":\"This allows a \\r\\nnew project to still utilize the Android Studio project layout. Note\\r\\nEven though the soong blueprint file syntax supports a project layout like those used by \\r\\nAndroid Studio, it does not have feature parity with Gradle-based builds. There is no support \\r\\nfor Maven dependencies, Android Gradle Plugin features, build variants/flavors, and so on. Any \\r\\npackage created as part of the platform build would either need the dependencies built as \\r\\npart of the AOSP tree or dropped into the specific project as a JAR file. Building the same app \\r\\nvia Gradle or Android Studio can be achieved, but the dependency setup when using platform-\\r\\nspecific libraries can be involved. Java/Kotlin Aproximity Client\\r\\n9780134096346_print.indb   22925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e398ba17-cb21-4c11-af5f-970ce90eb854":{"__data__":"{\"id_\":\"e398ba17-cb21-4c11-af5f-970ce90eb854\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JnFd7d5//LxHF8OLAmQAW5JJi9GA7akqAbAGHcdjURs=\"}},\"hash\":\"YDqYbiy6nzabLW3LesYAZaEFdS4345XMz9hWLw0Qh8U=\",\"text\":\"230Chapter 12  Clients for a Custom Binderized HAL\\r\\nListing 12.9 shows the blueprint file for AproximityClient. Listing 12.9 Android.bp Blueprint File for AproxmityClient\\r\\nandroid_app {\\r\\n    name: \\\"AproximityClient\\\",\\r\\n    vendor: true,\\r\\n    privileged: true,\\r\\n    certificate: \\\"platform\\\",\\r\\n    srcs: [\\r\\n        \\\"app/src/**/*.java\\\",\\r\\n        \\\"app/src/**/*.kt\\\",\\r\\n    ],\\r\\n    resource_dirs: [\\r\\n        \\\"app/src/main/res\\\",\\r\\n    ],\\r\\n    static_libs: [\\r\\n        \\\"vendor.acme.one.aproximity-V1.0-java\\\",\\r\\n    ],\\r\\n    manifest: \\\"app/src/main/AndroidManifest.xml\\\"\\r\\n}\\r\\nAs we have seen before, you can specify the location of the sources via the srcs field, allow-\\r\\ning the use of an Android Studio project layout. Similarly, the resource_dirs and manifest \\r\\nfields provide the mechanism to specify the locations of the package resources and manifest, \\r\\nrespectively. The static_libs field is used to pull in Java libraries, which are available in the build tree. This is where the HIDL client library for aproximity is specified as a dependency of this \\r\\npackage. This library is auto-generated by the platform based on the .hal file(s) for a given \\r\\nHIDL. Oddly enough, it does not actually perform this auto-generation until something speci-\\r\\nfies the library as a dependency! When you build the platform after adding the HIDL service \\r\\nimplementation and C++ native client, this library is nowhere to be found in the build output \\r\\nor intermediates. The build system will not create the library until the AproximityClient \\r\\napplication package is built. Two other fields in this blueprint file worth mentioning are the privileged and certificate \\r\\nfields. The privileged field is used to build the package into the platform as a special plat-\\r\\nform app. This ultimately places it into a different SE context, platform_app. This domain was \\r\\nconfigured in the previous section to be allowed to use the aproximity HIDL. The certificate  \\r\\nfield specifies which of the certificates known to the platform should be used to sign the APK. This goes hand-in-hand with the privileged field as the platform certificate is needed for the \\r\\napp to be placed into the platform_app SE context. 9780134096346_print.indb   23025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"86eb0be7-a722-4c6e-b318-c2d263e1741f":{"__data__":"{\"id_\":\"86eb0be7-a722-4c6e-b318-c2d263e1741f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"2tTmwOJDoEA2m2ChTjB0ch2gHl0hJl+QSq/TWMnbKIM=\"}},\"hash\":\"POQrn9OInKL5fovQ9GSspwS/hi7nfp9r37csuAlIStI=\",\"text\":\"231Summary\\r\\nSummary\\r\\nCreation of a customized HIDL API for an Android platform necessitates the use of a custom \\r\\nHIDL client application. This is analogous to the service- or daemon-side access to a traditional \\r\\nAndroid HAL, exposing the HAL functionality to the rest of the system. This chapter explored \\r\\nthe creation of both native (C++) and runtime (Java/Kotlin)–based clients for the Acme One \\r\\naproximity HIDL. Both types of clients are able to leverage the HIDL libraries that are gener-\\r\\nated by the platform. The libraries obfuscate most of the binder-based mechanics used by the \\r\\nHIDL architecture behind the scenes. However, both client implementations still require some \\r\\nknowledge of the backing architecture—specifically with the use of threads and context of \\r\\nexecution. Regardless, the end result is a straightforward way to use API for accessing the under-\\r\\nlying HIDL service created for the platform. 9780134096346_print.indb   23125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e282cbd4-4d65-4c87-a63e-8c7db181dcbd":{"__data__":"{\"id_\":\"e282cbd4-4d65-4c87-a63e-8c7db181dcbd\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"uc1Il5wHopuI3jMlw4MOvV7bXkhFTDi/ryvfYuS5kM0=\"}},\"hash\":\"CtiV739KmJS+qL0o8vkhaoZ0TFNskc9Zsw/rt+S2jz8=\",\"text\":\"Index\\r\\nSymbols\\r\\n/ (forward slash), file systems, 79\\r\\nA\\r\\nacceptance, Android adoption, 2\\r\\nAOSP, 3, 5–6\\r\\ndevelopment environment, 3\\r\\nGoogle and AOSP, 5–6\\r\\nLinux, 2–3\\r\\nmicro-controllers, 6–7\\r\\nopen source environment, 3–5\\r\\nRTOS, 6\\r\\nUI, 2\\r\\nAcme custom HIDL (binderized HAL),  \\r\\n199, 219\\r\\nbuilding into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nSE Linux for Android changes, 209–212\\r\\nservices, 202–209\\r\\n9780134096346_print.indb   23325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f760db03-8d0b-4d2d-bfde-423d15be22cf":{"__data__":"{\"id_\":\"f760db03-8d0b-4d2d-bfde-423d15be22cf\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"Wc9iONz+7e3jYphTeo+zpn+T1w9Va6jUYyyOioyYhWs=\"}},\"hash\":\"BhC/YwM7ueBwvyxTrvLcxdvp2M6ZiHzMctZ4+jxI2XY=\",\"text\":\"234Acme project, device development example\\r\\nAcme project, device development example\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nHiKey960, 9\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nrepo tool, 11–15\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\nadb, image installations, 29–30\\r\\nadopting Android, reasons for, 17\\r\\nbroad acceptance, 2\\r\\nfull stack, 2\\r\\nalarms, 61–62\\r\\nAndroid\\r\\nframework, 39–40\\r\\nkernel, 53–55\\r\\nalarms, 61–62\\r\\nAshmem, 59\\r\\nBinder, 56–57\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nOOM-Killer, 58–59\\r\\nparanoid networking, 62\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nwakelocks, 55–56\\r\\nlayer cake analogy, 35–36\\r\\nlogs, 60–61\\r\\npermissions, 76\\r\\nautomatic enforcement, 77\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\nservice model, 40–43\\r\\nsoftware layers, 70\\r\\nstarting, 115\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\nIL, 116\\r\\nstartup times, 123–126\\r\\nVM, 116\\r\\nZygote, 115–116, 123–131\\r\\nversion selection, device development, \\r\\n16–17\\r\\nAndroid API Libraries, 39–40\\r\\nAndroid Applications, 40\\r\\nAndroid.bp directory, 45\\r\\nAndroid Services, 40\\r\\nAndroid Things, 7–8\\r\\nAOSP (Android Open Source Project), 3, \\r\\n4–5, 43–44\\r\\nGoogle, 5–6\\r\\nlocal mirrors, 17\\r\\nlunch tool, 24\\r\\nAPI\\r\\nAcme custom HIDL (binderized HAL), \\r\\n214–216\\r\\nJNI, 159–160\\r\\n9780134096346_print.indb   23425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8046f1db-3e3c-4305-8085-708c49acc942":{"__data__":"{\"id_\":\"8046f1db-3e3c-4305-8085-708c49acc942\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oPTSvUWVbKbjjG6r7nzkzomUe2tsCSKx1jx1p1OByn8=\"}},\"hash\":\"ka4EoqD3cP6TSIk7UyXpdYEzySEm4F2XXftAqE+zS10=\",\"text\":\"235boot\\r\\nJava and, 161–162\\r\\nnative code, 160–161, 162–165\\r\\nproximity application build,  \\r\\n165–176\\r\\nshims, 149\\r\\napplication logs, 61\\r\\napplications, 36, 38–39\\r\\nAndroid Applications, 40\\r\\nclient applications, HIDL (binderized \\r\\nHAL), 186\\r\\ncode structure, 154–155\\r\\ninit, 104–106\\r\\nnative code, 160–161\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer,  \\r\\n168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nstarting, Zygote, 115–116, 127–128\\r\\nusing, 155–157\\r\\nusing with HAL, 157–159\\r\\narchitectures, HIDL, 183–185\\r\\nArduino, 107\\r\\nART (Android Runtime), 39–40, 120\\r\\nbasics, 120–122\\r\\ndex2oat, 122\\r\\nhybrid ART, 122–123\\r\\nlinking, 121–122\\r\\nOAT files, 120–121\\r\\nsystem libraries, 122\\r\\nsystem updates, 122\\r\\nart directory, 45\\r\\nAshmem, 59\\r\\nautomatic enforcement of Android \\r\\npermissions, 77\\r\\nB\\r\\nbaseband processor logs, 61\\r\\nbinary logs, 61\\r\\nBinder, 39, 56–57\\r\\nbinderized HAL (HIDL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, 188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\nhwservicemanager, 185\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\nBionic, 38\\r\\nbionic directory, 45\\r\\nblock-structured memory, kernels,  \\r\\n51–52\\r\\nboot\\r\\nbootloader, 95–99\\r\\nDirect Boot, 82–83\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nprocess, 93–95\\r\\n9780134096346_print.indb   23525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"45c084be-3210-4f20-a3ef-95f2d768aeb9":{"__data__":"{\"id_\":\"45c084be-3210-4f20-a3ef-95f2d768aeb9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"VAFGJaS29Ho/lXO9zbsZf1TmGPYUkiWgyLryuQd/740=\"}},\"hash\":\"IeH4my+4P+DqDGp8KNMGKikZm0RaxyfyNIYJgtSFVyw=\",\"text\":\"236boot\\r\\nHAL, 137–140\\r\\nkernels, 62–63\\r\\nbuild systems, 63\\r\\ndownloading sources, 63–66\\r\\nproximity application, JNI, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nC\\r\\nC library, 37–38\\r\\nC++ aproximity client (native)\\r\\ncustom HIDL (binderized HAL),  \\r\\n219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\n/cache mount point, 81–82, 103\\r\\ncatalog trees, kernels, memory \\r\\nmanagement, 53\\r\\nCE storage areas, 82\\r\\nchipsets, 67\\r\\nClient App custom permission, 88–91\\r\\nclient applications, HIDL (binderized HAL), \\r\\n186\\r\\nclients, HIDL (binderized HAL), 197–198\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes,  \\r\\n229\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nClockworkMod recovery system, 107\\r\\nclones, Zygote, 125–126\\r\\nrecovery, 106–107\\r\\nverified boot, 68–69\\r\\nboot (unmounted) partition, 103\\r\\nbootable directory, 45\\r\\nbootloader, 95–99\\r\\nbootstrap.bash directory, 45\\r\\nbuild directory, 45\\r\\nbuild machines\\r\\nsetting up, 10–11\\r\\nvirtual machines, 10\\r\\nbuild process, Acme project\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\nbuilding\\r\\ndaemons, 107\\r\\nArduino, 107\\r\\ncreating Acme device, 107–109\\r\\nrepo tool, 110–111\\r\\n9780134096346_print.indb   23625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"31eee4be-ee09-4360-af8d-47c1e4b90dc2":{"__data__":"{\"id_\":\"31eee4be-ee09-4360-af8d-47c1e4b90dc2\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"mGfCKH3j6QTkR7XGHZdTJrTDTv8uPDXd3S8Do0F9rsc=\"}},\"hash\":\"cvQVpYJfbbPNx+ermogFynY69fa7yIeHboK1rHwj9wI=\",\"text\":\"237device development, Acme project\\r\\ncode\\r\\nAOSP, 43–44\\r\\napplication code structure, 154–155\\r\\ndownloading, device development, 11\\r\\nHAL code structure, 138–140\\r\\njavah, 161–164\\r\\nnative code\\r\\nAndroid applications, 160–161\\r\\ndocumenting references, 176\\r\\nexecuting, 160–161\\r\\ngarbage collector, 177–179\\r\\njavah, 161–164\\r\\nJNI hints, 176–182\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nownership, 3–5\\r\\nsources of, 43–44\\r\\ncommit planning, repositories, 19\\r\\ncopy on write, Zygote, 126\\r\\ncts directory, 45\\r\\ncustom HIDL (binderized HAL), 199, 219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, \\r\\n224–225\\r\\nSE Linux for Android changes,  \\r\\n209–212\\r\\nservices, 202–209\\r\\ncustomizing\\r\\nAndroid permissions, 83\\r\\nClient App, 88–91\\r\\nProtected App, 83–87\\r\\nsecurity, 67\\r\\nD\\r\\ndaemons\\r\\nbuilding, 107\\r\\nArduino, 107\\r\\ncreating Acme device, 107–109\\r\\nrepo tool, 110–111\\r\\ngarbage collector, 177–179\\r\\nlmkd, 59\\r\\nstarting, 111–114\\r\\nDalvik (DVM), 39–40, 116–119\\r\\ndalvik directory, 46\\r\\n/data mount point, 80, 103\\r\\nDDoS (Distributed Denial of Service), 7\\r\\nDE storage areas, 82\\r\\ndeclarations, HAL, 141–143\\r\\ndesigning HAL, 136–137\\r\\n/dev mount point, 81\\r\\ndevelopers directory, 46\\r\\ndevelopment directory, 46\\r\\ndevelopment environment, Android \\r\\nadoption, 3\\r\\ndevice development, Acme project\\r\\nAndroid version selection, 16–17\\r\\nbuild machines, setting up, 10–11\\r\\nbuild systems, 24–27\\r\\ndaemons, building, 107–109\\r\\ndownloading code, 11\\r\\nflashing devices, 30–33\\r\\nforked repositories, 19–24\\r\\nforking sources, 15–16\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\n9780134096346_print.indb   23725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b14eb0f9-7586-46cb-9140-97137e4d2b46":{"__data__":"{\"id_\":\"b14eb0f9-7586-46cb-9140-97137e4d2b46\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"xjfEB3EtL8fNoAZHnuMFQdplBpCWKBEbYz/Wvfc2QYU=\"}},\"hash\":\"rN5F3qz1esPEhsi4LF2iJDEzQvuNvKANvsaHjqP3siE=\",\"text\":\"238\\r\\nhosted git repositories, 18–19\\r\\nlocal mirrors of, 19–24\\r\\nHiKey960, 9\\r\\nimages\\r\\nbuilding, 24–27\\r\\ninstalling, 27–30\\r\\nlocal mirrors, 17–18, 19–24\\r\\npre-requirements, 9\\r\\nrepo tool, 11–15\\r\\nsource trees, 23\\r\\ntree snapshots, 19\\r\\nvendor integration, 16–17\\r\\nworkspaces, building, 24\\r\\ndevice directory, 46\\r\\ndevice manifests, Acme custom HIDL \\r\\n(binderized HAL), 212–213\\r\\ndex files, 118–119\\r\\ndex2oat, 122\\r\\nDirect Boot, 82–83\\r\\ndirectories\\r\\nAndroid.bp, 45\\r\\nart, 45\\r\\nbionic, 45\\r\\nbootable, 45\\r\\nbootstrap.bash, 45\\r\\nbuild, 45\\r\\ncts directory, 45\\r\\ndalvik, 46\\r\\ndevelopers, 46\\r\\ndevelopment, 46\\r\\ndevice, 46\\r\\nexternal, 46\\r\\nframeworks, 46\\r\\nHAL directories, structure of, 139\\r\\nhardware, 46–47\\r\\ninitializing, with repo tool, 11\\r\\nlibcore, 47\\r\\ndevice development, Acme project\\r\\nlibnativehelper, 47\\r\\nMakefile, 45\\r\\nout, 48\\r\\npackages, 47\\r\\npdk, 47\\r\\nplatform-testing, 47\\r\\nprebuilts, 47\\r\\nsdk, 47\\r\\nstructure of, 44\\r\\nsystem, 48\\r\\ntoolchain, 48\\r\\ntools, 48\\r\\ndomains, SE Linux, 74\\r\\ndownloading, code, device development, 11\\r\\nE\\r\\nencryption\\r\\nCE storage areas, 82\\r\\nDE storage areas, 82\\r\\nFBE, 82–83\\r\\nFDE, 82\\r\\nenforcing Android permissions\\r\\nautomatic enforcement, 77\\r\\nmanual enforcement, 78–79\\r\\nexternal directory, 46\\r\\nF\\r\\nfastboot, 28–29, 99–100\\r\\nFBE (File-Based Encryption), 82–83\\r\\nFDE (Full Disk Encryption), 82\\r\\nfile systems, 79\\r\\n/ (forward slash), 79\\r\\nboot, 102–106\\r\\nboot (unmounted) partition, 103\\r\\n/cache mount point, 81–82, 103\\r\\n/data mount point, 80, 103\\r\\n9780134096346_print.indb   23825/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1af9a8be-32ae-4b16-a158-909f81321b7c":{"__data__":"{\"id_\":\"1af9a8be-32ae-4b16-a158-909f81321b7c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JK8KswQU8AQ02vylhim4m1CqxAHOuzGCsK43goFrtWY=\"},\"NEXT\":{\"nodeId\":\"f2e8340a-fe51-4162-9ff6-14da579d58d9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1xcV4S8s34xQD8yfRf0zl8RkVcQmU76bOUtjKEoCxPc=\"}},\"hash\":\"yomcO+OcTfRILcraXy212koBCOeBu5vP3k3bKsABLCA=\",\"text\":\"239HAL (Hardware Abstraction Layer)\\r\\n/dev mount point, 81\\r\\ninit application, 104–106\\r\\n/odm (unmounted) partition, 104\\r\\n/odm mount point, 81\\r\\npersist (unmounted) partition, 104\\r\\n/proc mount point, 81\\r\\n/product (unmounted) partition, 104\\r\\n/product mount point, 81\\r\\nradio (unmounted) partition, 104\\r\\nrecovery (unmounted) partition, 104\\r\\n/sdcard mount point, 80–81\\r\\nstorage (/sdcard) partition, 104\\r\\n/sys mount point, 81\\r\\n/system mount point, 79, 103\\r\\nsystem startup, 102–106\\r\\n/vendor mount point, 81\\r\\nvendor (unmounted) partition, 103\\r\\nfinalizers, native shims, 169–171\\r\\nflashing devices, 30–33\\r\\nforked repositories, local mirrors of, 19–24\\r\\nforking sources, 15–16\\r\\nframeworks\\r\\nAndroid, 39–40\\r\\ndirectory, 46\\r\\nfull stack support, 2\\r\\nG\\r\\ngarbage collector, 177–179\\r\\nGerrit, 15\\r\\nGID, process sandbox, 70–72\\r\\ngit repositories\\r\\ncommit planning, 19\\r\\nforked repositories, local mirrors of, \\r\\n19–24\\r\\nhosted repositories, 18–19\\r\\nrepo tool, 13\\r\\nglibc (GNU C library), 38\\r\\nGoogle\\r\\nAOSP, 5–6\\r\\nProject Treble, 134\\r\\nGradle, Android adoption, 3\\r\\nH\\r\\nHAL (Hardware Abstraction Layer), 39\\r\\napplications, using, 157–159\\r\\nbuilding, 137–140\\r\\ncode structure, 138–140\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\ndeclarations, 141–143\\r\\ndefined, 133, 143–148\\r\\ndesigning, 136–137\\r\\ndirectories, structure of, 139\\r\\nHIDL (binderized HAL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, \\r\\n188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL).\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f2e8340a-fe51-4162-9ff6-14da579d58d9":{"__data__":"{\"id_\":\"f2e8340a-fe51-4162-9ff6-14da579d58d9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"JK8KswQU8AQ02vylhim4m1CqxAHOuzGCsK43goFrtWY=\"},\"PREVIOUS\":{\"nodeId\":\"1af9a8be-32ae-4b16-a158-909f81321b7c\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"yomcO+OcTfRILcraXy212koBCOeBu5vP3k3bKsABLCA=\"}},\"hash\":\"1xcV4S8s34xQD8yfRf0zl8RkVcQmU76bOUtjKEoCxPc=\",\"text\":\"See separate entry\\r\\nhwservicemanager, 185\\r\\n9780134096346_print.indb   23925/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f075f47b-9388-4d25-9d25-7d6c2b77b6eb":{"__data__":"{\"id_\":\"f075f47b-9388-4d25-9d25-7d6c2b77b6eb\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"dJsE3Xsptcvf40/t5JBDMhhvZuGIgjLfuMOfhwNMdM4=\"}},\"hash\":\"O3keuQia/GtAkQiNB+GeqdqZ4/hBujdQ580wBh0Y8Ac=\",\"text\":\"240HAL (Hardware Abstraction Layer)\\r\\nHiKey960, 9\\r\\nhosted git repositories, 18–19\\r\\nhwservicemanager, 185\\r\\nhybrid ART, 122–123\\r\\nI\\r\\nIL (Intermediate Languages), 116\\r\\nimages\\r\\nbuilding, lunch tool, 24–27\\r\\ninstalling, 27\\r\\nadb, 29–30\\r\\nfastboot, 28–29\\r\\nimplementing HAL, 140–141\\r\\ndeclarations, 141–143\\r\\ndefinitions, 143–148\\r\\nshims, 149–151\\r\\ninit application, 104–106\\r\\ninitializing directories, with repo tool, 11\\r\\ninstalling images, 27\\r\\nadb, 29–30\\r\\nfastboot, 28–29\\r\\nintegrating vendors, device development, \\r\\n16–17\\r\\ninterpreters, IL, 116\\r\\nIon, 60\\r\\nJ\\r\\nJava\\r\\nAndroid adoption, 3\\r\\nJNI, 161–162\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\nimplementing, 140–141\\r\\ndeclarations, 141–143\\r\\ndefinitions, 143–148\\r\\nshims, 149–151\\r\\nlayer structure, 138\\r\\nnecessity of, 135\\r\\nProject Treble, 134\\r\\npurpose of, 133–134\\r\\nshims, 149\\r\\nAPI, 149\\r\\nimplementing, 150–151\\r\\nSP-HAL, 185\\r\\nhardware, 36\\r\\nhardware directory, 46–47\\r\\nHIDL (binderized HAL), 183, 186–187, \\r\\n188–191\\r\\nAndroid-defined HIDL packages, 188\\r\\narchitectures, 183–185\\r\\nclient applications, 186\\r\\nclients, 197–198\\r\\ncustom HIDL (binderized HAL), 199, \\r\\n219\\r\\nbuilding HIDL into Acme, 213\\r\\ndefined, 200–202\\r\\ndevice manifests, 212–213\\r\\nJava/Kotlin aproximity client, \\r\\n226–230\\r\\nlocking down API, 214–216\\r\\nnative C++ aproximity client, \\r\\n219–226\\r\\nSE Linux for Android changes, \\r\\n209–212\\r\\nservices, 202–209\\r\\nhwservicemanager, 185\\r\\nservices, 185, 194–197, 202–209\\r\\ntypes of, 191–194\\r\\n9780134096346_print.indb   24025/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"44cb540c-78fe-4071-9430-2c4750ccbf4a":{"__data__":"{\"id_\":\"44cb540c-78fe-4071-9430-2c4750ccbf4a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1BU4GzKwXnnMm9m+Rz2CVn7mcqcBxfSxDdXLsAWdkh0=\"},\"NEXT\":{\"nodeId\":\"db462bbd-22c7-4672-9f4f-f75e2774c6a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"U7QCuP3aOcIzXwS+Ih7xw0qf1ypCI5aNPLygllZlxzY=\"}},\"hash\":\"oApECtMhQr7LWcgWvegEZjCg3+yW7RWbizToJwFS3lU=\",\"text\":\"241Linux\\r\\njavah, 161–164\\r\\nJava/Kotlin aproximity client, custom HIDL \\r\\n(binderized HAL), 226–229\\r\\nbuilding into Acme, 229–230\\r\\nSE Linux for Android changes, 229\\r\\nJNI (Java Native Interface), 159–160\\r\\nbreaking rules, 176\\r\\ngarbage collector, 177–179\\r\\nJava and, 161–162\\r\\nnative code\\r\\ndocumenting references, 176\\r\\nexecuting, 160–161\\r\\njavah, 161–164\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nproximity application build, 165\\r\\nnative shims, 165–167\\r\\nnative shims, finalizers, 169–171\\r\\nnative shims, Opaque Peer, 168–169\\r\\nnative shims, reference queues, \\r\\n171–176\\r\\nK\\r\\nkernel modules, zram, 52–53\\r\\nkernels\\r\\nAndroid, 53–55\\r\\nalarms, 61–62\\r\\nAshmem, 59\\r\\nBinder, 56–57\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nOOM-Killer, 58–59\\r\\nparanoid networking, 62\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nwakelocks, 55–56\\r\\nBinder, 39\\r\\nboot, 100–102\\r\\nbuilding, 62–63\\r\\nbuild systems, 63\\r\\ndownloading sources, 63–66\\r\\ncatalog trees, memory management, 53\\r\\nLinux, 36–37, 49–50\\r\\nmemory management, 51–53\\r\\nprocess management, 50–51\\r\\nsystem startup, 100–102\\r\\nKotlin.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"db462bbd-22c7-4672-9f4f-f75e2774c6a0":{"__data__":"{\"id_\":\"db462bbd-22c7-4672-9f4f-f75e2774c6a0\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1BU4GzKwXnnMm9m+Rz2CVn7mcqcBxfSxDdXLsAWdkh0=\"},\"PREVIOUS\":{\"nodeId\":\"44cb540c-78fe-4071-9430-2c4750ccbf4a\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"oApECtMhQr7LWcgWvegEZjCg3+yW7RWbizToJwFS3lU=\"}},\"hash\":\"U7QCuP3aOcIzXwS+Ih7xw0qf1ypCI5aNPLygllZlxzY=\",\"text\":\"See Java/Kotlin aproximity client\\r\\nL\\r\\nlabels, SE Linux, 74\\r\\nlayer cake analogy, Android, 35–36\\r\\nlayer structure, HAL, 138\\r\\nlibcore directory, 47\\r\\nlibnativehelper directory, 47\\r\\nlibraries, system, 36, 37, 38\\r\\nAndroid API Libraries, 39–40\\r\\nART, 39–40, 122\\r\\nBionic, 38\\r\\nC library, 37–38\\r\\nDalvik, 39–40\\r\\nglibc, 38\\r\\nNative Libraries, 39–40\\r\\nlinking, ART, 121–122\\r\\nLinux\\r\\nAndroid adoption, 2–3\\r\\nbuild machine setup, 10\\r\\nkernel, 36–37, 49–50\\r\\nSE Linux, 72–73\\r\\ndomains, 74\\r\\nlabels, 74\\r\\n9780134096346_print.indb   24125/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b3a5321c-2eaa-4800-a129-1d9b59608d60":{"__data__":"{\"id_\":\"b3a5321c-2eaa-4800-a129-1d9b59608d60\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"eoKzheaZgpOxE9EFvdyZqMKAB4n+ZDsrhpyT90Fgwd4=\"}},\"hash\":\"2ZMts5XyVjv+XVAev1tqmCgLmUJwQwQuzSfOUdmHl8A=\",\"text\":\"242Linux\\r\\nmanifests\\r\\nAcme custom HIDL (binderized HAL), \\r\\n212–213\\r\\nrepo tool, 11–12, 13–14\\r\\nmanual enforcement of Android \\r\\npermissions, 78–79\\r\\nmemory\\r\\nAshmem, 59\\r\\nblock-structured memory, kernels, \\r\\n51–52\\r\\ncatalog trees, 53\\r\\nIon, 60\\r\\nlogger, 60–61\\r\\nlow memory killer, 57–59\\r\\nmanaging\\r\\nkernels, 51–53\\r\\nZygote, 123–126\\r\\nOOM-Killer, 58–59\\r\\npage tables, 125\\r\\npmem, 59–60\\r\\nRAM, kernels, memory management, \\r\\n51–53\\r\\nROM, 7\\r\\nshared memory\\r\\nAshmem, 59\\r\\nIon, 60\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nsolid-state memory, kernels, 52\\r\\nzram, 52–53\\r\\nmicro-controllers, 6–7\\r\\nmirrors, local\\r\\nAOSP, 17\\r\\ndevice development, Acme project, \\r\\n17–18, 19–24\\r\\nforked repositories, 19–24\\r\\nmount points\\r\\n/ (forward slash), 79\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\nsystem startup\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ncreating Acme device, 107–109\\r\\ndaemons, 107–111\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nlmkd, 59\\r\\nlocal mirrors\\r\\nAOSP, 17\\r\\ndevice development, Acme project, \\r\\n17–18, 19–24\\r\\nforked repositories, 19–24\\r\\nlogger, 60–61\\r\\nlogs\\r\\napplication logs, 61\\r\\nbaseband processor logs, 61\\r\\nbinary logs, 61\\r\\nsystem logs, 61\\r\\nlow memory killer, 57–59\\r\\nlunch tool, images, building, 24–27\\r\\nM\\r\\nMAC, process sandbox, 72\\r\\nMakefile directory, 45\\r\\nmanaging\\r\\nkernels\\r\\nmemory, 51–53\\r\\nprocesses, 50–51\\r\\nmemory, Zygote, 123–126\\r\\n9780134096346_print.indb   24225/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a845a58b-5ba9-47bc-a73a-d4e40c45aae9":{"__data__":"{\"id_\":\"a845a58b-5ba9-47bc-a73a-d4e40c45aae9\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"cklRoMNF6hDE0dbk1+BCpnm1nYloF4tA5+UAZexIpMI=\"}},\"hash\":\"M+Oq0yBgxv90gJKV3p+gDek9QtqLYseLe60X1PpaCOw=\",\"text\":\"243permissions\\r\\n/cache, 81–82, 103\\r\\n/data, 80, 103\\r\\n/dev, 81\\r\\nmiscellaneous mount points, 81–82\\r\\n/odm, 81\\r\\n/proc, 81\\r\\n/product, 81\\r\\n/sdcard, 80–81\\r\\n/sys, 81\\r\\n/system, 79, 103\\r\\n/vendor, 81\\r\\nN\\r\\nnative C++ aproximity client, custom HIDL \\r\\n(binderized HAL), 219–224\\r\\nbuilding into Acme, 225–226\\r\\nSE Linux for Android changes, 224–225\\r\\nnative code\\r\\nAndroid applications, 160–161\\r\\nexecuting, 160–161\\r\\nJNI\\r\\ndocumenting references, 176\\r\\ngarbage collector, 177–179\\r\\nobject references, 179–182\\r\\npassing simple types, 177\\r\\nstatic methods, 177\\r\\nWeakRefs, 179–182\\r\\nNative Libraries, 39–40\\r\\nnative shims\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nproximity application build, 165–176\\r\\nreference queues, 171–176\\r\\nO\\r\\nOAT files, 120–121\\r\\n/odm mount point, 81\\r\\n/odm (unmounted) partition, 104\\r\\nOOM-Killer, 58–59\\r\\nOpaque Peer, 168–169\\r\\nopen source environment, Android adoption, \\r\\n3–5\\r\\noperational security, 67, 69–70\\r\\nAndroid permissions, 76\\r\\nautomatic enforcement, 77\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–76\\r\\nOSX, build machine setup, 10–11\\r\\nOTA updates, 6\\r\\nout directory, 48\\r\\nownership, code, 3–5\\r\\nP\\r\\npackages directory, 47\\r\\npage tables, memory, 125\\r\\nparanoid networking, 62\\r\\npartitions\\r\\nboot (unmounted), 103\\r\\n/odm (unmounted), 104\\r\\npersist (unmounted), 104\\r\\n/product (unmounted), 104\\r\\nradio (unmounted), 104\\r\\nrecovery (unmounted), 104\\r\\nstorage (/sdcard), 104\\r\\n/system, 103\\r\\nvendor (unmounted), 103\\r\\npdk directory, 47\\r\\npermissions, 43\\r\\nAndroid, 76\\r\\nautomatic enforcement, 77\\r\\n9780134096346_print.indb   24325/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a499d3c0-26e0-4225-8788-843ef75524af":{"__data__":"{\"id_\":\"a499d3c0-26e0-4225-8788-843ef75524af\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XGukiNO55296pmMtN/4CcPQsZddXjOMQ4JvhGNin0z8=\"},\"NEXT\":{\"nodeId\":\"2740f4d2-2c33-4dbf-92bb-1e1e5dbb34ab\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"iGoZ2zOH1MLZUSTIjrS4VLxKMmg13/lr3AH4UbVOVTo=\"}},\"hash\":\"/NsbfX18Wh5+q3KnnAJt6omYbzSQQ95Ko7/5S0sXiyY=\",\"text\":\"244permissions\\r\\nQ\\r\\nQNX, 7\\r\\nR\\r\\nradio (unmounted) partition, 104\\r\\nRAM (Random Access Memory), kernels, \\r\\nmemory management, 51–53\\r\\nrecovery\\r\\nboot, 106–107\\r\\nClockworkMod recovery system, 107\\r\\nTWRP, 107\\r\\nrecovery (unmounted) partition, 104\\r\\nreference queues, native shims, 171–176\\r\\nrepo tool, 11\\r\\nbuild process, Acme project, 11–15\\r\\ndaemons, building, 110–111\\r\\ndirectories, initializing, 11\\r\\nGerrit, 15\\r\\ngit repositories, 13\\r\\nmanifests, 11–12, 13–14\\r\\nsync command, 12–13\\r\\nuploads, 15\\r\\nworkflows, 15\\r\\nworkspaces, 11–12\\r\\nrepositories, git\\r\\ncommit planning, 19\\r\\nforked repositories, local mirrors, 19–24\\r\\nhosted git repositories, 18–19\\r\\nrepo tool, 13\\r\\nroles, SE Linux, 74\\r\\nROM (Read-Only Memory), 7\\r\\nRTOS (Real-Time Operating Systems), 6, 8\\r\\nAndroid Things, 7–8\\r\\nQNX, 7\\r\\nVxWorks, 7\\r\\nruntime initialization, Zygote, 128–129\\r\\ncustomizing, 83–91\\r\\nmanual enforcement, 78–79\\r\\ncustomizing\\r\\nClient App, 88–91\\r\\nProtected App, 83–87\\r\\npersist (unmounted) partition, 104\\r\\nplatform security, 67\\r\\nchipsets, 67\\r\\ncustomization security, 67\\r\\noperational security, 67, 69–70\\r\\nAndroid permissions, 76–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–76\\r\\ntypes of, 67\\r\\nuser security, 67, 82–83\\r\\nverified boot, 68–69\\r\\nplatform-testing directory, 47\\r\\nplug-ins, Binder, 39\\r\\npmem, 59–60\\r\\npolicy definitions, 73–76\\r\\nPOSIX alarm driver, 61–62\\r\\nprebuilts directory, 47\\r\\npre-requirements, device development, 9\\r\\n/proc mount point, 81\\r\\nprocesses\\r\\nmanaging, kernels, 50–51\\r\\nsandboxing, 70–72\\r\\n/product mount point, 81\\r\\n/product (unmounted) partition, 104\\r\\nProject Treble, 134, 183.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2740f4d2-2c33-4dbf-92bb-1e1e5dbb34ab":{"__data__":"{\"id_\":\"2740f4d2-2c33-4dbf-92bb-1e1e5dbb34ab\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XGukiNO55296pmMtN/4CcPQsZddXjOMQ4JvhGNin0z8=\"},\"PREVIOUS\":{\"nodeId\":\"a499d3c0-26e0-4225-8788-843ef75524af\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"/NsbfX18Wh5+q3KnnAJt6omYbzSQQ95Ko7/5S0sXiyY=\"}},\"hash\":\"iGoZ2zOH1MLZUSTIjrS4VLxKMmg13/lr3AH4UbVOVTo=\",\"text\":\"See also HIDL\\r\\nProtected App custom permission, 83–87\\r\\nproximity application build, native shims, \\r\\n165–167\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nreference queues, 171–176\\r\\n9780134096346_print.indb   24425/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"281c8653-b2ed-4269-86c1-faa04595b241":{"__data__":"{\"id_\":\"281c8653-b2ed-4269-86c1-faa04595b241\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1VR202pXNoIVZmOPuImvILQQiu21r+dk6c/FfeF7FTg=\"}},\"hash\":\"yeUrWpqOLrWtd9QBYKDa1+FES9U+SdpjENR7oIiSwTA=\",\"text\":\"245shims\\r\\n/sys mount point, 81\\r\\n/system mount point, 79, 103\\r\\n/vendor mount point, 81\\r\\noperational security, 67, 69–70, 72–76\\r\\nAndroid permissions, 76–79\\r\\nAndroid software layers, 70\\r\\nprocess sandbox, 70–72\\r\\nSE Linux, 72–73\\r\\ndomains, 74\\r\\nlabels, 74\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\ntypes of, 67\\r\\nuser security, 67, 82–83\\r\\nverified boot, 68–69\\r\\nservices\\r\\nAcme custom HIDL (binderized HAL), \\r\\n202–209\\r\\nAndroid Services, 40\\r\\ncustom HIDL (binderized HAL),  \\r\\n202–209\\r\\nHIDL (binderized HAL), 185, 194–197, \\r\\n202–209\\r\\nsetting up, build machines, 10–11\\r\\nshared folders, virtual machines, 10\\r\\nshared memory\\r\\nAshmem, 59\\r\\nIon, 60\\r\\npmem, 59–60\\r\\nSkia, 60\\r\\nshims, 149\\r\\nAPI, 149\\r\\nnative shims\\r\\nfinalizers, 169–171\\r\\nOpaque Peer, 168–169\\r\\nS\\r\\nsandboxing, processes, 70–72\\r\\nSBC (Single-Board Computers), 6\\r\\n/sdcard mount point, 80–81\\r\\nsdk directory, 47\\r\\nSE Linux, 72–73\\r\\nAcme custom HIDL (binderized HAL), \\r\\n209–212\\r\\nJava/Kotlin aproximity client, 229\\r\\nnative C++ aproximity client, \\r\\n224–225\\r\\ncustom HIDL (binderized HAL),  \\r\\n209–212\\r\\ndomains, 74\\r\\nHIDL (binderized HAL), 209–212\\r\\nlabels, 74\\r\\npolicy definitions, 73–76\\r\\nroles, 74\\r\\ntypes, 74\\r\\nusers, 73\\r\\nsecurity, 67\\r\\nCE storage areas, 82\\r\\nchipsets, 67\\r\\ncustomization security, 67\\r\\nDE storage areas, 82\\r\\nDirect Boot, 82–83\\r\\nFBE, 82–83\\r\\nFDE, 82\\r\\nfile systems, 79\\r\\n/ (forward slash), 79\\r\\n/cache mount point, 81–82, 103\\r\\n/data mount point, 80, 103\\r\\n/dev mount point, 81\\r\\n/odm mount point, 81\\r\\n/proc mount point, 81\\r\\n/product mount point, 81\\r\\n/sdcard mount point, 80–81\\r\\n9780134096346_print.indb   24525/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"21f04604-a5f4-4069-b322-c6d31d15fd3f":{"__data__":"{\"id_\":\"21f04604-a5f4-4069-b322-c6d31d15fd3f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XaNNEdz97rC8WyAxpkqIpxzcq6QdW84/IZHs9xqvk/M=\"},\"NEXT\":{\"nodeId\":\"95717588-040f-4c40-93f3-2eb6e1394455\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"KNVwxXTctaA41hKNGrxvP2smQjCFeOB5FlgkAD00hlk=\"}},\"hash\":\"SU6+M5kg4GblHZJS/AabXdonKxaNdnhKqaBJWnNjgMc=\",\"text\":\"246shims\\r\\nsync command, repo tool, 12–13\\r\\n/sys mount point, 81\\r\\nsystem directory, 48\\r\\nsystem libraries, 36, 37, 38, 39–40\\r\\nAndroid API Libraries, 39–40\\r\\nART, 39–40, 122\\r\\nBionic, 38\\r\\nC library, 37–38\\r\\nDalvik, 39–40\\r\\nglibc, 38\\r\\nNative Libraries, 39–40\\r\\nsystem logs, 61\\r\\n/system mount point, 79, 103\\r\\nsystem services, 36, 129–131\\r\\nsystem startup\\r\\nAcme device, creating, 107–109\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ndaemons\\r\\nbuilding, 107\\r\\nstarting, 111–114\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nsystem updates, ART, 122\\r\\nT\\r\\nThings, Android, 7–8\\r\\ntoolchain directory, 48\\r\\ntools directory, 48\\r\\nTreble, Project, 134, 183.\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"95717588-040f-4c40-93f3-2eb6e1394455":{"__data__":"{\"id_\":\"95717588-040f-4c40-93f3-2eb6e1394455\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"XaNNEdz97rC8WyAxpkqIpxzcq6QdW84/IZHs9xqvk/M=\"},\"PREVIOUS\":{\"nodeId\":\"21f04604-a5f4-4069-b322-c6d31d15fd3f\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"SU6+M5kg4GblHZJS/AabXdonKxaNdnhKqaBJWnNjgMc=\"}},\"hash\":\"KNVwxXTctaA41hKNGrxvP2smQjCFeOB5FlgkAD00hlk=\",\"text\":\"See also HIDL\\r\\ntree snapshots, 19\\r\\nTWRP (Team Win Recovery Project), 107\\r\\ntypes, SE Linux, 74\\r\\nproximity application build,  \\r\\n165–176\\r\\nreference queues, 171–176\\r\\nSkia, 60\\r\\nsnapshots, tree, 19\\r\\nSoC vendors, Android version selection, \\r\\n16–17\\r\\nsoftware layers, Android, 70\\r\\nsolid-state memory, kernels, 52\\r\\nsource trees, Acme project device \\r\\ndevelopment example, 23\\r\\nSP-HAL (Same Process-HAL), 185\\r\\nstarting\\r\\nAndroid, 115\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\nIL, 116\\r\\nstartup times, 123–126\\r\\nVM, 116\\r\\nZygote, 115–116, 123–131\\r\\napplications, Zygote, 115–116, 127–128\\r\\ndaemons, 111–114\\r\\nLinux systems\\r\\nboot process, 93–95\\r\\nbootloader, 95–99\\r\\ncreating Acme device, 107–109\\r\\ndaemons, 107–111\\r\\nfastboot, 99–100\\r\\nfile systems, 102–106\\r\\nkernels, 100–102\\r\\nrecovery, 106–107\\r\\nrepo tool, 110–111\\r\\nZygote, 127–128\\r\\nstorage\\r\\nCE storage areas, 82\\r\\nDE storage areas, 82\\r\\nstorage (/sdcard) partition, 104\\r\\n9780134096346_print.indb   24625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d02a17e0-324f-4ffb-89e6-9457121b5d22":{"__data__":"{\"id_\":\"d02a17e0-324f-4ffb-89e6-9457121b5d22\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1GWqhi960zSGHBS7faHtAJJn+pPjqAqjr69PU3Y7nxI=\"}},\"hash\":\"yy+X+rrcsL7oov8SGh5SlTfyAbeUvhY9GeEhFJZS66Y=\",\"text\":\"247Zygote\\r\\nshared folders, 10\\r\\nZygote, 123–131\\r\\nvmpressure events, 59\\r\\nVxWorks, 7\\r\\nW\\r\\nwakelocks, 55–56\\r\\nWeakRefs, 179–182\\r\\nworkflows, Repo, 15\\r\\nworkspaces\\r\\nbuilding, 24\\r\\nrepo tool, 11–12\\r\\nX - Y - Z\\r\\nzram, 52–53\\r\\nZygote, 40, 115–116, 123\\r\\nclones, 125–126\\r\\nmemory management, 123–126\\r\\nruntime initialization, 128–129\\r\\nstarting, 127–128\\r\\nstartup times, 123–126\\r\\nsystem service startups, 129–131\\r\\nU\\r\\nUI (User Interface), Android adoption, 2\\r\\nUID (Use ID), process sandbox, 70–72\\r\\nunlocking bootloaders, 99\\r\\nupdates\\r\\nOTA, 6\\r\\nsystem updates, ART, 122\\r\\nuploads, repo tool, 15\\r\\nuserdata, /data mount point, 80, 103\\r\\nusers\\r\\nSE Linux, 73\\r\\nsecurity, 67, 82–83\\r\\nV\\r\\n/vendor mount point, 81\\r\\nvendors\\r\\nintegration, device development, 16–17\\r\\nunmounted, 103\\r\\nverified boot, 68–69\\r\\nversion selection, Android, 16–17\\r\\nVM (Virtual Machines), 116\\r\\nART, 120–123\\r\\nDalvik (DVM), 116–119\\r\\n9780134096346_print.indb   24725/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f3172ab1-d713-46e8-8f54-f431f0cf89c6":{"__data__":"{\"id_\":\"f3172ab1-d713-46e8-8f54-f431f0cf89c6\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM=\",\"metadata\":{\"file_path\":\"C:\\\\Users\\\\hashi\\\\Documents\\\\llamaindex apps\\\\rag-demo-local-storage\\\\data\\\\(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\",\"file_name\":\"(Android Deep Dive) G. Meike, Lawrence Schiefer - Inside the Android OS_ Building, Customizing, Managing and Operating Android System Services-Addison-Wesley Professional (2021).pdf\"},\"hash\":\"1uDfv0Wbvvlj+0+89eBSdTaYKhUPZfVQJhXFzTY1Ebg=\"}},\"hash\":\"C3096gQ67TEKku+kg/dxJX3r44Yj+w8W33JO6vr0tuI=\",\"text\":\"Addison-Wesley • Adobe Press • Cisco Press • Microsoft Press • Pearson IT Certification • Que • Sams • Peachpit Press\\r\\nRegister Your Product at informit.com/register \\r\\nAccess additional benefits and save 35% on your next purchase\\r\\n•      Automatically receive a coupon for 35% off your next purchase, valid\\r\\nfor 30 days. Look for your code in your InformIT cart or the Manage\\r\\nCodes section of your account page. •Download available product updates. •Access bonus material if available.* \\r\\n•      Check the box to hear from us and receive exclusive offers on new\\r\\neditions and related products. *Registration benefits vary by product. Benefits will be listed on your account page under\\r\\nRegistered Products. InformIT.com—The Trusted Technology Learning Source\\r\\nInformIT is the online home of information technology brands at Pearson, the world’s \\r\\nforemost education company. At InformIT.com, you can: \\r\\n•Shop our books, eBooks, software, and video training\\r\\n•Take advantage of our special offers and promotions (informit.com/promotions)\\r\\n•Sign up for special offers and content newsletter (informit.com/newsletters)\\r\\n•Access thousands of free chapters and video lessons\\r\\nConnect with InformIT—Visit informit.com/community\\r\\nPhoto by izusek/gettyimages\\r\\n9780134096346_print.indb   25625/06/21   6:27 PM\",\"textTemplate\":\"\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"}},"docstore/ref_doc_info":{"GPdGm9ZDdMMosrzdXZfbgO09+6vyxz84t2tzV99gmEg=":{"nodeIds":["4e736425-14c1-498c-b62a-c1908e9e0bce"],"extraInfo":{}},"LV9uR3sml0ZlrV5KmNZjQlm/7POFW+CQf45rC3Y0i7w=":{"nodeIds":["f446536f-8b98-44b8-a11c-308f9724f6b2"],"extraInfo":{}},"dfffsoHM2Jb4aEX9+TOV5MDVBnDU68iMAaHcaktOWj8=":{"nodeIds":["783c90a2-de10-45da-a477-19de016440bd"],"extraInfo":{}},"RuEu9r0tUdFDlXHDTGlU0zE8CpAaxZhjon54AdFDA4U=":{"nodeIds":["99d1b22f-27ae-4800-a012-650ae78662f4","5ca37e76-eec4-4178-868d-af933ce10bfb"],"extraInfo":{}},"jYtmXXRBiQkKweXpIxe5rpLhn10d8x4FAoxMvgNYkXY=":{"nodeIds":["f62ebbcb-2b75-4cd2-9f62-33e407b7c560"],"extraInfo":{}},"/XdcIkRy8Zt2t3i0S97gK4NPH86gABROpYgjbpdDJuQ=":{"nodeIds":["e2d51c89-5780-4499-8902-cb05407ee33c"],"extraInfo":{}},"iHpTvHAyoTMvTk2+BOseNGuiRSmJ+guimQkTE/4+AaU=":{"nodeIds":["c54d583b-73f1-4433-9cf4-5a7c913a1f51"],"extraInfo":{}},"AmXUuh4ru7311PWfevic61TwlZCdZFppZ8ZP6zIeCrM=":{"nodeIds":["38cbf2ef-9d44-4479-b414-4f083cd81485"],"extraInfo":{}},"bVvjZJcK1yzv42/aHCilc3onuivMEhAf66CI6elMVcU=":{"nodeIds":["e80dc5e7-2ead-43e8-b01c-041c1b74055e"],"extraInfo":{}},"XwYAdMzsqZTXeq6VCWV4oEQIu04ZKO3KW3X76rXpnrc=":{"nodeIds":["301ef252-0e38-4b7c-9ae2-86f9c7459aa5"],"extraInfo":{}},"RQ9nbVkblP97+cYn2bhHr9QL+6CEUn4+pwODZ9sGxj8=":{"nodeIds":["14d1f4b2-81d5-4da8-bd2d-bab9daa62c8b"],"extraInfo":{}},"Wu90DI9h0DpTX6bNXHNR9yp0m/8FgQhQU2gsuKaJDhc=":{"nodeIds":["66164a12-1c19-4de4-a298-69eebacc2e9b","b4064524-6e52-4fe5-8432-66f2de080066"],"extraInfo":{}},"VWGikskuBTyclnFm3hTP7mHjr0/y24Ru4Pru9OCLbtw=":{"nodeIds":["00cd24a8-7cc7-4ff5-a5e6-dbf20675feb6"],"extraInfo":{}},"qaw8uAws1hSBtQKsy4yvGX4KhpLDGxFZ34vFdTsp5DI=":{"nodeIds":["6242e2d4-28de-4883-89a3-b76bcf64e098","6f836dcf-8ff4-4453-88f4-7e3060a2b6a2"],"extraInfo":{}},"9ZYCTEILHIY7+Vk6EKA8p7TyigC93LPn78X2yNTR6fM=":{"nodeIds":["f7a951e8-3dff-47a8-b35e-3815e0a6179d"],"extraInfo":{}},"jJxPKLflVWctPscXbHBplvzJLspFrTdJ5FymrE/uSV0=":{"nodeIds":["62e0437f-54c7-45a2-8466-a6e31b3c9520"],"extraInfo":{}},"EMZ1Gx/lgw93Io21RpxiEuyb8CKpN9MkfExMv1ln/hM=":{"nodeIds":["338d6d11-5d1d-4eb3-9f65-c8d14b9ae218","5f8a7d96-9f5f-4c7f-adc9-999705d227b5"],"extraInfo":{}},"b1jIr23h3bR6cgAvpzPMwOpsMEjFHuXpKKKT1Aqx+C8=":{"nodeIds":["5c186e49-bf18-430b-970c-4e017e5d82e0","3cbf5927-93a6-48af-adaf-ed289c4a2b96"],"extraInfo":{}},"7JJUsrjCKWTPDDFnQP/KUYDyqsrTOrqbGBJd4DMR/dU=":{"nodeIds":["b370bfdc-e568-4cca-9af7-e83b36e7e8dc","72c8f4cd-5d14-4b45-a3a5-80783ffef76d"],"extraInfo":{}},"DdhPYDOze31yQsndlolkwiI2WAeFAcmk06T+35vLIf4=":{"nodeIds":["cf82a094-29f4-4dad-bbb3-f2947f807567","daa98a0f-c5ff-425d-b03e-5653c4722ec3"],"extraInfo":{}},"sz8qATtNUIEwnAa7qy01cXNohB68f5AY9+1gQaFXMOg=":{"nodeIds":["f72496a7-c2b5-4c76-93b0-0b195fd254b7","33124dfe-3933-4a54-ad34-eac7e17e4c00"],"extraInfo":{}},"8Q/ueF2aQ62hR8igV9GH12ymIPzxU3zlC8c5s2j4XLE=":{"nodeIds":["21c2ed46-4801-4698-b179-1a4655496fea","b51be96f-24b9-4e6d-bd35-5eb9514cd4fc"],"extraInfo":{}},"n31opwIX6wTaKgVO5sQTovBOBk/fdIJ5Dnb7qcewvsk=":{"nodeIds":["a117f3e2-cfed-49bc-9788-db9bbc48c778","2da7c9de-b231-4340-84e8-0bea89f6d5b2"],"extraInfo":{}},"sKr1rhi9U7RQlvaqYdY2qt3b7W+7IOQJEpaU6KEnXxU=":{"nodeIds":["0f187707-3726-45ce-b55f-6c8828dde66f"],"extraInfo":{}},"ZAb6C+BSRVPa02UXKLJNXXnFyehQFVAudX5WF7E1tbg=":{"nodeIds":["62c9c3db-36ce-4f86-a572-4809451a6c58","d2bc6156-4452-4bc9-9a98-5abce84a319d"],"extraInfo":{}},"PzhTDRZiOIUdESomLtCSaIjzt6fzRYJEEpVoUL9BDRQ=":{"nodeIds":["187ea013-8172-4a63-8d3c-1c0793eeb1c8"],"extraInfo":{}},"DlL4wlCeVDp3cGqeuvdUlGnPAUz9oYOvPS58iUEG9EA=":{"nodeIds":["ced30b2c-c030-433f-b28f-8c822d4e279c"],"extraInfo":{}},"PMkqLOS0aSJACphdOmO9gKXTIOIHlpTbW3BcHETnmlI=":{"nodeIds":["eff5d9d6-ba84-4c21-ad93-100764c93daf","1c82daaa-4f20-48c6-bdff-d543a1a7efd6"],"extraInfo":{}},"57B9rQvGRSHxCowPdp7KA/6fo0Fp8F+GyaJP8COs8/4=":{"nodeIds":["9e288555-86e9-46bb-8c4d-b64c4904cbd7","57028f4a-401d-428d-bb1e-00765089dc4a"],"extraInfo":{}},"EQf+Ww0Zh4+mFRK3/e9gWn83rVOPbQh0JsqVi5TBORA=":{"nodeIds":["fb5fd238-0d1b-4eb0-9d6d-3207fa91ea37","af8cab08-f5a3-430a-9862-82e63f50cdda"],"extraInfo":{}},"DdSoHPCbPDP2+VIxTdatVBFsxXx7I8y8zHdGWFJ6fmM=":{"nodeIds":["65fdec14-2873-4223-a403-d832c9096598","32f4ccdb-b0f0-497d-af16-9830649187a2"],"extraInfo":{}},"zKa5J963Njo7I7FmAsZWLJKb3Avmo6Mycbfn3oE6qXQ=":{"nodeIds":["d12974d0-db79-473e-a6a6-04468147e087","c94c5f19-e000-4740-bcbc-cb95c5f9e7ec"],"extraInfo":{}},"Zaz1AypJFRVR2QKeXt2dnKAB9qXuFKT9/p35uLVSVTU=":{"nodeIds":["7d839580-309d-4da8-9715-845fce715b78","0f1ee0ec-5436-484a-bc73-f87169740788"],"extraInfo":{}},"+xI9sZLDrynkbOgWGK3d5fArLuR48AsER+YVJM+JPjU=":{"nodeIds":["e82b5b61-6f3a-4a25-b8ab-ac9e8a393f06","fc2aa07d-e4c2-4d25-9b02-b2b9180ff808"],"extraInfo":{}},"bMaksm7yMl774znldPpucE6FdbGR/Nybe8Lh2AqsAm0=":{"nodeIds":["4905a0c7-5cda-471e-948a-4f0859dfb4b5","aac696f2-f977-4cb3-bc5a-fe1d91510f73"],"extraInfo":{}},"hRaELdpNblGxLGtstDK/CByVdT2LcJTe3gwR8yd9iAg=":{"nodeIds":["80e012ec-f049-4d1a-a369-200f683934b0"],"extraInfo":{}},"4batEtBFG8lvuf0hyU8vyMWX14nU0faruNuavwSigIM=":{"nodeIds":["8feaf6e3-ac3b-4bc8-90e5-f175a0e3d036","1eb2b829-27e9-4a08-a15a-dfec65e3cb70"],"extraInfo":{}},"19aYECJjfBBLbzAYtsoKiO57103e59VM9FJ0x0kErlg=":{"nodeIds":["f4d7dae3-5ce2-42d4-92ad-6a5a8ade3a71"],"extraInfo":{}},"+HQW9oaHhTISePsPOj99yIfbdueVJrx4Pwx3Jj9N52U=":{"nodeIds":["3d5daaa9-9b83-428b-a5d9-411ade6ac998","f8887d97-de7d-4078-b667-f64e3f00b653"],"extraInfo":{}},"LRX+ZlVGRzo0DiDpjGLakXqyO9zeGGXNMsRw0/xdTQY=":{"nodeIds":["d9e5236f-5892-417d-86ed-c145fb31d8bd","d1687814-dc7f-4d24-9e4a-4e7e2fddecac"],"extraInfo":{}},"WhcQhuMzIl4r2ZnFz7ALm8BO+cL+2kBd2QRiBfLl7H0=":{"nodeIds":["96250b22-b1cb-4729-94b3-899f15568476"],"extraInfo":{}},"mKG1DX7Mxy++0FrPQda1Pd0H1Gyey/vzKwLmbHEON7E=":{"nodeIds":["40c50d99-f54a-4799-902a-dea29f59c023","17ae5752-f40c-461b-b67d-e30ed6a8df1e"],"extraInfo":{}},"LjXlMFyfr0W/5Ea7LWq3JxHCGBoTwJCHof4YDGtateo=":{"nodeIds":["66319e95-c495-4456-a173-bfd9c70c2177","7b245276-3b8f-4589-8582-f0d6c33577a3"],"extraInfo":{}},"+Bmn4YPNbMun1qIV7M2eMIwzcwL/H7OBG1Tzt4Qf12s=":{"nodeIds":["fa1515d8-2f1b-4595-a760-2e4a0ac0e854","e96ede56-560c-4729-b462-2f5cd92ca9c7"],"extraInfo":{}},"b400OM4aB+5l8P/9r+Io0T7YGmh3cKAwsb5ONBzoQFY=":{"nodeIds":["1e134db7-119e-4932-be85-5c187df1e2c5","083e4f87-67c8-4c9f-991e-feb4278797ec"],"extraInfo":{}},"RnZlb1KNNtPHn+buLTsjmFdp1PC3LwmFJeo15sLLxV0=":{"nodeIds":["944df452-0b1b-4d3e-90f7-a5a27a70ced5","f165ce7a-3c9b-439f-97b3-ea86899a91e9"],"extraInfo":{}},"4X2bRUyFfj5VnU7zip2VQp4H9Rv5fgYEKCGRGa06JlA=":{"nodeIds":["b08751ab-44ec-4c1f-9036-731db0e685f5"],"extraInfo":{}},"8OvbpJcvWDUwqn+CIw3/IqOeKlKu8xkaXCDHSKFHYVA=":{"nodeIds":["2c37d416-59b2-4cd8-ade3-df368ade9933","c837d974-7007-4fcd-bc0c-c574f14ae4f9"],"extraInfo":{}},"G/05cKyo3tyeI/DBUeGKRaHUD5UqbNvIJU80MDlXpwY=":{"nodeIds":["8f0ee030-e54b-4716-9f12-91fcb218161b"],"extraInfo":{}},"Awmn8ULz+YVdaq2niBJZKu00/kqotSQAteP/oAqaC+8=":{"nodeIds":["6464c543-98c8-4a32-908b-25bd8c5fc43d"],"extraInfo":{}},"VIwk1jlRZ75O/3CDEnBdp1sZcsjDnd5CbGZfe0+h9pM=":{"nodeIds":["604b3270-3cb5-4887-a558-aad874cebd26","e0f76b55-8a18-4e29-a2f2-9d0af1ddf954"],"extraInfo":{}},"viotW9CD+n1C3WSsWFRW7yzOBJRfRJCO8u5iuJxn0n4=":{"nodeIds":["1b528f78-8fcd-467e-9203-38eb6cf86a59","d180a23d-af3d-4e4a-bbcf-26f752501f71"],"extraInfo":{}},"vwqgDOZIqLye/+5LiXZ9pnPncmyHahO1tPkram5+wqg=":{"nodeIds":["c59e3577-dc1f-4c9f-bd29-9386b018bb27","87c6f760-5787-4b2c-92f4-ca85dcc809f7"],"extraInfo":{}},"pm8SS557Z49BUVHDPm12FI4gk9QFZ158KYErbuQyopk=":{"nodeIds":["818ab586-8d29-4067-8592-1063af04e2de","f685225a-8712-4b61-9abc-427eaae41917"],"extraInfo":{}},"2rN6vmR/yDLNlseBY3veEUl3B/ZQImDCwlAZipB/v6o=":{"nodeIds":["02e621d4-2dca-47c3-876c-c6da6fb3e288"],"extraInfo":{}},"Ji9S3lmlEvlMl9IaI8x+5+W9U39PXl8wD9ev7CBkdO0=":{"nodeIds":["cdbdbecf-e3b0-411b-a065-fe6ec7986b2a","c235af7e-0dd9-4d87-a31c-804b83d76216"],"extraInfo":{}},"nNx+MM1H2YottGhllcsC/GI4vZVHJN2EHxZ3F0cSYuY=":{"nodeIds":["ed3b19e2-3ba2-4652-87e8-4a9fec6b03e3","dc700125-0925-4600-bea7-b861053dac24","e7b05585-4341-42a9-8f5c-54189fba93d7"],"extraInfo":{}},"woFbIdVhVEqAizESZi7VIhZDkLrxmI753JyLBuqa58A=":{"nodeIds":["ee11d3c7-bc2c-4fbf-844d-17e9aeb8ab47","38806129-47f2-4e37-96d9-2515045254c1"],"extraInfo":{}},"iQswW+yI/Q8jDhED/Icw1ADambwONAIbwUOptZDCKQk=":{"nodeIds":["52db26fc-149c-40cf-9693-6ff92e5b0818","2c0cc92a-6610-4361-83bd-85372acf9c2a"],"extraInfo":{}},"EssxUMAAvwfZk5HTjjEnjAcmualKTbOMit4hiPTARCI=":{"nodeIds":["0adfe9a2-b2c6-4965-a359-29904fe98ecf"],"extraInfo":{}},"ftfSITq1xh5qLDDvybyLjrQEUOXh1W0UEX37IhJHvYQ=":{"nodeIds":["67ce45df-bd52-4495-beba-422a4f121884","47f41e1f-c06d-4626-bdfd-87a8f498619b"],"extraInfo":{}},"fFzIaGF/t7WigPbQhbc0FOYVzpfANay4ClrWMeXdxM8=":{"nodeIds":["c72c9529-1e1e-40d2-a1d3-425d87dc5ab7"],"extraInfo":{}},"hJV5BxZnZXSYjs7gYlTQV/8l6AtJwolC3XrNKV05udw=":{"nodeIds":["f22cfc1a-d58e-44ed-8381-f866f2ff368c"],"extraInfo":{}},"VJFx2lgFLDKAQ7y+155Z5mqNUM0NVtclnsUCYVr8c1g=":{"nodeIds":["c704e0c7-3737-4d35-91cc-50d768f70b3f"],"extraInfo":{}},"0I5XrE2MWQ9dtOHpH+p8gHAYbkM0rnQarZbqQYmcNTI=":{"nodeIds":["2dbc4503-75d7-40ba-b336-1789e9b2f523","eb7bf19e-f111-4e9c-a189-9764bdea02a0"],"extraInfo":{}},"aCjNRKyNmgCldYXqn6H5Fyk1ESCBUSNiEqSqrMKFPXs=":{"nodeIds":["376b6163-97ba-47d0-ad2d-d795c3b8d25b","cc5209a8-0f5f-4deb-8108-462f87cd5f09"],"extraInfo":{}},"veE6KcCgNW2x92B+WWzS5FxhqgctVVJGfZAoG+9Myuc=":{"nodeIds":["06fb35fa-d4b9-4912-9278-d4be0161cada","9ccbe727-6b55-45eb-878e-3bdfb3f75272"],"extraInfo":{}},"8M+svY9NuU6jna1WaiA/XMs0VF7SQG0qEjrGZJz7fXo=":{"nodeIds":["7f33a9ac-9294-467e-8255-76ffb14a34ff","fe3eae2e-4c99-48d7-a89e-21225726254e"],"extraInfo":{}},"oP+aJ13fzHFs76jCcvOkjFXAM6Y1LiRM2jSontM18Jw=":{"nodeIds":["fe7e3d14-6995-4abf-8382-dbd0757a47f1","5ae1244f-ea31-4088-b50c-f56d83b7df59"],"extraInfo":{}},"dqpotdzdtShwBvN5PC3YRqesHKiHiJohx/Nnh0Qkddo=":{"nodeIds":["f0bb12ea-cf12-4134-8e99-5acab626f296","0540dfce-5203-4eac-a2c1-fbc502702f83"],"extraInfo":{}},"5G5bkYMSeJLEOR08nIt9e3IG5QaITG79exdzciIzWo0=":{"nodeIds":["1f31021f-f85b-4470-beca-265ad7c9301f","c74d51fb-57d7-495c-8807-ac909c592a3b"],"extraInfo":{}},"kkIrRnW1oXves4ss/uBSPJxZqg/+8mi3lH7nuBwYse8=":{"nodeIds":["a7d53572-051c-40d2-8212-6b1de7ca217f","69698a5e-95fb-45d8-a276-d4a6a358a868"],"extraInfo":{}},"TPr2tR7haQiPGJbNtRflAU03LiLnkaIwsVBs4A2Mmu8=":{"nodeIds":["26937d06-fee4-4c2e-aa5b-e55c05757e30","1d5f9651-d363-4c24-85ee-4cb3be119023"],"extraInfo":{}},"sw7+XmklAGLQYD0NmGHkY8Q8RpP9E98GHh3juCh21A0=":{"nodeIds":["2bb566d5-58c7-4532-a5df-82c9ab155d83","d0a6c791-f5bb-4986-9769-72736f2b63da"],"extraInfo":{}},"YVOw9QbXVMZ4Xn14JynpLlKsj/PZGzPVoxjKEdqw93U=":{"nodeIds":["90c45171-b8f5-4a61-8a6d-47af914ac84e","feb2613d-4fc0-43bc-a4d3-32a6828e3be1"],"extraInfo":{}},"5Y8MzZ8XYMTpOR6mnq6FlReUgH4THIsO/kBZTP9ZWWQ=":{"nodeIds":["db71f0db-75fc-477c-ad0a-702da736810e","2e912b10-4364-41e1-be29-b7f3de6c23f3"],"extraInfo":{}},"EI8epuU3AkHG+P71rBp28AWJAr4m0Q/aWjxZd8aED+I=":{"nodeIds":["c74ca66b-ab29-4b31-a133-3cd4c4206555","ff08b052-d589-40a9-b3e5-3055ed7fd3fa"],"extraInfo":{}},"XWBz0RPUKbdRF8EkRYKBEaFgPJfyUb84wq1uMxtJzC0=":{"nodeIds":["eff603ff-c5a6-4337-83fe-a3845fa8d670","6203af4a-0c79-4e99-914b-0f4254925b81"],"extraInfo":{}},"d/BygnTsx5phUgZdRjdtv/SXDNc2LRXrXl+bjqqZNRI=":{"nodeIds":["9f991503-a675-46f5-8c6f-b4e874075dd6","2de002cb-5c29-4202-a5a8-34e1b2983581"],"extraInfo":{}},"E9NFUy+UWwUzxgMy8aPbYegXWC23gYUMicH5SQfdUzM=":{"nodeIds":["2a57b49e-6f11-4b9a-af45-0bef4719371b","68cf49ae-0a86-4b21-a783-1fbb52793a9f"],"extraInfo":{}},"pZHghdBJzrVMsyoO5RS67LV5hQRTYEPl52JlbQP0Hbo=":{"nodeIds":["a7b76924-607e-41ce-aeb7-b31031c02b91"],"extraInfo":{}},"Uek8BV1Li74qYN4ZmLQex54kXdGd0+mhpuopL66aLLo=":{"nodeIds":["b4e7948f-113b-4bc0-88c0-22a37b4de589"],"extraInfo":{}},"mEVl3h/Ieer+H2AKG3h6MMh/srHm95yh4iymgvaosck=":{"nodeIds":["f3525cc5-4144-44fc-acea-c3f669719eb8","ac640b80-1ccc-4eb5-bb70-b28212113a11"],"extraInfo":{}},"tRItc1Z355lWVv7snOdX+ZoqEce9Qavf2vcJmbuav7o=":{"nodeIds":["3e26e34c-1f0d-4bb2-850e-4393475d5159","b10157e8-0c70-48b8-8149-7137ae729f7d"],"extraInfo":{}},"xHM3Ja9bmRhVsJssR8lRHN6VDgKy3ezHbEEJ3Ke6/Rw=":{"nodeIds":["5094272c-5049-4c17-8ff2-e22c3792944d","96f5ecdb-2be7-4448-a4ab-ab8177d120fc"],"extraInfo":{}},"4xxwaXdd5IZ1W7de3HfB0jHWiXtlohTXSBoLjdUA99M=":{"nodeIds":["acb408c0-f737-4a31-a5e7-ea5bf9f21a42"],"extraInfo":{}},"2C+um+4hTAIkcZyatWUDAYQZbDVym3XLcHjKMMvW6sI=":{"nodeIds":["f00ffd4d-01f5-4609-a5c4-76194d818ca1","022666f0-f43a-4a2c-a1cb-7fa81a115ed5"],"extraInfo":{}},"VB8UZDSIEHv8ymAqm8E2Cb+Jv5ebij8ZZsGyLMwKH/A=":{"nodeIds":["17e0af00-6021-436d-82a5-c4c86c692922","bce4f34f-2a3e-4f54-b744-993881611ba6"],"extraInfo":{}},"YrOQEQkPfZuJgTKjPEMtmEHF46Ot/DRXyK+hOeFvUH0=":{"nodeIds":["41b7fec3-74ce-4197-90fe-48cc01279378","7abdda93-a076-4126-8150-d73c2e1930c4"],"extraInfo":{}},"Xi/Cb6O3MZ+iqkS3nP6Qqqv4H+tUErpER6s8N9xDXOc=":{"nodeIds":["a6155d24-a1f5-41b2-bd37-a03e726b20b1","10435700-df1e-49c8-b1b4-cfe3f6b2ebe4"],"extraInfo":{}},"ywk08y/Y04FdknW1PVuFsz18i2csFboLw2+bwEB2UOY=":{"nodeIds":["b301b977-6b19-4f49-8497-a4476e4e6fd3","d04fc9a2-8604-4d10-b25a-9c8c44c3c39c"],"extraInfo":{}},"94WV3TepgaLZxPQYC1cp7ib5UiYQxGJYtVofAyXq1Zg=":{"nodeIds":["d40c57a2-410c-43c4-a67a-d0701f4c644a"],"extraInfo":{}},"XIlBX8Fn2nt3+Tv6aoXjsPye7AMuowgbQEYCIiliIBI=":{"nodeIds":["7dd61319-8dd9-4712-acf9-dcfed6c98bdf","ba3742f3-03e1-4188-ad11-2bbb564c0a72"],"extraInfo":{}},"fVzI2paMAmxkgbSd0hifYq/2k6R5AQGEV6bpDpl7IP0=":{"nodeIds":["4a25f09b-3d71-4a88-9483-211314a4109d","459919e8-d2e8-4207-8016-6b921a59c921"],"extraInfo":{}},"0HH71WKHYNR13vslJzsBsBvG/138HjKKSM/fv8oQSCw=":{"nodeIds":["5cb40645-eff6-4c84-b903-b41699f34fdd","291ddf6c-0afd-4166-90be-c975977d0478"],"extraInfo":{}},"y/Ies2y+IBdHe69XbTkG52yUaiQESUo3zw9LMlo+onE=":{"nodeIds":["17dd9616-4525-4bac-8947-0920f12297e1","b7593919-5114-4048-83fd-e0d4a4f21866"],"extraInfo":{}},"yfXppRaF6R6i/af4YUtCF6LWwYhR+bFX5cwytn+uq/Y=":{"nodeIds":["d6212ce9-abeb-465f-a8a2-024c0ea2d339","5abf20f8-7570-4979-a6a7-d16d0654a758"],"extraInfo":{}},"wultXVm6TOM0tnwMooqK1MzVOZK2g9qF64H1PzQYPIE=":{"nodeIds":["1363ed2f-169a-43e2-9c37-57ad2fbcbbda","a57ddf2f-0254-4b3d-9ade-0ee96c7d555d"],"extraInfo":{}},"AWq+zSIDW5oQ645Z5/0WtEpmZswYTk1JccoQKr1yYZ0=":{"nodeIds":["9e717a5e-621c-40f1-ade4-5eee41ab5181","1622b80d-0375-4bdb-b4cd-d73dadec3dae"],"extraInfo":{}},"u7Jm3U/urBxteQ58/lDCD0xGpfuZlH6DvxdfWD6AtC4=":{"nodeIds":["685cd3b4-d3b0-4d5e-8fb7-f01351560a84"],"extraInfo":{}},"EH8ybgoH9fTm3Zp6eVxPYj0tIR5wJWmwOIu4mjH9v28=":{"nodeIds":["0946d886-7cb4-4a85-9a40-73e9cd11d3d8"],"extraInfo":{}},"h0MYjo6jX4Wjx2TfGpgpFKUAtwO3ojCSmCVaI8THVUA=":{"nodeIds":["9a50b003-0da1-45cb-a4fa-413b1600be22"],"extraInfo":{}},"fVIujhX7l2T3GbJLcOZOQBa340p9Y6qJnkwyOgjygmg=":{"nodeIds":["b6094174-85ac-46d7-ac63-392a2467765f"],"extraInfo":{}},"nM6DSKVqhk/JxkHK9eJgC2qXi7GttN2Ssz7iJOXquqE=":{"nodeIds":["49f68d76-3e1b-4934-908f-c94e2af50c42","c2e4be1a-459f-4847-89cc-7e3408c59888"],"extraInfo":{}},"RMrMLItvnod5HwSyEpq4Pfruw8SFtN5tK/QiMSrcL/U=":{"nodeIds":["29849171-95a2-4a08-a49f-0cac9b956e93"],"extraInfo":{}},"4yFgSSx5O5GhfjyIK4ipfZm9ehga6nYRXda7kWQy7rw=":{"nodeIds":["869d52e4-ff02-464c-a16b-aa347f93d75c"],"extraInfo":{}},"d6EQ/Xmukg/KDJY9e1S0fOc9TIS921P2uC2YVAhHkso=":{"nodeIds":["46197096-ac27-47eb-98b1-1338caca0a4d"],"extraInfo":{}},"KG+cOh+jt49cIgNtEWuhffUZi2qZ3XC+8vZiXuEIxXc=":{"nodeIds":["abc888a7-eeac-454c-b643-59f6cb67a5be"],"extraInfo":{}},"R7FUnqen4IKRgfgEwQ4AB5TklcwoutigqhYhKZlIQhs=":{"nodeIds":["978b75b4-633a-46a2-97ad-a3c33fc231ee"],"extraInfo":{}},"SL2VPPnToTHmDzPTXGk2fIbY4Szk+W6fcsSdBC3w1Gg=":{"nodeIds":["1246c188-5202-422d-9c6b-7608018cdce5"],"extraInfo":{}},"7TxQ/pcInqemLtJYEvlbVeXbtNjM8/7qd36UWBUm3nM=":{"nodeIds":["ef963765-bd08-4bfa-a264-d388f535bd6a"],"extraInfo":{}},"6oP35Q5Imojr9NbWy9eZEEhTHsOEWXuEM9XcC3xe2XM=":{"nodeIds":["1b320066-0048-468a-b961-fdea0d5c8bf9","0c2b9b29-0ab7-4b62-85c6-9c064d53807c"],"extraInfo":{}},"eiBuXAemnwhlTRwL4WzNuwDParHHI65tcVgJbR1KxcM=":{"nodeIds":["ebe5b1fa-365e-404d-ac7c-a1112017b49f","cb03bb28-e9c8-4499-81f2-1e3ede77d43f","0abbc996-c2cc-4e78-83b0-529987b5a4e8"],"extraInfo":{}},"3cCdyw7b0dD0aJKDRJ3fD1SDhXZ99U2PlFoozA49WXY=":{"nodeIds":["2c366125-f652-4fe4-9d86-05bd842cf6b7","b3cd2f06-23fa-4ba3-a67b-f9a49dfebb7b"],"extraInfo":{}},"G2IljT7bHwiLNmGsi1w/Ipd8ShJ9MyR2jKFL9Xe7pY0=":{"nodeIds":["c785a4c7-12f8-4f25-9cb6-fc9f1669d588","19dc0c9c-25e8-416b-a8d5-fd0c9ab28bba"],"extraInfo":{}},"OD+qbHyn7Jp3vmHnONZyA7k4PS8oqT4sP6YfaDHHCLk=":{"nodeIds":["0792f5d1-5056-41e9-b72d-ac5a7d0f0203","d9d7fa3f-263e-4b79-a1fb-b0318b3644d5"],"extraInfo":{}},"GFi9G4fpU2EjtrFf9BLFZxeDI6Si/zcYl5N93lzDq+g=":{"nodeIds":["ecd91e7e-2b9e-4ccc-9828-b23e2d6de7cd","0a272e46-6450-4818-a3bc-a551452f61bc","bc8c2107-19f3-4157-8b42-4394b45fe9f0"],"extraInfo":{}},"ZIzY4EFI1l52PekucKYQajpBp1c42wQXwUnoY4xQ0TA=":{"nodeIds":["0a8e4313-e442-4638-a970-b82bae9fdf9b","9507da77-b1e6-4556-9493-59644f405a97"],"extraInfo":{}},"bYsUf8SpfLLj60J3Zn/8QJ/2s8zPfT1T1gQjnmTDLP0=":{"nodeIds":["ccb13e8d-124a-4d88-bbae-da7f6e95ec18","bb1a7dc2-1530-42c6-a80c-ad0011a540bd"],"extraInfo":{}},"f0BEYkQL5vXNNRAykvMoF//mCIYuRO4ebRuxTHs1z+Y=":{"nodeIds":["f099ca4a-3cb0-4bc3-9ee8-025183cf639f","a070aeac-d2b1-40a7-917c-d5b1060be878"],"extraInfo":{}},"vAtwM88lCW+1gx9awsGUHqih9QP6LiCKVraFq8GBQlw=":{"nodeIds":["040d97e6-24f8-427b-b583-5c30bd6ec851","7c0dcc2c-76d0-45bb-8e79-d6ba5ce08ad6"],"extraInfo":{}},"1KXLfgqhD8/GF14nwm7BJc6+slKy9v8vvZ3NiklTFRM=":{"nodeIds":["200d2d53-a568-40cf-97ae-3146a140e611","33ec521c-aeca-4244-96ab-68cc4c92484a"],"extraInfo":{}},"M/2OnWOzLed4ILjT36gYcD2mcclHY33713x2I4N7RbA=":{"nodeIds":["d21bb666-0572-4c31-98c6-363ec06937f3","4b3ec772-087b-433c-a4b3-34c5b3b8bd9f"],"extraInfo":{}},"DhP6kxEL5aAP2V1d/YjUGk6k/7yL5RlYJMjuQCasiMY=":{"nodeIds":["f51c473d-8e8d-42b3-88f4-d06dba361173"],"extraInfo":{}},"KpmNblu9xKGh6DEd0JYNCsRaYr7d1pqmMZQcXhG8EQQ=":{"nodeIds":["b6dc0fce-89f7-4be9-bbd5-cfe406486129","6e893aae-83b9-44e3-b729-a6b9ed7f6870"],"extraInfo":{}},"qNd/ZVedztJuKRYezWI7f2tahRHuj5duRUNgZbvoDBs=":{"nodeIds":["2b022c03-a341-40fc-bf5b-93605c411640","faa97fcc-4401-4f4d-8af6-d95cbae1ded5"],"extraInfo":{}},"1S2r4m5lTvTUWaLfdQGcKkSkLT9JRe70ys+U3T14TNM=":{"nodeIds":["028eae0c-fc43-42c4-8eae-32797f2cb712"],"extraInfo":{}},"ZcabPM//YWwDBs/xxM1z7QB1pWu7SznmRthU5tbghT4=":{"nodeIds":["9563351e-dd0f-4c68-ad89-c82caa4fce79","bde967c5-7f63-482a-b67c-250df4104972"],"extraInfo":{}},"9XwDjbxxRaPCHsSnoMwq09zP1dQBhWwADrGvYQk9Fjw=":{"nodeIds":["8daf6de3-24c6-4055-b5fb-567a21b08be6"],"extraInfo":{}},"fghpvbVsDfSf965wbIiJT8xeLsHQ3mLHhoQS+ugMO+Q=":{"nodeIds":["938476aa-3631-4142-bd77-6589fd5b641c","41383054-bd48-4e50-93ac-2d8961468764"],"extraInfo":{}},"+IdnGJzdz15sz8K+vD7FlGrUujiFuwdSNabOmXzxLhs=":{"nodeIds":["ff45564a-82eb-4433-a139-074b4d2bc411","878c25ff-2c41-478d-bcd7-391f1ac1f63b"],"extraInfo":{}},"o8fuFjBuE8xBRP30R7T5QtBpsgXnESjePUfOSy4J3Rc=":{"nodeIds":["4b6e037d-f021-4ef7-9747-5fda03b722cb","5843c362-f69f-454d-973f-b36524d3050d"],"extraInfo":{}},"FEoff11BkB9on4I3QVkvAYQ6VRHr3betoH0f3UVS1+M=":{"nodeIds":["44e15f0b-6871-472d-a910-9e4a39f2fb08"],"extraInfo":{}},"JD91cQ+Q+Gwx3SplQIz6DRVYR6Jpr7c8G0jldJKf3Gk=":{"nodeIds":["f543b89c-5a9d-4951-a7e4-cae83a3fb8e6","54a44230-6bd6-4b01-93fa-1265f5b8b6f5"],"extraInfo":{}},"SOLIcs93uxIP9Gi8jG1n4z3AAcqZQoD/FqEnTTiQBBg=":{"nodeIds":["ae4b8ed0-b01a-4673-bf7f-1c14b87f8bcc","1e585908-6d57-4ad6-bca9-e39c2bcd78ec"],"extraInfo":{}},"C2Lrw2dx4ZsRj4HjKRwJuZIFnfy1mhnrjbsF733WVRM=":{"nodeIds":["e3b8f920-9d9e-43cf-890b-e3d7696537f5"],"extraInfo":{}},"muqoAVltl54fufocLgprd4WZNnPoiBha+6cjvx+1/r0=":{"nodeIds":["1c9751c6-4c46-4c6b-aef2-f9a4dfd5b94e","77783bbf-7f9d-4db1-baaf-ea5b137e1914"],"extraInfo":{}},"EjgGG/p2cmRP1ffPCBc/3dMpxojJ/R8KHHLx97EsA7s=":{"nodeIds":["6748ec9a-0e5e-4c66-8063-00371988107f","f5397d58-d7ec-4ee5-95d4-0298c122761b"],"extraInfo":{}},"ISPlIHnaVXERTxKxo3LsrlRVmTHpDtOMnFgw0ZxDFZk=":{"nodeIds":["d1a6ffbf-adec-4010-a9ea-4cd1c8f18f45","af351923-49b5-4fc1-a6df-fdc1a2b79edc"],"extraInfo":{}},"TkfQR+Gp4g7F1L8pkPlXZNDmyQFP2mq3UQ+0qtXfLFg=":{"nodeIds":["6d97d59d-407b-4cd1-a9f4-75d28b7784b5"],"extraInfo":{}},"c3OvkfX6Qsx9fsNSuBYnR/huBvy8YbO9pwhWfs50TVk=":{"nodeIds":["dc13287c-3760-4cb4-a541-cc5e912c6372"],"extraInfo":{}},"tjHwjDeq2HP2AbhN8mwstMpZnT9g+3W9ykZXc/Nolbk=":{"nodeIds":["dd605920-6eb6-4a85-b8f0-715c6061e417"],"extraInfo":{}},"Y49fJacl0ZeJ8nDF/lWugWfeDmATVUXb52u4Ot5qbmM=":{"nodeIds":["21ad7398-7190-417e-910d-b0b99848233d","47fdfa52-3790-42ce-ad82-5afd8c4edcd9"],"extraInfo":{}},"yAacdQy7mCNNUTVBVHBI7NN+V5dRCV5HFxTUVuEyXAA=":{"nodeIds":["35924aac-1ce9-4db0-8f12-261755508822","e759b9b9-c9c1-4b88-8920-e8a4c8c9aebf"],"extraInfo":{}},"XfbeR3GAR2lfuKQx2R1r3lxL2Fd3R6y3l/cz7wRA7Ss=":{"nodeIds":["1fc9ab6d-e03e-4540-9184-c82e114a8c70","49d9fc2b-169e-4285-bcf0-3e8e2e57ab70"],"extraInfo":{}},"mKI5JAeY/5e9XkROtJKu26lz7z153RLnz2019CnS6uU=":{"nodeIds":["514611f2-8c87-495c-a7da-fab3e6422188"],"extraInfo":{}},"Pb8bmAUaCwP7OUBVAc/JOcudkh7XcpbdLJfpr1leUdM=":{"nodeIds":["2616df8c-b6f0-411a-a381-766d4dcb6b05"],"extraInfo":{}},"m0G6YMCnZaNleJ0swaRVfNYXENgYbH+yOTkoZaWIPcY=":{"nodeIds":["fdaba380-1b41-4e01-b32e-6c3e452bcf52","d43b6952-2bd1-4013-b95c-60ead99ec042"],"extraInfo":{}},"lzSM5ixVXqGy6kNkuxuAE4Oo51+vafet8VU3SBoBn/Q=":{"nodeIds":["7ce326f6-25fa-4acd-a652-4674d661aeeb","0970194a-f14f-4b9c-a796-423f2f30be0d"],"extraInfo":{}},"SbWFCB4mHGraiGldZs4c4x1IwWYVFxE2op7Qo3FEiQw=":{"nodeIds":["7fd2e358-4499-4899-8f93-f5ec3bb7f9f4","7bd4f4f6-acdd-4e7e-83ce-052e95148c06"],"extraInfo":{}},"FIyGYGJfuV0agenE47ar6SofIj3m3vAhZmMH07fqZV4=":{"nodeIds":["427e4d99-c00f-4bc7-aade-28738b45269a","a532ee6a-53f9-4dce-86b7-8d7ca5232c77"],"extraInfo":{}},"GnYElCctO8CkB5F+O60U7KmNAMVD6lXscvfl+/I2UfM=":{"nodeIds":["ab91d245-58aa-48b6-a57f-fb4ad8429a92"],"extraInfo":{}},"ScXv44qIbHdYpV0wUlF3AyipmddbWSVj0sSdCQrb/7c=":{"nodeIds":["6a125127-6d40-403d-95df-ff758ea4b38b"],"extraInfo":{}},"75ZujYFXaPYsCU4CJwMEtw0DFBOZPcAE/njhaOU4T/A=":{"nodeIds":["96d387ea-7544-4b01-84f7-0f96208aec33","928496ee-57c0-41f9-bf34-8fcb85572b0b"],"extraInfo":{}},"MSiiKpwpAHg7lx4S1oFnjw00pdfqBlmwNvKIEiYB7j4=":{"nodeIds":["34a96388-919e-4a0e-932d-c31b47cf142f","7b5c8a97-f8b0-4ae2-a3dd-bcfb4c31f16e"],"extraInfo":{}},"R0IQTnmw9xazeoV9xix1xR57QxKy7J7x/Z5Myc6rcFQ=":{"nodeIds":["487e1fb8-b853-45ab-9c75-3e80df0e94ee"],"extraInfo":{}},"0soLI0pHH1xKtiIna1RR+uBvcWhAYJtHJlqgRpPqChg=":{"nodeIds":["2e206e6a-40f5-48b9-adba-38469e007cc0","b5f8f0bf-f94d-4e09-932e-09057eb435b6"],"extraInfo":{}},"2DwS1DX7Kya1uOpVQ5fSW1LGDtP/8kaObYWW6hC5CYA=":{"nodeIds":["3331107f-8898-472f-956d-dc58a655e4cc","a307f2f6-94c0-442d-be9e-43285b8d4596"],"extraInfo":{}},"ruOmxRUvcbGwOU5SfYZqSBuH22H1SaRsEajUUdbFioM=":{"nodeIds":["7205750c-a709-4ec8-b891-1bfbd45fa2ee","1505ac46-6860-4b22-9542-6ca41a2785c0"],"extraInfo":{}},"dQaexDFG6t1SdU+tv+toagnjhskT/rDm50lu73ioM5k=":{"nodeIds":["887e1e5c-40f6-47f1-a69c-91e71f608065"],"extraInfo":{}},"huBsGDkuutcZYqo6QbQ6LNZOHAMy8/o3GeyAoBLcKbE=":{"nodeIds":["89af273e-afc9-4505-969a-890a6246c3c7"],"extraInfo":{}},"YHsGaOKVSMxVxR/QosA/a2DkYAVbtrghwx0hlerf5so=":{"nodeIds":["8c074c0c-b9b7-4ee5-8fb6-b38502f7b7ae"],"extraInfo":{}},"i9n1XLiUBpoDcwRlqLQ+Guj0rVzxVSuymi1VDwnkVAI=":{"nodeIds":["97ed85cd-b622-44d7-a66d-3e2c608b2fc7","e9bb9dbb-1e0d-408e-b7b5-3bd79a5cf243"],"extraInfo":{}},"mKh+1iAc7KdjaqRCf1m8RnQ/FbREOcl448jNUDqa8Kc=":{"nodeIds":["84190798-f296-4a5a-9959-55d8bf2b52b1"],"extraInfo":{}},"28wcGbGBdRJXiZyC7Z7RfH5Q24idBsJ2RA1VJ2QxUjE=":{"nodeIds":["babd6cc2-bbc6-4d23-9594-a94b6c4d95a2"],"extraInfo":{}},"tn2oqIhAIcamDsWtricv6KQOAsy32ZR5/rT8sgemJm8=":{"nodeIds":["4f6da2e8-8b37-4b34-a2b1-d524304c8617"],"extraInfo":{}},"+YvIu40AKpfjh+ZWPvqKZ9pJDOn210wkep0gOMsRq3g=":{"nodeIds":["4d1f9e00-e399-49b8-a2c5-6ab2038947e8"],"extraInfo":{}},"IwycGXt97I+/Af1qUuNnyLleMafFirq9HKKAFSMWjSU=":{"nodeIds":["f2e80ae2-3821-4808-a910-a3ab3148b6ba"],"extraInfo":{}},"LIC5MBwK85wjZmXHgHo59P303zbYgaKTnhltMzL81n0=":{"nodeIds":["d3636e9f-6dc9-4d49-807e-470d5c3ba1ef"],"extraInfo":{}},"bhLBDvpbV1DjLXkgNjMWAnbFZpqXH+HZgLDs64GjZYU=":{"nodeIds":["8dca0a45-c049-4672-89c6-717824cde823"],"extraInfo":{}},"a8EkwlK5ZfPlSZNp6iFTUiHoz1304mFGqIeTQty0ZEg=":{"nodeIds":["00d0bebb-2b8a-4447-95bf-4ffc00468879"],"extraInfo":{}},"f3c64ZEarK2jYplG0C2lW59L/dyzZTORPw8wzKPRPno=":{"nodeIds":["832a4700-4e13-460f-adf4-e1d4067423c0"],"extraInfo":{}},"g2s+EDc+fppg1TS6fNESyaehec/X+GHLmBy2ZrsXbd8=":{"nodeIds":["8334e940-e466-4c77-b188-db831b9da067"],"extraInfo":{}},"EYzJN8dUMFl3JQEbgYfHcDULu/aE34L/U9dZGVI7Yjc=":{"nodeIds":["183e48ce-91af-46f6-85e0-ba97ddeefe8c","d13bf743-0c3b-4bd9-8c87-1e12e76e2396"],"extraInfo":{}},"rtwROrX0IQc6TVZ2OxNw2LJGMJc7RbpVQ4Z3XQeqyBI=":{"nodeIds":["81984f19-980a-4dd1-9b7e-0dd77969c178"],"extraInfo":{}},"je5P0opVSLW10uh85cJrP/Z84HIn4Ln94A5/1qbmAtU=":{"nodeIds":["cd473bb0-b02e-49be-b9fe-0e7ce7e7f3c3","5fdbf467-ae4b-4a32-9597-365289978e55"],"extraInfo":{}},"4yNAE5LxEvmWicpIgZmHH0iUGxtR5uzSfS4O8O193e0=":{"nodeIds":["cd0a5739-8795-44bb-aa87-dba6e2bd006a"],"extraInfo":{}},"4oZo+A3jibVIE9CB6dkugROjeU+R+Xc5ncxJKTz0hK4=":{"nodeIds":["38828114-fd5a-4134-877a-2f9a0311da60"],"extraInfo":{}},"zrZcg2TAwiqDfbq1q00oJ8Zr5VZMw7a1HfcD/rV5WLg=":{"nodeIds":["542a7092-adfe-4125-8247-3ae829b91ed4"],"extraInfo":{}},"g2PEPNPfT+PB1qwYKw2D7jd1wdzFf/UFK13WMtRrFH0=":{"nodeIds":["0bdb5241-980f-4812-b12b-060c5a798863"],"extraInfo":{}},"uIQP7l7sO8LFEnIweZHKNsfJ04Y9+m4gprRbuVKVSUk=":{"nodeIds":["60318c43-37b0-4480-a2b4-68f143b1e988","f9aaf97f-ac08-4a2a-bb84-463d7e41165f"],"extraInfo":{}},"C7Yf2uDv36IOI4iNBdXAn3dDxbS3l8X+hiWcY22fRfE=":{"nodeIds":["6ecd5469-f1c8-4334-96f6-826e7ad06683"],"extraInfo":{}},"kvSks7iaifUz9u5Pzy48FFSaN2I7OKrNw3kOsEtv4zY=":{"nodeIds":["d7b0c74b-0fb5-417b-9b72-5b1db2978f2e","1ca74c22-5cdc-4adb-a5f7-4b20e422fb14"],"extraInfo":{}},"gloyf3Z8XpkUhAptuqI7LPPN3JtTumIkDLSf1eAyV3I=":{"nodeIds":["45a335cb-6157-45e2-9fa8-f11fa59a4674","00d4bea5-e48a-4c92-8b96-e686edf9b207"],"extraInfo":{}},"Wy/+kyF7VmnT67WGMAZ6g+JmWhdGbcpMT3z8otm+cIE=":{"nodeIds":["5505da06-2729-4367-ac40-738eb00fcf80","aef0e372-6e25-4565-9238-eeb36a1969af"],"extraInfo":{}},"lA7bGzfp+T9t81FB0pYnr7oc4760rKIu8tU4+c3eNaU=":{"nodeIds":["dec6f4a1-aea4-4886-b21f-a9340116eb9b"],"extraInfo":{}},"MQu0xGjYqIj52zqGsop07aJrFr5Snn/iM4IZdLtnsZQ=":{"nodeIds":["da6fd213-0164-4f27-89df-caf6f2d89d55","2810d80b-4359-4921-a2e8-a3a9de4351d3"],"extraInfo":{}},"GEeTMzQDf77DN09YEElvoqKOtgiqdHvTS0x1mK5yx/4=":{"nodeIds":["104683a2-1e80-4ad7-ab2f-e6b9a6e04294"],"extraInfo":{}},"FyYQ/fYu/7iFVuzvcIriSckdfgdNpCBeyzKSSUhxnGk=":{"nodeIds":["db9b6242-711b-4310-afac-056dfc67a4ba","2bee2348-1517-4ab9-82e9-e84598bf5163"],"extraInfo":{}},"euciwhvA+s/r6iWIxzgQImin0YlTwXvkz5p/zJhjOa4=":{"nodeIds":["f7ee7519-6f46-435d-b346-d2a97e4dbe89","f7f7a2d6-1f05-4b22-ad42-b906a1dd246c"],"extraInfo":{}},"0rwOMjj76TW4xdnB1JiI2lrbl+g/rqyAVDZlTc/e9aw=":{"nodeIds":["f772b783-95f0-4961-9ca2-6e6e96b37544","9b28fa33-65f8-4b1b-b6a4-7ffe08db6654"],"extraInfo":{}},"iirIB2UEmCIECea8Zl8lamuP1SJSLedsS6msI6/XX1s=":{"nodeIds":["a15aa0c3-c3aa-44d9-98e2-f9d7e77e7d08","d1d80bd8-80fe-4d1f-a7b6-c7df284c0b09"],"extraInfo":{}},"vDQ6M/ZRXJYxAJeSCNVdFgqKmn8g/aLOA0qQiRi7C5k=":{"nodeIds":["b36c200c-3f93-43ed-b95a-3ca8eff37fcd","d92626cb-eec7-43f0-b8b3-361c487b538d"],"extraInfo":{}},"X3nFL/8HRF4v5EBakVXTDoX47OFWRzj4GhP/1h1VdGQ=":{"nodeIds":["514ea394-b563-4da4-b7da-5167e0014c13","b7b42ce6-27dc-435e-b82c-9ebed0001cbf"],"extraInfo":{}},"cFkE8PGQBo2Q18V/bwHoT1g9fBpAGeZChD7DPYM5Yss=":{"nodeIds":["2c0b1261-78f4-48e0-96fe-fe52b4516950"],"extraInfo":{}},"fAAuM6U7mOLzyD1qfoisfpPS5tZacFEmpP586mehxXc=":{"nodeIds":["7c36a6da-8e6a-43a6-b599-c233615141ba"],"extraInfo":{}},"ep6Th/dbWNIM7nWPNV/nOMV9lGlk82xjgWgk93wFac8=":{"nodeIds":["c9a0495e-03c2-45dc-b249-a8ff5c2edb42"],"extraInfo":{}},"siDtjC3tVmCjLKQTc5nOecnaBCuxcLIxEjf4acuef+I=":{"nodeIds":["166119bb-1890-490e-b2c0-a9596bdbe07c"],"extraInfo":{}},"oV2hB2T4yeOzBQpTA1JWQhPeitEaXptTY14IyIhjDT8=":{"nodeIds":["ad9ff015-bf6a-4f8e-b864-0a3ea3f21b7d","2c0deab9-40df-4eb9-b0c0-7574f53436f6"],"extraInfo":{}},"CbiSxC+ODRDuOp9VTlcW9PHHQ1MZ7MeY2KTOfURzSCM=":{"nodeIds":["72973ca0-5ff8-43c8-bc2a-18baefc4c7e5","92742760-d425-4f99-8977-b3510119cd7a"],"extraInfo":{}},"65nwTl9oSWV+7jj8QiwmssDnsgEhuRPJecWJOYqTh+8=":{"nodeIds":["6cafb0cd-49bf-436c-a34b-0ce3555f272c","7d509185-1186-4b8d-ba60-58f08b06d8a0"],"extraInfo":{}},"7mYLVQi0Dy1sw/Nc6xfJpuW/uVmF2K8cfAFmK3kdH2Y=":{"nodeIds":["b23ed2ac-2365-49f2-9c91-ddd49399fa58","dffb0b09-100a-48b9-9c43-e9c72e847b2f"],"extraInfo":{}},"OK60u9jsgva4yCmj1v5QZxgcyFuDihOhtCPPnf2j7KA=":{"nodeIds":["ee56f081-1108-46b4-b78d-416698f341dd"],"extraInfo":{}},"05djNDaXTVKne4+nW3sD1v+eF4UoaA6kHfWaJXDFNsU=":{"nodeIds":["1c304d1f-bde9-4f38-9dcc-d5c470632545","98b4ab87-9c6e-410d-b860-c8480b72d757"],"extraInfo":{}},"F8ntN8DBaFsXxr9mwg+Rg8Kki7RNsTE43XdbLc0cjoI=":{"nodeIds":["5dc200f8-16a1-4618-b963-2cd9ea30a518"],"extraInfo":{}},"OZ+Jc9q8UyOHKIq6IYMnkZ+GPL54qbkATtqyF9/NQGU=":{"nodeIds":["21f0f3ee-8db9-4448-8e9f-033a51a1cbdc"],"extraInfo":{}},"STG640NCzVujN7c/wLNp3UzHgI9O8/egdkyN5PPARRM=":{"nodeIds":["ee62a491-3bd5-4382-92c0-ded1560ffc63"],"extraInfo":{}},"Yaj7eKJF/IZnSnP52XXagDEXZipKH0eM07xpPntsjfE=":{"nodeIds":["8d16253c-9163-4334-8236-b83d4c38209e","b9520915-4220-45b7-87b9-4d7161dae506"],"extraInfo":{}},"7RbXU20UaHsZyxC+z8l+Db+6CddQu0w21QmjsUZvKbE=":{"nodeIds":["06a733f4-0eff-4936-8661-4913f6c4e9db","c970f46d-4279-47bc-8682-53d4dddba83d"],"extraInfo":{}},"DhK1miRhe1uGqFg0TKHflJr1mMSI21T0Z9bo1PVu4gM=":{"nodeIds":["4e7b7c94-9dbe-441c-923b-42c446a798bf"],"extraInfo":{}},"hyVCNp//FMncv79ApgXrkpAg17eoX7MVLRc6hb303xw=":{"nodeIds":["d94515d7-12f5-4571-bacc-6f936baefba2","a2e9d125-ffda-4f91-914e-429c1f8b275c"],"extraInfo":{}},"nIkSLkDIj3+QQ7V0//zA2wWnVSRq+nQnjHgauNp18pI=":{"nodeIds":["c6ff9337-2ff6-4408-afb7-5168bf2b78b3","28a0b424-6fed-4df8-be65-d397f05538fe"],"extraInfo":{}},"YD9r5xYPEI6P4feX+4uYffV94xkMQO2o2M37GqkOfZ0=":{"nodeIds":["0964e824-d044-42e2-bfe5-6af8e3d2f92b"],"extraInfo":{}},"BEdqUrqMBzux7mHKXkvx7BgyWD9EL0a+kJR6zqEzRNI=":{"nodeIds":["076da3f8-85d4-4ae2-aeb3-653214b9b9f4"],"extraInfo":{}},"o/+lOq4hqSqOO2h7CgHYY8oVYSdgOcC2FErqHTbkY+Y=":{"nodeIds":["4b4d5ab5-2cce-4942-87e4-28460bcbba9b"],"extraInfo":{}},"oToKYfZs7XWgqrXQ7p8a4sBbe1AS6dDeSac6WjD7z5c=":{"nodeIds":["b615930e-2a93-4de8-ba8e-0ab8fb84cbce","2144f510-6a13-44ef-8e19-654e6f60ba90"],"extraInfo":{}},"9eGitAMEiJnKRwZQUUI8O4Ytz1qdTK/NY2beDf3MTYw=":{"nodeIds":["9b48335b-946c-4a5f-8f94-05d25abc83b1"],"extraInfo":{}},"ZpWQoMT8l8ehVYVX3ybT5BCnQjma+fpDVZ+2yG6bzEE=":{"nodeIds":["d4ca2a64-a530-4e37-942d-e96ff8dadd97"],"extraInfo":{}},"f70V3/LQWjmRsnh/aqB9EIzdkklcGxJbQQEswexf2lY=":{"nodeIds":["240f4c7f-5802-4aee-bb66-574700f27534"],"extraInfo":{}},"3wsRkdbZ8wuVIInx5mx7e9oydwPPykIV7qxwNfKxbQY=":{"nodeIds":["8ce09345-dcf7-4383-a005-89d8500f8ef2","830be76d-92bf-4964-98b6-2403d6608edd"],"extraInfo":{}},"QpZJiYRKcMjorXIWTbLO8MWiNYkgpPQMi7C7jXFi43A=":{"nodeIds":["35b5eb63-e313-4402-b2cf-b6d0b6237a1b"],"extraInfo":{}},"AtDSTvcxt4s7hXAlUnDf0hhVSn7W/l8e3+L6AdSYXvg=":{"nodeIds":["058dae20-cb74-42f4-9ce9-66c6efdd23a2"],"extraInfo":{}},"DAQSakYvQUELUZ0O0XPoJf0xusTnB3cpasdvLiIGjFY=":{"nodeIds":["e930ab16-5676-4535-a079-92f287486dba","df7ff2f6-808e-4184-9b42-bb3cc8346780"],"extraInfo":{}},"8GJnTm7md2j03ektsWVhd4Mj4+Ewexkorz/cFTW4hIo=":{"nodeIds":["7c0333a9-1879-4919-be20-0776c1626292","9b210bca-e19e-455b-b391-8752eb856397"],"extraInfo":{}},"t7w/ZzPHa2AyKy/DCz8rml03hMOp5P8ZHVXPyR8PFI0=":{"nodeIds":["cd606310-60a2-4a63-82db-d8419cb37560","10f1d26e-0741-4189-bddb-6974cbe73d36"],"extraInfo":{}},"ADyI+uvWu1fqjJVo0p54wD9uTbN85Hu604scPWaGkfo=":{"nodeIds":["56600b2f-ce2b-4b69-bafb-9c9c5750eaf0","45aec5b0-1b1b-4e19-8295-8bc02d37158a"],"extraInfo":{}},"VamoZC9C5wgziGavp4pgHXvmk2dzfr29M2/K7M7mHFY=":{"nodeIds":["4330931a-d821-42c6-908c-a0b560e8af51","b49bb85a-b701-41a5-a084-60d50bc74057"],"extraInfo":{}},"W+L+eOPK1JP1gzR4WqYdQqJHC5sOd+ZgzhzqvyMYBDA=":{"nodeIds":["450f323a-1a10-45a1-abb9-b0ad78ee8165","d623b610-89ad-47a8-88e9-f77b81e581c2"],"extraInfo":{}},"zNL1MHmtE3jWRZ1B23O6bMjo6X2WAaHaOiUminZQjN8=":{"nodeIds":["34a60fe0-26d6-4f9d-81f0-dd18aecd24c2"],"extraInfo":{}},"ZmZC/VTLzQ5y4JM90pZkk0+zQNpzS4I9VovOKpHWDBE=":{"nodeIds":["240dc09f-0070-41d3-9483-488f1c67c82d","04cc5ec8-d1c1-4a2a-b281-f2b6c2f09312"],"extraInfo":{}},"0qze58+/wN45/a8rnMrGIadNeteoQsKXer3AtDDi0cM=":{"nodeIds":["4e4b5308-adbf-41b9-8398-ba4496383d12"],"extraInfo":{}},"aCVf/yF2OSmSoBdxKDSMNC8sUURr3flEHNSD6nZdq7g=":{"nodeIds":["bc493aab-384c-4bfe-8c67-0005e0538bd2"],"extraInfo":{}},"vSzt7bAhDin0OpDaeLQ+w1nmTB8vcZa3EbLKu3K2l68=":{"nodeIds":["0921754f-bfba-4de5-b528-f9f790c29c4f","2e330c73-780f-48c8-911f-0b16edaec899"],"extraInfo":{}},"LJtQCAq6cBOIjQDL3mRer8mqD62m9zAH7nkz/gTfOGU=":{"nodeIds":["b223e6bf-e803-4dc3-9814-2add93819723"],"extraInfo":{}},"NTe4pstYrzUN3qmz+9jl1bAynRBpgWR89KBYp1jIJSk=":{"nodeIds":["433de789-5490-4bd6-8131-ed9547de2cf3"],"extraInfo":{}},"5qEjcLclZOEZRXyQ3TEQJgOKUPeBSsO3XfS7iD3ny+U=":{"nodeIds":["67466221-6728-4db9-a30f-0847851c5895","9c77bb0b-f7d9-4cff-a928-ec2460bec4a5"],"extraInfo":{}},"5ioJ55KWyyJyuzwPwt0a6ZrpjGc92OYTeMkJF1UDnH0=":{"nodeIds":["724e9f9f-c924-483e-b957-32ed2479e971","10e4a941-e34a-4b56-a7a9-22a2d37258b7"],"extraInfo":{}},"Xbro05Du3KaipSi21tk++oXNAr7CdWbvxSkfQOps94w=":{"nodeIds":["5f5d4886-9542-43ce-a01a-4f717cfbb863","99ee810e-398c-4b7d-8c6d-8193738433e7"],"extraInfo":{}},"Upsbf7MpvcdDd9gyYahSTQyhLD02NWRUG8abth/HJHA=":{"nodeIds":["16efbc4d-8a31-408b-8b3a-d9f963368406","95354c36-ae8e-40a0-a1a2-cdad7d9001ec"],"extraInfo":{}},"oaIDTdlvlAILzAXur4RgUbYL9NBBaWYNzxIZsqv75eQ=":{"nodeIds":["24060caf-93fc-4060-8f35-246de1153287"],"extraInfo":{}},"JzapaxGPEuQdR10uB0jgsrOQ/7bnD6Y1VUh/dl0Mzlo=":{"nodeIds":["5f630e83-9acb-46fa-8783-b9634dc84030","e7bf28b2-f8e0-40a9-8ea4-c44e1a78a8ea"],"extraInfo":{}},"a6DWuYy5ebT3b5fD7bpsdb4PL2CLkBuHX3LDR6kAtzY=":{"nodeIds":["60195c81-ac7a-4e5b-bf50-27709a477af8","10011a19-a59b-494e-ba76-4612fad55235"],"extraInfo":{}},"kzfUh5BwgmX0JBeLWJkQl+pfePihWkQBwst064/Xd5o=":{"nodeIds":["e398ba17-cb21-4c11-af5f-970ce90eb854"],"extraInfo":{}},"gxKPof1PqbMBiJW7ub+XYq2kQ4y67wCB8BmKVBhhTMw=":{"nodeIds":["86eb0be7-a722-4c6e-b318-c2d263e1741f"],"extraInfo":{}},"9bNCTiKtiNDZdnu3t3zWZjIjYeBlYi4B7sG6synnOwM=":{"nodeIds":["e282cbd4-4d65-4c87-a63e-8c7db181dcbd"],"extraInfo":{}},"E4OKcQQLk2blNpAbY8c6vrVxcpaZgrNvFaGTcGcCKmU=":{"nodeIds":["f760db03-8d0b-4d2d-bfde-423d15be22cf"],"extraInfo":{}},"kchfWzelaW8pEurLS3bMMMgmJZBjlRQAPFN9Z3YA0/0=":{"nodeIds":["8046f1db-3e3c-4305-8085-708c49acc942"],"extraInfo":{}},"DvfZSvL+/J9WMBRjw5wA00a4Wd+iy4Zfhc2AL+zUVyQ=":{"nodeIds":["45c084be-3210-4f20-a3ef-95f2d768aeb9"],"extraInfo":{}},"EhvX+2zpEiaIlRwYjxpIFKAq0TXnSOzbJKdHp29XpqE=":{"nodeIds":["31eee4be-ee09-4360-af8d-47c1e4b90dc2"],"extraInfo":{}},"okTWBOmJ1UEdJmDHh4PcyfD4q1RVC7E6ufqTVdEp6ug=":{"nodeIds":["b14eb0f9-7586-46cb-9140-97137e4d2b46"],"extraInfo":{}},"di/+aV9O4zhiyT8/0WflHIG92sXfpXSWkHs/tSqgMlw=":{"nodeIds":["1af9a8be-32ae-4b16-a158-909f81321b7c","f2e8340a-fe51-4162-9ff6-14da579d58d9"],"extraInfo":{}},"STmjn1eJvhDcPaX2m8Cy0MBnofy8zXQwFn/YTU9R/sg=":{"nodeIds":["f075f47b-9388-4d25-9d25-7d6c2b77b6eb"],"extraInfo":{}},"lCbDPDnXGvJGJHTi23hYERDpSiUg7YqPR1npA5mFv0M=":{"nodeIds":["44cb540c-78fe-4071-9430-2c4750ccbf4a","db462bbd-22c7-4672-9f4f-f75e2774c6a0"],"extraInfo":{}},"TJ04FOxIDYG6T+E593YCXMUY2px4zm0cJtZxc1+/FsE=":{"nodeIds":["b3a5321c-2eaa-4800-a129-1d9b59608d60"],"extraInfo":{}},"LVvq/9qFbX/vg74UCzAGSh/YGpa4bpxMXcAVyIidpMk=":{"nodeIds":["a845a58b-5ba9-47bc-a73a-d4e40c45aae9"],"extraInfo":{}},"g1bcVXsft0RNbvTt+5uzNvkkCULbuZxVcbJhkhopXI0=":{"nodeIds":["a499d3c0-26e0-4225-8788-843ef75524af","2740f4d2-2c33-4dbf-92bb-1e1e5dbb34ab"],"extraInfo":{}},"oJIV1AL4EKJlA1JWfndreWQ6bGBQiQ7Z8+rujPHfe0k=":{"nodeIds":["281c8653-b2ed-4269-86c1-faa04595b241"],"extraInfo":{}},"fwy73MAqQsV9ieZwlSvnEF8yD4wYtgi1iGfVumOofeg=":{"nodeIds":["21f04604-a5f4-4069-b322-c6d31d15fd3f","95717588-040f-4c40-93f3-2eb6e1394455"],"extraInfo":{}},"CQ49CWOV10rxaKka4l2eIJcenZkqwSAKkvsKoVO3XLc=":{"nodeIds":["d02a17e0-324f-4ffb-89e6-9457121b5d22"],"extraInfo":{}},"A287YesNadLJs64WGb5hHHMHECnJvKpjYolnmf8YAzM=":{"nodeIds":["f3172ab1-d713-46e8-8f54-f431f0cf89c6"],"extraInfo":{}}}}